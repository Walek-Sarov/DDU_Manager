#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция читает данные производственного календаря из регистра
//
// Параметры
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника
//	НомерГода							- Номер года, за который необходимо прочитать производственный календарь
//
// Возвращаемое значение
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря
//
Функция ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ТекущийГод",	НомерГода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = &ТекущийГод
	|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура записывает данные производственного календаря в регистр
//
// Параметры
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника
//	НомерГода							- Номер года, за который необходимо записать производственный календарь
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря
//
// Возвращаемое значение
//	Нет
//
Процедура ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода, ДанныеПроизводственногоКалендаря) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	
	Для Каждого КлючИЗначение Из ДанныеПроизводственногоКалендаря Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), КлючИЗначение);
	КонецЦикла;
	
	ЗначенияОтбора = Новый Структура("ПроизводственныйКалендарь, Год", ПроизводственныйКалендарь, НомерГода);
	
	Для Каждого КлючИЗначение Из ЗначенияОтбора Цикл
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ЗначенияОтбора);
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Функция определяет соответствие видов дня производственного календаря и цвета оформления
// этого дня в поле календаря
//
// Возвращаемое значение
//	ЦветаОформления - соответствие видов дня и цветов оформления
//
Функция ЦветаОформленияВидовДнейПроизводственногоКалендаря() Экспорт
	
	ЦветаОформления = Новый Соответствие;
	
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий,			ЦветаСтиля.ВидДняРабочийЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота,			ЦветаСтиля.ВидДняСубботаЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье,		ЦветаСтиля.ВидДняВоскресеньеЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный,	ЦветаСтиля.ВидДняПредпраздничныйЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник,			ЦветаСтиля.ВидДняПраздникЦвет);
	
	Возврат ЦветаОформления;
	
КонецФункции

// Функция составляет список всевозможных видов дней производственного календаря 
// по метаданным перечисления ВидыДнейПроизводственногоКалендаря
//
// Возвращаемое значение
//	СписокВидовДня - список значений, содержащий значение перечисления 
//  					и его синоним в качестве представления
//
Функция СписокВидовДня() Экспорт
	
	СписокВидовДня = Новый СписокЗначений;
	
	Для Каждого МетаданныеВидаДней Из Метаданные.Перечисления.ВидыДнейПроизводственногоКалендаря.ЗначенияПеречисления Цикл
		СписокВидовДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря[МетаданныеВидаДней.Имя], МетаданныеВидаДней.Синоним);
	КонецЦикла;
	
	Возврат СписокВидовДня;
	
КонецФункции

// Функция составляет массив доступных производственных календарей
// для использования, например, в качестве шаблона
//
Функция СписокПроизводственныхКалендарей() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	(НЕ ПроизводственныеКалендари.ПометкаУдаления)");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Шаблоны календарей (Производственные календари) не обнаружены.'");
	КонецЕсли;
		
	СписокПроизводственныхКалендарей = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПроизводственныхКалендарей.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокПроизводственныхКалендарей;
	
КонецФункции
#КонецЕсли