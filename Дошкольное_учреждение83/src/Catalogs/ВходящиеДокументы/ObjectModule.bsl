// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения, добавление, изменение, удаление: 
	// 		ГрифДоступа И ВидВходящихДокументов И ГруппаДоступаКорреспондентов
	
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.Чтение          = Истина;
	Строка.Добавление      = Истина;
	Строка.Изменение       = Истина;
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа;
	Строка.ЗначениеДоступа = ГрифДоступа;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ВидыВходящихДокументов;
	Строка.ЗначениеДоступа = ВидДокумента;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКорреспондентов;
	Строка.ЗначениеДоступа = Отправитель;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Организации;
	Строка.ЗначениеДоступа = Организация;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РегистрационныйНомер = "";
	ЧисловойНомер 	= 0;
	ДатаРегистрации	= '00010101';
	ДатаСоздания 	= ТекущаяДата();
	Зарегистрировал = ОбщегоНазначения.ТекущийПользователь();
	
	ИсходящийНомер	= "";
	ИсходящаяДата	= '00010101';
	ОтправленОтвет	= Справочники.ИсходящиеДокументы.ПустаяСсылка();
	ВОтветНа		= Справочники.ИсходящиеДокументы.ПустаяСсылка();
	СрокИсполнения 	= '00010101';
	
	КоличествоЛистов 	 = 1;
	КоличествоПриложений = 0;
	ЛистовВПриложениях 	 = 0;
	Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
	
	Резолюция 	   = "";
	АвторРезолюции = Справочники.Пользователи.ПустаяСсылка();
	ДатаРезолюции  = '00010101';
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		РегистрационныйНомер = "";
		ЧисловойНомер 	= 0;
		ДатаРегистрации	= '00010101';
		ДатаСоздания 	= ТекущаяДата();
		Зарегистрировал = ОбщегоНазначения.ТекущийПользователь();
		
		ИсходящийНомер	= "";
		ИсходящаяДата	= '00010101';
		ОтправленОтвет	= Справочники.ИсходящиеДокументы.ПустаяСсылка();
		ВОтветНа		= Справочники.ИсходящиеДокументы.ПустаяСсылка();
		СрокИсполнения 	= '00010101';
		
		КоличествоЛистов 	 = 1;
		КоличествоПриложений = 0;
		ЛистовВПриложениях 	 = 0;
		Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		
		Резолюция 	   = "";
		АвторРезолюции = Справочники.Пользователи.ПустаяСсылка();
		ДатаРезолюции  = '00010101';
		
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
			ВидДокумента = Делопроизводство.ПолучитьВидДокументаПоУмолчанию(Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СпособПолучения) Тогда 
			СпособПолучения = Делопроизводство.ПолучитьСпособДоставкиПоУмолчанию("СпособПолучения");
		КонецЕсли;	
		Нумератор = Нумерация.ПолучитьНумераторДокумента(ЭтотОбъект);
		
		Если Константы.ИспользоватьГрифыДоступаКВходящимИИсходящимДокументам.Получить() Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;	
		
	КонецЕсли;	
	
	// ввод на основании исходящего документа
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Отправитель = ДанныеЗаполнения.Получатель;
		Подписал = ДанныеЗаполнения.Адресат;
		ВОтветНа = ДанныеЗаполнения.Ссылка;
		Адресат = ДанныеЗаполнения.Подписал;
		Подразделение = ДанныеЗаполнения.Подразделение;
		ГрифДоступа = ДанныеЗаполнения.ГрифДоступа;
		ПредметПереписки = ДанныеЗаполнения.ПредметПереписки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ИсходящийНомер) И ЗначениеЗаполнено(ИсходящаяДата) Тогда 
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящийДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящийДокумент
		|ГДЕ
		|	ВходящийДокумент.ИсходящийНомер = &ИсходящийНомер
		|	И ВходящийДокумент.ИсходящаяДата = &ИсходящаяДата
		|	И ВходящийДокумент.Отправитель = &Отправитель
		|	И (НЕ ВходящийДокумент.ПометкаУдаления)
		|	И ВходящийДокумент.Ссылка <> &Ссылка";
		
		Запрос.УстановитьПараметр("ИсходящийНомер", ИсходящийНомер);
		Запрос.УстановитьПараметр("ИсходящаяДата", ИсходящаяДата);
		Запрос.УстановитьПараметр("Отправитель", Отправитель);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ №%1 от %2 отправителя %3 уже зарегистрирован!'"),
				ИсходящийНомер,
				Формат(ИсходящаяДата, "ДФ=dd.MM.yyyy"),
				Строка(Отправитель));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"ИсходящийНомер",, 
				Отказ);
		КонецЕсли;	
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		Если Не Делопроизводство.РегистрационныйНомерУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Если ЗначениеЗаполнено(Дело) И Организация <> Дело.Организация Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дело не относится к организации документа.'"),
				ЭтотОбъект,
				"Дело",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = Делопроизводство.НаименованиеДокумента(ЭтотОбъект);
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда 
		РаботаСФайлами.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Очистим "получен ответ", если "в ответ на" было изменено 
	Если ЗначениеЗаполнено(Ссылка.ВОтветНа) И (Ссылка.ВОтветНа <> ВОтветНа) Тогда 
		
		ВОтветНаОбъект = Ссылка.ВОтветНа.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ВОтветНаОбъект.Ссылка);
		ВОтветНаОбъект.ПолученОтвет = Справочники.ВходящиеДокументы.ПустаяСсылка();
		ВОтветНаОбъект.Записать();	
		
	КонецЕсли;	
	
	// Заполним реквизит "получен ответ" в документе "в ответ на"
	Если ЗначениеЗаполнено(ВОтветНа) И (ВОтветНа.ПолученОтвет.ДатаРегистрации < ДатаРегистрации) Тогда
		
		ВОтветНаОбъект = ВОтветНа.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ВОтветНаОбъект.Ссылка);
		ВОтветНаОбъект.ПолученОтвет = Ссылка;
		ВОтветНаОбъект.Записать();	
		
	КонецЕсли;	
	
	// Заполним дату начала дела, если не заполнена
	Если ЗначениеЗаполнено(Дело) И Не ЗначениеЗаполнено(Дело.ДатаНачала) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		
		ДелоОбъект = Дело.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ДелоОбъект.Ссылка);
		ДелоОбъект.ДатаНачала = ДатаРегистрации;
		ДелоОбъект.Записать();	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Нумерация.ОсвободитьНомерПриУдалении(ЭтотОбъект);
	
КонецПроцедуры

