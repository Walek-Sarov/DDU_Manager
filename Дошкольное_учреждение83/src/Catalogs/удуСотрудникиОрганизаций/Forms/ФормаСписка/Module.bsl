
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПоместитьВХранилище(ЭлементДляХранилища,АдресВХранилище=Неопределено) 
	
	Возврат ПоместитьВоВременноеХранилище(ЭлементДляХранилища, ?(АдресВХранилище=Неопределено,УникальныйИдентификатор,АдресВХранилище));
	
КонецФункции

&НаКлиенте
Процедура ОтборПоОрганизации()
	
	Если Организация.Пустая() Тогда 
		удуОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Организация");
		удуОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(ИерархияСотрудников, "Организация");
		удуОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(Подразделения, "Организация");
		
	Иначе 
		
		удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список,
		"Организация",
		Организация,
		Истина, ВидСравненияКомпоновкиДанных.Равно
		);
		
		удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ИерархияСотрудников,
		"Организация",
		Организация,
		Истина, ВидСравненияКомпоновкиДанных.Равно
		);
		
		удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Подразделения,
		"Организация",
		Организация,
		Истина, ВидСравненияКомпоновкиДанных.Равно
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоАктуальности()
	
	удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	Список,
	"Актуальность",
	Истина,
	не Элементы.ПоказыватьАрхив.Пометка, ВидСравненияКомпоновкиДанных.Равно
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущееФизЛицо(ТекущийСотрудник)
	
	Возврат ТекущийСотрудник.Физлицо;
	
КонецФункции

&НаСервере
Процедура СменитьАктуальностьСотрудников(МассивСотрудников,ТекущаяАктуальность)
	
	НачатьТранзакцию();
	Для Каждого ЭлементМассива Из МассивСотрудников Цикл
		Сотрудник = ЭлементМассива.ПолучитьОбъект();
		Сотрудник.Актуальность = Не ТекущаяАктуальность;
		Сотрудник.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокПоАктуальностиДляСпискаСотрудников(СписокСотрудников)
	
	ТекстЗаголовкаКоманды="";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников",	СписокСотрудников);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(СотрудникиОрганизаций.Актуальность) КАК Актуальные,
	|	МИНИМУМ(СотрудникиОрганизаций.Актуальность) КАК Неактуальные
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(СотрудникиОрганизаций.Актуальность) = МАКСИМУМ(СотрудникиОрганизаций.Актуальность)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Актуальные Тогда
			ТекстЗаголовкаКоманды = "Поместить сотрудников в архив";
		Иначе
			ТекстЗаголовкаКоманды = "Извлечь сотрудников из архива";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗаголовкаКоманды;
	
КонецФункции

&НаСервере
Функция АктуальностьТекущегоСотрудника(ТекущийСотрудник)
	
	Возврат ТекущийСотрудник.Актуальность;
	
КонецФункции


&НаКлиенте
Процедура УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(ВыделенныеСтроки, ТекущийСотрудник)
	
	// Если выделенных строк нет - команды недоступны
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстЗаголовкаКоманды = "";
		
		// Если выделенная строка одна - обратимся к текущим данным строки
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		Если АктуальностьТекущегоСотрудника(ТекущийСотрудник) Тогда
			ТекстЗаголовкаКоманды = "Поместить сотрудника в архив";
		Иначе
			ТекстЗаголовкаКоманды = "Извлечь сотрудника из архива";
		КонецЕсли;
		
		// Выделенных строк больше одной, получим данные запросом
	Иначе
		СписокСотрудников = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			СписокСотрудников.Добавить(ВыделеннаяСтрока);
		КонецЦикла;
		
		ТекстЗаголовкаКоманды=ПолучитьЗаголовокПоАктуальностиДляСпискаСотрудников(СписокСотрудников);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗаголовкаКоманды) Тогда
		Элементы.ИзменитьАктуальность.Доступность = Ложь;
	Иначе
		Элементы.ИзменитьАктуальность.Доступность = Истина;
		Элементы.ИзменитьАктуальность.Заголовок = ТекстЗаголовкаКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляФормированияМенюВводаДокументов(ТекущийСотрудник)
	
	ВидПодменю=Новый Структура;
	
	Если не ЗначениеЗаполнено(ТекущийСотрудник) тогда
		Возврат ВидПодменю;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ТекущийСотрудник.ВидДоговора) Тогда
		Возврат ВидПодменю;
	КонецЕсли;
	
	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	удуРаботникиОрганизацийСрезПоследних.Период КАК Дата,
	|	удуРаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
	|			,
	|			Сотрудник = &Сотрудник
	|				И Организация = &Организация
	|				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.ПриемНаРаботу)) КАК удуРаботникиОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	удуРаботникиОрганизацийСрезПоследних.Период,
	|	удуРаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
	|			,
	|			Сотрудник = &Сотрудник
	|				И Организация = &Организация
	|				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)) КАК удуРаботникиОрганизацийСрезПоследних";
	
	
	Запрос.УстановитьПараметр("Организация",ТекущийСотрудник.Организация);
	Запрос.УстановитьПараметр("Сотрудник",ТекущийСотрудник);
	Выборка=Запрос.Выполнить().Выбрать();
	ДатаПриема			= Дата(1,1,1);
	ДатаУвольнения		= Дата(1,1,1);
	Пока Выборка.Следующий() цикл
		Если Выборка.ПричинаИзмененияСостояния=Перечисления.удуПричиныИзмененияСостояния.ПриемНаРаботу тогда
			ДатаПриема			= Выборка.Дата;
		ИначеЕсли Выборка.ПричинаИзмененияСостояния=Перечисления.удуПричиныИзмененияСостояния.Увольнение тогда
			ДатаУвольнения		= Выборка.Дата;
		КонецЕсли;
	КонецЦикла;;
	
	
	Принят			= (ДатаПриема <> Дата(1,1,1));
	Уволен			= (ДатаУвольнения <> Дата(1,1,1));
	
	Если Уволен Тогда
		Возврат ВидПодменю;
	КонецЕсли;
	
	// Проверка прав доступа на выполнение действий будет осуществляться непосредственно при выборе действий.
	Если ТекущийСотрудник.ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если Не Принят Тогда
			ВидПодменю.Вставить("ПриемНаРаботу",Истина);
		КонецЕсли;
		ВидПодменю.Вставить("КадровоеПеремещение",Истина);
		ВидПодменю.Вставить("Увольнение",Истина);
	ИначеЕсли ТекущийСотрудник.ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.Подряда Тогда
		ВидПодменю.Вставить("ДоговорНаВыполнениеРабот",Истина);		
	КонецЕсли;
	
	Возврат ВидПодменю;
	
КонецФункции

&НаКлиенте
Функция СформироватьПодменюВвестиДокумент(ТекущийСотрудник)
	
	Перем ВидимостьЭлемента;
	
	ВидМеню=ПолучитьДанныеДляФормированияМенюВводаДокументов(ТекущийСотрудник);
	
	Для Каждого КнопкаПодменю Из Элементы.ГруппаКомандыФормы.ПодчиненныеЭлементы.СоздатьДокумент.ПодчиненныеЭлементы Цикл
		КнопкаПодменю.Видимость=ВидМеню.Свойство(КнопкаПодменю.Имя,ВидимостьЭлемента);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СоздатьПриемНаРаботуСервер(СписокСотрудников)
	
	ДокументОбъект = Документы.удуПриемНаРаботуВОрганизацию.СоздатьДокумент();
	ДокументОбъект.Заполнить(СписокСотрудников);
	АдресВХранилище=ПоместитьВХранилище(ДокументОбъект);
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция СоздатьКадровоеПеремещениеСервер(СписокСотрудников)
	
	ДокументОбъект = Документы.удуКадровоеПеремещениеОрганизаций.СоздатьДокумент();
	ДокументОбъект.Заполнить(СписокСотрудников);
	АдресВХранилище=ПоместитьВХранилище(ДокументОбъект);
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция СоздатьУвольнениеСервер(СписокСотрудников)
	
	ДокументОбъект = Документы.удуУвольнениеИзОрганизаций.СоздатьДокумент();
	ДокументОбъект.Заполнить(СписокСотрудников);
	АдресВХранилище=ПоместитьВХранилище(ДокументОбъект);
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция СоздатьДоговорПодрядаСервер(Сотрудник)
	
	ДокументОбъект = Документы.удуДоговорНаВыполнениеРаботСФизЛицом.СоздатьДокумент();
	ДокументОбъект.Заполнить(Сотрудник);
	АдресВХранилище=ПоместитьВХранилище(ДокументОбъект);
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Функция НастроитьВидФормы()
	
	Элементы.ИзменитьЛичныеДанные.Видимость=не РежимВыбора;
	Элементы.СоздатьДокумент.Видимость= не РежимВыбора;

КонецФункции





////////////////////////////////////////////////////////////////////////////////
// НАВИГАЦИЯ

&НаКлиенте
Процедура ВариантОтбораПриИзменении()
	
	// Удаление всех наложенных отборов.
	Список.Отбор.Элементы.Очистить();
	
	ОтборПоОрганизации();
	ОтборПоАктуальности();
	
	// Список без групп.
	удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	Список,
	"Ссылка.ЭтоГруппа",
	Ложь,
	Истина, ВидСравненияКомпоновкиДанных.Равно
	);
	
	удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	Список,
	"Ссылка.ВидДоговора",
	ВидДоговора,
	ЗначениеЗаполнено(ВидДоговора), ВидСравненияКомпоновкиДанных.Равно
	);

		
		ГруппаОтбораТолькоНеУволенные = удуОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ГруппаТолькоНеУволенные",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли,
		НеПоказыватьУволенных
		);
		
		удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораТолькоНеУволенные,
		"ДатаУвольнения",
		Дата(1,1,1),
		Истина, ?(НеРаботающие,ВидСравненияКомпоновкиДанных.НеЗаполнено,ВидСравненияКомпоновкиДанных.Равно)
		);
		
		удуОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
		ГруппаОтбораТолькоНеУволенные,
		"ДатаУвольнения",
		КонецДня(ДатаСреза),
		Истина, ВидСравненияКомпоновкиДанных.БольшеИлиРавно
		);
	
	
	Элементы.ИерархияСотрудников.ТекущаяСтрока = Неопределено;
	Элементы.Подразделения.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбораПоИерархииСотрудников(Команда)
	
	Элементы.ВариантыНавигации.ТекущаяСтраница = Элементы.ВариантыНавигации.ПодчиненныеЭлементы.НавигацияИерархияСотрудников;
	
	ВариантОтбораПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбораПоПодразделениям(Команда)
	
	Элементы.ВариантыНавигации.ТекущаяСтраница = Элементы.ВариантыНавигации.ПодчиненныеЭлементы.НавигацияПодразделения;
	
	ВариантОтбораПриИзменении();
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьОтборПоИерархииСотрудников(ГруппаСотрудников)
	
	удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	Список,
	"Ссылка",
	ГруппаСотрудников,
	ЗначениеЗаполнено(ГруппаСотрудников), ВидСравненияКомпоновкиДанных.ВИерархии
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоИерархииСотрудников(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСотрудниковПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоИерархииСотрудников(Элементы.ИерархияСотрудников.ТекущаяСтрока);
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьОтборПоПодразделению(Подразделение)
	
	удуОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	Список,
	"ПодразделениеОрганизации",
	Подразделение,
	ЗначениеЗаполнено(Подразделение), ВидСравненияКомпоновкиДанных.ВИерархии
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоПодразделению(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоПодразделению(Элементы.Подразделения.ТекущаяСтрока);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ПоказыватьНавигацию(Команда)
	
	Элементы.ПоказыватьНавигацию.Пометка=не Элементы.ПоказыватьНавигацию.Пометка;
	Элементы.ПоказыватьНавигацию.Картинка=?(Элементы.ПоказыватьНавигацию.Пометка,БиблиотекаКартинок.ЗеленаяГалочка,БиблиотекаКартинок.КрасныйКрестик);
	Элементы.Навигация.Видимость=Элементы.ПоказыватьНавигацию.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЛичныеДанные(Команда)
	
	ТекущийСотрудник=Элементы.Список.ТекущаяСтрока;
	
	Если не ЗначениеЗаполнено(ТекущийСотрудник) тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Ключ",ПолучитьТекущееФизЛицо(ТекущийСотрудник));
	
	
	Форма = ПолучитьФорму("Справочник.ФизическиеЛица.Форма.ФормаЭлемента",СтруктураПараметров, ЭтаФорма);
	Форма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	Форма.Открыть();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАктуальность(Команда)
	
	// команда изменения актуальности доступна только при наличии
	// выделенных строк и только если у всех выделенных сотрудников одинаковая актуальность
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	ДанныеСтроки		= Элементы.Список.ТекущиеДанные;
	ТекущаяАктуальность	= АктуальностьТекущегоСотрудника(Элементы.Список.ТекущаяСтрока);
	Наименование		= Элементы.Список.ТекущаяСтрока;
	
	МассивСотрудников = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		МассивСотрудников.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	// если ТекущаяАктуальность = Ложь, то пользователь видит архив
	
	СписокКнопок=Новый СписокЗначений();
	
	Если МассивСотрудников.Количество() > 1 Тогда
		
		Если ТекущаяАктуальность Тогда
			ЗаголовокВопроса	= "Перемещение сотрудников в архив";
			ТекстВопроса =
			"Поместить выделенных сотрудников в архив.
			|
			|Сотрудники, помещенные в архив, не будут показаны в списке.";
			ТекстКнопки = "Поместить в архив";
		Иначе
			ЗаголовокВопроса	= "Извлечение сотрудников из архива";
			ТекстВопроса =
			"Извлечь выделенных сотрудников из архива. 
			|
			|После извлечения из архива сотрудники будут показываться в списке.";
			ТекстКнопки = "Извлечь из архива";
		КонецЕсли;
		
	Иначе
		
		Если ТекущаяАктуальность Тогда
			ЗаголовокВопроса	= "Перемещение сотрудника в архив";
			ТекстВопроса =
			"Поместить сотрудника: " + Наименование + " в архив.
			|
			|Сотрудник, помещенный в архив, не будет показан в списке.";
			ТекстКнопки = "Поместить в архив";
		Иначе
			ЗаголовокВопроса	= "Извлечение сотрудника из архива";
			ТекстВопроса =
			"Извлечь сотрудника: " + Наименование + " из архива. 
			|
			|После извлечения из архива сотрудник будет показываться в списке.";
			ТекстКнопки = "Извлечь из архива";
		КонецЕсли;
		
	КонецЕсли;
	
	СписокКнопок.Добавить(КодВозвратаДиалога.Да,ТекстКнопки);
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена,"Отмена");
	
	Если Вопрос(ТекстВопроса,СписокКнопок,,КодВозвратаДиалога.Да,ЗаголовокВопроса)=КодВозвратаДиалога.Да тогда
		СменитьАктуальностьСотрудников(МассивСотрудников,ТекущаяАктуальность);
		// после смены актуальности уточним заголовок команды
		УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(ВыделенныеСтроки, Элементы.Список.ТекущаяСтрока);
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьАрхив(Команда)
	
	Элементы.ПоказыватьАрхив.Пометка = НЕ Элементы.ПоказыватьАрхив.Пометка;
	ОтборПоАктуальности();
	
КонецПроцедуры



&НаКлиенте
Процедура ПриемНаРаботу(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	

	АдресВХранилище=СоздатьПриемНаРаботуСервер(ВыделенныеСтроки);
	ФормаДокумента = ПолучитьФорму("Документ.удуПриемНаРаботуВОрганизацию.Форма.ФормаДокумента",Новый Структура("АдресВХранилище",АдресВХранилище),ЭтаФорма);
	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КадровоеПеремещение(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	

	АдресВХранилище=СоздатьКадровоеПеремещениеСервер(ВыделенныеСтроки);
	ФормаДокумента = ПолучитьФорму("Документ.удуКадровоеПеремещениеОрганизаций.Форма.ФормаДокумента",Новый Структура("АдресВХранилище",АдресВХранилище),ЭтаФорма);
	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Увольнение(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	

	АдресВХранилище=СоздатьУвольнениеСервер(ВыделенныеСтроки);
	ФормаДокумента = ПолучитьФорму("Документ.удуУвольнениеИзОрганизаций.Форма.ФормаДокумента",Новый Структура("АдресВХранилище",АдресВХранилище),ЭтаФорма);
	ФормаДокумента.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНаВыполнениеРабот(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если не ВыделенныеСтроки.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	

	АдресВХранилище=СоздатьДоговорПодрядаСервер(Элементы.Список.ТекущаяСтрока);
	ФормаДокумента = ПолучитьФорму("Документ.удуДоговорНаВыполнениеРаботСФизЛицом.Форма.ФормаДокумента",Новый Структура("АдресВХранилище",АдресВХранилище),ЭтаФорма);
	ФормаДокумента.Открыть();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоПодбор=Параметры.ЭтоПодбор;
	ВидДоговора=Параметры.ВидДоговора;
	НеПоказыватьУволенных=Параметры.НеПоказыватьУволенных;
	Параметры.Свойство("НеРаботающие",НеРаботающие); 
	
	ДатаСреза=Параметры.ДатаСреза;
	Если ЭтоПодбор тогда
		 АдресПодбора=Параметры.АдресПодбора;
	КонецЕсли;
	РежимВыбора=ЭтоПодбор или ЗакрыватьПриЗакрытииВладельца или Параметры.ДляВыбора;
	Элементы.Список.РежимВыбора=РежимВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	НастроитьВидФормы();
	
	ВариантОтбораПриИзменении();
	
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОтборПоОрганизации();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Список

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущийСотрудник=Элементы.Список.ТекущаяСтрока;
	
	// уточним наименование и доступность команды ИзменитьАктуальность
	УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(Элементы.Список.ВыделенныеСтроки, ТекущийСотрудник);
	
	Если не РежимВыбора Тогда 
		СформироватьПодменюВвестиДокумент(ТекущийСотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоПодбор тогда
		 СтандартнаяОбработка=Ложь;
		 ПоместитьВХранилище(ВыбраннаяСтрока,АдресПодбора);
		 ВладелецФормы.ОбработатьПодбор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если ЭтоПодбор тогда
		СтандартнаяОбработка=Ложь;
		Если ЗначениеЗаполнено(Значение) тогда
			ПоместитьВХранилище(Значение,АдресПодбора);
			ВладелецФормы.ОбработатьПодбор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры






        











