// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения, добавление, изменение, удаление: по папке внутренних документов
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.Чтение          = Истина;
	Строка.Добавление      = Истина;
	Строка.Изменение       = Истина;
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПапкиВнутреннихДокументов;
	Строка.ЗначениеДоступа = Папка;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов;
	Строка.ЗначениеДоступа = ВидДокумента;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Организации;
	Строка.ЗначениеДоступа = Организация;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РегистрационныйНомер = "";
	ЧисловойНомер 	= 0;
	ДатаРегистрации = '00010101';
	ДатаСоздания 	= ТекущаяДата();
	Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
	Подготовил 		= ОбщегоНазначения.ТекущийПользователь();
	Подразделение 	= РаботаСПользователями.ПолучитьПодразделение(Подготовил);
		
	КоличествоЛистов 	 = 1;
	КоличествоПриложений = 0;
	ЛистовВПриложениях 	 = 0;
	Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		
		РегистрационныйНомер = "";
		ЧисловойНомер 	= 0;
		ДатаРегистрации = '00010101';
		ДатаСоздания 	= ТекущаяДата();
		Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
		Подготовил 		= ОбщегоНазначения.ТекущийПользователь();
		Подразделение 	= РаботаСПользователями.ПолучитьПодразделение(Подготовил);
		
		КоличествоЛистов 	 = 1;
		КоличествоПриложений = 0;
		ЛистовВПриложениях 	 = 0;
		Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		СрокИсполнения = '00010101';

		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
			ВидДокумента = Делопроизводство.ПолучитьВидДокументаПоУмолчанию(Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
			
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
		ЗаполнитьПараметрамиВводаНаОсновании(ДанныеЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		Если Не Делопроизводство.РегистрационныйНомерУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКорреспондентам", Новый Структура("ВидДокумента", ВидДокумента)) Тогда 
		ПроверяемыеРеквизиты.Добавить("Корреспондент");
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Если ЗначениеЗаполнено(Дело) И Организация <> Дело.Организация Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дело не относится к организации документа.'"),
				ЭтотОбъект,
				"Дело",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрамиВводаНаОсновании(ПараметрыВводаНаОсновании) Экспорт
	
	// ввод на основании с копированием файлов
	Если ТипЗнч(ПараметрыВводаНаОсновании.Основание) = Тип("СправочникСсылка.ВходящиеДокументы")
	 Или ТипЗнч(ПараметрыВводаНаОсновании.Основание) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Заголовок = ПараметрыВводаНаОсновании.Основание.Заголовок;
		Папка = ПараметрыВводаНаОсновании.Папка;
		ВидДокумента = ПараметрыВводаНаОсновании.ВидДокумента;
		Организация = ПараметрыВводаНаОсновании.Основание.Организация;
		
		Если ВидДокумента.УчетПоКорреспондентам Тогда
			Если ТипЗнч(ПараметрыВводаНаОсновании.Основание) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
				Корреспондент = ПараметрыВводаНаОсновании.Основание.Отправитель;
				КонтактноеЛицо = ПараметрыВводаНаОсновании.Основание.Подписал;
			ИначеЕсли ТипЗнч(ПараметрыВводаНаОсновании.Основание) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				Корреспондент = ПараметрыВводаНаОсновании.Основание.Получатель;
				КонтактноеЛицо = ПараметрыВводаНаОсновании.Основание.Адресат;
			КонецЕсли;	
		КонецЕсли;
		
		Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Ссылка, 
			ТекущаяДата(), 
			Перечисления.СостоянияДокументов.Проект, 
			ОбщегоНазначения.ТекущийПользователь());
		
		УстановитьПривилегированныйРежим(Истина);
		ОснованиеОбъект = ПараметрыВводаНаОсновании.Основание.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ОснованиеОбъект.ПредметПереписки) Тогда 
			ЗаблокироватьДанныеДляРедактирования(ОснованиеОбъект.Ссылка, , ПараметрыВводаНаОсновании.УникальныйИдентификатор);
			ОснованиеОбъект.ПредметПереписки = Ссылка;
			ОснованиеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ОснованиеОбъект.Ссылка, ПараметрыВводаНаОсновании.УникальныйИдентификатор);
		КонецЕсли;	
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого Элемент Из ПараметрыВводаНаОсновании.КопироватьФайлы Цикл
			Источник = Элемент.Значение;
			ИсточникОбъект = Источник.ПолучитьОбъект();
			
			ПриемникОбъект = ИсточникОбъект.Скопировать();
			ПриемникОбъект.ВладелецФайла = ЭтотОбъект.Ссылка;
			ПриемникОбъект.Автор = ОбщегоНазначения.ТекущийПользователь();
			ПриемникОбъект.ДатаСоздания = ТекущаяДата();
			ПриемникОбъект.Записать();
			
			Приемник = ПриемникОбъект.Ссылка;
			Если Не Источник.ТекущаяВерсия.Пустая() Тогда
				Версия = РаботаСФайлами.СоздатьВерсию(
				ТекущаяДата(),
				УниверсальноеВремя(ТекущаяДата()),
				Приемник,
				Приемник.Наименование,
				Источник.ТекущаяВерсия.Размер,
				Источник.ТекущаяВерсия.Расширение,
				Источник.ТекущаяВерсия.ФайлХранилище,
				Источник.ТекущаяВерсия.ТекстХранилище,
				Ложь,
				Источник.ТекущаяВерсия);
				
				РаботаСФайлами.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыВводаНаОсновании.Основание) = Тип("СправочникСсылка.Файлы") Тогда
		
		Заголовок = ПараметрыВводаНаОсновании.Основание.ПолноеНаименование;
		Папка = ПараметрыВводаНаОсновании.Папка;
		ВидДокумента = ПараметрыВводаНаОсновании.ВидДокумента;
		Организация = ПараметрыВводаНаОсновании.Организация;
		Корреспондент = ПараметрыВводаНаОсновании.Корреспондент;
		Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Ссылка, 
			ТекущаяДата(), 
			Перечисления.СостоянияДокументов.Проект, 
			ОбщегоНазначения.ТекущийПользователь());
			
			
		Источник = ПараметрыВводаНаОсновании.Основание;
		ИсточникОбъект = Источник.ПолучитьОбъект();
			
		ПриемникОбъект = ИсточникОбъект.Скопировать();
		ПриемникОбъект.ВладелецФайла = ЭтотОбъект.Ссылка;
		ПриемникОбъект.Автор = ОбщегоНазначения.ТекущийПользователь();
		ПриемникОбъект.ДатаСоздания = ТекущаяДата();
		ПриемникОбъект.Записать();
		
		Приемник = ПриемникОбъект.Ссылка;
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			Версия = РаботаСФайлами.СоздатьВерсию(
				ТекущаяДата(),
				УниверсальноеВремя(ТекущаяДата()),
				Приемник.Ссылка,
				Приемник.Наименование,
				Источник.ТекущаяВерсия.Размер,
				Источник.ТекущаяВерсия.Расширение,
				Источник.ТекущаяВерсия.ФайлХранилище,
				Источник.ТекущаяВерсия.ТекстХранилище,
				Ложь,
				Источник.ТекущаяВерсия);
			
			РаботаСФайлами.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = Делопроизводство.НаименованиеДокумента(ЭтотОбъект);
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда 
		Если УправлениеДоступом.ЕстьПравоПоЗначениюДоступа("ПометкаУдаленияПапокИВнутреннихДокументов", Папка) Тогда
			РаботаСФайлами.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								 НСтр("ru = 'У Вас нет права ""Пометка на удаление"" документа ""%1"".'"),
								 Строка(Ссылка));
		КонецЕсли;	
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним дату начала дела, если не заполнена
	Если ЗначениеЗаполнено(Дело) И Не ЗначениеЗаполнено(Дело.ДатаНачала) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		
		ДелоОбъект = Дело.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ДелоОбъект.Ссылка);
		ДелоОбъект.ДатаНачала = ДатаРегистрации;
		ДелоОбъект.Записать();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Нумерация.ОсвободитьНомерПриУдалении(ЭтотОбъект);
	
КонецПроцедуры

