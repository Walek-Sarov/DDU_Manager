
&НаКлиенте
Перем ПерваяАктивизация;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура СгруппироватьСписок(Список, ГруппироватьПо)
	
	РежимГруппировки = ГруппироватьПо;
	
	Список.Группировка.Элементы.Очистить();
	Если Не ПустаяСтрока(ГруппироватьПо) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ГруппироватьПо);
		ПолеГруппировки.Использование = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	
	// вид документа 
	Если Не ЗначениеЗаполнено(ПараметрыОтбора["ВидДокумента"]) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьОтборУСписка(Список.Отбор,
			Новый ПолеКомпоновкиДанных("ВидДокумента"));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьОтборУСпискаНаРавенство(
			Список.Отбор,
			Новый ПолеКомпоновкиДанных("ВидДокумента"),
			ПараметрыОтбора["ВидДокумента"]);
	КонецЕсли;
	
	// организация 
	Если Не ЗначениеЗаполнено(ПараметрыОтбора["Организация"]) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьОтборУСписка(Список.Отбор,
			Новый ПолеКомпоновкиДанных("Организация"));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьОтборУСпискаНаРавенство(
			Список.Отбор,
			Новый ПолеКомпоновкиДанных("Организация"),
			ПараметрыОтбора["Организация"]);
	КонецЕсли;
	
	// период 
	ПериодВыборки = ПараметрыОтбора["ПериодВыборки"];
	Если ПериодВыборки <> Неопределено Тогда 
		
		ЭлементОтбораДанных = Неопределено;
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Представление = "ОтборПериод" Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементОтбораДанных = Неопределено Тогда
			ГруппаОтборПериод = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборПериод.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
			ГруппаОтборПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
			ГруппаОтборПериод.Использование = Истина;
			ГруппаОтборПериод.Представление = "ОтборПериод";
		Иначе
			ГруппаОтборПериод = ЭлементОтбораДанных;
			ГруппаОтборПериод.Элементы.Очистить();
			ГруппаОтборПериод.Использование = Истина;
		КонецЕсли;	
		
		
		ГруппаДатаРегистрации = ГруппаОтборПериод.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаДатаРегистрации.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		ГруппаДатаРегистрации.Использование = Истина;
			
		Если ЗначениеЗаполнено(ПериодВыборки.ДатаНачала) Тогда 
			ЭлементОтбораДанных = ГруппаДатаРегистрации.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаРегистрации");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаНачала;
			ЭлементОтбораДанных.Использование = Истина;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
			ЭлементОтбораДанных = ГруппаДатаРегистрации.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаРегистрации");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаОкончания;
			ЭлементОтбораДанных.Использование = Истина;
		КонецЕсли;
		
		
		ГруппаДатаСоздания = ГруппаОтборПериод.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаДатаСоздания.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		ГруппаДатаСоздания.Использование = Истина;
			
		Если ЗначениеЗаполнено(ПериодВыборки.ДатаНачала) Тогда 
			ЭлементОтбораДанных = ГруппаДатаСоздания.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСоздания");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаНачала;
			ЭлементОтбораДанных.Использование = Истина;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
			ЭлементОтбораДанных = ГруппаДатаСоздания.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСоздания");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаОкончания;
			ЭлементОтбораДанных.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	ПараметрыОтбора = Новый Соответствие();
	Параметрыотбора.Вставить("ПериодВыборки", 	ПериодВыборки);
	Параметрыотбора.Вставить("ВидДокумента", 	ВидДокумента);
	Параметрыотбора.Вставить("Организация", 	Организация);
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОжидания()
	
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("Группа", Элементы.Папки.ТекущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"СписокВнутреннихДокументов", 
		"ТекущаяПапка", 
		Элементы.Папки.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИерархию(Отметка)
	
	Если Отметка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ИспользоватьИерархию.Пометка = Отметка;
	Если Отметка = Истина Тогда 
		Элементы.Папки.Видимость = Истина;
	Иначе
		Элементы.Папки.Видимость = Ложь;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьИерархию", Отметка);
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборСписка(Список, Настройки);
	СгруппироватьСписок(Список, Настройки["РежимГруппировки"]);
	УстановитьИерархию(Настройки["ИспользоватьИерархию"]);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПапкаПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("СписокВнутреннихДокументов", "ТекущаяПапка");
	Список.Параметры.УстановитьЗначениеПараметра("Группа", ПапкаПриОткрытии);
	Элементы.Папки.ТекущаяСтрока = ПапкаПриОткрытии;
	
	ИспользоватьИерархию = Истина;
	УстановитьИерархию(ИспользоватьИерархию);
	
	БыстрыйВыборВидаДокумента = Делопроизводство.ПолучитьРежимВыборавидаДокумента("ВнутреннийДокумент");
	Элементы.ОтборВидДокумента.БыстрыйВыбор = БыстрыйВыборВидаДокумента;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ПапкаПриОткрытии <> Элементы.Папки.ТекущаяСтрока Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ИзменитьПапкуДокументов(МассивДокументов, НоваяПапка)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тот же родитель - ничего делать не надо
	Если МассивДокументов[0].Папка = НоваяПапка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументСсылка Из МассивДокументов Цикл
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка);
			ДокументОбъект.Папка = НоваяПапка;
			ДокументОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если Не ЗначениеЗаполнено(Элементы.Папки.ТекущаяСтрока) Тогда
		Элементы.СоздатьДокумент.Доступность = Ложь;
	Иначе	
		Элементы.СоздатьДокумент.Доступность = Истина;
	КонецЕсли;	
		
	Если ПерваяАктивизация = Истина Или ПерваяАктивизация = Неопределено Тогда
		ПерваяАктивизация = Ложь;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуВыполнить()
	
	ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Родитель", ТекущаяПапка);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ПапкиВнутреннихДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.Папки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	ТекущаяПапка    = Элементы.Папки.ТекущаяСтрока;
	ТекущийДокумент = Элементы.Список.ТекущаяСтрока;
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущийДокумент);
	КонецЕсли;	
	
	Открытьформу("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументВыполнить()
	
	ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	Открытьформу("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список);
					 
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоУтвердил(Команда)
	
	СгруппироватьСписок(Список, "Утвердил");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПодготовил(Команда)
	
	СгруппироватьСписок(Список, "Подготовил");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьСписок(Список, "");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВидуДокумента(Команда)
	
	СгруппироватьСписок(Список, "ВидДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоДелу(Команда)
	
	СгруппироватьСписок(Список, "Дело");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоЗарегистрировал(Команда)
	
	СгруппироватьСписок(Список, "Зарегистрировал");
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Если ИзменитьПапкуДокументов(ПараметрыПеретаскивания.Значение, Строка) = Истина Тогда
			Элементы.Папки.Обновить();
			Элементы.Список.Обновить();
			
			Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Внутренний документ ""%1"" перенесен в папку ""%2""'"), ПараметрыПеретаскивания.Значение[0], Строка);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Внутренний документ перенесен.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			Иначе
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Внутренние документы (%1 шт.) перенесены в папку ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), Строка);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Внутренние документы перенесены.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() >= 1 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") Тогда
		
		НайденоЗацикливание = Ложь;
		Если РаботаСФайлами.СменитьРодителяПапок(ПараметрыПеретаскивания.Значение, Строка, НайденоЗацикливание) = Истина Тогда
			Элементы.Папки.Обновить();
			Элементы.Список.Обновить();
			
			Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папка ""%1"" перенесена в папку ""%2""'"), ПараметрыПеретаскивания.Значение[0], Строка);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Папка перенесена.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			Иначе
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папки (%1 шт.) перенесены в папку ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), Строка);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Папки перенесены.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
			
		Иначе
			Если НайденоЗацикливание = Истина Тогда
				Предупреждение(НСтр("ru = 'Зацикливание уровней !'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущаяПапка    = Строка;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		ПараметрыОткрытияФормы = Новый Структура("МассивФайлов, ЗначенияЗаполнения", МассивФайлов, ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			МассивФайлов = Новый Массив;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
			
			ПараметрыОткрытияФормы = Новый Структура("МассивФайлов, ЗначенияЗаполнения", МассивФайлов, ЗначенияЗаполнения);
			ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Папки.ТекущаяСтрока.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущаяПапка    = Элементы.Папки.ТекущаяСтрока;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		ПараметрыОткрытияФормы = Новый Структура("МассивФайлов, ЗначенияЗаполнения", МассивФайлов, ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			МассивФайлов = Новый Массив;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
			
			ПараметрыОткрытияФормы = Новый Структура("МассивФайлов, ЗначенияЗаполнения", МассивФайлов, ЗначенияЗаполнения);
			ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИерархию(Команда)
	
	ИспользоватьИерархию = Не ИспользоватьИерархию;
	Если ИспользоватьИерархию И (Элементы.Список.ТекущиеДанные <> Неопределено) Тогда 
		Элементы.Папки.ТекущаяСтрока = Элементы.Список.ТекущиеДанные.Папка;
		Список.Параметры.УстановитьЗначениеПараметра("Группа", Элементы.Папки.ТекущаяСтрока);
	КонецЕсли;	
	УстановитьИерархию(ИспользоватьИерархию);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДокументаПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборкиПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры
