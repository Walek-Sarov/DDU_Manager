////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Параметры.Свойство("ПроизводственныйКалендарь") Тогда
			Объект.ПроизводственныйКалендарь = Параметры.ПроизводственныйКалендарь;
		КонецЕсли;
		
		Если Параметры.Свойство("ВидКалендаря") Тогда
			Объект.ВидКалендаря = Параметры.ВидКалендаря;
		КонецЕсли;
		
		ЗаполнитьФормуПоОбъекту(Параметры.Свойство("ПроизводственныйКалендарь"), Параметры.ЗначениеКопирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьФормуПоОбъекту();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьФлагРучногоИзменения();	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Перем НомерГода;
	
	Если Не ПараметрыЗаписи.Свойство("НомерГода", НомерГода) Тогда
		НомерГода = НомерТекущегоГода;
	КонецЕсли;
	
	ЗаписатьКалендарныйГрафик(НомерГода, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыбора.Свойство("ПроизводственныйКалендарь", Объект.ПроизводственныйКалендарь);
	РезультатВыбора.Свойство("ВидКалендаря", Объект.ВидКалендаря);
	
	// Производственный календарь теперь известен - можно заполнять
	ЗаполнитьФормуПоОбъекту(Истина);
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
	Если НомерТекущегоГода < 1900 Тогда
		НомерТекущегоГода = НомерПредыдущегоГода;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Записать измененные данные за %1 год?'"), 
							Формат(НомерПредыдущегоГода, "ЧГ=0"));
		
		Если Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если Объект.Ссылка.Пустая() Тогда
				Записать(Новый Структура("НомерГода", НомерПредыдущегоГода));
			Иначе
				ЗаписатьКалендарныйГрафик(НомерПредыдущегоГода);
			КонецЕсли;
		КонецЕсли;
		Если НЕ Объект.Ссылка.Пустая() Тогда
			ЗаписатьФлагРучногоИзменения();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьФормуПоОбъекту();
	
	Модифицированность = Ложь;
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		СтрокаТаблицыРегистра = ТаблицаРегистра.НайтиПоЗначению(СтрокаОформленияПериода.Дата);
		
		Если СтрокаТаблицыРегистра = Неопределено Тогда
			СтрокаОформленияПериода.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ВидДняНеУказанЦвет");
		Иначе
			СтрокаОформленияПериода.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ВидДняРабочийЦвет");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьВыбор(Элемент, ВыбраннаяДата)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыРегистра = ТаблицаРегистра.НайтиПоЗначению(ВыбраннаяДата);
	
	Если СтрокаТаблицыРегистра = Неопределено Тогда
		ТаблицаРегистра.Добавить(ВыбраннаяДата);
	Иначе
		ТаблицаРегистра.Удалить(СтрокаТаблицыРегистра);
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Элемент.Обновить();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоКалендарю(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) 
		Или Не ЗначениеЗаполнено(Объект.ВидКалендаря) Тогда
		// Производственный календарь не указан, пытаемся уточнить у пользователя способ заполнения
		ОткрытьФорму("Справочник.Календари.Форма.НастройкаНовогоКалендаря", , ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	// Производственный календарь указан, а значит известно как заполнять
	ЗаполнитьФормуПоОбъекту(Истина);
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	СтандартныеПодсистемыКлиентПереопределяемый.ИзменитьРазделенныйЭлемент(ЭтаФорма);
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзКлассификатора(Команда)
	
	Если СтандартныеПодсистемыКлиентПереопределяемый.ОбновитьЭлементИзОбщихДанных(ЭтаФорма) Тогда
		
		ОбновитьНаСервере();
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
		УстановитьСвойстваЭлементовФормы();
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаписатьКалендарныйГрафик(Знач НомерГода, Знач ТекущийОбъект = Неопределено)
	
	// Запись данных календарного графика за указанный год
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Справочники.Календари.ЗаписатьДанныеГрафикаВРегистр(ТекущийОбъект.Ссылка, НомерГода, ТаблицаРегистра);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымПроизводственногоКалендаря(Год)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Год = &Год
	|	И ВЫБОР
	|			КОГДА &ВидКалендаря = ЗНАЧЕНИЕ(Перечисление.ВидыКалендарей.Пятидневка)
	|				ТОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|			КОГДА &ВидКалендаря = ЗНАЧЕНИЕ(Перечисление.ВидыКалендарей.Шестидневка)
	|				ТОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота))
	|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	Объект.ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ВидКалендаря", 				Объект.ВидКалендаря);
	Запрос.УстановитьПараметр("Год", 						Год);
	
	ТаблицаРегистра.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	Если РучноеИзменение <> Неопределено И НЕ РучноеИзменение Тогда
		СпособРедактированияПоясняющийТекст = ""; 
		Элементы.ЗаполнитьПоКалендарю.Доступность = Ложь;
	Иначе
		СпособРедактированияПоясняющийТекст = НСтр("ru = 'Для редактирования рабочих и выходных дней календаря используйте двойной щелчок левой кнопкой мыши'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоОбъекту(ЗаполнятьПоДаннымПроизводственногоКалендаря = Ложь, ЗначениеКопирования = Неопределено)
	
	Если НомерТекущегоГода = 0 Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	НомерПредыдущегоГода = НомерТекущегоГода;
	
	Элементы.Календарь.НачалоПериодаОтображения	= Дата(НомерТекущегоГода, 1, 1);
	Элементы.Календарь.КонецПериодаОтображения	= Дата(НомерТекущегоГода, 12, 31);
	
	Если ЗаполнятьПоДаннымПроизводственногоКалендаря Тогда
		ЗаполнитьПоДаннымПроизводственногоКалендаря(НомерТекущегоГода);
	Иначе
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			СсылкаНаКалендарь = ЗначениеКопирования;
		Иначе
			СсылкаНаКалендарь = Объект.Ссылка;
		КонецЕсли;
		ТаблицаРегистра.ЗагрузитьЗначения(Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(СсылкаНаКалендарь, НомерТекущегоГода));		
	КонецЕсли;
	
	СтандартныеПодсистемыПереопределяемый.СчитатьФлагРучногоИзмененияПоставляемыхДанных(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтандартныеПодсистемыПереопределяемый.ВосстановитьЭлементИзОбщихДанных(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФлагРучногоИзменения()
	
	СтандартныеПодсистемыПереопределяемый.ЗаписатьФлагРучногоИзменениеПоставляемыхДанных(ЭтаФорма);
	
КонецПроцедуры
