
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Отказ от инициализации, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Пользователь)
	 ИЛИ НЕ Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//** Подготовка постоянных коллекций
	
	// Установка заголовка формы
	Заголовок = УправлениеДоступом.ЗаголовокПодчиненнойФормы(НСтр("ru = 'Права доступа: %1 (%2)'"), Параметры.Пользователь);
	
	Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Элементы.Профили.Заголовок = НСтр("ru = 'Профили внешнего пользователя'");
	Иначе
		Элементы.Профили.Заголовок = НСтр("ru = 'Профили пользователя'");
	КонецЕсли;
	
	// Заполнение списка видов доступа через права по значениям доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступом.СвойстваВидаДоступа().НайтиСтроки(Новый Структура("ВидДоступаЧерезПраваПоЗначениямДоступа", Истина)) Цикл
		ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
	КонецЦикла;
	
	// Заполнение типов значений доступа всех видов доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступом.СвойстваВидаДоступа() Цикл
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта), МетаданныеТипа.ПредставлениеОбъекта, МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ПрофильАдминистратор        = Справочники.ПрофилиГруппДоступа.Администратор;
	ГруппаДоступаАдминистраторы = Справочники.ГруппыДоступа.Администраторы;
	
	ВидДоступаПользователи        = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	ВидДоступаВнешниеПользователи = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	СправочникВнешниеПользователиДоступен = ПравоДоступа("Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	// Заполнение данных
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Параметры.Пользователь);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	(НЕ Профили.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	Профили.Ссылка.Наименование КАК ПрофильПредставление,
	|	Профили.Пометка
	|ИЗ
	|	Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ПрофилиВидыДоступа.ВидДоступа,
	|	ЕСТЬNULL(ГруппыДоступаВидыДоступа.ДоступРазрешен, ПрофилиВидыДоступа.ДоступРазрешен) КАК ДоступРазрешен,
	|	"""" КАК Использование,
	|	НЕОПРЕДЕЛЕНО КАК ТекущийТипЗначенияДоступа
	|ИЗ
	|	Профили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиВидыДоступа
	|		ПО Профили.Ссылка = ПрофилиВидыДоступа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|			И (ПрофилиВидыДоступа.ВидДоступа = ГруппыДоступаВидыДоступа.ВидДоступа)
	|ГДЕ
	|	(НЕ ПрофилиВидыДоступа.Предустановленный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ПрофилиВидыДоступа.ВидДоступа,
	|	0 КАК НомерСтрокиПоВиду,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Профили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиВидыДоступа
	|		ПО Профили.Ссылка = ПрофилиВидыДоступа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|			И (ПрофилиВидыДоступа.ВидДоступа = ГруппыДоступаЗначенияДоступа.ВидДоступа)
	|ГДЕ
	|	(НЕ ПрофилиВидыДоступа.Предустановленный)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ЗначениеВРеквизитФормы(РезультатыЗапроса[1].Выгрузить(), "Профили");
	ЗначениеВРеквизитФормы(РезультатыЗапроса[2].Выгрузить(), "ВидыДоступа");
	ЗначениеВРеквизитФормы(РезультатыЗапроса[3].Выгрузить(), "ЗначенияДоступа");
	
	
	// Определение необходимости настройки ограничений доступа
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.Доступ.Видимость = Ложь;
	КонецЕсли;
	
	//** Заполнение изменяемых коллекций
	Для каждого ОписаниеПрофиля Из Профили Цикл
		Для каждого ОписаниеВидаДоступа Из ВидыДоступа.НайтиСтроки(Новый Структура("Профиль", ОписаниеПрофиля.Профиль)) Цикл
			ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, ОписаниеПрофиля, ОписаниеВидаДоступа);
			ОбновитьНомерСтрокиПоВиду(ЭтаФорма, ОписаниеПрофиля, ОписаниеВидаДоступа);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		//
		КодВозврата = Вопрос(НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		//
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзменения(Отказ);
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	ЗаписатьИзменения(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоПравамДоступа(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Параметры.Пользователь);
	ОткрытьФорму("Отчет.ПраваДоступа.Форма", ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура ПрофилиПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоПрофиля(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПометкаПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	Если Элементы.Профили.ТекущиеДанные <> Неопределено
	   И НЕ Элементы.Профили.ТекущиеДанные.Пометка Тогда
		//
		ОчиститьСообщения();
		ОбработкаПроверкиЗаполнения(Отказ, Элементы.Профили.ТекущиеДанные.Профиль);
	КонецЕсли;
	
	Если Отказ Тогда
		Элементы.Профили.ТекущиеДанные.Пометка = Истина;
	Иначе
		ПриИзмененииТекущегоПрофиля(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеТекущихОграничений Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ВидыДоступа.ТекущийЭлемент <> Элементы.ВидыДоступаИспользование Тогда
		Элементы.ВидыДоступа.ТекущийЭлемент = Элементы.ВидыДоступаИспользование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаИспользованиеПриИзменении(Элемент)
	
	Элементы.ВидыДоступа.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен = (ВыбранноеЗначение = "ВсеРазрешены");
	
	Модифицированность = Истина;
	//
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидДоступа) Тогда
		Элемент.ТекущиеДанные.Профиль    = ТекущийПрофиль;
		Элемент.ТекущиеДанные.ВидДоступа = ТекущийВидДоступа;
		Отбор = Новый Структура("Профиль, ВидДоступа", ТекущийПрофиль, ТекущийВидДоступа);
		Элемент.ТекущиеДанные.НомерСтрокиПоВиду = ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	КонецЕсли;
	
	ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Элементы.Профили.ТекущиеДанные, Элементы.ВидыДоступа.ТекущиеДанные);
	ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Элементы.Профили.ТекущиеДанные, Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВыбранТипЗначенияДоступа(ТекущиеТипыЗначенийДоступа) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка ИЛИ
	     ТекущийТипЗначенияДоступа = ГруппаПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка ИЛИ
	          ТекущийТипЗначенияДоступа = ГруппаВнешнихПользователейПустаяСсылка Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Ложь);
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("ВыборГруппПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", Новый Структура("ВыборГруппВнешнихПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст, , ТекущийВидДоступа = ВидДоступаВнешниеПользователи, ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = УправлениеДоступом.СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст, , ТекущийВидДоступа = ВидДоступаВнешниеПользователи, ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = УправлениеДоступом.СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаКлиенте
Процедура ЗаписатьИзменения(Отказ = Ложь)
	
	ОчиститьСообщения();
	
	ОбработкаПроверкиЗаполнения(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзмененияНаСервере(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНаСервере(Отказ)
	
	// Получить список измененных
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Параметры.Пользователь);
	Запрос.УстановитьПараметр("Профили",         Профили.Выгрузить(,         "Профиль, Пометка"));
	Запрос.УстановитьПараметр("ВидыДоступа",     ВидыДоступа.Выгрузить(,     "Профиль, ВидДоступа, ДоступРазрешен"));
	Запрос.УстановитьПараметр("ЗначенияДоступа", ЗначенияДоступа.Выгрузить(, "Профиль, ВидДоступа, ЗначениеДоступа"));
	//Запрос.МенеджерВременныхТаблиц
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Профиль КАК Ссылка,
	|	Профили.Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	&Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоступа.Профиль,
	|	ВидыДоступа.ВидДоступа,
	|	ВидыДоступа.ДоступРазрешен
	|ПОМЕСТИТЬ ВидыДоступа
	|ИЗ
	|	&ВидыДоступа КАК ВидыДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияДоступа.Профиль,
	|	ЗначенияДоступа.ВидДоступа,
	|	ЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ЗначенияДоступа
	|ИЗ
	|	&ЗначенияДоступа КАК ЗначенияДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ ТекущиеПрофили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	(НЕ Профили.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ДоступРазрешен
	|ПОМЕСТИТЬ ТекущиеВидыДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ТекущиеЗначенияДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	Профили.Пометка,
	|	ТекущиеПрофили.ПерсональнаяГруппаДоступа
	|ИЗ
	|	(ВЫБРАТЬ
	|		Профили.Ссылка КАК Профиль
	|	ИЗ
	|		Профили КАК Профили
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|			ПО Профили.Ссылка = ТекущиеПрофили.Ссылка
	|	ГДЕ
	|		Профили.Пометка <> ТекущиеПрофили.Пометка
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВидыДоступа.Профиль
	|	ИЗ
	|		ВидыДоступа КАК ВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ПО ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль
	|				И ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа
	|				И ВидыДоступа.ДоступРазрешен = ТекущиеВидыДоступа.ДоступРазрешен
	|	ГДЕ
	|		ТекущиеВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеВидыДоступа.Профиль
	|	ИЗ
	|		ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВидыДоступа КАК ВидыДоступа
	|			ПО (ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль)
	|				И (ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа)
	|				И (ВидыДоступа.ДоступРазрешен = ТекущиеВидыДоступа.ДоступРазрешен)
	|	ГДЕ
	|		ВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияДоступа.Профиль
	|	ИЗ
	|		ЗначенияДоступа КАК ЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ПО ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль
	|				И ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа
	|				И ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа
	|	ГДЕ
	|		ТекущиеЗначенияДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗначенияДоступа.Профиль
	|	ИЗ
	|		ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияДоступа КАК ЗначенияДоступа
	|			ПО (ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль)
	|				И (ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа)
	|				И (ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа)
	|	ГДЕ
	|		ЗначенияДоступа.ВидДоступа ЕСТЬ NULL ) КАК ПрофилиИзмененыхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Профили КАК Профили
	|		ПО ПрофилиИзмененыхГрупп.Профиль = Профили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|		ПО ПрофилиИзмененыхГрупп.Профиль = ТекущиеПрофили.Ссылка";
	
	НачатьТранзакцию();
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				ЗаблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
				ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
			Иначе
				// Создание персональной группы доступа
				ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступаОбъект.Родитель     = УправлениеДоступом.РодительПерсональныхГруппДоступа();
				ГруппаДоступаОбъект.Наименование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Выборка.Профиль, "Наименование");
				ГруппаДоступаОбъект.Пользователь = Параметры.Пользователь;
				ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
			КонецЕсли;
			Если Выборка.Профиль = ПрофильАдминистратор Тогда
				Если Выборка.Пометка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(Параметры.Пользователь, "Пользователь") = Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Параметры.Пользователь;
					КонецЕсли;
				Иначе
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(Параметры.Пользователь, "Пользователь");
					Если ОписаниеПользователя <> Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						// Проверка пустого списка пользователей ИБ в группе доступа Администраторы
						НайденПользовательИБ = Ложь;
						Для каждого ОписаниеПользователя ИЗ ГруппаДоступаОбъект.Пользователи Цикл
							Если ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
							   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
								//
								НайденПользовательИБ = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ НайденПользовательИБ Тогда
							ВызватьИсключение(НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя, которому разрешен доступ к информационной базе.'"));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ГруппаДоступаОбъект.Пользователи.Очистить();
				Если Выборка.Пометка Тогда
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Параметры.Пользователь;
				КонецЕсли;
				Отбор = Новый Структура("Профиль", Выборка.Профиль);
				ГруппаДоступаОбъект.ВидыДоступа.Загрузить(    ВидыДоступа.Выгрузить(    Отбор, "ВидДоступа, ДоступРазрешен"));
				ГруппаДоступаОбъект.ЗначенияДоступа.Загрузить(ЗначенияДоступа.Выгрузить(Отбор, "ВидДоступа, ЗначениеДоступа"));
			КонецЕсли;
			ГруппаДоступаОбъект.Записать();
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				РазблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Модифицированность = Ложь;
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПроверкиЗаполнения(Отказ, Профиль = Неопределено)
	
	// Проверка незаполненных и повторяющихся значений доступа.
	Для каждого ОписаниеПрофиля Из ?(Профиль = Неопределено, Профили, Профили.НайтиСтроки(Новый Структура("Профиль", Профиль))) Цикл
		
		ВидыДоступаПрофиля = ВидыДоступа.НайтиСтроки(Новый Структура("Профиль", ОписаниеПрофиля.Профиль));
		НомерСтрокиВидДоступа = ВидыДоступаПрофиля.Количество()-1;
		
		Пока НЕ Отказ И НомерСтрокиВидДоступа >= 0 Цикл
			ТекущаяСтрокаВидовДоступа = ВидыДоступаПрофиля[НомерСтрокиВидДоступа];
			
			ЗначенияДоступаВидаДоступа = ЗначенияДоступа.НайтиСтроки(Новый Структура("Профиль, ВидДоступа", ОписаниеПрофиля.Профиль, ТекущаяСтрокаВидовДоступа.ВидДоступа));
			НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
			
			Пока НЕ Отказ И НомерСтроки >= 0 Цикл
				
				ТекущаяСтрока = ЗначенияДоступаВидаДоступа[НомерСтроки];
				
				// Проверка заполнения значения.
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
					Элементы.Профили.ТекущаяСтрока     = ОписаниеПрофиля.ПолучитьИдентификатор();
					Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение не заполнено!'"),
					                                                  ,
					                                                  "ЗначенияДоступа[" + Формат(ЗначенияДоступа.Индекс(ТекущаяСтрока), "ЧГ=0") + "].ЗначениеДоступа",
					                                                  ,
					                                                  Отказ);
					Продолжить;
				КонецЕсли;
				
				// Проверка наличия повторяющихся значений.
				НайденныеЗначения = ЗначенияДоступа.НайтиСтроки(Новый Структура("Профиль, ВидДоступа, ЗначениеДоступа", ОписаниеПрофиля.Профиль, ТекущаяСтрокаВидовДоступа.ВидДоступа, ТекущаяСтрока.ЗначениеДоступа));
				Если НайденныеЗначения.Количество() > 1 Тогда
					Элементы.Профили.ТекущаяСтрока     = ОписаниеПрофиля.ПолучитьИдентификатор();
					Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение повторяется!'"),
					                                                  ,
					                                                  "ЗначенияДоступа[" + Формат(ЗначенияДоступа.Индекс(ТекущаяСтрока), "ЧГ=0") + "].ЗначениеДоступа",
					                                                  ,
					                                                  Отказ);
					Продолжить;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки - 1;
			КонецЦикла;
			
			НомерСтрокиВидДоступа = НомерСтрокиВидДоступа - 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоПрофиля(Знач Контекст)
	
	#Если Клиент Тогда
		ТекущиеДанные = Контекст.Элементы.Профили.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = Контекст.Профили.НайтиПоИдентификатору(?(Контекст.Элементы.Профили.ТекущаяСтрока = Неопределено, -1, Контекст.Элементы.Профили.ТекущаяСтрока));
	#КонецЕсли
	
	Контекст.ТекущийПрофиль = Неопределено;
	РедактированиеТекущихОграничений = Ложь;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Контекст.ТекущийПрофиль = ТекущиеДанные.Профиль;
		РедактированиеТекущихОграничений = ТекущиеДанные.Пометка
		                                   И Контекст.ТекущийПрофиль <> Контекст.ПрофильАдминистратор
		                                   И НЕ Контекст.ТолькоПросмотр;
	КонецЕсли;
	
	Контекст.Элементы.НадписьПрофиль.Доступность                     =    ТекущиеДанные <> Неопределено И ТекущиеДанные.Пометка;
	Контекст.Элементы.ВидыДоступа.ТолькоПросмотр                     = НЕ РедактированиеТекущихОграничений;
	Контекст.Элементы.НадписьВидДоступа.Доступность                  =    ТекущиеДанные <> Неопределено И ТекущиеДанные.Пометка;
	Контекст.Элементы.ЗначенияДоступа.ТолькоПросмотр                 = НЕ РедактированиеТекущихОграничений;
	Контекст.Элементы.ВидыДоступаИзменить.Доступность                =    РедактированиеТекущихОграничений;
	Контекст.Элементы.ВидыДоступаКонтекстноеМенюИзменить.Доступность =    РедактированиеТекущихОграничений;
	
	Если Контекст.Элементы.ВидыДоступа.ОтборСтрок = Неопределено
	 ИЛИ Контекст.Элементы.ВидыДоступа.ОтборСтрок.Профиль <> Контекст.ТекущийПрофиль Тогда
		//
		Контекст.Элементы.ВидыДоступа.ОтборСтрок     = Новый ФиксированнаяСтруктура("Профиль", Контекст.ТекущийПрофиль);
		ТекущиеВидыДоступа = Контекст.ВидыДоступа.НайтиСтроки(Новый Структура("Профиль", Контекст.ТекущийПрофиль));
		Если ТекущиеВидыДоступа.Количество() = 0 Тогда
			Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("Профиль, ВидДоступа", Контекст.ТекущийПрофиль, Неопределено);
		Иначе
			Контекст.Элементы.ВидыДоступа.ТекущаяСтрока = ТекущиеВидыДоступа[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоВидаДоступа(Знач Контекст)
	
	ЗначенияЗадаются = Ложь;
	
	#Если Клиент Тогда
		ТекущиеДанные = Контекст.Элементы.ВидыДоступа.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = Контекст.ВидыДоступа.НайтиПоИдентификатору(?(Контекст.Элементы.ВидыДоступа.ТекущаяСтрока = Неопределено, -1, Контекст.Элементы.ВидыДоступа.ТекущаяСтрока));
	#КонецЕсли
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Контекст.ТекущийВидДоступа = ТекущиеДанные.ВидДоступа;
		
		Если Контекст.ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(ТекущиеДанные.ВидДоступа) = Неопределено Тогда
			ЗначенияЗадаются = Истина;
			Контекст.Элементы.ТипыВидовДоступа.ТекущаяСтраница = Контекст.Элементы.ОбычныйВидДоступа;
			// Установка отбора значений
			Если Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Неопределено
			 ИЛИ Контекст.Элементы.ЗначенияДоступа.ОтборСтрок.Профиль <> Контекст.ТекущийПрофиль
			 ИЛИ Контекст.Элементы.ЗначенияДоступа.ОтборСтрок.ВидДоступа <> ТекущиеДанные.ВидДоступа Тогда
				//
				Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("Профиль, ВидДоступа", Контекст.ТекущийПрофиль, ТекущиеДанные.ВидДоступа);
			КонецЕсли;
		Иначе
			Контекст.Элементы.ТипыВидовДоступа.ТекущаяСтраница = ?(ТекущиеДанные.ДоступРазрешен, Контекст.Элементы.ВидДоступаЧерезПраваПоЗначениямДоступаПредупреждение, Контекст.Элементы.ВидДоступаЧерезПраваПоЗначениямДоступаИнформация);
		КонецЕсли;
		
		// Обновление поля НадписьВидДоступа
		Контекст.НадписьВидДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ТекущиеДанные.ВидДоступа = Контекст.ВидДоступаПользователи,
			  ?(ТекущиеДанные.ДоступРазрешен,
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'"),
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'") ),
			  ?(ТекущиеДанные.ВидДоступа = Контекст.ВидДоступаВнешниеПользователи,
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'"),
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'") ),
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1)'"),
			      НСтр("ru = 'Разрешенные значения (%1)'") )
			  )
			),
			Строка(ТекущиеДанные.ВидДоступа));
		
		ОбновитьПредставлениеИспользованияВидаДоступа(Контекст, Контекст.Элементы.Профили.ТекущиеДанные, ТекущиеДанные);
	Иначе
		Контекст.ТекущийВидДоступа = Неопределено;
		Контекст.Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("Профиль, ВидДоступа", Контекст.ТекущийПрофиль, Неопределено);
		
		Если Контекст.ВидыДоступа.Количество() = 0 Тогда
			Контекст.ЗначенияДоступа.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Контекст.ТекущийТипЗначенияДоступа  = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ТекущийТипЗначенияДоступа);
	Контекст.ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	//
	Если ЗначенияЗадаются Тогда
		Для каждого ОписаниеТипаВидаДоступа Из Контекст.ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущиеДанные.ВидДоступа)) Цикл
			Контекст.ТекущиеТипыЗначенийДоступа.Добавить(ОписаниеТипаВидаДоступа.ТипЗначенияДоступа, ОписаниеТипаВидаДоступа.ПредставлениеТипа);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные <> Неопределено Тогда
			Отбор = Новый Структура("Профиль, ВидДоступа", Контекст.ТекущийПрофиль, Контекст.ТекущийВидДоступа);
			Для каждого Строка Из Контекст.ЗначенияДоступа.НайтиСтроки(Отбор) Цикл
				Контекст.ЗначенияДоступа.Удалить(Строка);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	//
	Если Контекст.ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		Контекст.ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'"));
	КонецЕсли;
	
	Контекст.Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	Контекст.Элементы.ЗначенияДоступа.КоманднаяПанель.ПодчиненныеЭлементы.ЗначенияДоступаДобавить.Доступность = ЗначенияЗадаются;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияВидаДоступа(Контекст, ОписаниеПрофиля, ОписаниеВидаДоступа)
	
	КоличествоЗначений = Контекст.ЗначенияДоступа.НайтиСтроки(Новый Структура("Профиль, ВидДоступа", ОписаниеПрофиля.Профиль, ОписаниеВидаДоступа.ВидДоступа)).Количество();
	Если КоличествоЗначений > 0 Тогда
		ПрописьЧисла          = ЧислоПрописью(КоличествоЗначений, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'"));
		ПрописьЧислаИПредмета = ЧислоПрописью(КоличествоЗначений, "Л = ru_RU", НСтр("ru = '-го значения,-х значений,-и значений,,,,,,0'"));
		ЧислоИПредмет = СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, Формат(КоличествоЗначений, "ЧГ="));
		ОписаниеВидаДоступа.Использование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, кроме %1'"),
			  НСтр("ru = 'Все запрещены, кроме %1'") ),
			ЧислоИПредмет);
	ИначеЕсли Контекст.ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(ОписаниеВидаДоступа.ВидДоступа) = Неопределено Тогда
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, без исключений'"),
			  НСтр("ru = 'Все запрещены, без исключений'") );
	Иначе
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, без исключений'"),
			  НСтр("ru = 'Все запрещены, кроме исключений'") );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомерСтрокиПоВиду(Контекст, ОписаниеПрофиля, ОписаниеВидаДоступа)
	
	Отбор = Новый Структура("Профиль, ВидДоступа", ОписаниеПрофиля.Профиль, ОписаниеВидаДоступа.ВидДоступа);
	ЗначенияДоступаПоВиду = Контекст.ЗначенияДоступа.НайтиСтроки(Отбор);
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступаПоВиду Цикл
		Строка.НомерСтрокиПоВиду = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция ВыбранТипЗначенияДоступа(Знач ТипыЗначенияДоступа)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТипыЗначенияДоступа[0].Значение;
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() > 0 Тогда
		
		Если ТипыЗначенияДоступа.Количество() = 2 Тогда
		
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
			
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ВнешнийПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаВнешнихПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элемент = ТипыЗначенияДоступа.ВыбратьЭлемент(НСтр("ru = 'Выбор типа данных'"), ТипыЗначенияДоступа[0]);
		Если Элемент <> Неопределено Тогда
			ТекущийТипЗначенияДоступа = Элемент.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции



