&НаСервере
Функция ПолучитьИзХранилища(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
		
КонецФункции

&НаСервере
Функция ПоместитьВХранилище() 
	Возврат ПоместитьВоВременноеХранилище(Графики, УникальныйИдентификатор);
КонецФункции



 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


&НаСервере
  // Процедура заполняет список шаблонов для заполнения графика
//
Процедура ЗаполнитьСписокШаблонов()
	
	Элементы.ПолеСпискаШаблонов.СписокВыбора.Добавить(Перечисления.удуШаблонЗаполненияГрафикаРаботы.Пятидневка40, "Пятидневка (40-час. раб. неделя)");
	Элементы.ПолеСпискаШаблонов.СписокВыбора.Добавить(Перечисления.удуШаблонЗаполненияГрафикаРаботы.Шестидневка40, "Шестидневка (40-час. раб. неделя)");
	Элементы.ПолеСпискаШаблонов.СписокВыбора.Добавить(Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое, "Сутки через двое (40-час. раб. неделя)");
	Элементы.ПолеСпискаШаблонов.СписокВыбора.Добавить(Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое, "Сутки через трое (40-час. раб. неделя)");
	Элементы.ПолеСпискаШаблонов.СписокВыбора.Добавить(Перечисления.удуШаблонЗаполненияГрафикаРаботы.КалендарныеДни, "Календарные дни");

	ПолеСпискаШаблонов=Перечисления.удуШаблонЗаполненияГрафикаРаботы.Пятидневка40;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет строку, содержащую описание текущего графика
//
Процедура ОбновитьИнформационнуюСтроку()
	ИнфСтрока = "";
	Если Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни Тогда
		ИнфСтрока = ИнфСтрока + "График по календарным дням. ";
	ИначеЕсли Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка 
		И Графики.ПериодыСмены.Количество() = 5
		И Графики.ПериодыСмены[0].ДеньНедели = Перечисления.ДниНедели.Понедельник И Графики.ПериодыСмены[0].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[0].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[1].ДеньНедели = Перечисления.ДниНедели.Вторник И Графики.ПериодыСмены[1].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[1].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[2].ДеньНедели = Перечисления.ДниНедели.Среда И Графики.ПериодыСмены[2].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[2].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[3].ДеньНедели = Перечисления.ДниНедели.Четверг И Графики.ПериодыСмены[3].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[3].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[4].ДеньНедели = Перечисления.ДниНедели.Пятница И Графики.ПериодыСмены[4].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[4].ВремяОкончания = Дата(1,1,1,16,0,0) Тогда
		ИнфСтрока = ИнфСтрока + "График пятидневка, 40-часовая рабочая неделя, выходные суббота и воскресенье. ";
		
	ИначеЕсли Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка Тогда
		ИнфСтрока = ИнфСтрока + "Вид графика - Пятидневка. ";
	ИначеЕсли Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Шестидневка Тогда
		ИнфСтрока = ИнфСтрока + "Вид графика - Шестидневка. ";	
	ИначеЕсли Графики.Смены.Количество() = 3 
		И Графики.Смены[0].Смена = Справочники.удуСмены.Смена24Часа
		И Графики.Смены[1].Смена = Справочники.удуСмены.ПустаяСсылка()
		И Графики.Смены[2].Смена = Справочники.удуСмены.ПустаяСсылка() Тогда
		ИнфСтрока = ИнфСтрока + "График сутки через двое. ";	
		ИнфСтрока = ИнфСтрока + "Дата отсчета - " + Формат(Графики.ДатаОтсчета, "ДЛФ=Д") + ".";
	ИначеЕсли Графики.Смены.Количество() = 4 
		И Графики.Смены[0].Смена = Справочники.удуСмены.Смена24Часа
		И Графики.Смены[1].Смена = Справочники.удуСмены.ПустаяСсылка()
		И Графики.Смены[2].Смена = Справочники.удуСмены.ПустаяСсылка()
		И Графики.Смены[3].Смена = Справочники.удуСмены.ПустаяСсылка() Тогда
		ИнфСтрока = ИнфСтрока + "График сутки через трое. ";		
		ИнфСтрока = ИнфСтрока + "Дата отсчета - " + Формат(Графики.ДатаОтсчета, "ДЛФ=Д") + ".";
	ИначеЕсли Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Сменный Тогда
		ИнфСтрока = ИнфСтрока + "Вид графика -  Сменный. ";
		ИнфСтрока = ИнфСтрока + "Дата отсчета - " + Формат(Графики.ДатаОтсчета, "ДЛФ=Д") + ".";
	Иначе	
		ИнфСтрока = ИнфСтрока + "Вид графика - не заполнен. ";
	КонецЕсли;


		Если Графики.СуммированныйУчетРабочегоВремени Тогда
			ИнфСтрока = ИнфСтрока + "Суммированный учет рабочего времени. ";		
		КонецЕсли;
		Если Графики.СокращенноеРабочееВремя Тогда
			ИнфСтрока = ИнфСтрока + "Сокращенное рабочее время. ";		
		КонецЕсли;
		Если Графики.СокращеннаяРабочаяНеделя Тогда
			ИнфСтрока = ИнфСтрока + "Неполная рабочая неделя. ";		
		КонецЕсли;
		Если Графики.НеполныйРабочийДень Тогда
			ИнфСтрока = ИнфСтрока + "Неполный рабочий день. ";		
		КонецЕсли;
		Если НЕ Графики.ГрафикПолногоРабочегоВремени.Пустая() Тогда
			ИнфСтрока = ИнфСтрока + "График полного рабочего времени: " + Графики.ГрафикПолногоРабочегоВремени + ". ";		
		КонецЕсли;
		Если Графики.НачалоДневныхЧасов <> Дата(1,1,1, 0,0,0)
			И (Графики.УчитыватьНочныеЧасы ИЛИ Графики.УчитыватьВечерниеЧасы) Тогда
			ИнфСтрока = ИнфСтрока + "Начало дневных часов: " + Формат(Графики.НачалоДневныхЧасов, "ДФ=Ч:мм") + ". ";		
		КонецЕсли;
		Если Графики.НачалоВечернихЧасов <> Дата(1,1,1, 0,0,0) 
			И Графики.УчитыватьВечерниеЧасы Тогда
			ИнфСтрока = ИнфСтрока + "Начало вечерних часов: " + Формат(Графики.НачалоВечернихЧасов, "ДФ=Ч:мм") + ". ";		
		КонецЕсли;
		Если Графики.НачалоНочныхЧасов <> Дата(1,1,1, 0,0,0) 
			И Графики.УчитыватьНочныеЧасы Тогда
			ИнфСтрока = ИнфСтрока + "Начало ночных часов: " + Формат(Графики.НачалоНочныхЧасов, "ДФ=Ч:мм") + ". ";		
		КонецЕсли;
	
КонецПроцедуры // ОбновитьИнформационнуюСтроку()

&НаСервере
// Процедура устанавливат доступность кнопок "Назад", "Далее"
//
Процедура ДоступностьКнопокНазадДалее(Элемент)
	
	Если Элемент.Имя = "ГруппаСтраница1" Тогда
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Назад.Доступность = Ложь;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Далее.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность = Ложь;
	ИначеЕсли Элемент.Имя = "ГруппаСтраница3" Тогда
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Далее.Доступность = Ложь;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Назад.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Заполнить.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Далее.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Назад.Доступность = Истина;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу смен из исходного элемента справочника
Процедура ЗаполнитьСмены()
	РасписаниеСменный.Очистить();
	Для Каждого ИсходнаяСтрокаСмены Из Графики.Смены Цикл
		СтрокаСмены = РасписаниеСменный.Добавить();
		СтрокаСмены.НомерДня = ИсходнаяСтрокаСмены.НомерДня;
		СтрокаСмены.Смена = ИсходнаяСтрокаСмены.Смена;
		ВремяСмены = 0;
		Для Каждого ПериодРаботы Из СтрокаСмены.Смена.ПериодыСмены Цикл
			Если ПериодРаботы.ВремяНачала > ПериодРаботы.ВремяОкончания Тогда
				ВремяСмены = (КонецДня(ПериодРаботы.ВремяНачала) - ПериодРаботы.ВремяНачала)
					+ (ПериодРаботы.ВремяОкончания - НачалоДня(ПериодРаботы.ВремяОкончания))
					+ ВремяСмены;
			Иначе
				ВремяСмены = ПериодРаботы.ВремяОкончания - ПериодРаботы.ВремяНачала + ВремяСмены;
			КонецЕсли;
			
		КонецЦикла;
		СтрокаСмены.ЧасовВСмене =  ВремяСмены/3600;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСмены()	

&НаСервере
// Процедура устанавливает доступность элементов формы
//
Процедура УстановитьДоступностьЭлементовФормы()
	
	ЗначениеШаблона=ПолеСпискаШаблонов;

	Элементы.ПолеСпискаШаблонов.Доступность = ПоШаблону="ПоШаблону";
	Элементы.Ночные1.Доступность = ПоШаблону="ПоШаблону";
	Элементы.Вечерние1.Доступность = ПоШаблону="ПоШаблону";
	Элементы.ДатаОтсчета.Доступность = ПоШаблону="ПоШаблону" И (ЗначениеШаблона <> Перечисления.удуШаблонЗаполненияГрафикаРаботы.Пятидневка40)
	И (ЗначениеШаблона <> Перечисления.удуШаблонЗаполненияГрафикаРаботы.Шестидневка40);
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Далее.Доступность = НовыйГрафик="Вручную";
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность =  НЕ НовыйГрафик="Вручную";
		
КонецПроцедуры

&НаСервере
// Процедура устанавливает доступность элементов неполного рабочего времени
//
Процедура ДоступностьЭлементовНеполноеРабочееВремя()
	
	Элементы.НеполныйРабочийДень.Доступность = СокращенноеРабочееВремя;
	Элементы.ПереключательПоТекущемуГрафику.Доступность = СокращенноеРабочееВремя;
	
	Если не СокращенноеРабочееВремя Тогда
		
		НеполныйРабочийДень = Истина;
		ПереключательПоТекущемуГрафику = 0;
		
		Элементы.ГрафикПолногоРабочегоВремени.ТолькоПросмотр = Истина;
		ГрафикПолногоРабочегоВремени = Справочники.удуГрафикиРаботы.ПустаяСсылка();
		Элементы.ГрафикПолногоРабочегоВремени.АвтоВыборНезаполненного = Ложь;
		Элементы.ГрафикПолногоРабочегоВремени.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ГрафикПолногоРабочегоВремени.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	мСокращенноеРабочееВремя = СокращенноеРабочееВремя;
	мГрафикПолногоРабочегоВремени = ГрафикПолногоРабочегоВремени;
	ПереключательПоТекущемуГрафикуПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПереключательПоТекущемуГрафикуПриИзмененииСервер()
	
	Если ПереключательПоТекущемуГрафику=0 ИЛИ НЕ СокращенноеРабочееВремя Тогда
		Элементы.ГрафикПолногоРабочегоВремени.Доступность = Ложь;
		Элементы.ГрафикПолногоРабочегоВремени.ТолькоПросмотр = Истина;
		ГрафикПолногоРабочегоВремени = Справочники.удуГрафикиРаботы.ПустаяСсылка();
	Иначе
		Элементы.ГрафикПолногоРабочегоВремени.Доступность = Истина;
		Элементы.ГрафикПолногоРабочегоВремени.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость начала вечерних часов
//
Процедура ВидимостьНачалаВечерних()
	
	Элементы.НачалоДневных.Видимость = Вечерние Или Ночные;
	Элементы.НачалоВечерних.Видимость = Вечерние;

	Если Вечерние Тогда
		НачалоВечерних = Дата(1,1,1,20,0,0);
	Иначе
		НачалоВечерних = Дата(1,1,1,22,0,0);
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость начала ночных часов
//
Процедура ВидимостьНачалаНочных()
	Элементы.НачалоДневных.Видимость = Вечерние Или Ночные;
	Элементы.НачалоНочных.Видимость = Ночные;
	
	Если Ночные и не Вечерние Тогда
		НачалоВечерних = НачалоНочных;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
 // Процедура обнуляет реквизиты графика при выборе метода заполнения по шаблону
//
Процедура СброситьНастройкиГрафиков()
	
	Праздники = Ложь;
	СкользящиеВыходные = Ложь;
	Ночные = Ложь;
	Вечерние = Ложь;
	СокращенноеРабочееВремя = Ложь;
	ГрафикПолногоРабочегоВремени = Справочники.удуГрафикиРаботы.ПустаяСсылка();
	ЧасовВНеделе = 40;
	СуммированныйУчет = Ложь;
	 
КонецПроцедуры // СброситьНастройкиГрафиков()	

&НаСервере
Процедура ПолеСпискаШаблоновПриИзмененииСервер()
	
	ЗначениеШаблона=ПолеСпискаШаблонов;

	Если ЗначениеШаблона = Перечисления.удуШаблонЗаполненияГрафикаРаботы.Пятидневка40
		Или ЗначениеШаблона = Перечисления.удуШаблонЗаполненияГрафикаРаботы.Шестидневка40 Тогда
		Элементы.ДатаОтсчета.Доступность = Ложь;
		Элементы.Вечерние1.Видимость=Ложь;
		Элементы.Ночные1.Видимость=Ложь;
		
		Праздники = Истина;
		Если ЗначениеШаблона = Перечисления.удуШаблонЗаполненияГрафикаРаботы.Пятидневка40 Тогда
			ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка;
		Иначе
			ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Шестидневка;
		КонецЕсли;
	ИначеЕсли ЗначениеШаблона = Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое
		Или ЗначениеШаблона = Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое Тогда
		Праздники = Ложь;
		Элементы.ДатаОтсчета.Доступность = Истина;
		Элементы.Вечерние1.Видимость=истина;
		Элементы.Ночные1.Видимость=истина;
		ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Сменный;
	Иначе
		Праздники = Ложь;
		Элементы.ДатаОтсчета.Доступность = Истина;
		Элементы.Вечерние1.Видимость=Ложь;
		Элементы.Ночные1.Видимость=Ложь;
		Ночные=Ложь;
		Вечерние=Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура устанавливает вид расписания, в зависимости от указанных значений вечерних, ночных часов и типа графика.
//
Процедура УстановитьВидРасписания()
	
	Если ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Сменный Тогда
		Элементы.ГруппаРасписание.ТекущаяСтраница = Элементы.ГруппаРасписаниеСменный;
	Иначе
		Если Вечерние = Истина Или Ночные = Истина Тогда
			Элементы.ГруппаРасписание.ТекущаяСтраница = Элементы.ГруппаРасписаниеСУчетомНочных;
		Иначе
			Элементы.ГруппаРасписание.ТекущаяСтраница = Элементы.ГруппаРасписаниеОбычно;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
// Процедура автозаполнения расписания при переходе на последнюю закладку мастера.
Процедура ЗаполнитьРасписание(ТипГрафика, УчетВечернихНочных)
	
	РасписаниеСводно.Очистить();
	РасписаниеПоЧасам.Очистить();
	
	Если ТипГрафика <> Перечисления.удуВидыРабочихГрафиков.Сменный Тогда
		Если ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка Тогда
			КоличествоРабочихДней = 5;
		ИначеЕсли ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Шестидневка Тогда
			КоличествоРабочихДней = 6;
		ИначеЕсли ТипГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни Тогда
			КоличествоРабочихДней = 7;
		Иначе
			КоличествоРабочихДней = 5;
		КонецЕсли;
		
		
		РасписаниеЗаполняемСводно  = (ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка 
				Или ТипГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни
				Или ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Шестидневка)
				И Не УчетВечернихНочных ;
				
		Если Графики.Ссылка.Пустая() Тогда
			РасписаниеЗаполняемСводноПоОбъекту = РасписаниеЗаполняемСводно;
		Иначе
				СпрОбъект = Графики;
				РасписаниеЗаполняемСводноПоОбъекту = (СпрОбъект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка 
				Или СпрОбъект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни
				Или СпрОбъект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Шестидневка)
				И Не СпрОбъект.УчитыватьВечерниеЧасы И НЕ СпрОбъект.УчитыватьНочныеЧасы;

		КонецЕсли;
			
					
				
		Если РасписаниеЗаполняемСводно И Графики.ПериодыСмены.Количество() = 7 Тогда
			Для Каждого СтрокаПериодыСмены Из Графики.ПериодыСмены Цикл
				НоваяСтрока = РасписаниеСводно.Добавить();
				НоваяСтрока.ДеньНедели = СтрокаПериодыСмены.ДеньНедели;
				НоваяСтрока.ЧасовЗаДень = (СтрокаПериодыСмены.ВремяОкончания - СтрокаПериодыСмены.ВремяНачала) / 3600;
			КонецЦикла;
			Если РасписаниеСводно.Итог("ЧасовЗаДень") = ЧасовВНеделе Тогда 
				Возврат;
			Иначе
				РасписаниеСводно.Очистить();
			КонецЕсли;
		ИначеЕсли Не РасписаниеЗаполняемСводно 
			И РасписаниеЗаполняемСводноПоОбъекту = РасписаниеЗаполняемСводно
			Тогда
			РасписаниеРаботы = Графики.ПериодыСмены.Выгрузить();
			
			СуммаЧасов = 0;
			Для Каждого СтрокаРасписания Из РасписаниеРаботы Цикл
				СуммаЧасов = СуммаЧасов + (СтрокаРасписания.ВремяОкончания - СтрокаРасписания.ВремяНачала) / 3600
			КонецЦикла;
			СуммаЧасов = Окр(СуммаЧасов, 2);
			Если СуммаЧасов = ЧасовВНеделе Тогда
				
				ПредДень = 0;
				НоваяСтрока = 0;
				НомерСтрокиДня = 0;
				СуммаЧасовПоТаблице = 0;
				Для Каждого СтрокаРасписания Из РасписаниеРаботы Цикл
					Если ПредДень = 0 Или ПредДень <> СтрокаРасписания.ДеньНедели Тогда
						Если НоваяСтрока <> 0 Тогда
							НоваяСтрока.ЧасовЗаДень = Окр((НоваяСтрока.Окончание - НоваяСтрока.Начало 
							- (НоваяСтрока.ОкончаниеПерерыва1 - НоваяСтрока.НачалоПерерыва1)
							- (НоваяСтрока.ОкончаниеПерерыва2 - НоваяСтрока.НачалоПерерыва2)
							- (НоваяСтрока.ОкончаниеПерерыва3 - НоваяСтрока.НачалоПерерыва3)
							- (НоваяСтрока.ОкончаниеПерерыва4 - НоваяСтрока.НачалоПерерыва4)
							- (НоваяСтрока.ОкончаниеПерерыва5 - НоваяСтрока.НачалоПерерыва5)) / 3600, 2);
							СуммаЧасовПоТаблице = НоваяСтрока.ЧасовЗаДень + СуммаЧасовПоТаблице;
						КонецЕсли;
						НоваяСтрока = РасписаниеПоЧасам.Добавить();
						НоваяСтрока.ДеньНедели = СтрокаРасписания.ДеньНедели;
						НомерСтрокиДня = 0;
					КонецЕсли;
					
					Если НомерСтрокиДня = 0 Тогда
						НоваяСтрока.Начало = СтрокаРасписания.ВремяНачала;
						НоваяСтрока.Окончание = СтрокаРасписания.ВремяОкончания;
					ИначеЕсли НомерСтрокиДня <= 5 Тогда
						НоваяСтрока["НачалоПерерыва"+ Строка(НомерСтрокиДня)] = НоваяСтрока.Окончание;
						НоваяСтрока["ОкончаниеПерерыва" + Строка(НомерСтрокиДня)] = СтрокаРасписания.ВремяНачала;
						НоваяСтрока.Окончание = СтрокаРасписания.ВремяОкончания;
					КонецЕсли;
					
					НомерСтрокиДня = НомерСтрокиДня + 1;
					ПредДень = СтрокаРасписания.ДеньНедели;
				КонецЦикла;
				НоваяСтрока.ЧасовЗаДень = Окр((НоваяСтрока.Окончание - НоваяСтрока.Начало 
				- (НоваяСтрока.ОкончаниеПерерыва1 - НоваяСтрока.НачалоПерерыва1)
				- (НоваяСтрока.ОкончаниеПерерыва2 - НоваяСтрока.НачалоПерерыва2)
				- (НоваяСтрока.ОкончаниеПерерыва3 - НоваяСтрока.НачалоПерерыва3)
				- (НоваяСтрока.ОкончаниеПерерыва4 - НоваяСтрока.НачалоПерерыва4)
				- (НоваяСтрока.ОкончаниеПерерыва5 - НоваяСтрока.НачалоПерерыва5)) / 3600, 2);
				СуммаЧасовПоТаблице = Окр(НоваяСтрока.ЧасовЗаДень + СуммаЧасовПоТаблице, 2);
				Если СуммаЧасовПоТаблице = ЧасовВНеделе Тогда
					Возврат;
				Иначе
					РасписаниеПоЧасам.Очистить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
			
		Для ДеньНедели = 0 По 6 Цикл
			
			Если РасписаниеЗаполняемСводно Тогда
				НоваяСтрока = РасписаниеСводно.Добавить();
			Иначе
				
				НоваяСтрока = РасписаниеПоЧасам.Добавить();
			КонецЕсли;
			НазваниеДня = Перечисления.ДниНедели.Получить(ДеньНедели);
			НоваяСтрока.ДеньНедели=НазваниеДня;
			Если ДеньНедели <= КоличествоРабочихДней-1 
				ИЛИ ТипГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни Тогда
				НоваяСтрока.ЧасовЗаДень = Цел(ЧасовВНеделе/КоличествоРабочихДней) + ?(ДеньНедели < ЧасовВНеделе%КоличествоРабочихДней, 1, 0);
			КонецЕсли;
			
			Если Не РасписаниеЗаполняемСводно И НоваяСтрока.ЧасовЗаДень > 0 Тогда
				НоваяСтрока.Начало = Дата(1,1,1, 9,0,0);
				НоваяСтрока.НачалоПерерыва1 = Дата(1,1,1, 13,0,0);
				НоваяСтрока.ОкончаниеПерерыва1 = Дата(1,1,1, 14,0,0);
				НоваяСтрока.Окончание = НоваяСтрока.Начало + (НоваяСтрока.ЧасовЗаДень+1)*3600;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РасписаниеПоЧасамЧасовЗаДень=РасписаниеПоЧасам.Итог("ЧасовЗаДень");
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеСтраниц(Кнопка)
	
	ТекущаяЗакладка = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаСтраниц.ТекущаяСтраница);
	Если Кнопка = "Далее" Тогда
		Если ТекущаяЗакладка = 1 
			И ЧасовВНеделе = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количество часов в неделе должно быть заполнено!",СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		СледующаяЗакладка = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.Получить(ТекущаяЗакладка+1);
	Иначе
		Если ТекущаяЗакладка > 0 Тогда
			СледующаяЗакладка = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.Получить(ТекущаяЗакладка-1);
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаСтраниц.ТекущаяСтраница = СледующаяЗакладка;
	ДоступностьКнопокНазадДалее(СледующаяЗакладка);
	
	Если СледующаяЗакладка.Имя = "ГруппаСтраница3" Тогда
		УстановитьВидРасписания();
		УчетВечернихНочных = Вечерние Или Ночные;
		ЗаполнитьРасписание(ТипГрафика, УчетВечернихНочных);
	ИначеЕсли СледующаяЗакладка.Имя = "Страница0" Тогда
		ОбновитьИнформационнуюСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСервер()
	
	Модифицированность = Ложь;
		
	Графики.УчитыватьВечерниеЧасы = Вечерние;
	Графики.УчитыватьНочныеЧасы = Ночные;
	
	Если ПоШаблону="ПоШаблону" Тогда
		Графики.НачалоДневныхЧасов = Дата(1,1,1,6,0,0);
		Графики.НачалоВечернихЧасов = Дата(1,1,1,20,0,0);
		Графики.НачалоНочныхЧасов = Дата(1,1,1,22,0,0);
		Графики.ДлительностьРабочейНедели = 40;
		Графики.ГрафикПолногоРабочегоВремени = Справочники.удуГрафикиРаботы.ПустаяСсылка();
		Графики.НеполныйРабочийДень = Ложь;
		Графики.СокращеннаяРабочаяНеделя = Ложь;
		Графики.СокращенноеРабочееВремя = Ложь;
		Графики.СуммированныйУчетРабочегоВремени = Ложь;
		
		Если ПолеСпискаШаблонов = Перечисления.удуШаблонЗаполненияГрафикаРаботы.Пятидневка40 Тогда
			Графики.УчитыватьПраздники = Истина;
			Справочники.удуГрафикиРаботы.ЗаполнитьГрафикПоПятидневка40(Графики);
			
		ИначеЕсли ПолеСпискаШаблонов = Перечисления.удуШаблонЗаполненияГрафикаРаботы.Шестидневка40 Тогда
			Графики.УчитыватьПраздники = Истина;
			Справочники.удуГрафикиРаботы.ЗаполнитьГрафикПоШестидневка40(Графики);
			
		ИначеЕсли ПолеСпискаШаблонов = Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое Тогда
			Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Сменный;
			Графики.УчитыватьПраздники = Ложь;
			Графики.ШаблонЗаполнения = Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое;
			Графики.Смены.Очистить();
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 1;
			Смена.Смена = Справочники.удуСмены.Смена24часа;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 2;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 3;
			
		ИначеЕсли ПолеСпискаШаблонов = Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое Тогда
			Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Сменный;
			Графики.УчитыватьПраздники = Ложь;
			Графики.ШаблонЗаполнения = Перечисления.удуШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое;
			Графики.Смены.Очистить();
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 1;
			Смена.Смена = Справочники.удуСмены.Смена24Часа;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 2;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 3;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 4;
		ИначеЕсли ПолеСпискаШаблонов = Перечисления.удуШаблонЗаполненияГрафикаРаботы.КалендарныеДни Тогда
			Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни;
			Графики.УчитыватьПраздники = Ложь;
			Графики.ШаблонЗаполнения = Перечисления.удуШаблонЗаполненияГрафикаРаботы.КалендарныеДни;
			Графики.ДлительностьРабочейНедели = 56;
			Графики.ПервыйВыходной = Перечисления.ДниНедели.ПустаяСсылка();
			Графики.ВторойВыходной = Перечисления.ДниНедели.ПустаяСсылка();
			Графики.ПериодыСмены.Очистить();
			Для ИндексДня = 0 По 6 Цикл
				Смена = Графики.ПериодыСмены.Добавить();
				Смена.ВремяНачала = Дата(1,1,1,8,0,0);
				Смена.ВремяОкончания = Дата(1,1,1,16,0,0);
				Смена.ДеньНедели = Перечисления.ДниНедели[ИндексДня];
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Графики.ШаблонЗаполнения = Перечисления.удуШаблонЗаполненияГрафикаРаботы.ПустаяСсылка();
		
		Графики.ПервыйВыходной = Неопределено;
		Графики.ВторойВыходной = Неопределено;
		
		Графики.ПериодыСмены.Очистить();
		Для Каждого СтрокаСводногоРасписания Из РасписаниеСводно Цикл
			ПериодСмены = Графики.ПериодыСмены.Добавить();
			ПериодСмены.ДеньНедели = СтрокаСводногоРасписания.ДеньНедели;
			ПериодСмены.ВремяНачала = НачалоДневных;
			ПериодСмены.ВремяОкончания = НачалоДневных + СтрокаСводногоРасписания.ЧасовЗаДень*3600;
		КонецЦикла;
		
		Если РасписаниеСменный.Количество() > 0 Тогда
			Графики.Смены.Очистить();
			Для Каждого СтрокаСмена Из РасписаниеСменный Цикл
				Смена = Графики.Смены.Добавить();
				Смена.НомерДня = СтрокаСмена.НомерДня;
				Смена.Смена = СтрокаСмена.Смена;
			КонецЦикла;
			
		КонецЕсли;
		
		Если РасписаниеПоЧасам.Количество() > 0 Тогда
			Графики.ПериодыСмены.Очистить();
			ТаблицаНачалаПериодов = Новый ТаблицаЗначений;
			ТаблицаОкончанияПериодов = Новый ТаблицаЗначений;
			ТаблицаНачалаПериодов.Колонки.Добавить("Начало");
			ТаблицаОкончанияПериодов.Колонки.Добавить("Окончание");
			
			Для Каждого СтрокаПоЧасам Из РасписаниеПоЧасам Цикл
				ТаблицаНачалаПериодов.Очистить();
				ТаблицаОкончанияПериодов.Очистить();
				ТаблицаНачалаПериодов.Добавить().Начало = СтрокаПоЧасам.Начало;
				ТаблицаОкончанияПериодов.Добавить().Окончание = СтрокаПоЧасам.Окончание;
				Для НомерПерерыва = 1 По КоличествоПерерывов Цикл
					НачалоПерерыва = СтрокаПоЧасам["НачалоПерерыва"+НомерПерерыва];
					ОкончаниеПерерыва = СтрокаПоЧасам["ОкончаниеПерерыва"+НомерПерерыва];
					Если НачалоПерерыва <> Дата(1,1,1)
						И ОкончаниеПерерыва <> Дата(1,1,1) Тогда
						
						Если НачалоПерерыва > ОкончаниеПерерыва Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расписания " + (РасписаниеПоЧасам.Индекс(СтрокаПоЧасам)+1) + " неверно указано начало и окончание перерыва!",СтатусСообщения.ОченьВажное);
							Возврат;
						ИначеЕсли НачалоПерерыва > СтрокаПоЧасам.Окончание
							ИЛИ НачалоПерерыва < СтрокаПоЧасам.Начало
							ИЛИ ОкончаниеПерерыва > СтрокаПоЧасам.Окончание
							ИЛИ ОкончаниеПерерыва < СтрокаПоЧасам.Начало Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расписания " + (РасписаниеПоЧасам.Индекс(СтрокаПоЧасам)+1) + " время перерыва выходит за рамки рабочего времени!",СтатусСообщения.ОченьВажное);
							Возврат;
						КонецЕсли;
						ТаблицаОкончанияПериодов.Добавить().Окончание = НачалоПерерыва;
						ТаблицаНачалаПериодов.Добавить().Начало = ОкончаниеПерерыва;
						
					КонецЕсли;
				КонецЦикла;
				ТаблицаНачалаПериодов.Сортировать("Начало");
				ТаблицаОкончанияПериодов.Сортировать("Окончание");
				Для НомерСтрокиТаблицы = 0 По ТаблицаНачалаПериодов.Количество()-1 Цикл
					ПериодСмены = Графики.ПериодыСмены.Добавить();
					ПериодСмены.ДеньНедели = СтрокаПоЧасам.ДеньНедели;
					ПериодСмены.ВремяНачала = ТаблицаНачалаПериодов[НомерСтрокиТаблицы].Начало;
					ПериодСмены.ВремяОкончания = ТаблицаОкончанияПериодов[НомерСтрокиТаблицы].Окончание;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		Если Ночные и не Вечерние Тогда
			НачалоВечерних = НачалоНочных;
		ИначеЕсли Вечерние И не Ночные Тогда
			НачалоНочных = Дата(1,1,1, 23,59,59);
		КонецЕсли;
		
		Графики.СуммированныйУчетРабочегоВремени = Графики.СуммированныйУчетРабочегоВремени ИЛИ Графики.УчитыватьПраздники;
		Графики.ВидГрафика = ТипГрафика;
		Графики.ДлительностьРабочейНедели = ЧасовВНеделе;
		Графики.СуммированныйУчетРабочегоВремени = СуммированныйУчет;
		Графики.УчитыватьПраздники = Праздники;
		Графики.ГрафикПолногоРабочегоВремени = ГрафикПолногоРабочегоВремени;
		Графики.НачалоДневныхЧасов = НачалоДневных;
		Графики.НачалоВечернихЧасов = НачалоВечерних;
		Графики.НачалоНочныхЧасов = НачалоНочных;
		
	КонецЕсли;	
	
	Графики.ДатаОтсчета = ДатаОтсчета;
	
	
КонецПроцедуры

&НаСервере
// Функция проверяет правильность заполения графика работы
//
Функция ПроверитьПравильностьЗаполненияГрафика()
	Если (Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка
		Или Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Шестидневка)
		И НЕ Графики.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни
		И НЕ Графики.СуммированныйУчетРабочегоВремени Тогда
		
		ВремяПоПериодамСмены = 0;
		Для Каждого СтрокаПериодов Из Графики.ПериодыСмены Цикл
			ВремяПоПериодамСмены = ВремяПоПериодамСмены + (СтрокаПериодов.ВремяОкончания - СтрокаПериодов.ВремяНачала);
		КонецЦикла;
		ВремяПоПериодамСмены = Окр(ВремяПоПериодамСмены / 3600, 2);
		Если Графики.ДлительностьРабочейНедели <> ВремяПоПериодамСмены Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количество часов в неделе не равно сумме часов по таблице расписания работы!",СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ПроверитьПравильностьЗаполненияГрафика()

&НаСервере
// Процедура устанавливает значение неполного рабочего времени по значениям из элемента справочника Графики.
//
Процедура УстановитьЗначениеВидаНеполногоРабочегоВремени()
	Если СокращенноеРабочееВремя Тогда
		Графики.НеполныйРабочийДень = НеполныйРабочийДень;
		Графики.СокращеннаяРабочаяНеделя = НЕ НеполныйРабочийДень;
	Иначе
		Графики.НеполныйРабочийДень = Ложь;
		Графики.СокращеннаяРабочаяНеделя = Ложь;
	КонецЕсли;
	Графики.СокращенноеРабочееВремя = СокращенноеРабочееВремя;
	
КонецПроцедуры // УстановитьЗначениеВидаНеполногоРабочегоВремени()

&НаКлиенте
// Процедура пересчитывать количество часов за день в таблице расписания по часам
//
Процедура ОбновитьИтогоЧасовЗаДень()
	
	ТекущаяСтрока = Элементы.РасписаниеПоЧасам.ТекущиеДанные;
	Если Секунда(ТекущаяСтрока.Окончание) = 59 Тогда
	    ТекущаяСтрока.Окончание = ТекущаяСтрока.Окончание - Секунда(ТекущаяСтрока.Окончание);
	КонецЕсли;		
	ТекущаяСтрока.ЧасовЗаДень = 0;
	Если ТекущаяСтрока.Окончание = Дата(1,1,1, 23,59,0) Тогда
		ТекущаяСтрока.Окончание =  Дата(1,1,1, 23,59,59);
	КонецЕсли;
		
		ЧасовЗаДень = ТекущаяСтрока.Окончание - ТекущаяСтрока.Начало;
		
	Для НомерПерерыва = 1 По КоличествоПерерывов Цикл
		ЧасовЗаДень = ЧасовЗаДень 	- (ТекущаяСтрока["ОкончаниеПерерыва" + НомерПерерыва] - ТекущаяСтрока["НачалоПерерыва" + НомерПерерыва]);
	КонецЦикла;
	ТекущаяСтрока.ЧасовЗаДень = Окр(ЧасовЗаДень / 3600, 2);
	
	РасписаниеПоЧасамЧасовЗаДень=РасписаниеПоЧасам.Итог("ЧасовЗаДень");
	
КонецПроцедуры // ОбновитьИтогоЧасовЗаДень()

&НаСервере
Процедура РасписаниеСменныйСменаПриИзмененииСервер(НомерСтроки)
	
	СтрокаТЧ=РасписаниеСменный[НомерСтроки];

	 Если СтрокаТЧ <> Неопределено Тогда
		ВремяСмены = 0;
		Для Каждого ПериодРаботы Из СтрокаТЧ.Смена.ПериодыСмены Цикл
			Если ПериодРаботы.ВремяНачала > ПериодРаботы.ВремяОкончания Тогда
				ВремяСмены = (КонецДня(ПериодРаботы.ВремяНачала) - ПериодРаботы.ВремяНачала)
					+ (ПериодРаботы.ВремяОкончания - НачалоДня(ПериодРаботы.ВремяОкончания))
					+ ВремяСмены;
			Иначе
				ВремяСмены = ПериодРаботы.ВремяОкончания - ПериодРаботы.ВремяНачала + ВремяСмены;
			КонецЕсли;
			
		КонецЦикла;
		СтрокаТЧ.ЧасовВСмене = ВремяСмены/3600;
	КонецЕсли;

	
	
КонецПроцедуры

  &НаКлиенте
Процедура РасписаниеПоЧасамСкрытьПерерывы()
	Элементы.РасписаниеПоЧасам.ПодчиненныеЭлементы.РасписаниеПоЧасамГруппаПерерыв1.Видимость = Ложь;
	Элементы.РасписаниеПоЧасам.ПодчиненныеЭлементы.РасписаниеПоЧасамГруппаПерерыв2.Видимость = Ложь;
	Элементы.РасписаниеПоЧасам.ПодчиненныеЭлементы.РасписаниеПоЧасамГруппаПерерыв3.Видимость = Ложь;
	Элементы.РасписаниеПоЧасам.ПодчиненныеЭлементы.РасписаниеПоЧасамГруппаПерерыв4.Видимость = Ложь;
	Элементы.РасписаниеПоЧасам.ПодчиненныеЭлементы.РасписаниеПоЧасамГруппаПерерыв5.Видимость = Ложь;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) тогда
		 Объект = ПолучитьИзХранилища(Параметры.АдресВХранилище);
         КопироватьДанныеФормы(Объект,Графики);
	КонецЕсли;
	
		ЗаполнитьСписокШаблонов();
	// Заполняем поля формы значениями реквизитов справочника
	Если не ЗначениеЗаполнено(Графики.Ссылка) Тогда
		ПоШаблону = "ПоШаблону";
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаСтраница1;
		ДатаОтсчета = НачалоГода(ТекущаяДата());
		ТипГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка;
		ЧасовВНеделе = 40;
		СуммированныйУчет = Ложь;
		Праздники = Истина;
		КоличествоПерерывов = 1;
		НачалоДневных = Дата(1,1,1,6,0,0);
		НачалоВечерних = Дата(1,1,1,20,0,0);
		НачалоНочных = Дата(1,1,1,22,0,0);
		Элементы.НачалоВечерних.Видимость = Ложь;
		
	Иначе
		Если ОткрыватьНастройки Тогда
			Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаСтраница1;
		КонецЕсли;
		
		Праздники = Графики.УчитыватьПраздники;
		
		Если ЗначениеЗаполнено(Графики.ШаблонЗаполнения) Тогда
			ПоШаблону = "ПоШаблону";
			НовыйГрафик = "";
			Если Графики.ШаблонЗаполнения = Перечисления.удуШаблонЗаполненияГрафикаРаботы.Пятидневка40
				ИЛИ Графики.ШаблонЗаполнения = Перечисления.удуШаблонЗаполненияГрафикаРаботы.Шестидневка40 Тогда
				Праздники = Истина;
			ИначеЕсли Графики.ШаблонЗаполнения = Перечисления.удуШаблонЗаполненияГрафикаРаботы.КалендарныеДни Тогда
				Праздники = Ложь;
			КонецЕсли;
			ПолеСпискаШаблонов = Графики.ШаблонЗаполнения;
		Иначе
			ПоШаблону = "";
			НовыйГрафик = "Вручную";
		КонецЕсли;
		Ночные = Графики.УчитыватьНочныеЧасы;
		Вечерние = Графики.УчитыватьВечерниеЧасы;
		
		
		
		СокращенноеРабочееВремя = Графики.СокращенноеРабочееВремя;
		
		НеполныйРабочийДень = Графики.НеполныйРабочийДень;
		ГрафикПолногоРабочегоВремени = Графики.ГрафикПолногоРабочегоВремени;
		ПереключательПоТекущемуГрафику = Графики.ГрафикПолногоРабочегоВремени.Пустая();
		
		ДатаОтсчета = Графики.ДатаОтсчета;
		
		ТипГрафика = Графики.ВидГрафика;
		
		ЧасовВНеделе = Графики.ДлительностьРабочейНедели;
		СуммированныйУчет = Графики.СуммированныйУчетРабочегоВремени;
		
		КоличествоПерерывов = 1;
		НачалоДневных = Графики.НачалоДневныхЧасов;
		НачалоВечерних = Графики.НачалоВечернихЧасов;
		НачалоНочных = Графики.НачалоНочныхЧасов;
		
		ОбновитьИнформационнуюСтроку();
	КонецЕсли;
	
	ДоступностьКнопокНазадДалее(Элементы.ГруппаСтраниц.ТекущаяСтраница);
	ЗаполнитьСмены();
	УстановитьДоступностьЭлементовФормы();
	ДоступностьЭлементовНеполноеРабочееВремя();
	ВидимостьНачалаВечерних();
	ВидимостьНачалаНочных();
	ПолеСпискаШаблоновПриИзмененииСервер();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьСервер();
	Если ПроверитьПравильностьЗаполненияГрафика() Тогда
		ВозвращаемыеПараметры=Новый Структура("ПризнакЗаполнить",истина);
		ВозвращаемыеПараметры.Вставить("ОбъектАдрес",ПоместитьВХранилище());
		ЭтаФорма.Закрыть(ВозвращаемыеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ПереключениеСтраниц(Элементы.Назад.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ПереключениеСтраниц(Элементы.Далее.Имя);
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

&НаКлиенте
Процедура ПереключательПоТекущемуГрафикуПриИзменении(Элемент)
	
	ТекущаяСтраница=Элементы.ГруппаСтраниц.ТекущаяСтраница;
	ПереключательПоТекущемуГрафикуПриИзмененииСервер();
    Элементы.ГруппаСтраниц.ТекущаяСтраница=ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШаблонуПриИзменении(Элемент)
	
	ПоШаблону="ПоШаблону";
	НовыйГрафик="";
	УстановитьДоступностьЭлементовФормы();
	СброситьНастройкиГрафиков();
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница=Элементы.ГруппаСтраница1;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйГрафикПриИзменении(Элемент)
	
    ПоШаблону="";
	НовыйГрафик="Вручную";	
	УстановитьДоступностьЭлементовФормы();
	Если ЗначениеЗаполнено(Графики.Ссылка) Тогда
			ТипГрафика = Графики.ВидГрафика;
	КонецЕсли;

	Элементы.ГруппаСтраниц.ТекущаяСтраница=Элементы.ГруппаСтраница1;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСпискаШаблоновПриИзменении(Элемент)
	 ПолеСпискаШаблоновПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВечерниеПриИзменении(Элемент)
	
	ТекущаяСтраница=Элементы.ГруппаСтраниц.ТекущаяСтраница;
	ВидимостьНачалаВечерних();
	УстановитьВидРасписания();
	Элементы.ГруппаСтраниц.ТекущаяСтраница=ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура НочныеПриИзменении(Элемент)
	
	ТекущаяСтраница=Элементы.ГруппаСтраниц.ТекущаяСтраница;
	ВидимостьНачалаНочных();
	УстановитьВидРасписания();
	Элементы.ГруппаСтраниц.ТекущаяСтраница=ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура СокращенноеРабочееВремяПриИзменении(Элемент)
	
	ТекущаяСтраница=Элементы.ГруппаСтраниц.ТекущаяСтраница;
	ДоступностьЭлементовНеполноеРабочееВремя();
	УстановитьЗначениеВидаНеполногоРабочегоВремени();
    Элементы.ГруппаСтраниц.ТекущаяСтраница=ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеСменныйСменаПриИзменении(Элемент)
	
	НомерСтроки=Элементы.РасписаниеСменный.ТекущаяСтрока;
	РасписаниеСменныйСменаПриИзмененииСервер(НомерСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеСменныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТЧ=Элементы.РасписаниеСменный.ТекущиеДанные;
		Если Не Копирование И РасписаниеСменный.Количество() > 0 Тогда
			СтрокаТЧ.Смена=РасписаниеСменный[0].Смена;
			СтрокаТЧ.ЧасовВСмене=РасписаниеСменный[0].ЧасовВСмене;
		КонецЕсли;	
		
		СтрокаТЧ.НомерДня = РасписаниеСменный.Количество();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПерерывовПриИзменении(Элемент)
	
	РасписаниеПоЧасамСкрытьПерерывы();
	Для НомерПерерыва = 1 По 5 Цикл
		ПоказыватьПерерыв = НомерПерерыва <= КоличествоПерерывов;
		Элементы.РасписаниеПоЧасам.ПодчиненныеЭлементы.Найти("РасписаниеПоЧасамГруппаПерерыв"+НомерПерерыва).Видимость = ПоказыватьПерерыв;
		Если НомерПерерыва > КоличествоПерерывов Тогда
			Для Каждого СтрокаРасписанияПоЧасам Из РасписаниеПоЧасам Цикл
				СтрокаРасписанияПоЧасам["НачалоПерерыва" + НомерПерерыва] = Дата(1,1,1);
				СтрокаРасписанияПоЧасам["ОкончаниеПерерыва" + НомерПерерыва] = Дата(1,1,1);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамНачалоПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамОкончаниеПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамНачалоПерерыва1ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамОкончаниеПерерыва1ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамНачалоПерерыва2ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамОкончаниеПерерыва2ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамНачалоПерерыва3ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамОкончаниеПерерыва3ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамНачалоПерерыва4ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамОкончаниеПерерыва4ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамНачалоПерерыва5ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамОкончаниеПерерыва5ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоЧасамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование И РасписаниеПоЧасам.Количество() > 0 Тогда
		 НомерСтроки=Элементы.РасписаниеПоЧасам.ТекущаяСтрока;
         ЗаполнитьЗначенияСвойств(РасписаниеПоЧасам[НомерСтроки], РасписаниеПоЧасам[0],,"ДеньНедели");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НеполныйРабочийДеньПриИзменении(Элемент)
	УстановитьЗначениеВидаНеполногоРабочегоВремени();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Модифицированность = Ложь;
КонецПроцедуры








