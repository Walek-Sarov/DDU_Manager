
&НаСервере
Функция ПоместитьВХранилище() 
	Возврат ПоместитьВоВременноеХранилище(Объект, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПолучитьИзХранилища(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
		
КонецФункции





////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Процедура формирует таблицу для вывода графика
//
Процедура СформироватьТаблицуГрафика()
	
	// Заполнение месяцев
	
	ДатаМесяца = НачалоГода(ТекущаяДата());
	
	Для НомерМесяца = 1 По 12 Цикл
		
		НоваяСтрока = КалендарьНаборЗаписей.Добавить();
		НоваяСтрока.Месяц = Формат(ДатаМесяца, "ДФ=""ММММ""");
		НоваяСтрока.НомерМесяца = НомерМесяца;
		
		ДатаМесяца = ДобавитьМесяц(ДатаМесяца, 1);
		
		НоваяСтрока.ЧасовЗаДень="Часов за день";
		НоваяСтрока.ИзНихВечерних="Из них вечерних";
		НоваяСтрока.ИзНихНочных="Из них ночных";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура очищает записи таблицы графика
//
Процедура КалендарьНаборЗаписейОчистить()
	Для Каждого СтрокаТаблицы Из КалендарьНаборЗаписей Цикл
		Для НомерДня = 1 По 31 Цикл
			СтрокаТаблицы["День" + НомерДня] = 0;
			СтрокаТаблицы["ВЧ" + НомерДня] = 0;
			СтрокаТаблицы["НЧ" + НомерДня] = 0;
		КонецЦикла;
		СтрокаТаблицы.ЧасовЗаМесяц = 0;
		СтрокаТаблицы.ВечернихЧасовЗаМесяц = 0;
		СтрокаТаблицы.НочныхЧасовЗаМесяц = 0;
		СтрокаТаблицы.ДнейЗаМесяц = 0;
	КонецЦикла;
КонецПроцедуры // КалендарьНаборЗаписейОчистить()

&НаСервере
// Процедура устанавливает видимость ячеек с вечерними и ночными часами
//
Процедура ОбновитьВидимостьНочныхИВечернихКолонок()
	
	Для ИндексКолонки = 1 По 31 Цикл
		Элементы.Найти("КалендарьНаборЗаписейВЧ"+строка(ИндексКолонки)).Видимость = ПоказыватьВечерниеКолонки;
		Элементы.Найти("КалендарьНаборЗаписейНЧ"+строка(ИндексКолонки)).Видимость = ПоказыватьНочныеКолонки;
	КонецЦикла;
	
	Элементы.КалендарьНаборЗаписейВечернихЧасовЗаМесяц.Видимость = ПоказыватьВечерниеКолонки;
	Элементы.КалендарьНаборЗаписейНочныхЧасовЗаМесяц.Видимость = ПоказыватьНочныеКолонки;
	
	Элементы.КалендарьНаборЗаписейЧасовЗаДень.Видимость = ПоказыватьВечерниеКолонки ИЛИ ПоказыватьНочныеКолонки;
	Элементы.КалендарьНаборЗаписейИзНихВечерних.Видимость = ПоказыватьВечерниеКолонки;
	Элементы.КалендарьНаборЗаписейИзНихНочных.Видимость = ПоказыватьНочныеКолонки;
	
КонецПроцедуры // ОбновитьВидимостьНочныхИВечернихКолонок()

&НаСервере
// Процедура обновляет строку, содержащую описание текущего графика
//
Процедура ОбновитьИнформационнуюСтроку()
	ИнфСтрока = "";
	Если Объект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни Тогда
		ИнфСтрока = ИнфСтрока + "График по календарным дням. ";
	ИначеЕсли Объект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка 
		И Объект.ПериодыСмены.Количество() = 5
		И Объект.ПериодыСмены[0].ДеньНедели = Перечисления.ДниНедели.Понедельник И Объект.ПериодыСмены[0].ВремяНачала = Дата(1,1,1,8,0,0) И Объект.ПериодыСмены[0].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Объект.ПериодыСмены[1].ДеньНедели = Перечисления.ДниНедели.Вторник И Объект.ПериодыСмены[1].ВремяНачала = Дата(1,1,1,8,0,0) И Объект.ПериодыСмены[1].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Объект.ПериодыСмены[2].ДеньНедели = Перечисления.ДниНедели.Среда И Объект.ПериодыСмены[2].ВремяНачала = Дата(1,1,1,8,0,0) И Объект.ПериодыСмены[2].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Объект.ПериодыСмены[3].ДеньНедели = Перечисления.ДниНедели.Четверг И Объект.ПериодыСмены[3].ВремяНачала = Дата(1,1,1,8,0,0) И Объект.ПериодыСмены[3].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Объект.ПериодыСмены[4].ДеньНедели = Перечисления.ДниНедели.Пятница И Объект.ПериодыСмены[4].ВремяНачала = Дата(1,1,1,8,0,0) И Объект.ПериодыСмены[4].ВремяОкончания = Дата(1,1,1,16,0,0) Тогда
		ИнфСтрока = ИнфСтрока + "График пятидневка, 40-часовая рабочая неделя, выходные суббота и воскресенье. ";
	ИначеЕсли Объект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Пятидневка Тогда
		ИнфСтрока = ИнфСтрока + "Вид графика - Пятидневка. ";
	ИначеЕсли Объект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Шестидневка Тогда
		ИнфСтрока = ИнфСтрока + "Вид графика - Шестидневка. ";		
	ИначеЕсли Объект.Смены.Количество() = 3 
		И Объект.Смены[0].Смена = Справочники.удуСмены.Смена24Часа
		И Объект.Смены[1].Смена = Справочники.удуСмены.ПустаяСсылка()
		И Объект.Смены[2].Смена = Справочники.удуСмены.ПустаяСсылка() Тогда
		ИнфСтрока = ИнфСтрока + "График сутки через двое. ";	
		ИнфСтрока = ИнфСтрока + "Дата отсчета - " + Формат(Объект.ДатаОтсчета, "ДЛФ=Д") + ". ";
	ИначеЕсли Объект.Смены.Количество() = 4 
		И Объект.Смены[0].Смена = Справочники.удуСмены.Смена24Часа
		И Объект.Смены[1].Смена = Справочники.удуСмены.ПустаяСсылка()
		И Объект.Смены[2].Смена = Справочники.удуСмены.ПустаяСсылка()
		И Объект.Смены[3].Смена = Справочники.удуСмены.ПустаяСсылка() Тогда
		ИнфСтрока = ИнфСтрока + "График сутки через трое. ";	
		ИнфСтрока = ИнфСтрока + "Дата отсчета - " + Формат(Объект.ДатаОтсчета, "ДЛФ=Д") + ". ";
	ИначеЕсли Объект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.Сменный Тогда
		ИнфСтрока = ИнфСтрока + "Вид графика - Сменный. ";
		ИнфСтрока = ИнфСтрока + "Дата отсчета - " + Формат(Объект.ДатаОтсчета, "ДЛФ=Д") + ". ";
	Иначе	
		ИнфСтрока = ИнфСтрока + "Вид графика - не заполнен. ";
	КонецЕсли;
	
	
	Если Объект.СуммированныйУчетРабочегоВремени Тогда
		ИнфСтрока = ИнфСтрока + "Суммированный учет рабочего времени. ";		
	КонецЕсли;
	Если Объект.СокращенноеРабочееВремя Тогда
		ИнфСтрока = ИнфСтрока + "Сокращенное рабочее время. ";		
	КонецЕсли;
	Если Объект.СокращеннаяРабочаяНеделя Тогда
		ИнфСтрока = ИнфСтрока + "Неполная рабочая неделя. ";		
	КонецЕсли;
	Если Объект.НеполныйРабочийДень Тогда
		ИнфСтрока = ИнфСтрока + "Неполный рабочий день. ";		
	КонецЕсли;
	Если НЕ Объект.ГрафикПолногоРабочегоВремени.Пустая() Тогда
		ИнфСтрока = ИнфСтрока + "График полного рабочего времени: " + Объект.ГрафикПолногоРабочегоВремени + ". ";		
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НачалоДневныхЧасов)
		И (Объект.УчитыватьНочныеЧасы ИЛИ Объект.УчитыватьВечерниеЧасы) Тогда
		ИнфСтрока = ИнфСтрока + "Начало дневных часов: " + Формат(Объект.НачалоДневныхЧасов, "ДФ=Ч:мм") + ". ";		
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НачалоВечернихЧасов)
		И Объект.УчитыватьВечерниеЧасы Тогда
		ИнфСтрока = ИнфСтрока + "Начало вечерних часов: " + Формат(Объект.НачалоВечернихЧасов, "ДФ=Ч:мм") + ". ";		
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НачалоНочныхЧасов)
		И Объект.УчитыватьНочныеЧасы Тогда
		ИнфСтрока = ИнфСтрока + "Начало ночных часов: " + Формат(Объект.НачалоНочныхЧасов, "ДФ=Ч:мм") + ". ";		
	КонецЕсли;
	
	Элементы.ДекорацияПараметрыГрафика.Заголовок = ИнфСтрока;
КонецПроцедуры // ОбновитьИнформационнуюСтроку()

&НаСервере
// Процедура отображает содержимое таблицы для записи в таблице значениий за месяц
Функция ОтразитьГодВНабореЗаписей(ДатаГода, ПрочитатьИзНабораЗаписей = Ложь)
	
	
	
	КалендарьНаборЗаписейОчистить();
	ДатаНачалаГода = НачалоГода(ДатаГода);
	ДатаКонцаГода = КонецГода(ДатаГода);
	Если ПрочитатьИзНабораЗаписей тогда
		// если не нашли в таблице, тогда прочитаем из регистра сведений
		ТЗ=ДанныеФормыВЗначение(ТаблицаДляЗаписи,Тип("ТаблицаЗначений"));
		Справочники.удуГрафикиРаботы.ЗаполнитьТаблицуЗаИнтервал(Объект.Ссылка,ТЗ,ДатаНачалаГода, ДатаКонцаГода);
		ЗначениеВДанныеФормы(ТЗ,ТаблицаДляЗаписи);
	КонецЕсли;
	
	ПоказыватьНочныеКолонки = Объект.УчитыватьНочныеЧасы;
	ПоказыватьВечерниеКолонки = Объект.УчитыватьВечерниеЧасы;
	КоличествоНаденныхДат = 0;
	
	Для Каждого СтрокаТаблицыДляЗаписи Из ТаблицаДляЗаписи Цикл
		Если СтрокаТаблицыДляЗаписи.Дата >= ДатаНачалаГода
			И СтрокаТаблицыДляЗаписи.Дата <= ДатаКонцаГода Тогда
			
			ТекущийМесяц = Месяц(СтрокаТаблицыДляЗаписи.Дата);
			ТекущийДень  = День(СтрокаТаблицыДляЗаписи.Дата);
			
			КалендарьНаборЗаписей[ТекущийМесяц-1]["День" + ТекущийДень] = СтрокаТаблицыДляЗаписи.Часы;
			КалендарьНаборЗаписей[ТекущийМесяц-1].ЧасовЗаМесяц = КалендарьНаборЗаписей[ТекущийМесяц-1].ЧасовЗаМесяц + СтрокаТаблицыДляЗаписи.Часы;
			Если СтрокаТаблицыДляЗаписи.Часы > 0 Тогда
				КалендарьНаборЗаписей[ТекущийМесяц-1].ДнейЗаМесяц = КалендарьНаборЗаписей[ТекущийМесяц-1].ДнейЗаМесяц + 1;
			КонецЕсли;
			
			КалендарьНаборЗаписей[ТекущийМесяц-1]["ВЧ" + ТекущийДень] = СтрокаТаблицыДляЗаписи.ВечерниеЧасы;
			КалендарьНаборЗаписей[ТекущийМесяц-1].ВечернихЧасовЗаМесяц = КалендарьНаборЗаписей[ТекущийМесяц-1].ВечернихЧасовЗаМесяц + СтрокаТаблицыДляЗаписи.ВечерниеЧасы;
			
			КалендарьНаборЗаписей[ТекущийМесяц-1]["НЧ" + ТекущийДень] = СтрокаТаблицыДляЗаписи.НочныеЧасы;
			КалендарьНаборЗаписей[ТекущийМесяц-1].НочныхЧасовЗаМесяц = КалендарьНаборЗаписей[ТекущийМесяц-1].НочныхЧасовЗаМесяц + СтрокаТаблицыДляЗаписи.НочныеЧасы;
			
			ПоказыватьВечерниеКолонки = ПоказыватьВечерниеКолонки ИЛИ СтрокаТаблицыДляЗаписи.ВечерниеЧасы > 0;
			ПоказыватьНочныеКолонки = ПоказыватьНочныеКолонки ИЛИ СтрокаТаблицыДляЗаписи.НочныеЧасы > 0;
			КоличествоНаденныхДат = КоличествоНаденныхДат + 1;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьВидимостьНочныхИВечернихКолонок();
	
	Возврат КоличествоНаденныхДат;
КонецФункции

&НаСервере
// Процедура управляет доступностью реквизитов формы 
Процедура УстановитьДоступностьРеквизитов()
	
	Элементы.КалендарьНаборЗаписей.ТолькоПросмотр = (Объект.ВидГрафика = Перечисления.удуВидыРабочихГрафиков.КалендарныеДни);
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ДекорацияСсылкаИзменитьПараметрыЗаполнения.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияСсылкаИзменитьПараметрыЗаполнения.Видимость = Истина;
	КонецЕсли;
	
	
КонецПроцедуры //УстановитьДоступностьРеквизитов

&НаСервере
Процедура УсловноеОформлениеГрафикаСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год",НомерТекущегоГода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня,
	|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели,
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК Месяц
	|ИЗ
	|	РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = &Год
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИТОГИ ПО
	|	Месяц";
	
	Результат = Запрос.Выполнить();
	Данные = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	УсловноеОформление.Элементы.Очистить();
		
	Для Каждого СтрокаТЧ из КалендарьНаборЗаписей цикл
		ИтогоДней 	  = 0;
		ИтогоЧасов    = 0;
		ИтогоВечерних = 0;
		ИтогоНочных   = 0;
		
		ТекущийМесяц = НачалоМесяца(Дата(НомерТекущегоГода, СтрокаТЧ.НомерМесяца, 1));
		КоличествоДнейВМесяце = День(КонецМесяца(Дата(НомерТекущегоГода, СтрокаТЧ.НомерМесяца, 1)));
		ДеньНеделиМесяца = ДеньНедели(НачалоМесяца(ТекущийМесяц));
		ЭлементУОЛишниеДни=УсловноеОформление.Элементы.Добавить();
		ЭлементУОЛишниеДни.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",истина);
		ЭлементУОЛишниеДни.Оформление.УстановитьЗначениеПараметра("ЦветФона",ФонНедоступнойСтрокиДокумента);
		ЭлементУсловия=ЭлементУОЛишниеДни.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписей.НомерМесяца");
		ЭлементУсловия.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.ПравоеЗначение=СтрокаТЧ.НомерМесяца;
		
		ЭлементУОвыходной=УсловноеОформление.Элементы.Добавить();
		ЭлементУОвыходной.Оформление.УстановитьЗначениеПараметра("ЦветФона",БледноКрасныйЦвет);
		ЭлементУсловия=ЭлементУОвыходной.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписей.НомерМесяца");
		ЭлементУсловия.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.ПравоеЗначение=СтрокаТЧ.НомерМесяца;
		
		ДанныеМесяц=Данные.Строки.Найти(СтрокаТЧ.НомерМесяца,"Месяц");
		
		Для НомерДня = 1 По 31 Цикл
			
			ЗначениеЯчейки = СтрокаТЧ["День"+НомерДня];
			Если не ЗначениеЯчейки = 0 Тогда
				
				ИтогоДней = ИтогоДней + 1;
				ИтогоЧасов = ИтогоЧасов + ЗначениеЯчейки;
			КонецЕсли;
			
			ЗначениеЯчейки = СтрокаТЧ["ВЧ"+НомерДня];
			Если не ЗначениеЯчейки = 0 Тогда
				ИтогоВечерних = ИтогоВечерних + ЗначениеЯчейки;
			КонецЕсли;
			
			ЗначениеЯчейки = СтрокаТЧ["НЧ"+НомерДня];
			Если ЗначениеЯчейки <> 0 Тогда
				
				ИтогоНочных = ИтогоНочных + ЗначениеЯчейки;
			КонецЕсли;
			
			
			Если НомерДня > КоличествоДнейВМесяце Тогда
				ОформляемоеПоле=ЭлементУОЛишниеДни.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейДень"+НомерДня);
				ОформляемоеПоле=ЭлементУОЛишниеДни.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейВЧ"+НомерДня);
				ОформляемоеПоле=ЭлементУОЛишниеДни.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейНЧ"+НомерДня);			
			Иначе
				
				Если не ДанныеМесяц=Неопределено и ДанныеМесяц.Строки.Количество() > 0 Тогда
					ВидДня = ДанныеМесяц.Строки[НомерДня - 1].ВидДня;
					Если ВидДня = Перечисления.удуВидыДнейПроизводственногоКалендаря.Воскресенье 
						Или ВидДня = Перечисления.удуВидыДнейПроизводственногоКалендаря.Суббота 
						Или ВидДня = Перечисления.удуВидыДнейПроизводственногоКалендаря.Праздник Тогда
						ОформляемоеПоле=ЭлементУОвыходной.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейДень"+НомерДня);
						ОформляемоеПоле=ЭлементУОвыходной.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейВЧ"+НомерДня);
						ОформляемоеПоле=ЭлементУОвыходной.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейНЧ"+НомерДня);	
					КонецЕсли;
				Иначе
					Если ДеньНеделиМесяца = 6 Или ДеньНеделиМесяца = 7 Тогда
						ОформляемоеПоле=ЭлементУОвыходной.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейДень"+НомерДня);
						ОформляемоеПоле=ЭлементУОвыходной.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейВЧ"+НомерДня);
						ОформляемоеПоле=ЭлементУОвыходной.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("КалендарьНаборЗаписейНЧ"+НомерДня);
					КонецЕсли;
				КонецЕсли;
				
				
				
			КонецЕсли;
			ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
		КонецЦикла;
		
		СтрокаТЧ.ДнейЗаМесяц=ИтогоДней;
		СтрокаТЧ.ЧасовЗаМесяц=ИтогоЧасов;
		СтрокаТЧ.ВечернихЧасовЗаМесяц=ИтогоВечерних;
		СтрокаТЧ.НочныхЧасовЗаМесяц=ИтогоНочных;
		
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
// Функция проверяет, заполнен ли график на указанный в форме год.
Функция ПроверитьЗаполненностьГрафика(ТекущийГод)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикРаботы", Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоГода",НачалоГода(ТекущийГод));
	Запрос.УстановитьПараметр("КонецГода",КонецГода(ТекущийГод));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение
	|ИЗ
	|	РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ &НачалоГода И &КонецГода
	|	И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ОсновноеЗначение > 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Процедура пересчитывает итоговые ячейки таблицы значений, после изменения
// значений в ячейках.
//
Процедура ПересчитатьИтогиПоСтроке(НомерПересчитываемогоМесяца)
	
	ИтогоДней = 0;
	ИтогоЧасов = 0;
	ИтогоВечерних = 0;
	ИтогоНочных = 0;
	
	ТЗ=ДанныеФормыВЗначение(КалендарьНаборЗаписей,Тип("ТаблицаЗначений"));
	ПересчитываемаяСтрока=ТЗ.Найти(НомерПересчитываемогоМесяца,"НомерМесяца");
	Если ПересчитываемаяСтрока=Неопределено тогда
		 Возврат;
	КонецЕсли;
	
	Для НомерДня = 1 По 31 Цикл
		
		ЗначениеЯчейки = ПересчитываемаяСтрока["День"+НомерДня];
		Если ЗначениеЯчейки <> 0 Тогда
			ИтогоДней = ИтогоДней + 1;
			ИтогоЧасов = ИтогоЧасов + ЗначениеЯчейки;
		КонецЕсли;
		
		ЗначениеЯчейки = ПересчитываемаяСтрока["ВЧ"+НомерДня];
		Если ЗначениеЯчейки <> 0 Тогда
			ИтогоВечерних = ИтогоВечерних + ЗначениеЯчейки;
		КонецЕсли;
		
		ЗначениеЯчейки = ПересчитываемаяСтрока["НЧ"+НомерДня];
		Если ЗначениеЯчейки <> 0 Тогда
			ИтогоНочных = ИтогоНочных + ЗначениеЯчейки;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитываемаяСтрока.ВечернихЧасовЗаМесяц = ИтогоВечерних;
	ПересчитываемаяСтрока.НочныхЧасовЗаМесяц = ИтогоНочных;
	ПересчитываемаяСтрока.ДнейЗаМесяц = ИтогоДней;
	ПересчитываемаяСтрока.ЧасовЗаМесяц = ИтогоЧасов;
	ЗначениеВДанныеФормы(ТЗ,КалендарьНаборЗаписей);
	
КонецПроцедуры // ПересчитатьИтогиПоСтроке()	

&НаСервере
// Процедура заполняет график по заданным параметрам
//
Процедура ЗаполнитьГрафикСервер(ТекущийГод)
	
	НомерТекущегоГодаПриИзмененииСервер();
	Отказ = Ложь;
	Если ПроверитьЗаполненностьГрафика(ТекущийГод)Тогда
		
	КонецЕсли;
	
	Если Не Отказ Тогда	
		Записать();
		Справочники.удуГрафикиРаботы.ПоместитьТаблицуВТаблицуДляЗаписи(КалендарьНаборЗаписей, ТаблицаДляЗаписи, НачалоГода(ТекущийГод), КонецГода(ТекущийГод));
		ДатаНачалаИнтервала    	= НачалоГода(ТекущийГод);
		ДатаОкончанияИнтервала  = КонецГода(ТекущийГод);
		Справочники.удуГрафикиРаботы.АвтозаполнениеКалендаря(ЭтаФорма,Объект,ТекущийГод,ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
		ДатаМесяца = ДатаНачалаИнтервала;
		СоответствиеИнтервалыРедактирования=ПолучитьИзХранилища(СоответствиеИнтервалыРедактированияАдрес);
		Пока ДатаМесяца <= ДатаОкончанияИнтервала Цикл
			СоответствиеИнтервалыРедактирования.Вставить(ДатаМесяца, Истина);
			ДатаМесяца = ДобавитьМесяц(ДатаМесяца, 1);
		КонецЦикла;
		СоответствиеИнтервалыРедактированияАдрес=ПоместитьВоВременноеХранилище(СоответствиеИнтервалыРедактирования, УникальныйИдентификатор);
		ОтразитьГодВНабореЗаписей(ДатаНачалаИнтервала);
		
		УстановитьДоступностьРеквизитов();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомерТекущегоГодаПриИзмененииСервер()
	
	  Если ДанныеКалендаряИзменены Тогда
		// запомним текущие данные в таблице для записи
		СоответствиеИнтервалыРедактирования=ПолучитьИзХранилища(СоответствиеИнтервалыРедактированияАдрес);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 1, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 2, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 3, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 4, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 5, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 6, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 7, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 8, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 9, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 10, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 11, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(Год(ТекущийГод), 12, 1), Истина);
		СоответствиеИнтервалыРедактированияАдрес=ПоместитьВоВременноеХранилище(СоответствиеИнтервалыРедактирования, УникальныйИдентификатор);
		
		Справочники.удуГрафикиРаботы.ПоместитьТаблицуВТаблицуДляЗаписи(КалендарьНаборЗаписей, ТаблицаДляЗаписи, НачалоГода(ТекущийГод), КонецГода(ТекущийГод));
		ДанныеКалендаряИзменены = Ложь;
	КонецЕсли; 
	
	ТекущийГод = НачалоГода(Дата(НомерТекущегоГода, 1, 1));
	
	Если ОтразитьГодВНабореЗаписей(ТекущийГод) = 0 тогда
		ОтразитьГодВНабореЗаписей(ТекущийГод, Истина);
	КонецЕсли;

	
	
КонецПроцедуры

 &НаСервере
 Процедура ПередЗаписьюСервер()
	 
	Если ДанныеКалендаряИзменены Тогда
		// запомним текущие данные в таблице для записи
		СоответствиеИнтервалыРедактирования=ПолучитьИзХранилища(СоответствиеИнтервалыРедактированияАдрес);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 1, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 2, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 3, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 4, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 5, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 6, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 7, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 8, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 9, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 10, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 11, 1), Истина);
		СоответствиеИнтервалыРедактирования.Вставить(Дата(НомерТекущегоГода, 12, 1), Истина);
		СоответствиеИнтервалыРедактированияАдрес=ПоместитьВоВременноеХранилище(СоответствиеИнтервалыРедактирования, УникальныйИдентификатор);
		
		Справочники.удуГрафикиРаботы.ПоместитьТаблицуВТаблицуДляЗаписи(КалендарьНаборЗаписей, ТаблицаДляЗаписи, НачалоГода(ТекущийГод), КонецГода(ТекущийГод));
		ДанныеКалендаряИзменены = Ложь;
	КонецЕсли; 

КонецПроцедуры

 &НаСервере
 Процедура ЗаполнитьОбъект(АдресОбъекта)
	 
	КопироватьДанныеФормы(ПолучитьИзХранилища(АдресОбъекта),Объект);
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьГрафик(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОтсчета) 
		Тогда ДатаОтсчета = ТекущийГод;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АдресВХранилище=ПоместитьВХранилище();
		ФормаЗаполнить = ПолучитьФорму("Справочник.удуГрафикиРаботы.Форма.ФормаЗаполнить",Новый Структура("АдресВХранилище",АдресВХранилище),ЭтаФорма);
		ЗначениеВозврата = ФормаЗаполнить.ОткрытьМодально();
		Если не ЗначениеВозврата = Неопределено и ТипЗнч(ЗначениеВозврата)=Тип("Структура") Тогда
			ПризнакЗаполнить=Ложь;
			Если ЗначениеВозврата.Свойство("ПризнакЗаполнить", ПризнакЗаполнить) тогда 
			АдресОбъекта=ЗначениеВозврата.ОбъектАдрес;
			ЗаполнитьОбъект(АдресОбъекта);
			ЗаполнитьГрафикСервер(ТекущийГод);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаполнитьГрафикСервер(ТекущийГод);
	КонецЕсли;
	УсловноеОформлениеГрафикаСервер();
	ОбновитьИнформационнуюСтроку();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьТаблицуГрафика();
	
	ТекущийГод = НачалоГода(ТекущаяДата());
	НомерТекущегоГода = Год(ТекущийГод);
	ОтразитьГодВНабореЗаписей(ТекущийГод, Истина);
	
	ДанныеКалендаряИзменены = Ложь;
	ОбновитьИнформационнуюСтроку();
	
	УстановитьДоступностьРеквизитов();
	
	ФонНедоступнойСтрокиДокумента=WebЦвета.СеребристоСерый;
	БледноКрасныйЦвет = Новый Цвет(255, 235, 235);
	СоответствиеИнтервалыРедактирования = Новый Соответствие;
	СоответствиеИнтервалыРедактированияАдрес=ПоместитьВоВременноеХранилище(СоответствиеИнтервалыРедактирования, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.КалендарьНаборЗаписейЧасовЗаДень.Видимость = Ложь;
	УсловноеОформлениеГрафикаСервер();
	
КонецПроцедуры

 &НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено наименование графика работы!");
	КонецЕсли;
	
	ПередЗаписьюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	 мДлинаСуток = 86400; // в секундах
	 
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		мСокращенноеРабочееВремя = ТекущийОбъект.СокращенноеРабочееВремя;
		мГрафикПолногоРабочегоВремени = ТекущийОбъект.ГрафикПолногоРабочегоВремени;
		СоответствиеИнтервалыРедактирования=ПолучитьИзХранилища(СоответствиеИнтервалыРедактированияАдрес);
		
		МассивМесяцев = Новый Массив;
		Для каждого Элемент Из СоответствиеИнтервалыРедактирования Цикл
			МассивМесяцев.Добавить(Элемент.Ключ)
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивМесяцев", МассивМесяцев);
		Запрос.УстановитьПараметр("парамТекущийГрафик", ТекущийОбъект.Ссылка);
		
		// Получим таблицу сведений о производственном календаре за нужные месяцы.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		|	РегламентированныйПроизводственныйКалендарь.Пятидневка,
		|	РегламентированныйПроизводственныйКалендарь.Шестидневка,
		|	РегламентированныйПроизводственныйКалендарь.КалендарныеДни,
		|	РегламентированныйПроизводственныйКалендарь.ВидДня
		|ИЗ
		|	РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) В (&МассивМесяцев)";
		
		ПроизводственныйКалендарь = Запрос.Выполнить().Выгрузить();
		ПроизводственныйКалендарь.Индексы.Добавить("ДатаКалендаря");
		
		УсловнаяПродолжительностьДня = ТекущийОбъект.ДлительностьРабочейНедели / 5;
		// запишем отредактированные месяцы
		Для каждого Элемент из СоответствиеИнтервалыРедактирования Цикл
			
			ДатаИзСписка = Элемент.Ключ;
			
			ДатаНачалаИнтервалаИзСписка  = НачалоМесяца(ДатаИзСписка);
			ДатаОкончанияИнтервалаИзСписка = КонецМесяца(ДатаИзСписка);
			
			ДнейВИнтервале = Окр((ДатаОкончанияИнтервалаИзСписка - ДатаНачалаИнтервалаИзСписка) / мДлинаСуток);
			
			НаборЗаписейЗаДеньПоВремени = РегистрыСведений.удуГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
			НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение       = ТекущийОбъект.Ссылка;
			НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование  = Истина;
			НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Значение     	      = ДатаНачалаИнтервалаИзСписка;
			НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Использование         = Истина;
			НаборЗаписейЗаДеньПоВремени.Отбор.План.Значение				  = Истина;
			НаборЗаписейЗаДеньПоВремени.Отбор.План.Использование		  = Истина;
			СтруктураПоиска   = Новый Структура("Дата");
			
			Для инд = 0 по ДнейВИнтервале - 1 Цикл
				ИтогоЧасовВсего    = 0;
				ИтогоЧасовВечерних = 0;
				ИтогоЧасовНочных   = 0;
				
				индДата = ДатаНачалаИнтервалаИзСписка + инд * мДлинаСуток;
				
				СтруктураПоиска.Дата = индДата;
				НайденныеСтроки      = ТаблицаДляЗаписи.НайтиСтроки(СтруктураПоиска);
				// выбрали строки по дате, теперь будем их записывать
				Для каждого СтрокаТаблицаДляЗаписи   из НайденныеСтроки   Цикл
					
					КоличествоЧасовВсего     = СтрокаТаблицаДляЗаписи.Часы;
					КоличествоЧасовВечерних  = СтрокаТаблицаДляЗаписи.ВечерниеЧасы;
					КоличествоЧасовНочных    = СтрокаТаблицаДляЗаписи.НочныеЧасы;
					
					ИтогоЧасовВсего     = ИтогоЧасовВсего    + КоличествоЧасовВсего;
					ИтогоЧасовВечерних  = ИтогоЧасовВечерних + КоличествоЧасовВечерних;
					ИтогоЧасовНочных    = ИтогоЧасовНочных   + КоличествоЧасовНочных;
					
				КонецЦикла;
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы      = ТекущийОбъект.Ссылка;
				ЗаписьПоВУВ.План			  = Истина;
				ЗаписьПоВУВ.Месяц			  = ДатаНачалаИнтервалаИзСписка;
				ЗаписьПоВУВ.ВидУчетаВремени   = Перечисления.удуВидыУчетаВремени.ПоДням;
				ЗаписьПоВУВ.Дата     = индДата;
				ЗаписьПоВУВ.ОсновноеЗначение  = ?(ИтогоЧасовВсего > 0, 1, 0);
				ЗаписьПоВУВ.ДополнительноеЗначение = ИтогоЧасовВсего;
				ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = Справочники.удуГрафикиРаботы.ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Пятидневка",   ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневкаЧасы = УсловнаяПродолжительностьДня * ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка;
				ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = Справочники.удуГрафикиРаботы.ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Шестидневка",  ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = Справочники.удуГрафикиРаботы.ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "КалендарныеДни", ПроизводственныйКалендарь);
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы          = ТекущийОбъект.Ссылка;
				ЗаписьПоВУВ.План				  = Истина;
				ЗаписьПоВУВ.Месяц			 	  = ДатаНачалаИнтервалаИзСписка;
				ЗаписьПоВУВ.ВидУчетаВремени       = Перечисления.удуВидыУчетаВремени.ПоЧасам;
				ЗаписьПоВУВ.Дата    			  = индДата;
				ЗаписьПоВУВ.ОсновноеЗначение      = ИтогоЧасовВсего;
				ЗаписьПоВУВ.ДополнительноеЗначение = ?(ИтогоЧасовВсего > 0, 1, 0);
				ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = Справочники.удуГрафикиРаботы.ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Пятидневка",   ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневкаЧасы = УсловнаяПродолжительностьДня * ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка;
				ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = Справочники.удуГрафикиРаботы.ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Шестидневка",  ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = Справочники.удуГрафикиРаботы.ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "КалендарныеДни", ПроизводственныйКалендарь);
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы      = ТекущийОбъект.Ссылка;
				ЗаписьПоВУВ.План			  = Истина;
				ЗаписьПоВУВ.Месяц			  = ДатаНачалаИнтервалаИзСписка;
				ЗаписьПоВУВ.ВидУчетаВремени   = Перечисления.удуВидыУчетаВремени.ПоВечернимЧасам;
				ЗаписьПоВУВ.Дата    		  = индДата;
				ЗаписьПоВУВ.ОсновноеЗначение  = ИтогоЧасовВечерних;
				// ПроизводственныйКалендарьПятидневка 
				// ПроизводственныйКалендарьШестиДневка
				// ПроизводственныйКалендарьКалендарныеДни
				// ДополнительноеЗначение
				// ОсновноеЗначениеНорма
				// ДополнительноеЗначениеНорма
				// не записываются для ПоВечернимЧасам
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы      = ТекущийОбъект.Ссылка;
				ЗаписьПоВУВ.План			  = Истина;
				ЗаписьПоВУВ.Месяц			  = ДатаНачалаИнтервалаИзСписка;
				ЗаписьПоВУВ.ВидУчетаВремени   = Перечисления.удуВидыУчетаВремени.ПоНочнымЧасам;
				ЗаписьПоВУВ.Дата     = индДата;
				ЗаписьПоВУВ.ОсновноеЗначение  = ИтогоЧасовНочных;
				// ПроизводственныйКалендарьПятидневка 
				// ПроизводственныйКалендарьШестиДневка
				// ПроизводственныйКалендарьКалендарныеДни
				// ДополнительноеЗначение
				// ОсновноеЗначениеНорма
				// ДополнительноеЗначениеНорма
				// не записываются для ПоНочнымЧасам
				
			КонецЦикла;
			
			НаборЗаписейЗаДеньПоВремени.Записать(Истина);
			НаборЗаписейЗаДеньПоВремени.Очистить();
		КонецЦикла;
		
		ОбновлятьВесьНаборЗаписейКалендаря = (мСокращенноеРабочееВремя И Не мГрафикПолногоРабочегоВремени.Пустая()) Или (ТекущийОбъект.СокращенноеРабочееВремя И Не ТекущийОбъект.ГрафикПолногоРабочегоВремени.Пустая());
		// переписываем норму времени в остальных месяцах календаря
		Если ОбновлятьВесьНаборЗаписейКалендаря Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГрафикиРаботыПоВидамВремени.Месяц
			|ИЗ
			|	РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|ГДЕ
			|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &парамТекущийГрафик
			|	И (НЕ ГрафикиРаботыПоВидамВремени.Месяц В (&МассивМесяцев))";
			
			Выборка = Запрос.Выполнить().Выбрать();
			НаборЗаписейЗаДеньПоВремени = РегистрыСведений.удуГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
			НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование  = Истина;
			НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение		  = ТекущийОбъект.Ссылка;
			НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Использование         = Истина;
			
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Значение = Выборка.Месяц;
				НаборЗаписейЗаДеньПоВремени.Прочитать();
				НаборЗаписейЗаДеньПоВремени.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение нормы времени для графиков сокращенного рабочего времени,
		// опирающихся на текущий график как график полного рабочего времени 
		Если Не ТекущийОбъект.СокращенноеРабочееВремя Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы
			|ИЗ
			|	Справочник.удуГрафикиРаботы КАК ГрафикиРаботы
			|ГДЕ
			|	ГрафикиРаботы.ГрафикПолногоРабочегоВремени = &парамТекущийГрафик
			|	И ГрафикиРаботы.СокращенноеРабочееВремя";
			
			ВыборкаГрафик = Запрос.Выполнить().Выбрать();
			
			НаборЗаписейЗаДеньПоВремени = РегистрыСведений.удуГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
			НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование  = Истина;
			НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Использование         = Истина;
			
			// переписываем норму времени для всех графиков сокращенного рабочего времени
			Пока ВыборкаГрафик.Следующий() Цикл
				НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение = ВыборкаГрафик.ГрафикРаботы;
				Для каждого Элемент из СоответствиеИнтервалыРедактирования Цикл
					НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Значение = НачалоМесяца(Элемент.Ключ);
					НаборЗаписейЗаДеньПоВремени.Прочитать();
					НаборЗаписейЗаДеньПоВремени.Записать(Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаДляЗаписи.Очистить();
		СоответствиеИнтервалыРедактирования.Очистить();	
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО  ПОЛЯ КАЛЕНДАРЯ

&НаКлиенте
Процедура КалендарьНаборЗаписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаборЗаписейПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаборЗаписейПередНачаломИзменения(Элемент, Отказ)
	Если День(КонецМесяца(Дата(НомерТекущегоГода, Элемент.ТекущиеДанные.НомерМесяца, 1))) < Число(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "КалендарьНаборЗаписей", ""), "День", ""), "ВЧ", ""), "НЧ", "")) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
 	НомерТекущегоГодаПриИзмененииСервер();
 	УсловноеОформлениеГрафикаСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаборЗаписейДеньПриИзменении(Элемент)
	
	ДанныеКалендаряИзменены = Истина;
	Модифицированность = Истина;
	ПересчитатьИтогиПоСтроке(Элементы.КалендарьНаборЗаписей.ТекущиеДанные.НомерМесяца);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаИзменитьПараметрыЗаполненияНажатие(Элемент)
	
	АдресВХранилище=ПоместитьВХранилище();
	ФормаЗаполнить = ПолучитьФорму("Справочник.удуГрафикиРаботы.Форма.ФормаЗаполнить",Новый Структура("АдресВХранилище",АдресВХранилище),ЭтаФорма);
	ФормаЗаполнить.ОткрыватьНастройки = Истина;
	ЗначениеВозврата = ФормаЗаполнить.ОткрытьМодально();
	
	Если не ЗначениеВозврата = Неопределено и ТипЗнч(ЗначениеВозврата)=Тип("Структура") Тогда
		ПризнакЗаполнить=Ложь;
		Если ЗначениеВозврата.Свойство("ПризнакЗаполнить", ПризнакЗаполнить) тогда 
			АдресОбъекта=ЗначениеВозврата.ОбъектАдрес;
			ЗаполнитьОбъект(АдресОбъекта);
			ЗаполнитьГрафикСервер(ТекущийГод);
		КонецЕсли;

	КонецЕсли;
	УсловноеОформлениеГрафикаСервер();
	ОбновитьИнформационнуюСтроку();
	
КонецПроцедуры



