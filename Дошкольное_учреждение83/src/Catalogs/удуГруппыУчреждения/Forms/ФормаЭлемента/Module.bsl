&НаСервере
Процедура СформироватьТаблицуУкомплектованности()
	РеквизитСведенияОКомплектации.Очистить();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуСведенияОКомплекатцииГруппы.Ребенок,
	               |	удуСведенияОКомплекатцииГруппы.Регистратор
	               |ИЗ
	               |	РегистрСведений.удуСведенияОКомплекатцииГруппы КАК удуСведенияОКомплекатцииГруппы
	               |ГДЕ
	               |	удуСведенияОКомплекатцииГруппы.Группа = &Группа
	               |	И удуСведенияОКомплекатцииГруппы.ПериодКомплектования = &ПериодКомплектования";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Группа", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодКомплектования", ПериодКомплектования);
	
	ВременныйРезультат = Запрос.Выполнить().Выгрузить();
	
	НПП = 0;
	Для Каждого СтрокаРезультата Из ВременныйРезультат Цикл
		НПП = НПП + 1;
		НоваяСтрокаКомплектации = РеквизитСведенияОКомплектации.Добавить();
		НоваяСтрокаКомплектации.ПорядковыйНомер = НПП;
		НоваяСтрокаКомплектации.Ребенок = СтрокаРезультата.Ребенок;
		НоваяСтрокаКомплектации.ДокументКомплектации = СтрокаРезультата.Регистратор;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСоставГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "Ребенок" Тогда
		ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ребенок);
		ОткрытьФормуМодально("Справочник.удуДети.Форма.ФормаЭлемента", ПередаваемыеПараметры, ЭтаФорма);
	ИначеЕсли Поле.Имя = "ОснованиеЗачисления" Тогда
		СтандартнаяОбработка = Ложь;
		ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.ОснованиеЗачисления);
		ОткрытьФормуМодально("Документ.удуДоговорОЗачисленииРебенка.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);
	ИначеЕсли (Поле.Имя = "Регистратор") Тогда
		ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.Регистратор);
		Если ТипЗнч(Элемент.ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.удуПриказОЗачисленииРебенкаВГруппу") Тогда
			ОткрытьФормуМодально("Документ.удуПриказОЗачисленииРебенкаВГруппу.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);		
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.удуПриказОПереводеВДругуюГруппу") Тогда
			ОткрытьФормуМодально("Документ.удуПриказОПереводеВДругуюГруппу.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);		
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика
	ПериодКомплектования = Формат(Год(ТекущаяДата()), "ЧГ=0") + "/" + Формат(Год(ТекущаяДата()) + 1, "ЧГ=0");
	
	
	Элементы.Вместительность.Доступность = Не Объект.БезОграниченияВместительности;
	
	Если Параметры.Свойство("Учреждение") Тогда
		Объект.Учреждение = Параметры.Учреждение;
	КонецЕсли;
	Если Параметры.Свойство("Родитель") Тогда
		Объект.Родитель = Параметры.Родитель;
	КонецЕсли;
	
	// Отбор по учреждению
	Если ЗначениеЗаполнено(Константы.удуОсновноеУчреждение.Получить()) Тогда
		ЭлементОтбораПоУчреждению = РеквизитСоставГруппы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПоУчреждению.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораПоУчреждению.Использование = Истина;
		ЭлементОтбораПоУчреждению.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Учреждение");
		ЭлементОтбораПоУчреждению.ПравоеЗначение = Константы.удуОсновноеУчреждение.Получить();
		ЭлементОтбораПоУчреждению.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	КонецЕсли;  
	
	// Отбор по текущей дате (период)	
	ЭлементОтбораПоГруппе = РеквизитСоставГруппы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПоГруппе.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбораПоГруппе.Использование = Истина;
	ЭлементОтбораПоГруппе.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбораПоГруппе.ПравоеЗначение = ТекущаяДата();
	ЭлементОтбораПоГруппе.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	
	
	// Отбор по группе	
	ЭлементОтбораПоГруппе = РеквизитСоставГруппы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПоГруппе.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораПоГруппе.Использование = Истина;
	ЭлементОтбораПоГруппе.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
	ЭлементОтбораПоГруппе.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбораПоГруппе.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	
	// Отбор по состоянию нахождения в группе
	ЭлементОтбораПоСостоянию = РеквизитСоставГруппы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПоСостоянию.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораПоСостоянию.Использование = Истина;
	ЭлементОтбораПоСостоянию.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеУчетаВГруппе");
	ЭлементОтбораПоСостоянию.ПравоеЗначение = Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу;
	ЭлементОтбораПоСостоянию.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	
	// Отберем сведения о компектации группы
	СформироватьТаблицуУкомплектованности();
КонецПроцедуры

&НаКлиенте
Процедура БезОграниченияВместительностиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Элементы.Вместительность.Доступность = Не Объект.БезОграниченияВместительности;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпискаДетей(Команда)
	// Вставить содержимое обработчика.
	ФормаПечати = ПолучитьФорму("Справочник.удуГруппыУчреждения.Форма.ФормаНастройкиПечати");	
	ФормаПечати.ВладелецФормы = ЭтаФорма;	
	ФормаПечати.ПараметрГруппа = Объект.Ссылка;
	ФормаПечати.ОткрытьМодально();		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Для Каждого СтрокаЭлемент Из РеквизитСоставГруппы.Отбор.Элементы Цикл
		Если Строка(СтрокаЭлемент.ЛевоеЗначение) = "Группа" Тогда
			СтрокаЭлемент.ПравоеЗначение = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;	
	
	СформироватьТаблицуУкомплектованности();
КонецПроцедуры

&НаКлиенте
Процедура ПериодКомплектованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ТекущийГод = Год(ТекущаяДата());
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Формат(ТекущийГод - 1, "ЧГ=0") + "/" + Формат(ТекущийГод, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод, "ЧГ=0") + "/" + Формат(ТекущийГод + 1, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод + 1, "ЧГ=0") + "/" + Формат(ТекущийГод + 2, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод + 2, "ЧГ=0") + "/" + Формат(ТекущийГод + 3, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод + 3, "ЧГ=0") + "/" + Формат(ТекущийГод + 4, "ЧГ=0"));
	
	НайденноеЗначение = СписокВыбора.НайтиПоЗначению(Элемент.ВыделенныйТекст);
	Если НайденноеЗначение <> Неопределено Тогда
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент, НайденноеЗначение);
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ПериодКомплектования = ВыбранноеЗначение.Значение;
		СформироватьТаблицуУкомплектованности();
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСведенияОКомплектацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "РеквизитСведенияОКомплектацииРебенок" Тогда
		ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ребенок);
		ОткрытьФормуМодально("Справочник.удуДети.Форма.ФормаЭлемента", ПередаваемыеПараметры, ЭтаФорма);
	ИначеЕсли (Поле.Имя = "РеквизитСведенияОКомплектацииДокументКомплектации") Тогда
		ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДокументКомплектации);
		ОткрытьФормуМодально("Документ.удуКомплектованиеГруппы.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);		
	КонецЕсли;			
КонецПроцедуры
