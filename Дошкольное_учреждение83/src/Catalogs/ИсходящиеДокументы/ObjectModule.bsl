/// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения, добавление, изменение, удаление: 
	// 		ГрифДоступа И ВидИсходящихДокументов И ГруппаДоступаКорреспондентов
	
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.Чтение          = Истина;
	Строка.Добавление      = Истина;
	Строка.Изменение       = Истина;
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа;
	Строка.ЗначениеДоступа = ГрифДоступа;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ВидыИсходящихДокументов;
	Строка.ЗначениеДоступа = ВидДокумента;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКорреспондентов;
	Строка.ЗначениеДоступа = Получатель;
	
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Организации;
	Строка.ЗначениеДоступа = Организация;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РегистрационныйНомер = "";
	ЧисловойНомер 	= 0;
	ДатаРегистрации	= '00010101';
	ДатаСоздания 	= ТекущаяДата();
	Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
	Подготовил 		= ОбщегоНазначения.ТекущийПользователь();
	
	ПолученОтвет 	= Справочники.ВходящиеДокументы.ПустаяСсылка();
	ВОтветНа 		= Справочники.ВходящиеДокументы.ПустаяСсылка();
	Отправлен 		= Ложь;
	ДатаОтправки	= '00010101';
	СпособОтправки	= Справочники.СпособыДоставки.ПустаяСсылка();
	
	КоличествоЛистов 	 = 1;
	КоличествоПриложений = 0;
	ЛистовВПриложениях 	 = 0;
	Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
	
	Подписал = Справочники.Пользователи.ПустаяСсылка();
	Подразделение = РаботаСПользователями.ПолучитьПодразделение(Подписал);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		
		РегистрационныйНомер = "";
		ЧисловойНомер 	= 0;
		ДатаРегистрации	= '00010101';
		ДатаСоздания 	= ТекущаяДата();
		Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
		Подготовил 		= ОбщегоНазначения.ТекущийПользователь();
		
		ПолученОтвет 	= Справочники.ВходящиеДокументы.ПустаяСсылка();
		ВОтветНа 		= Справочники.ВходящиеДокументы.ПустаяСсылка();
		Отправлен 		= Ложь;
		ДатаОтправки	= '00010101';
		СпособОтправки	= Справочники.СпособыДоставки.ПустаяСсылка();
		
		КоличествоЛистов 	 = 1;
		КоличествоПриложений = 0;
		ЛистовВПриложениях 	 = 0;
		Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		
		СрокИсполнения = '00010101';
		Подписал = Справочники.Пользователи.ПустаяСсылка();
		Подразделение = РаботаСПользователями.ПолучитьПодразделение(Подписал);
		
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 

			ВидДокумента = Делопроизводство.ПолучитьВидДокументаПоУмолчанию(Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
		Если Константы.ИспользоватьГрифыДоступаКВходящимИИсходящимДокументам.Получить() Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;	
		
	КонецЕсли;
	
	// Ввод на основании входящего документа
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Заголовок = "Ответ на """ + ДанныеЗаполнения.Заголовок + """";
		Получатель = ДанныеЗаполнения.Отправитель;
		Адресат = ДанныеЗаполнения.Подписал;
		ВОтветНа = ДанныеЗаполнения.Ссылка;
		ГрифДоступа = ДанныеЗаполнения.ГрифДоступа;
		ПредметПереписки = ДанныеЗаполнения.ПредметПереписки;
	КонецЕсли;	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
		ЗаполнитьПараметрамиВводаНаОсновании(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		Если Не Делопроизводство.РегистрационныйНомерУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Если ЗначениеЗаполнено(Дело) И Организация <> Дело.Организация Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дело не относится к организации документа.'"),
				ЭтотОбъект,
				"Дело",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрамиВводаНаОсновании(ПараметрыВводаНаОсновании) Экспорт
	
	// Ввод на основании с копированием файлов
	Если ТипЗнч(ПараметрыВводаНаОсновании.Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Заголовок = Нстр("ru = 'Отправка: '") + ПараметрыВводаНаОсновании.Основание.Заголовок;
		ГрифДоступа = ПараметрыВводаНаОсновании.ГрифДоступа;
		ВидДокумента = ПараметрыВводаНаОсновании.ВидДокумента;
		ПредметПереписки = ПараметрыВводаНаОсновании.Основание;
		Получатель = ПараметрыВводаНаОсновании.Получатель;
		Подписал = ПараметрыВводаНаОсновании.Основание.Утвердил;
		Организация = ПараметрыВводаНаОсновании.Основание.Организация;
		
		Если ПараметрыВводаНаОсновании.Основание.ВидДокумента.УчетПоКорреспондентам Тогда
			Если Получатель = ПараметрыВводаНаОсновании.Основание.Корреспондент Тогда 
				Адресат = ПараметрыВводаНаОсновании.Основание.КонтактноеЛицо;
			КонецЕсли;	
		КонецЕсли;	
		
		// заполнение "в ответ на"
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВходящиеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ПредметПереписки = &ПредметПереписки
		|	И ВходящиеДокументы.ОтправленОтвет = ЗНАЧЕНИЕ(Справочник.ИсходящиеДокументы.ПустаяСсылка)
		|	И (НЕ ВходящиеДокументы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВходящиеДокументы.ДатаРегистрации УБЫВ";
		Запрос.УстановитьПараметр("ПредметПереписки", ПредметПереписки);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВОтветНа = Выборка.Ссылка;
		КонецЕсли;	
		
		
		Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Ссылка, 
			ТекущаяДата(), 
			Перечисления.СостоянияДокументов.Проект, 
			ОбщегоНазначения.ТекущийПользователь());
		
		Для Каждого Элемент Из ПараметрыВводаНаОсновании.КопироватьФайлы Цикл
			Источник = Элемент.Значение;
			ИсточникОбъект = Источник.ПолучитьОбъект();
			
			ПриемникОбъект = ИсточникОбъект.Скопировать();
			ПриемникОбъект.ВладелецФайла = ЭтотОбъект.Ссылка;
			ПриемникОбъект.Автор = ОбщегоНазначения.ТекущийПользователь();
			ПриемникОбъект.ДатаСоздания = ТекущаяДата();
			ПриемникОбъект.Записать();
			
			Приемник = ПриемникОбъект.Ссылка;
			Если Не Источник.ТекущаяВерсия.Пустая() Тогда
				Версия = РаботаСФайлами.СоздатьВерсию(
				ТекущаяДата(),
				УниверсальноеВремя(ТекущаяДата()),
				Приемник,
				Приемник.Наименование,
				Источник.ТекущаяВерсия.Размер,
				Источник.ТекущаяВерсия.Расширение,
				Источник.ТекущаяВерсия.ФайлХранилище,
				Источник.ТекущаяВерсия.ТекстХранилище,
				Ложь,
				Источник.ТекущаяВерсия);
				
				РаботаСФайлами.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыВводаНаОсновании.Основание) = Тип("СправочникСсылка.Файлы") Тогда
		
		Заголовок = ПараметрыВводаНаОсновании.Основание.ПолноеНаименование;
		ГрифДоступа = ПараметрыВводаНаОсновании.ГрифДоступа;
		ВидДокумента = ПараметрыВводаНаОсновании.ВидДокумента;
		Организация = ПараметрыВводаНаОсновании.Организация;
		Получатель = ПараметрыВводаНаОсновании.Получатель;
		Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Ссылка, 
			ТекущаяДата(), 
			Перечисления.СостоянияДокументов.Проект, 
			ОбщегоНазначения.ТекущийПользователь());
			
			
		Источник = ПараметрыВводаНаОсновании.Основание;
		ИсточникОбъект = Источник.ПолучитьОбъект();
		
		ПриемникОбъект = ИсточникОбъект.Скопировать();
		ПриемникОбъект.ВладелецФайла = ЭтотОбъект.Ссылка;
		ПриемникОбъект.Автор = ОбщегоНазначения.ТекущийПользователь();
		ПриемникОбъект.ДатаСоздания = ТекущаяДата();
		ПриемникОбъект.Записать();
	
		Приемник = ПриемникОбъект.Ссылка;
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			Версия = РаботаСФайлами.СоздатьВерсию(
			ТекущаяДата(),
			УниверсальноеВремя(ТекущаяДата()),
			Приемник.Ссылка,
			Приемник.Наименование,
			Источник.ТекущаяВерсия.Размер,
			Источник.ТекущаяВерсия.Расширение,
			Источник.ТекущаяВерсия.ФайлХранилище,
			Источник.ТекущаяВерсия.ТекстХранилище,
			Ложь,
			Источник.ТекущаяВерсия);
		
			РаботаСФайлами.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = Делопроизводство.НаименованиеДокумента(ЭтотОбъект);
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда 
		РаботаСФайлами.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Очистим "отправлен ответ", если "в ответ на" было изменено 
	Если ЗначениеЗаполнено(Ссылка.ВОтветНа) И (Ссылка.ВОтветНа <> ВОтветНа) Тогда 
		
		ВОтветНаОбъект = Ссылка.ВОтветНа.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ВОтветНаОбъект.Ссылка);
		ВОтветНаОбъект.ОтправленОтвет = Справочники.ИсходящиеДокументы.ПустаяСсылка();
		ВОтветНаОбъект.Записать();	
		
	КонецЕсли;	
	
	// Заполним реквизит "отправлен ответ" в документе "в ответ на"
	Если ЗначениеЗаполнено(ВОтветНа) И (ВОтветНа.ОтправленОтвет.ДатаРегистрации < ДатаРегистрации) И Отправлен Тогда
		
		ВОтветНаОбъект = ВОтветНа.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ВОтветНаОбъект.Ссылка);
		ВОтветНаОбъект.ОтправленОтвет = Ссылка;
		ВОтветНаОбъект.Записать();	
		
	КонецЕсли;
	
	// Заполним дату начала дела, если не заполнена
	Если ЗначениеЗаполнено(Дело) И Не ЗначениеЗаполнено(Дело.ДатаНачала) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		
		ДелоОбъект = Дело.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ДелоОбъект.Ссылка);
		ДелоОбъект.ДатаНачала = ДатаРегистрации;
		ДелоОбъект.Записать();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Нумерация.ОсвободитьНомерПриУдалении(ЭтотОбъект);
	
КонецПроцедуры


