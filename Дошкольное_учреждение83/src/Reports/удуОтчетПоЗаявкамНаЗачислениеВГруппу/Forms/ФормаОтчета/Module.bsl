&НаСервере
Функция ПолучитьПустуюСсылкуСправочника(ИмяСправочника)
	Если ИмяСправочника = "ВозрастныеСправочники" Тогда
		Возврат Справочники.удуВозрастныеПризнаки.ПустаяСсылка();
	ИначеЕсли ИмяСправочника = "Группа" Тогда
		Возврат Справочники.удуГруппыУчреждения.ПустаяСсылка();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьТекстЗапроса(ПризнакСнятияЗаявки, ОтборПоГруппе, ОтборПоВозрасту)	
	ТекстЗапроса = "ВЫБРАТЬ
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка КАК ЗаявкаСсылка,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер КАК Номер,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата КАК Дата,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь КАК ДатаРегистрацииВОчередь,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ребенок,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаЖелаемая КАК Группа,
	    |	ВЫБОР
	    |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак <> &ПустойПризнак
	    |			ТОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак
	    |		ИНАЧЕ ""<признак не указан>""
	    |	КОНЕЦ КАК ВозрастнойПризнак,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительПодавшийЗаявку,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.НачальнаяДатаЯвкиРодителя,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.КонечнаяДатаЯвкиРодителя,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФактическаяДатаЯвкиРодителя,
		|	ВЫБОР
		|		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакВозможностиНеЗачисления
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ КАК ПризнакВозможностиНеЗачисления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиУведомления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляУведомления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиНаправления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляНаправления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаОтказаВЗачислении,
		|	ПОДСТРОКА(удуЗаявкаНаЗачислениеРебенкаВДОУ.ПричинаОтказаВЗачислении, 0, 100) КАК ПричинаОтказаВЗачислении,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФИОЛицаСнявшегоЗаявку,
		|	МАКСИМУМ(удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Льгота.Приоритетность) КАК Приоритетность
		|ИЗ
		|	Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ КАК удуЗаявкаНаЗачислениеРебенкаВДОУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ.ЛьготыПоЗаявке КАК удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке
		|		ПО удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка = удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Ссылка
		|ГДЕ
		|	(НЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ПометкаУдаления)
		|	И (НЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакЗачисления)";
	
	Если ПризнакСнятияЗаявки Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И (удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакОтказаВЗачислении)"; 
		
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	И (НЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакОтказаВЗачислении)"; 					   
	КонецЕсли; 
	
	Если ОтборПоГруппе Тогда
		ТекстЗапроса = ТекстЗапроса + "	               
		|	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаЖелаемая = &Группа";
	КонецЕсли;				   
	
	Если ОтборПоВозрасту Тогда
		ТекстЗапроса = ТекстЗапроса + "	               
		|	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак = &ВозрастнойПризнак";
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "			   
		|	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаПланируемогоПоступления = &ДатаПланируемогоПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ребенок,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаЖелаемая,
	    |	ВЫБОР
	    |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак <> &ПустойПризнак
	    |			ТОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак
	    |		ИНАЧЕ ""<признак не указан>""
 	    |	КОНЕЦ,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительПодавшийЗаявку,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.НачальнаяДатаЯвкиРодителя,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.КонечнаяДатаЯвкиРодителя,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФактическаяДатаЯвкиРодителя,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиУведомления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляУведомления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиНаправления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляНаправления,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаОтказаВЗачислении,
		|	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФИОЛицаСнявшегоЗаявку,
		|	ВЫБОР
		|		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакВозможностиНеЗачисления
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ,
		|	ПОДСТРОКА(удуЗаявкаНаЗачислениеРебенкаВДОУ.ПричинаОтказаВЗачислении, 0, 100)
		|
	    |УПОРЯДОЧИТЬ ПО
	    |	Приоритетность УБЫВ,
	    |	ДатаРегистрацииВОчередь,
	    |	Номер";	

	Возврат ТекстЗапроса;	
КонецФункции

&НаСервере
Функция СформироватьТекстЗапросаОбработанныхЗаявок(ОтборПоГруппе, ОтборПоВозрасту)	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка КАК ЗаявкаСсылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер КАК Номер,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата КАК Дата,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь КАК ДатаРегистрацииВОчередь,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ребенок,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаПоФактуЗачисления КАК Группа,				   
	               |	ВЫБОР
	               |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак <> &ПустойПризнак
	               |			ТОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак
	               |		ИНАЧЕ ""<признак не указан>""
	               |	КОНЕЦ КАК ВозрастнойПризнак,				   
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительПодавшийЗаявку,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.НачальнаяДатаЯвкиРодителя,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.КонечнаяДатаЯвкиРодителя,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФактическаяДатаЯвкиРодителя,
	               |	ВЫБОР
	               |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакВозможностиНеЗачисления
	               |			ТОГДА ""Да""
	               |		ИНАЧЕ ""Нет""
	               |	КОНЕЦ КАК ПризнакВозможностиНеЗачисления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиУведомления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляУведомления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиНаправления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляНаправления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаОтказаВЗачислении,
	               |	ПОДСТРОКА(удуЗаявкаНаЗачислениеРебенкаВДОУ.ПричинаОтказаВЗачислении, 0, 100) КАК ПричинаОтказаВЗачислении,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФИОЛицаСнявшегоЗаявку,
	               |	МАКСИМУМ(удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Льгота.Приоритетность) КАК Приоритетность,
	               |	удуСведенияОЗачисленииРебенкаВГруппу.Регистратор КАК ПриказОЗачислении
	               |ИЗ
	               |	Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ КАК удуЗаявкаНаЗачислениеРебенкаВДОУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ.ЛьготыПоЗаявке КАК удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке
	               |		ПО удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка = удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу КАК удуСведенияОЗачисленииРебенкаВГруппу
	               |		ПО удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка = удуСведенияОЗачисленииРебенкаВГруппу.ОснованиеЗачисления.ЗаявкаОснование
	               |ГДЕ
	               |	(НЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ПометкаУдаления)
	               |	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакЗачисления";
				   
					Если ОтборПоГруппе Тогда
						ТекстЗапроса = ТекстЗапроса + "	               
						|	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаПоФактуЗачисления = &Группа";
					КонецЕсли;		
					
					Если ОтборПоВозрасту Тогда
						ТекстЗапроса = ТекстЗапроса + "	               
						|	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак = &ВозрастнойПризнак";
					КонецЕсли;					
					
	ТекстЗапроса = ТекстЗапроса + "
	               |	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаПланируемогоПоступления = &ДатаПланируемогоПоступления
	               |	И удуСведенияОЗачисленииРебенкаВГруппу.Регистратор ССЫЛКА Документ.удуПриказОЗачисленииРебенкаВГруппу
	               |	И удуСведенияОЗачисленииРебенкаВГруппу.СостояниеУчетаВГруппе = &СостояниеУчетаВГруппе
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ребенок,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаПоФактуЗачисления,
	               |	ВЫБОР
	               |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак <> &ПустойПризнак
	               |			ТОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ВозрастнойПризнак
	               |		ИНАЧЕ ""<признак не указан>""
	               |	КОНЕЦ,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительПодавшийЗаявку,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.НачальнаяДатаЯвкиРодителя,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.КонечнаяДатаЯвкиРодителя,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФактическаяДатаЯвкиРодителя,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиУведомления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляУведомления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаВыдачиНаправления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.РодительДляНаправления,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаОтказаВЗачислении,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ФИОЛицаСнявшегоЗаявку,
	               |	удуСведенияОЗачисленииРебенкаВГруппу.Регистратор,
	               |	ВЫБОР
	               |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакВозможностиНеЗачисления
	               |			ТОГДА ""Да""
	               |		ИНАЧЕ ""Нет""
	               |	КОНЕЦ,
	               |	ПОДСТРОКА(удуЗаявкаНаЗачислениеРебенкаВДОУ.ПричинаОтказаВЗачислении, 0, 100)
	               |
	               |УПОРЯДОЧИТЬ ПО				   
	               |	Приоритетность УБЫВ,
	               |	ДатаРегистрацииВОчередь,
	               |	Номер";	
				   
	Возврат ТекстЗапроса;
КонецФункции

	
&НаСервере
Функция СформироватьОтчетНаСервере()	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	Если ОтчетОбъект.ОтборПоСостояниюЗаявки = "Заявки, по которым произошло зачисление в группу" Тогда
		ТекстЗапроса = СформироватьТекстЗапросаОбработанныхЗаявок(?(ЗначениеЗаполнено(ОтчетОбъект.ГруппаДляЗачисления), Истина, Ложь), ?(ЗначениеЗаполнено(ОтчетОбъект.ВозрастнойПризнак), Истина, Ложь));
	ИначеЕсли Отчет.ОтборПоСостояниюЗаявки = "Заявки, по которым планируется зачисление в группу" Тогда
		ТекстЗапроса = СформироватьТекстЗапроса(Ложь, ?(ЗначениеЗаполнено(ОтчетОбъект.ГруппаДляЗачисления), Истина, Ложь), ?(ЗначениеЗаполнено(ОтчетОбъект.ВозрастнойПризнак), Истина, Ложь));
	Иначе
		ТекстЗапроса = СформироватьТекстЗапроса(Истина, ?(ЗначениеЗаполнено(ОтчетОбъект.ГруппаДляЗачисления), Истина, Ложь), ?(ЗначениеЗаполнено(ОтчетОбъект.ВозрастнойПризнак), Истина, Ложь));
	КонецЕсли;
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаПланируемогоПоступления", ОтчетОбъект.ПериодКомплектования);
	Запрос.УстановитьПараметр("СостояниеУчетаВГруппе", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);	
	Запрос.УстановитьПараметр("Группа", ОтчетОбъект.ГруппаДляЗачисления);
	Запрос.УстановитьПараметр("ВозрастнойПризнак", ОтчетОбъект.ВозрастнойПризнак);
	Запрос.УстановитьПараметр("ПустойПризнак", Справочники.удуВозрастныеПризнаки.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	РезультирующаяТаблица = Новый ТабличныйДокумент;
	
	Макет = ОтчетОбъект.ПолучитьМакет("МакетОсновной");
	
	СекцияШапкаОтчета = Макет.ПолучитьОбласть("Шапка");
	
	Если ОтчетОбъект.ОтборПоСостояниюЗаявки = "Заявки, по которым произошло зачисление в группу" Тогда
		СекцияШапкаОтчета.Параметры.ЗаголовокОтчета = "Отчет по заявкам на зачисление в группу (зачисление произошло)";
	ИначеЕсли Отчет.ОтборПоСостояниюЗаявки = "Заявки, по которым планируется зачисление в группу" Тогда
		СекцияШапкаОтчета.Параметры.ЗаголовокОтчета = "Отчет по заявкам на зачисление в группу (зачисление планируется)";
	Иначе
		СекцияШапкаОтчета.Параметры.ЗаголовокОтчета = "Отчет по заявкам на зачисление в группу (в зачислении отказано)";
	КонецЕсли;
	СекцияШапкаОтчета.Параметры.ПериодФормирования = СокрЛП(ОтчетОбъект.ПериодКомплектования);	
	РезультирующаяТаблица.Вывести(СекцияШапкаОтчета);
	
	Если ЗначениеЗаполнено(ОтчетОбъект.ГруппаДляЗачисления) Тогда
		СекцияОтборПоГруппе = Макет.ПолучитьОбласть("ОтборПоГруппе");
		СекцияОтборПоГруппе.Параметры.ОтборПоГруппе = "Группа: " + СокрЛП(ОтчетОбъект.ГруппаДляЗачисления.Наименование);
		РезультирующаяТаблица.Вывести(СекцияОтборПоГруппе);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетОбъект.ВозрастнойПризнак) Тогда
		СекцияОтборПоГруппе = Макет.ПолучитьОбласть("ОтборПоГруппе");
		СекцияОтборПоГруппе.Параметры.ОтборПоГруппе = "Возрастной признак: " + СокрЛП(ОтчетОбъект.ВозрастнойПризнак.Наименование);
		РезультирующаяТаблица.Вывести(СекцияОтборПоГруппе);
	КонецЕсли;	
	
	СекцияШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы|Заявка");
	РезультирующаяТаблица.Вывести(СекцияШапкаТаблицы);
	
	Если (НЕ ОтчетОбъект.ГруппировкаДанныхПоГруппе) И (НЕ ЗначениеЗаполнено(ОтчетОбъект.ГруппаДляЗачисления)) Тогда
		СекцияШапкаРеквизит = Макет.ПолучитьОбласть("ШапкаТаблицы|Группа");
		РезультирующаяТаблица.Присоединить(СекцияШапкаРеквизит);		
	КонецЕсли;
	
	// динамически формируем шапку отчета
	Для Каждого СтрокаПоказателяОтчета Из ОтчетОбъект.ТабличнаяЧастьПоказателиОтчета Цикл
		Если СтрокаПоказателяОтчета.Использование Тогда
			СекцияШапкаРеквизит = Макет.ПолучитьОбласть("ШапкаТаблицы|" + СокрЛП(СтрокаПоказателяОтчета.НаименованиеПоказателя));
			РезультирующаяТаблица.Присоединить(СекцияШапкаРеквизит);
		КонецЕсли;
	КонецЦикла;	
	
	// анализируем и выводим шапку об отмене заявки, если нужно
	Если ОтчетОбъект.ОтборПоСостояниюЗаявки = "Заявки, по которым отказано в зачислении в группу" Тогда
		СекцияШапкаРеквизит = Макет.ПолучитьОбласть("ШапкаТаблицы|СведенияОбОтказеВЗачислении");
		РезультирующаяТаблица.Присоединить(СекцияШапкаРеквизит);		
	КонецЕсли;
	
	// анализируем и выводим шапку о приказе о зачислении в группу, если это нужно
	Если ОтчетОбъект.ОтборПоСостояниюЗаявки = "Заявки, по которым произошло зачисление в группу" Тогда
		СекцияШапкаРеквизит = Макет.ПолучитьОбласть("ШапкаТаблицы|ПриказОЗачислении");
		РезультирующаяТаблица.Присоединить(СекцияШапкаРеквизит);		
	КонецЕсли;		
	
	
	// переформируем таблицу - результат запроса
	РезультатЗапроса.Колонки.Добавить("НомерОчереди");
	НомерОчереди = 0;
	Для Каждого СтрокаРезультатЗапроса Из РезультатЗапроса Цикл
		НомерОчереди = НомерОчереди + 1;
		СтрокаРезультатЗапроса.НомерОчереди = НомерОчереди;
	КонецЦикла;
	
	Если ОтчетОбъект.ГруппировкаДанныхПоГруппе Тогда
		РезультатЗапроса.Сортировать("Группа");
	КонецЕсли;
	
	Если ОтчетОбъект.ГруппировкаДанныхПоВозрастномуПризнаку Тогда
		РезультатЗапроса.Сортировать("ВозрастнойПризнак");
	КонецЕсли;	
	
	ТекущаяГруппа = "";
	ТекущийПризнак = "";
	Для Каждого СтрокаРезультатЗапроса Из РезультатЗапроса Цикл
		Если ОтчетОбъект.ГруппировкаДанныхПоГруппе Тогда
			Если ТекущаяГруппа <> СтрокаРезультатЗапроса.Группа Тогда			
				ТекущаяГруппа = СтрокаРезультатЗапроса.Группа;
				СекцияСтрокаГруппа = Макет.ПолучитьОбласть("СтрокаГруппа");
				СекцияСтрокаГруппа.Параметры.СведенияОГруппе = СокрЛП(СтрокаРезультатЗапроса.Группа.Наименование) + 
				?(СтрокаРезультатЗапроса.Группа.КомпенсирующаяНаправленность, " (компенсирующей направленности)", "") + " (вместительность: " + 
				?(СтрокаРезультатЗапроса.Группа.БезОграниченияВместительности, "<не ограничена>", Строка(СтрокаРезультатЗапроса.Группа.Вместительность)) + ")";
                СекцияСтрокаГруппа.Параметры.Группа = СтрокаРезультатЗапроса.Группа;
				РезультирующаяТаблица.Вывести(СекцияСтрокаГруппа);
			КонецЕсли;
		КонецЕсли;
		
		Если ОтчетОбъект.ГруппировкаДанныхПоВозрастномуПризнаку Тогда
			Если ТекущийПризнак <> СтрокаРезультатЗапроса.ВозрастнойПризнак Тогда			
				ТекущийПризнак = СтрокаРезультатЗапроса.ВозрастнойПризнак;
				СекцияСтрокаПризнак = Макет.ПолучитьОбласть("СтрокаВозрастнойПризнак");
				СекцияСтрокаПризнак.Параметры.СведенияОВозрастномПризнаке = СтрокаРезультатЗапроса.ВозрастнойПризнак;
				РезультирующаяТаблица.Вывести(СекцияСтрокаПризнак);
			КонецЕсли;			
		КонецЕсли;
		
		НаименованиеСекции = ?(ЗначениеЗаполнено(СтрокаРезультатЗапроса.Приоритетность), "СтрокаЛьгота", "Строка");
		
		СекцияСтрока = Макет.ПолучитьОбласть(НаименованиеСекции + "|Заявка");
		СекцияСтрока.Параметры.НПП = СтрокаРезультатЗапроса.НомерОчереди;
		СекцияСтрока.Параметры.ЗаявкаПредставление = "Заявка на зачисление №" 
					+ удуФормированиеПечатныхФорм.ПолучитьНомерНаПечать(СтрокаРезультатЗапроса.Номер) 
					+ " от " + Формат(СтрокаРезультатЗапроса.Дата, "ДЛФ=D");					
					
		СекцияСтрока.Параметры.Заполнить(СтрокаРезультатЗапроса);
		РезультирующаяТаблица.Вывести(СекцияСтрока);
		
		Если (НЕ ОтчетОбъект.ГруппировкаДанныхПоГруппе) И (НЕ ЗначениеЗаполнено(ОтчетОбъект.ГруппаДляЗачисления)) Тогда
			СекцияСтрокаРеквизит = Макет.ПолучитьОбласть(НаименованиеСекции + "|Группа");
			СекцияСтрокаРеквизит.Параметры.Заполнить(СтрокаРезультатЗапроса);
			РезультирующаяТаблица.Присоединить(СекцияСтрокаРеквизит);		
		КонецЕсли;
		
		// динамически формируем строки отчета
		Для Каждого СтрокаПоказателяОтчета Из ОтчетОбъект.ТабличнаяЧастьПоказателиОтчета Цикл
			Если СтрокаПоказателяОтчета.Использование Тогда
				СекцияСтрокаРеквизит = Макет.ПолучитьОбласть(НаименованиеСекции + "|" + СокрЛП(СтрокаПоказателяОтчета.НаименованиеПоказателя));
				СекцияСтрокаРеквизит.Параметры.Заполнить(СтрокаРезультатЗапроса);
				РезультирующаяТаблица.Присоединить(СекцияСтрокаРеквизит);
			КонецЕсли;
		КонецЦикла;		
		
		// анализируем и выводим сведения об отмене заявки, если нужно
		Если ОтчетОбъект.ОтборПоСостояниюЗаявки = "Заявки, по которым отказано в зачислении в группу" Тогда
			СекцияСтрокаРеквизит = Макет.ПолучитьОбласть(НаименованиеСекции + "|СведенияОбОтказеВЗачислении");
			СекцияСтрокаРеквизит.Параметры.Заполнить(СтрокаРезультатЗапроса);
			РезультирующаяТаблица.Присоединить(СекцияСтрокаРеквизит);			
		КонецЕсли;
		
		// анализируем и выводим сведения о приказе о зачислении в группу, если это нужно
		Если ОтчетОбъект.ОтборПоСостояниюЗаявки = "Заявки, по которым произошло зачисление в группу" Тогда
			СекцияСтрокаРеквизит = Макет.ПолучитьОбласть(НаименованиеСекции + "|ПриказОЗачислении");
			СекцияСтрокаРеквизит.Параметры.ПредставлениеПриказа = "Приказ о зачислении №" 
						+ удуФормированиеПечатныхФорм.ПолучитьНомерНаПечать(СтрокаРезультатЗапроса.ПриказОЗачислении.Номер) 
						+ " от " + Формат(СтрокаРезультатЗапроса.ПриказОЗачислении.Дата, "ДЛФ=D");
						
			СекцияСтрокаРеквизит.Параметры.ПриказОЗачислении = СтрокаРезультатЗапроса.ПриказОЗачислении;
			СекцияСтрокаРеквизит.Параметры.Заполнить(СтрокаРезультатЗапроса);
			РезультирующаяТаблица.Присоединить(СекцияСтрокаРеквизит);			
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат РезультирующаяТаблица
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	// Вставить содержимое обработчика.
	ОтказОтФормирования = Ложь;
	Если Не ЗначениеЗаполнено(Отчет.ПериодКомплектования) Тогда
		Вопрос("Перед формирование отчета обязательно период комплектования", РежимДиалогаВопрос.ОК);
		ОтказОтФормирования = Истина;
	КонецЕсли;
	
	Если Не ОтказОтФормирования Тогда
		ОсновнаяТаблица = СформироватьОтчетНаСервере();
		
		ОсновнаяТаблица.ОтображатьЗаголовки = Ложь;
		ОсновнаяТаблица.ОтображатьСетку = Ложь;
		ОсновнаяТаблица.АвтоМасштаб = Истина;
		ОсновнаяТаблица.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
		ОсновнаяТаблица.ТолькоПросмотр = Истина;
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СписокНеобрабатываемыхРеквизитов = Новый СписокЗначений;
	СписокНеобрабатываемыхРеквизитов.Добавить("ДатаПланируемогоПоступления");
	СписокНеобрабатываемыхРеквизитов.Добавить("Учреждение");
	СписокНеобрабатываемыхРеквизитов.Добавить("ВозрастнойПризнак");
	СписокНеобрабатываемыхРеквизитов.Добавить("ГруппаЖелаемая");	
	СписокНеобрабатываемыхРеквизитов.Добавить("ГруппаПоФактуЗачисления");
	СписокНеобрабатываемыхРеквизитов.Добавить("ПризнакЗачисления");
	СписокНеобрабатываемыхРеквизитов.Добавить("ПризнакОтказаВЗачислении");
	СписокНеобрабатываемыхРеквизитов.Добавить("ДатаОтказаВЗачислении");
	СписокНеобрабатываемыхРеквизитов.Добавить("ПричинаОтказаВЗачислении");
	СписокНеобрабатываемыхРеквизитов.Добавить("ФИОЛицаСнявшегоЗаявку");
	СписокНеобрабатываемыхРеквизитов.Добавить("НачальнаяДатаЯвкиРодителя");
	СписокНеобрабатываемыхРеквизитов.Добавить("КонечнаяДатаЯвкиРодителя");	
	СписокНеобрабатываемыхРеквизитов.Добавить("ДатаВыдачиУведомления");
	СписокНеобрабатываемыхРеквизитов.Добавить("РодительДляУведомления");
	СписокНеобрабатываемыхРеквизитов.Добавить("ДатаВыдачиНаправления");
	СписокНеобрабатываемыхРеквизитов.Добавить("РодительДляНаправления");	
	
	
	Для Каждого РеквизитЗаявки Из Метаданные.Документы.удуЗаявкаНаЗачислениеРебенкаВДОУ.Реквизиты Цикл
		Если СписокНеобрабатываемыхРеквизитов.НайтиПоЗначению(СокрЛП(РеквизитЗаявки.Имя)) = Неопределено Тогда
			НоваяСтрокаПоказателя = Отчет.ТабличнаяЧастьПоказателиОтчета.Добавить();
			НоваяСтрокаПоказателя.Использование = Истина;
			НоваяСтрокаПоказателя.НаименованиеПоказателя = СокрЛП(РеквизитЗаявки.Имя);
			НоваяСтрокаПоказателя.СинонимПоказателя = СокрЛП(РеквизитЗаявки.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	// плановый период явки родителей
	НоваяСтрокаПоказателя = Отчет.ТабличнаяЧастьПоказателиОтчета.Добавить();
	НоваяСтрокаПоказателя.Использование = Истина;
	НоваяСтрокаПоказателя.НаименованиеПоказателя = "ПериодПлановойЯвкиРодителей";
	НоваяСтрокаПоказателя.СинонимПоказателя = "Период плановой явки родителей";
	
	// сведения о выдаче уведомления
	НоваяСтрокаПоказателя = Отчет.ТабличнаяЧастьПоказателиОтчета.Добавить();
	НоваяСтрокаПоказателя.Использование = Истина;
	НоваяСтрокаПоказателя.НаименованиеПоказателя = "СведенияОВыдачеУведомления";
	НоваяСтрокаПоказателя.СинонимПоказателя = "Сведения о выдаче уведомления";
	
	// сведения о выдаче направления
	НоваяСтрокаПоказателя = Отчет.ТабличнаяЧастьПоказателиОтчета.Добавить();
	НоваяСтрокаПоказателя.Использование = Истина;
	НоваяСтрокаПоказателя.НаименованиеПоказателя = "СведенияОВыдачеНаправления";
	НоваяСтрокаПоказателя.СинонимПоказателя = "Сведения о выдаче направления";
	
	Отчет.ПериодКомплектования = Формат(Год(ТекущаяДата()), "ЧГ=0") + "/" + Формат(Год(ТекущаяДата()) + 1, "ЧГ=0");
	Отчет.ОтборПоСостояниюЗаявки = "Заявки, по которым планируется зачисление в группу";
	
	Элементы.ГруппаОтборПоВозрастномуПризнаку.Видимость = Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьПоказатели(Команда)
	// Вставить содержимое обработчика.
	Для Каждого СтрокаПоказателя Из Отчет.ТабличнаяЧастьПоказателиОтчета Цикл
		СтрокаПоказателя.Использование = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПоказатели(Команда)
	// Вставить содержимое обработчика.
	Для Каждого СтрокаПоказателя Из Отчет.ТабличнаяЧастьПоказателиОтчета Цикл
		СтрокаПоказателя.Использование = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПериодКомплектованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ТекущийГод = Год(ТекущаяДата());
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Формат(ТекущийГод - 1, "ЧГ=0") + "/" + Формат(ТекущийГод, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод, "ЧГ=0") + "/" + Формат(ТекущийГод + 1, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод + 1, "ЧГ=0") + "/" + Формат(ТекущийГод + 2, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод + 2, "ЧГ=0") + "/" + Формат(ТекущийГод + 3, "ЧГ=0"));
	СписокВыбора.Добавить(Формат(ТекущийГод + 3, "ЧГ=0") + "/" + Формат(ТекущийГод + 4, "ЧГ=0"));
	
	НайденноеЗначение = СписокВыбора.НайтиПоЗначению(Элемент.ВыделенныйТекст);
	Если НайденноеЗначение <> Неопределено Тогда
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент, НайденноеЗначение);
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Отчет.ПериодКомплектования = ВыбранноеЗначение.Значение;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСостояниюЗаявкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Заявки, по которым произошло зачисление в группу");
	СписокВыбора.Добавить("Заявки, по которым планируется зачисление в группу");
	СписокВыбора.Добавить("Заявки, по которым отказано в зачислении в группу");
	
	НайденноеЗначение = СписокВыбора.НайтиПоЗначению(Элемент.ВыделенныйТекст);
	Если НайденноеЗначение <> Неопределено Тогда
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент, НайденноеЗначение);
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Отчет.ОтборПоСостояниюЗаявки = ВыбранноеЗначение.Значение;
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДляЗачисленияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Отчет.ГруппаДляЗачисления) Тогда
		Элементы.ГруппировкаДанныхПоГруппе.Видимость = Ложь;
		Отчет.ГруппировкаДанныхПоГруппе = Ложь;
		Элементы.ГруппировкаДанныхПоВозрастномуПризнаку.Доступность = Ложь;
		Отчет.ГруппировкаДанныхПоВозрастномуПризнаку = Ложь;
		Элементы.ВозрастнойПризнак.Доступность = Ложь;
		Отчет.ВозрастнойПризнак = ПолучитьПустуюСсылкуСправочника("ВозрастныеПризнаки");
	Иначе
		Элементы.ГруппировкаДанныхПоГруппе.Видимость = Истина;
		Элементы.ГруппировкаДанныхПоВозрастномуПризнаку.Доступность = Истина;
		Элементы.ВозрастнойПризнак.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозрастнойПризнакПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Отчет.ВозрастнойПризнак) Тогда
		Элементы.ГруппировкаДанныхПоВозрастномуПризнаку.Видимость = Ложь;
		Отчет.ГруппировкаДанныхПоВозрастномуПризнаку = Ложь;
		Элементы.ГруппировкаДанныхПоГруппе.Доступность = Ложь;
		Отчет.ГруппировкаДанныхПоГруппе = Ложь;
		Элементы.ГруппаДляЗачисления.Доступность = Ложь;
		Отчет.ГруппаДляЗачисления = ПолучитьПустуюСсылкуСправочника("Группа");
	Иначе
		Элементы.ГруппировкаДанныхПоВозрастномуПризнаку.Видимость = Истина;
		Элементы.ГруппировкаДанныхПоГруппе.Доступность = Истина;
		Элементы.ГруппаДляЗачисления.Доступность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаДанныхПоГруппеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Отчет.ГруппировкаДанныхПоГруппе Тогда
		Элементы.ГруппировкаДанныхПоВозрастномуПризнаку.Доступность = Ложь;
		Отчет.ГруппировкаДанныхПоВозрастномуПризнаку = Ложь;
		Элементы.ВозрастнойПризнак.Доступность = Ложь;
		Отчет.ВозрастнойПризнак = ПолучитьПустуюСсылкуСправочника("ВозрастныеПризнаки");
	Иначе
		Элементы.ГруппировкаДанныхПоВозрастномуПризнаку.Доступность = Истина;
		Элементы.ВозрастнойПризнак.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаДанныхПоВозрастномуПризнакуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Отчет.ГруппировкаДанныхПоВозрастномуПризнаку Тогда
		Элементы.ГруппировкаДанныхПоГруппе.Доступность = Ложь;
		Отчет.ГруппировкаДанныхПоГруппе = Ложь;
		Элементы.ГруппаДляЗачисления.Доступность = Ложь;
		Отчет.ГруппаДляЗачисления = ПолучитьПустуюСсылкуСправочника("Группа");
	Иначе
		Элементы.ГруппировкаДанныхПоГруппе.Доступность = Истина;
		Элементы.ГруппаДляЗачисления.Доступность = Истина;
	КонецЕсли;		
КонецПроцедуры
