&НаСервере
Функция СформироватьотчетНаСервере()	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуСведенияОПосещаемостиДОУ.Ребенок КАК Ребенок,
	               |	удуСведенияОПосещаемостиДОУ.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА удуСведенияОПосещаемостиДОУ.ПризнакПрисутствия
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Присутствовал,
	               |	ВЫБОР
	               |		КОГДА (НЕ удуСведенияОПосещаемостиДОУ.ПризнакПрисутствия)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Отсутствовал,
	               |	удуСведенияОПосещаемостиДОУ.ПричинаПропускаЗанятия,
	               |	ДЕНЬ(удуСведенияОПосещаемостиДОУ.Период) КАК ДеньПосещения,
	               |	ВЫБОР
	               |		КОГДА удуСведенияОПосещаемостиДОУ.ПричинаПропускаЗанятия.Уважительная
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПропущеноУважительно,
	               |	удуСведенияОПосещаемостиДОУ.Регистратор
	               |ИЗ
	               |	РегистрСведений.удуСведенияОПосещаемостиДОУ КАК удуСведенияОПосещаемостиДОУ
	               |ГДЕ
	               |	удуСведенияОПосещаемостиДОУ.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И удуСведенияОПосещаемостиДОУ.Учреждение = &Учреждение
	               |	И удуСведенияОПосещаемостиДОУ.Группа = &Группа
	               |ИТОГИ
	               |	СУММА(Присутствовал),
	               |	СУММА(Отсутствовал),
	               |	СУММА(ПропущеноУважительно)
	               |ПО
	               |	Ребенок
	               |АВТОУПОРЯДОЧИВАНИЕ";         
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Отчет.ДатаНачало));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Отчет.ДатаОкончания));
	Запрос.УстановитьПараметр("Учреждение", Отчет.Учреждение);
	Запрос.УстановитьПараметр("Группа", Отчет.Группа);
	
	сэРезультатВыполнения = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РезультирующаяТаблица = Новый ТабличныйДокумент;
	
	Макет = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("МакетОсновной");
	
	СекцияЗаголовокОтчета = Макет.Получитьобласть("Заголовок");
	СекцияШапкаТаблицы = Макет.Получитьобласть("ШапкаТаблицы");
	СекцияСтрокаТаблицы = Макет.Получитьобласть("СтрокаТаблицы");
	
	СекцияЗаголовокОтчета.Параметры.ОписаниеПериода = Элементы.НадписьПериодОтчета.Заголовок;
	СекцияЗаголовокОтчета.Параметры.ПредставлениеУчреждения = СокрЛП(Отчет.Учреждение.ПолноеНаименование);
	СекцияЗаголовокОтчета.Параметры.ПредставлениеГруппы = СокрЛП(Отчет.Группа.Наименование);
	СекцияЗаголовокОтчета.Параметры.ДатаКонцаПериода = Формат(Отчет.ДатаОкончания, "ДЛФ=D");
	СекцияЗаголовокОтчета.Параметры.КодПоОКПО = СокрЛП(Отчет.Учреждение.ОКПО);
	
	РезультирующаяТаблица.Вывести(СекцияЗаголовокОтчета);
	РезультирующаяТаблица.Вывести(СекцияШапкаТаблицы);
	
	// начальный цикл по детям
	НПП = 0;
	Для Каждого СтрокаРебенок Из сэРезультатВыполнения.Строки Цикл
		НПП = НПП + 1;
		МассивФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРебенок.Ребенок.Наименование, " ");
		//
		ПредставлениеФИО = "";
		Если МассивФИО.Количество() = 3 Тогда 
			ПредставлениеФИО = СокрЛП(МассивФИО[0]) + " " + Лев(МассивФИО[1], 1) + ". " + Лев(МассивФИО[2], 1) + ".";
		ИначеЕсли МассивФИО.Количество() = 2 Тогда
			ПредставлениеФИО = СокрЛП(МассивФИО[0]) + " " + Лев(МассивФИО[1], 1) + ".";
		Иначе
			ПредставлениеФИО = СокрЛП(МассивФИО[0])
		КонецЕсли;
		
		СекцияСтрокаТаблицы.Параметры.НПП = НПП;
		СекцияСтрокаТаблицы.Параметры.РебенокФИО = ПредставлениеФИО;
		СекцияСтрокаТаблицы.Параметры.Ребенок = СтрокаРебенок.Ребенок;
		СекцияСтрокаТаблицы.Параметры.ПропущеноВсего = СтрокаРебенок.Отсутствовал;
		СекцияСтрокаТаблицы.Параметры.ПропущеноУважительно = СтрокаРебенок.ПропущеноУважительно;
		ТаблицаИмеющихсяДокументПропуска = Новый ТаблицаЗначений;
		ТаблицаИмеющихсяДокументПропуска.Колонки.Добавить("ДокументПропуска");
		ТаблицаИмеющихсяДокументПропуска.Колонки.Добавить("ДеньПропуска");
		
		ВыборкаДокументов = Справочники.удуДокументыПропускаЗанятий.Выбрать(, СтрокаРебенок.Ребенок);
		Пока ВыборкаДокументов.Следующий() Цикл
			ДатаНачалаПропуска = ВыборкаДокументов.ДатаНачалаПропуска;
			ДатаОкончанияПропуска = ВыборкаДокументов.ДатаОкончанияПропуска;
			Если Месяц(ДатаНачалаПропуска) = Месяц(Отчет.ДатаНачало) Тогда
				ДеньНачалаПропуска = День(ДатаНачалаПропуска);
			Иначе
				ДеньНачалаПропуска = 1;
			КонецЕсли;
			
			Если Месяц(ДатаОкончанияПропуска) = Месяц(Отчет.ДатаОкончания) Тогда
				ДеньОкончанияПропуска = День(ДатаОкончанияПропуска);
			Иначе
				ДеньОкончанияПропуска = День(Отчет.ДатаОкончания);
			КонецЕсли;
			
			Для Сч = ДеньНачалаПропуска По ДеньОкончанияПропуска Цикл
				НоваяСтрокаИмющегосяДокумента = ТаблицаИмеющихсяДокументПропуска.Добавить();
				НоваяСтрокаИмющегосяДокумента.ДокументПропуска = ВыборкаДокументов.Ссылка;
				НоваяСтрокаИмющегосяДокумента.ДеньПропуска = Сч;
			КонецЦикла;
		КонецЦикла;
		
		// цикл по дням посещения
		ТаблицаДокументовПропуска = Новый ТаблицаЗначений;
		ТаблицаДокументовПропуска.Колонки.Добавить("Уважительная");
		ТаблицаДокументовПропуска.Колонки.Добавить("ДеньПропуска");
		ТаблицаДокументовПропуска.Колонки.Добавить("ПричинаПропуска");
		ТаблицаДокументовПропуска.Колонки.Добавить("ДокументПропуска");
		Для Сч = 1 По 31 Цикл
			НайденнаяСтрока = СтрокаРебенок.Строки.Найти(Сч, "ДеньПосещения");
			СимволВставки = "";
			Если НайденнаяСтрока = Неопределено Тогда				
				СимволВставки = "-";
				ТекущийЦвет = ЦветФонаНетСведений;
			Иначе
				Если НайденнаяСтрока.Присутствовал = 1 Тогда
					СимволВставки = "П";
					ТекущийЦвет = ЦветФонаПрисутствовал;
				ИначеЕсли НайденнаяСтрока.ПропущеноУважительно = 1 Тогда
					СимволВставки = "Оу";
					ТекущийЦвет = ЦветФонаОтсутствовалУважительно;
					НайденнаяСтрокаИмеющегосяДокумента = ТаблицаИмеющихсяДокументПропуска.Найти(Сч, "ДеньПропуска");
					Если НайденнаяСтрокаИмеющегосяДокумента <> Неопределено Тогда
						НоваяСтрокаПропуска = ТаблицаДокументовПропуска.Добавить();
						НоваяСтрокаПропуска.Уважительная = Истина;
						НоваяСтрокаПропуска.ДеньПропуска = Сч;
						НоваяСтрокаПропуска.ПричинаПропуска = НайденнаяСтрока.ПричинаПропускаЗанятия;
						НоваяСтрокаПропуска.ДокументПропуска = НайденнаяСтрокаИмеющегосяДокумента.ДокументПропуска;
					КонецЕсли;
				Иначе
					СимволВставки = "Он";
					ТекущийЦвет = ЦветФонаОтсутствовалНеУважительно;
					НайденнаяСтрокаИмеющегосяДокумента = ТаблицаИмеющихсяДокументПропуска.Найти(Сч, "ДеньПропуска");
					Если НайденнаяСтрокаИмеющегосяДокумента <> Неопределено Тогда
						НоваяСтрокаПропуска = ТаблицаДокументовПропуска.Добавить();
						НоваяСтрокаПропуска.Уважительная = Ложь;
						НоваяСтрокаПропуска.ДеньПропуска = Сч;
						НоваяСтрокаПропуска.ПричинаПропуска = НайденнаяСтрока.ПричинаПропускаЗанятия;
						НоваяСтрокаПропуска.ДокументПропуска = НайденнаяСтрокаИмеющегосяДокумента.ДокументПропуска;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
			Выполнить("СекцияСтрокаТаблицы.Параметры.Д" + Строка(Сч) + " = """ + СимволВставки + """");
			Если НайденнаяСтрока <> Неопределено Тогда
				Выполнить("СекцияСтрокаТаблицы.Параметры.Р" + Строка(Сч) + " = НайденнаяСтрока.Регистратор");
			Иначе
				Выполнить("СекцияСтрокаТаблицы.Параметры.Р" + Строка(Сч) + " = """"");
			КонецЕсли;
			Если ФлагРаскрашиватьОтчет Тогда
				ТекущаяЯчейка = СекцияСтрокаТаблицы.Область(1, Сч + 5, 1, Сч + 5);
				ТекущаяЯчейка.ЦветФона = ТекущийЦвет;
			КонецЕсли;
			Если ТаблицаДокументовПропуска.Количество() > 0 Тогда
				СекцияСтрокаТаблицы.Параметры.ДокументыПропуска = "<Документы>";				
				СекцияСтрокаТаблицы.Параметры.ПараметрДляРасшифровки = ЗначениеВСтрокуВнутр(ТаблицаДокументовПропуска);
			Иначе
				СекцияСтрокаТаблицы.Параметры.ДокументыПропуска = "";
				СекцияСтрокаТаблицы.Параметры.ПараметрДляРасшифровки = "";
			КонецЕсли;			
		КонецЦикла;		
		РезультирующаяТаблица.Вывести(СекцияСтрокаТаблицы);
	КонецЦикла;
	
	Возврат РезультирующаяТаблица
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Отчет.Учреждение) Тогда
		Отчет.Учреждение = Константы.удуОсновноеУчреждение.Получить();
	КонецЕсли;	
	
	Отчет.ДатаНачало = НачалоМесяца(ТекущаяДата());
	Отчет.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	Элементы.НадписьПериодОтчета.Заголовок = ПредставлениеПериода(НачалоДня(Отчет.ДатаНачало), КонецДня(Отчет.ДатаОкончания), "ФП=Истина");	
	
	Элементы.ГруппаОформление.Видимость = ФлагРаскрашиватьОтчет;
	ЦветФонаНетСведений = Новый Цвет(255, 255, 255);
	ЦветФонаПрисутствовал = Новый Цвет(192, 220, 192);
	ЦветФонаОтсутствовалНеУважительно = Новый Цвет(255, 192, 203);
	ЦветФонаОтсутствовалУважительно = Новый Цвет(230, 230, 250);	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОтказОтФормирования = Ложь;
	Если Не ЗначениеЗаполнено(Отчет.Учреждение) Тогда
		Вопрос("Перед формирование отчета обязательно укажите учреждение", РежимДиалогаВопрос.ОК);
		ОтказОтФормирования = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.Группа) Тогда
		Вопрос("Перед формирование отчета обязательно укажите группу", РежимДиалогаВопрос.ОК);
		ОтказОтФормирования = Истина;
	КонецЕсли;
	
	Если Не ОтказОтФормирования Тогда
		ОсновнаяТаблица = СформироватьОтчетНаСервере();
		
		ОсновнаяТаблица.ОтображатьЗаголовки = Ложь;
		ОсновнаяТаблица.ОтображатьСетку = Ложь;
		ОсновнаяТаблица.АвтоМасштаб = Истина;
		ОсновнаяТаблица.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
		ОсновнаяТаблица.ТолькоПросмотр = Истина;
			
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ФлагРаскрашиватьОтчетПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Элементы.ГруппаОформление.Видимость = ФлагРаскрашиватьОтчет;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.		
	Если Элемент.ТекущаяОбласть.СодержитЗначение Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Расшифровка) Тогда
			ФормаПросмотраДокументов = ПолучитьФорму("Отчет.удуОтчетТабельПосещенияДОУ.Форма.ФормаРасшифровкиОтчета");
			ФормаПросмотраДокументов.ПереданнаяСтрока = Расшифровка;
			ФормаПросмотраДокументов.ВладелецФормы = ЭтаФорма;
			ФормаПросмотраДокументов.ОткрытьМодально();				
		КонецЕсли;	
	Иначе
		Если Не ЗначениеЗаполнено(Расшифровка) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаУвеличитьМесяц(Команда)
	// Вставить содержимое обработчика.
	Отчет.ДатаНачало = ДобавитьМесяц(Отчет.ДатаНачало, 1);
	Отчет.ДатаОкончания = КонецМесяца(Отчет.ДатаНачало);
	
	Элементы.НадписьПериодОтчета.Заголовок = ПредставлениеПериода(НачалоДня(Отчет.ДатаНачало), КонецДня(Отчет.ДатаОкончания), "ФП=Истина");	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУменьшитьМесяц(Команда)
	// Вставить содержимое обработчика.
	Отчет.ДатаНачало = ДобавитьМесяц(Отчет.ДатаНачало, -1);
	Отчет.ДатаОкончания = КонецМесяца(Отчет.ДатаНачало);
	
	Элементы.НадписьПериодОтчета.Заголовок = ПредставлениеПериода(НачалоДня(Отчет.ДатаНачало), КонецДня(Отчет.ДатаОкончания), "ФП=Истина");		
КонецПроцедуры
