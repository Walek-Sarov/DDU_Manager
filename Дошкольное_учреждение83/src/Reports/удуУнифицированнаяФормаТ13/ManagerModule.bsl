

Функция СформироватьОтчет(Отчет,Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВозвращаемоеСообщениеОбОшибке = Неопределено) Экспорт
	
	КомпоновщикНастроек=Отчет.КомпоновщикНастроек;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
	Результат.ПолеСлева = 0;
	Результат.ПолеСправа = 0;
	Результат.ОтображатьСетку     = ложь;
	Результат.ОтображатьЗаголовки = ложь;
	Результат.АвтоМасштаб         = Истина;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ГруппироватьПодразделения = ложь;
	ПараметрГруппироватьПодразделения = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "ГруппироватьПодразделения");
	Если ПараметрГруппироватьПодразделения <> Неопределено и ПараметрГруппироватьПодразделения.Использование тогда
		ГруппироватьПодразделения = ПараметрГруппироватьПодразделения.Значение;
	КонецЕсли;	
	
	ПараметрДатаЗаполнения = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "ДатаЗаполнения");
	Если ПараметрДатаЗаполнения <> Неопределено и ПараметрДатаЗаполнения.Использование тогда
		ДатаЗаполнения = удуОбщегоНазначенияСервер.ВыделитьДату(ПараметрДатаЗаполнения.Значение);
	КонецЕсли;	
	
	ПараметрНомерДокумента = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "НомерДокумента");
	Если ПараметрНомерДокумента <> Неопределено и ПараметрНомерДокумента.Использование тогда
		НомерДокумента = ПараметрНомерДокумента.Значение;
	КонецЕсли;	
	
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	ПараметрОтветственный = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "ОтветственноеЛицо");
	Если ПараметрОтветственный <> Неопределено и ПараметрОтветственный.Использование тогда
		Ответственный = ПараметрОтветственный.Значение;
	КонецЕсли;	
	
	ПараметрРежим = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "Режим");
	Если ПараметрРежим <> Неопределено тогда
		Режим = ПараметрРежим.Значение;
	КонецЕсли;	
	
	Если Режим = "" или Режим = Неопределено тогда
		Режим = "Табель";
	КонецЕсли;
	
	НачалоПериода = '00010101';
	КонецПериода  = '00010101';
	
	ПараметрНачалоПериода = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "НачалоПериода");
	Если ПараметрНачалоПериода <> Неопределено тогда
		НачалоПериода = Дата(ПараметрНачалоПериода.Значение);
	КонецЕсли;	
	
	Если НачалоПериода = '00010101' тогда
		НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	ПараметрКонецПериода = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "КонецПериода");
	Если ПараметрКонецПериода <> Неопределено тогда
		КонецПериода = Дата(ПараметрКонецПериода.Значение);
	КонецЕсли;	
	
	Если КонецПериода = '00010101' тогда
		КонецПериода = ТекущаяДата();
	КонецЕсли;
	
	Если КонецПериода > ТекущаяДата() тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст="Формирование табеля за неоконченный месяц";
		СообщениеПользователю.Сообщить();
		СообщениеПользователю.Текст="При формировании табеля за будущий или текущий месяц, выводятся данные только до рабочей даты (" + Формат(ТекущаяДата(), "ДЛФ=ДД") + ").";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	КонецПериода = КонецДня(Мин(ТекущаяДата(), КонецПериода));
	
	// Получение списка работников
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		//	Возврат Результат;
	КонецЕсли;
	
	удуУправлениеОтчетами.ДобавитьГруппировку(КомпоновщикНастроек,);
	удуУправлениеОтчетами.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Сотрудник");
	удуУправлениеОтчетами.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Организация");
	удуУправлениеОтчетами.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПодразделениеОрганизации");
	удуУправлениеОтчетами.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Должность");
	удуУправлениеОтчетами.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПериодРегистрации");
	удуУправлениеОтчетами.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ДатаКалендаря");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СхемаКомпоновкиДанных=Отчеты.удуУнифицированнаяФормаТ13.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений =  Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТЗСотрудники=ТаблицаЗначений.Скопировать(,"Сотрудник");
	ТЗСотрудники.Свернуть("Сотрудник");
	СписокРаботников = Новый СписокЗначений;
	СписокРаботников.ЗагрузитьЗначения(ТЗСотрудники.ВыгрузитьКолонку("Сотрудник"));
	
	СформироватьМакет(Отчет,Результат, Режим, НачалоПериода, КонецПериода, СписокРаботников, ТаблицаЗначений, Ответственный, ГруппироватьПодразделения, ДатаЗаполнения, НомерДокумента, ВозвращаемоеСообщениеОбОшибке);	
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
	Возврат Результат;
	
	
КонецФункции

// Процедура Формирует отчет Т-13 по данным регистров
// и заполняет табличный документ - ДокументРезультат
Процедура СформироватьМакет(Отчет,ДокументРезультат, Режим, НачалоПериода, КонецПериода, СписокРаботников, ТаблицаРаботниковОрганизации, Ответственный, ГруппироватьПодразделения, ДатаЗаполнения, НомерДокумента, ВозвращаемоеСообщениеОбОшибке)
	
	КомпоновщикНастроек=Отчет.КомпоновщикНастроек;
	Сообщение = "";
	Если Не удуДокументыКадровогоУчета.РегламентированныйКалендарьЗаполнен(НачалоПериода, КонецПериода, Сообщение) Тогда
		Если Режим = "Табель" Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=Сообщение;
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ЗапросТабель = Новый Запрос();
	
	ЗапросТабель.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросТабель.УстановитьПараметр("КонецПериода",  КонецПериода);
	ЗапросТабель.УстановитьПараметр("ТаблицаРаботниковОрганизации",  ТаблицаРаботниковОрганизации);
	
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") тогда
		ЗапросТабель.УстановитьПараметр("Ответственный", Ответственный.ФизЛицо);
	Иначе
		ЗапросТабель.УстановитьПараметр("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	// условия на измерения регистра
	УсловиеПоРаботникам	= "";
	УсловиеНаОрганизации = "";
	
	ЗапросТабель.УстановитьПараметр("РаботникиОрганизации", СписокРаботников);
	УсловиеПоРаботникам	= " Сотрудник В (&РаботникиОрганизации)";
	
	ОтборОрганизации        = ложь;
	Организация             = Неопределено;
	ВидСравненияОрганизации = "";
	
	МассивОтборов = удуУправлениеОтчетами.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для каждого ЭлементОтбора из МассивОтборов Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") и ЭлементОтбора.Использование тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				Если ОтборОрганизации и Организация <> Неопределено тогда
					ОтборОрганизации           = ложь;
					Организация                = Неопределено;
					ВидСравненияОрганизации = "";
				Иначе
					ОтборОрганизации = истина;
					Организация      = ЭлементОтбора.ПравоеЗначение;
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидСравненияОрганизации = ВидСравнения.Равно; 
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеРавно Тогда
						ВидСравненияОрганизации = ВидСравнения.НеРавно;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидСравненияОрганизации = ВидСравнения.ВСписке;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВСписке;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.ВИерархии;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВИерархии;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВСпискеПоИерархии;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.ВСпискеПоИерархии;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборОрганизации Тогда
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.удуУчреждения") Тогда
			ЗапросТабель.УстановитьПараметр("Организация", Организация);
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка  КАК Ссылка
			|ИЗ
			|	Справочник.удуУчреждения КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&Организация)");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			ЗапросТабель.УстановитьПараметр("Организация", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияДляОрганизации = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияДляОрганизации = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияДляОрганизации = "В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляОрганизации = "НЕ В"
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеНаОрганизации = " Организация " + ВидСравненияДляОрганизации + " &Организация";
		Иначе
			УсловиеНаОрганизации = " Организация " + ВидСравненияДляОрганизации + " (&Организация)";
		КонецЕсли;
	КонецЕсли;
	
	// условия на ресурсы регистра
	УсловиеВЗапрос = "";
	
	ОтборПодразделения        = ложь;
	Подразделение             = Неопределено;
	ВидСравненияПодразделения = "";
	
	МассивОтборов = удуУправлениеОтчетами.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для каждого ЭлементОтбора из МассивОтборов Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОрганизации") и ЭлементОтбора.Использование тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				Если ОтборПодразделения и Подразделение <> Неопределено тогда
					ОтборПодразделения        = ложь;
					Подразделение             = Неопределено;
					ВидСравненияПодразделения = "";
				Иначе
					ОтборПодразделения = истина;
					Подразделение      = ЭлементОтбора.ПравоеЗначение;
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидСравненияПодразделения = ВидСравнения.Равно; 
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
						ВидСравненияПодразделения = ВидСравнения.НеРавно;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидСравненияПодразделения = ВидСравнения.ВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.ВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеПодразделение = "";
	Если ОтборПодразделения Тогда
		ЗапросТабель.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно Тогда
			ВидСравненияДляПодразделения = "=" 
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			ВидСравненияДляПодразделения = "<>"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСписке Тогда
			ВидСравненияДляПодразделения = "В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляПодразделения = "НЕ В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.ВИерархии Тогда
			ВидСравненияДляПодразделения = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.НеВИерархии Тогда
			ВидСравненияДляПодразделения = "НЕ В ИЕРАРХИИ"
		КонецЕсли;
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно ИЛИ ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			УсловиеПодразделение = " %Таблица%.ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " &ПодразделениеОрганизации";
		Иначе
			УсловиеПодразделение = " %Таблица%.ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " (&ПодразделениеОрганизации)";
		КонецЕсли;
		
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеПодразделение;
	КонецЕсли;
	
	Если ГруппироватьПодразделения Тогда
		ПорядокГруппировки = " ПодразделениеОрганизации, ";
	Иначе
		ПорядокГруппировки = " ";
	КонецЕсли;
	
	Макет = Отчеты.удуУнифицированнаяФормаТ13.ПолучитьМакет("Т13");
	
	ОбластьДанныхШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьДанныхСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьДанныхПодвал		= Макет.ПолучитьОбласть("Подвал");
	
	Если ОтборПодразделения и НЕ ГруппироватьПодразделения и ТипЗнч(Подразделение) <> Тип("СписокЗначений") тогда
		ЗапросТабель.УстановитьПараметр("Подразделение",  Подразделение);
	КонецЕсли;
	ПараметровВстроке = ОбластьДанныхСтрока.Параметры.Количество();
	ЗапросТабель.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросТабель.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Организация КАК Организация,";
	Если ОтборПодразделения и НЕ ГруппироватьПодразделения и ТипЗнч(Подразделение) <> Тип("СписокЗначений") тогда
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|	&Подразделение КАК ПодразделениеОрганизации,";
	Иначе
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,";
	КонецЕсли;
	ЗапросТабель.Текст = ЗапросТабель.Текст + "
	|	РаботникиОрганизаций.Должность КАК Должность,
	|	РаботникиОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
	|	РаботникиОрганизаций.ДатаКалендаря КАК ДатаСр
	|ПОМЕСТИТЬ ВТТаблицаРаботниковОрганизации
	|ИЗ
	|	&ТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
	|ИНДЕКСИРОВАТЬ ПО
	|	РаботникиОрганизаций.Сотрудник";
	ЗапросТабель.Выполнить();
	
	Если Режим = "Табель" Тогда
		
		// Запрос сотрудников
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	РаботникиОрганизаций.Сотрудник,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.Имя = """"
		|			ТОГДА """"
		|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
		|			ТОГДА """"
		|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|	КОНЕЦ, РаботникиОрганизаций.Сотрудник.Физлицо.Наименование) КАК СотрудникНаименование,
		|	РаботникиОрганизаций.Организация КАК Организация,
		|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
		|	РаботникиОрганизаций.ДатаСр КАК ДатаСр
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(
		|		&КонецПериода,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				ИСТИНА" + ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации)," И " + СтрЗаменить(УсловиеПоРаботникам,"Сотрудник","Ссылка")) + ")) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
		|ГДЕ
		|	ИСТИНА" + СтрЗаменить(УсловиеВЗапрос, "%Таблица%", "РаботникиОрганизаций") + "
		|ИНДЕКСИРОВАТЬ ПО
		|	РаботникиОрганизаций.Сотрудник";
		
		ЗапросТабель.Выполнить();
		
		// Запрос дат периода
		Если ТекущаяДата() < НачалоПериода Тогда
			// формируем пустую таблицу
			ВозвращаемоеСообщениеОбОшибке = "Отчет можно формировать только за текущий или предыдущий периоды!";
			Возврат;
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ДатаТабеля,
			|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ПериодРегистрации
			|ПОМЕСТИТЬ ВТДатыТабеля 
			|	";           
			ДатаВОтчете = НачалоПериода;
			Пока ДатаВОтчете < КонецПериода Цикл
				НомерДня    = День(ДатаВОтчете);
				НомерМесяца = Месяц(ДатаВОтчете);
				НомерГода   = Год(ДатаВОтчете);
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4")+ ", " + НомерМесяца + " ," + НомерДня + "),
				|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4") + ", " + НомерМесяца + " , 1) КАК ПериодРегистрации
				|	";
				ДатаВОтчете = ДатаВОтчете + 86400;
			КонецЦикла;
		КонецЕсли;
		ЗапросТабель.Текст = ТекстЗапроса;
		ЗапросТабель.Выполнить();
		
		// Запрос Сотрудник, ДатыПериода
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.СотрудникНаименование КАК СотрудникНаименование,
		|	Сотрудники.Организация,
		|	Сотрудники.ПодразделениеОрганизации,
		|	Сотрудники.Должность,
		|	ВТДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|	ВТДатыТабеля.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТСотрудникДата
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыТабеля КАК ВТДатыТабеля
		|		ПО (ВТДатыТабеля.ДатаТабеля = Сотрудники.ДатаСр)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля";
		
		ЗапросТабель.Выполнить();
		
		// Запрос выбора плановых начислений сотрудников
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеНачисленияРаботниковОрганизаций.Период КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ПериодРегистрации КАК ПериодРегистрации,
		|	Сотрудники.ДатаСр КАК ДатаСр,
		|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
		|ПОМЕСТИТЬ ВТНеобработанныеПлановыеНачисленияРаботниковОрганизаций
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
		|		ПО Сотрудники.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
		|		И Сотрудники.ДатаСР >= ПлановыеНачисленияРаботниковОрганизаций.Период
		|ГДЕ
		|	ПлановыеНачисленияРаботниковОрганизаций.Период <= &КонецПериода
		|	И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыВремени.ОтработанноеВПределахНормы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеНачисления.ВидРасчета,
		|	ПлановыеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК КлассификаторВидаВремени,
		|	ДатыПолученияВР.ДатаТабеля КАК ДатаТабеля,
		|	ДатыПолученияВР.ПериодРегистрации КАК ПериодРегистрации,
		|	ДатыПолученияВР.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудников
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|		ДатыТабеля.ПериодРегистрации КАК ПериодРегистрации,
		|		МАКСИМУМ(ПлановыеНачисления.Период) КАК Период,
		|		ПлановыеНачисления.Сотрудник КАК Сотрудник
		|	ИЗ
		|		ВТДатыТабеля КАК ДатыТабеля
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНеобработанныеПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
		|			ПО (ПлановыеНачисления.Период <= ДатыТабеля.ДатаТабеля)
		|			И (ПлановыеНачисления.ПериодРегистрации = ДатыТабеля.ПериодРегистрации)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДатыТабеля.ДатаТабеля,
		|		ДатыТабеля.ПериодРегистрации,
		|		ПлановыеНачисления.Сотрудник) КАК ДатыПолученияВР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеобработанныеПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
		|		ПО ДатыПолученияВР.Период = ПлановыеНачисления.Период
		|			И ДатыПолученияВР.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И ДатыПолученияВР.ПериодРегистрации = ПлановыеНачисления.ПериодРегистрации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	РабочееВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
		|	СУММА(РабочееВремяРаботниковОрганизаций.Часов) КАК Часов,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени КАК ВидВремени,
		|	РабочееВремяРаботниковОрганизаций.Период КАК ДатаТабеля,
		|	РабочееВремяРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТРабочеВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		РабочееВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
		|		РабочееВремяРаботниковОрганизаций.Часов КАК Часов,
		|		РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
		|		РабочееВремяРаботниковОрганизаций.Период КАК Период,
		|		НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) КАК ПериодРегистрации
		|	ИЗ
		|		РегистрНакопления.удуРабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|	ГДЕ
		|		РабочееВремяРаботниковОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Сотрудники.Сотрудник
		|				ИЗ
		|					ВТСотрудники КАК Сотрудники)
		|		И (НЕ РабочееВремяРаботниковОрганизаций.СводнаяЗапись)
		|		И (НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
		|		И РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода) КАК РабочееВремяРаботниковОрганизаций
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочееВремяРаботниковОрганизаций.Сотрудник,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
		|	РабочееВремяРаботниковОрганизаций.Период,
		|	РабочееВремяРаботниковОрганизаций.ПериодРегистрации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля";				
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Период,
		|	Работники.ГрафикРаботы
		|	ПОМЕСТИТЬ ВТГрафикиРаботниковСрез
		|	ИЗ
		|	РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(&НачалоПериода, Сотрудник В (ВЫБРАТЬ
		|					Сотрудники.Сотрудник
		|				ИЗ
		|					ВТСотрудники КАК Сотрудники)" + ?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации) + ") КАК Работники
		|	
		|	ИНДЕКСИРОВАТЬ ПО 
		|	Сотрудник,
		|	Период";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст =
		"ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	&НачалоПериода КАК Период,
		|	Работники.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТГрафикиРаботников
		|ИЗ
		|	ВТГрафикиРаботниковСрез КАК Работники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.ГрафикРаботы
		|ИЗ
		|	РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО РаботникиОрганизаций.Сотрудник = ВТСотрудники.Сотрудник
		|ГДЕ
		|	РаботникиОрганизаций.Период > &НачалоПериода
		|	И РаботникиОрганизаций.Период <= &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период"; 
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(ГрафикиРаботыПоВидамВремени.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ГрафикиРаботыПоВидамВремени.Документ,
		|	ГрафикиРаботыПоВидамВремени.План КАК План
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
		|ИЗ
		|	РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В
		|			(ВЫБРАТЬ
		|				Сотрудники.Сотрудник
		|			ИЗ
		|				ВТСотрудники КАК Сотрудники
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ГрафикиРаботников.ГрафикРаботы
		|			ИЗ
		|				ВТГрафикиРаботников КАК ГрафикиРаботников)
		|	И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоДням)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГрафикРаботы,
		|	Дата,
		|	ВидУчетаВремени,
		|	План";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	Основной.Сотрудник КАК Сотрудник,
		|	Основной.ГрафикРаботы,
		|	Основной.Период КАК ПериодНачало,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
		|			ТОГДА &КонецПериода
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
		|	КОНЕЦ КАК ПериодКонец
		|ПОМЕСТИТЬ ВТГрафикиПериодами
		|ИЗ
		|	ВТГрафикиРаботников КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботников КАК Вспомогательный
		|		ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|			И (Вспомогательный.Период > Основной.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Сотрудник,
		|	Основной.ГрафикРаботы,
		|	Основной.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодНачало";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник КАК Сотрудник,
		|	СостояниеРаботников.Период КАК Период,
		|	СостояниеРаботников.Состояние
		|	ПОМЕСТИТЬ ВТСостояниеРаботниковСрез
		|	ИЗ
		|	РегистрСведений.удуСостояниеРаботниковОрганизаций.СрезПоследних(&НачалоПериода, Сотрудник В (ВЫБРАТЬ
		|					Сотрудники.Сотрудник
		|				ИЗ
		|					ВТСотрудники КАК Сотрудники) " + ?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации) + ") КАК СостояниеРаботников
		|	
		|	ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст =
		"ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник КАК Сотрудник,
		|	&НачалоПериода КАК Период,
		|	СостояниеРаботников.Состояние КАК Состояние
		|ПОМЕСТИТЬ ВТСостояниеРаботников
		|ИЗ
		|	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.Период,
		|	СостояниеРаботников.Состояние
		|ИЗ
		|	РегистрСведений.удуСостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Сотрудник
		|ГДЕ
		|	СостояниеРаботников.Период > &НачалоПериода
		|	И СостояниеРаботников.Период <= &КонецПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.ДатаНачалаДоп,
		|	СостояниеРаботников.ВидДополнительногоОтпуска.ОбозначениеВТабелеУчетаРабочегоВремени
		|ИЗ
		|	РегистрСведений.удуСостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Сотрудник
		|ГДЕ
		|	СостояниеРаботников.ДатаНачалаДоп > &НачалоПериода
		|	И СостояниеРаботников.ДатаНачалаДоп <= &КонецПериода
		|	И СостояниеРаботников.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период"; 
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	Основной.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА Основной.Состояние В (ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.Заболевание), ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ТравмаНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ПоУходуЗаВзрослым), ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.Карантин), ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.Протезирование), ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ПособиеПриДолечивании))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Болезнь)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.Командировка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Командировка)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускЕжегодный)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускУчебный)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ВынужденныйПрогул)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ГосударственныеОбязанности)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.Прогулы)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Прогулы)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.Простой)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Простой)
		|		КОГДА Основной.Состояние ССЫЛКА Справочник.удуКлассификаторИспользованияРабочегоВремени
		|			ТОГДА Основной.Состояние
		|	КОНЕЦ КАК ВидВремени,
		|	Основной.Период КАК ПериодНачало,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
		|			ТОГДА &КонецПериода
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
		|	КОНЕЦ КАК ПериодКонец
		|ПОМЕСТИТЬ ВТСостояниеСотрудников
		|ИЗ
		|	ВТСостояниеРаботников КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеРаботников КАК Вспомогательный
		|		ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|			И (Вспомогательный.Период > Основной.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Сотрудник,
		|	Основной.Состояние,
		|	Основной.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодНачало";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникДата.ДатаТабеля КАК ДатаТабеля,
		|	СотрудникДата.ПериодРегистрации КАК ПериодРегистрации,
		|	СотрудникДата.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НаДатуВведенТабель
		|ПОМЕСТИТЬ ВТДатыЗаполненныеТабелем
		|ИЗ
		|	ВТСотрудникДата КАК СотрудникДата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.удуТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка))
		|			И СотрудникДата.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (СотрудникДата.ДатаТабеля МЕЖДУ ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.Документ КАК Документ.удуТабельУчетаРабочегоВремениОрганизации).ДатаНачалаПериода И ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.Документ КАК Документ.удуТабельУчетаРабочегоВремениОрганизации).ДатаОкончанияПериода)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаТабеля,
		|	Сотрудник";
		ЗапросТабель.Выполнить();
		
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НеотфильтрованноеВремя.ПериодРегистрации КАК ПериодРегистрации,
		|	НеотфильтрованноеВремя.Организация КАК Организация,
		|	ВЫРАЗИТЬ(НеотфильтрованноеВремя.Организация.ПолноеНаименование КАК СТРОКА(300)) КАК ИмяОрганизации,
		|	НеотфильтрованноеВремя.Организация.ОКПО КАК КодПоОКПО,
		|	НеотфильтрованноеВремя.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	НеотфильтрованноеВремя.ПодразделениеОрганизации.Наименование КАК ИмяПодразделения,
		|	НеотфильтрованноеВремя.Должность.Наименование КАК Должность,
		|	НеотфильтрованноеВремя.Сотрудник,
		|	НеотфильтрованноеВремя.Сотрудник.Код КАК ТабельныйНомер,
		|	НеотфильтрованноеВремя.СотрудникНаименование,
		|	НеотфильтрованноеВремя.ДатаТабеля,
		|	НеотфильтрованноеВремя.ВидВремени,
		|	НеотфильтрованноеВремя.ВидВремени.БуквенныйКод КАК БуквенныйКод,
		|	НеотфильтрованноеВремя.ВидВремени.РабочееВремя КАК РабочееВремя,
		|	ВЫБОР КОГДА НеотфильтрованноеВремя.ВидВремени.РабочееВремя ТОГДА
		|			ЕстьNULL(НеотфильтрованноеВремя.Часов, 0)
		|		ИНАЧЕ 0 КОНЕЦ КАК Часов,
		|	ВЫБОР КОГДА НЕ НеотфильтрованноеВремя.ВидВремени.РабочееВремя ТОГДА
		|			ЕстьNULL(НеотфильтрованноеВремя.Часов, 0)
		|		ИНАЧЕ 0 КОНЕЦ КАК НеотработаноЧасов,
		|	ВЫБОР
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|			ТОГДА 2
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|			ТОГДА 3
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|			ТОГДА 5
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа)
		|				ИЛИ НеотфильтрованноеВремя.ВидВремени.РабочееВремя
		|			ТОГДА 1
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ПолеСортировки,
		|	НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
		|		НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.РабочееВремя КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя,
		|		НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.БуквенныйКод КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениБуквенныйКод,
		|	Руководитель.Должность КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОРуководителя.Фамилия, ФИОРуководителя.ФизЛицо) КАК ФИОРуководителя,
		|	ФИОРуководителя.Имя КАК ИмяРуководителя,
		|	ФИОРуководителя.Фамилия КАК ФамилияРуководителя,
		|	ФИОРуководителя.Отчество КАК ОтчествоРуководителя,
		|	ФИОРуководителя.ФизЛицо КАК ФизЛицоРуководителя,
		|	ЕСТЬNULL(РуководительКадровойСлужбыПодразделения.Должность, РуководительКадровойСлужбыОрганизации.Должность) КАК ДолжностьКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ФИОКадровикаОрганизации.Фамилия, РуководительКадровойСлужбыОрганизации.ФизЛицо)
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|					КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) <> """"
		|						ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) + "". ""
		|					ИНАЧЕ """"
		|				КОНЕЦ + ВЫБОР
		|					КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) <> """"
		|						ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) + "". ""
		|					ИНАЧЕ """"
		|				КОНЕЦ + ФИОКадровикаПодразделения.Фамилия, РуководительКадровойСлужбыПодразделения.ФизЛицо)
		|	КОНЕЦ КАК ФИОКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Имя ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Имя
		|		ИНАЧЕ ФИОКадровикаПодразделения.Имя
		|	КОНЕЦ КАК ИмяКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Фамилия
		|		ИНАЧЕ ФИОКадровикаПодразделения.Фамилия
		|	КОНЕЦ КАК ФамилияКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Отчество ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Отчество
		|		ИНАЧЕ ФИОКадровикаПодразделения.Отчество
		|	КОНЕЦ КАК ОтчествоКадровика,
		|	ВЫБОР
		|		КОГДА РуководительКадровойСлужбыПодразделения.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА РуководительКадровойСлужбыПодразделения.ФизЛицо
		|		ИНАЧЕ РуководительКадровойСлужбыПодразделения.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоКадровика,
		|	Ответственный.ИмяОтветственного КАК ИмяОтветственного,
		|	Ответственный.ФамилияОтветственного КАК ФамилияОтветственного,
		|	Ответственный.ОтчествоОтветственного КАК ОтчествоОтветственного,
		|	Ответственный.ФизлицоОтветственного КАК ФизЛицоОтветственного,
		|	Ответственный.ФИООтветственного КАК ФИООтветственного,
		|	Ответственный.ДолжностьОтветственного КАК ДолжностьОтветственного,
		|	ЕСТЬNULL(НеотфильтрованноеВремя.ВнутрисменныеОтклоненияЧасов, 0) КАК ВнутрисменныеОтклоненияЧасов
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТСотрудникДата.Организация КАК Организация,
		|		ВТСотрудникДата.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ВТСотрудникДата.Должность КАК Должность,
		|		ВТСотрудникДата.Сотрудник КАК Сотрудник,
		|		ВТСотрудникДата.СотрудникНаименование КАК СотрудникНаименование,
		|		ВТСотрудникДата.ДатаТабеля КАК ДатаТабеля,
		|		ВТСотрудникДата.ПериодРегистрации КАК ПериодРегистрации,
		|		ВЫБОР
		|			КОГДА (НЕ ВТРабочеВремя.ВидВремени ЕСТЬ NULL )
		|				ТОГДА ВТРабочеВремя.ВидВремени
		|			КОГДА (НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL )
		|				ТОГДА ВЫБОР
		|						КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|								ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|					КОНЕЦ
		|			КОГДА (НЕ ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL )
		|				ТОГДА ВЫБОР
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0
		|							ТОГДА ВЫБОР
		|									КОГДА ИндивидуальныйГрафикПоРаботникам.План
		|										ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|									КОГДА (НЕ ИндивидуальныйГрафикПоРаботникам.План)
		|											И ДатыЗаполненныеТабелем.НаДатуВведенТабель
		|										ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|								КОНЕЦ
		|						ИНАЧЕ ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени, ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа))
		|					КОНЕЦ
		|			КОГДА (НЕ ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL )
		|				ТОГДА ВЫБОР
		|						КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						ИНАЧЕ ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени, ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа))
		|					КОНЕЦ
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|		КОНЕЦ КАК ВидВремени,
		|		ВЫБОР 
		|			КОГДА НЕ ВТРабочеВремя.Часов ЕСТЬ NULL ТОГДА ВТРабочеВремя.Часов
		|			КОГДА НЕ ГрафикПоОсновнымНачислениям.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоОсновнымНачислениям.ОсновноеЗначение - 
		|				ВЫБОР КОГДА ЕСТЬNULL(ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени.РабочееВремя, Истина)
		|					ТОГДА 0
		|					ИНАЧЕ ЕСТЬNULL(ВнутрисменныеОтклонения.Часов, 0)
		|				КОНЕЦ
		|			КОГДА НЕ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение ЕСТЬ NULL ТОГДА ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение
		|			КОГДА НЕ ГрафикПоСостояниюСотрудников.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение
		|			КОГДА НЕ ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ NULL ТОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение - 
		|				ВЫБОР КОГДА ЕСТЬNULL(ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени.РабочееВремя, Истина)
		|					ТОГДА 0
		|					ИНАЧЕ ЕСТЬNULL(ВнутрисменныеОтклонения.Часов, 0)
		|				КОНЕЦ
		|			КОГДА НЕ ГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоРаботникам.ОсновноеЗначение - 
		|				ВЫБОР КОГДА ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Сверхурочные)  
		|					ТОГДА 0 ИНАЧЕ ЕстьNULL(ВнутрисменныеОтклонения.Часов, 0) КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Часов,
		|		ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
		|		ВнутрисменныеОтклонения.Часов КАК ВнутрисменныеОтклоненияЧасов
		|	ИЗ
		|		ВТСотрудникДата КАК ВТСотрудникДата
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочеВремя КАК ВТРабочеВремя
		|			ПО (ВТРабочеВремя.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ВТРабочеВремя.ДатаТабеля = ВТСотрудникДата.ДатаТабеля)
		|				И (ВТРабочеВремя.ВидВремени <> ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Сверхурочные))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиПериодами КАК ВТГрафикиПериодами
		|			ПО (ВТГрафикиПериодами.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И ВТСотрудникДата.ДатаТабеля >= ВТГрафикиПериодами.ПериодНачало
		|				И ВТСотрудникДата.ДатаТабеля <= ВТГрафикиПериодами.ПериодКонец
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыЗаполненныеТабелем КАК ДатыЗаполненныеТабелем
		|			ПО (ДатыЗаполненныеТабелем.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ДатыЗаполненныеТабелем.ДатаТабеля = ВТСотрудникДата.ДатаТабеля)
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВТРабочееВремя.ВидВремени КАК ВидИспользованияРабочегоВремени,
		|				ВТРабочееВремя.Часов КАК Часов,
		|				ВТРабочееВремя.Сотрудник КАК Сотрудник,
		|				ВТРабочееВремя.ДатаТабеля КАК Период
		|			ИЗ
		|				ВТРабочеВремя КАК ВТРабочееВремя
		|			ГДЕ
		|				ВТРабочееВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Сверхурочные)) КАК ВнутрисменныеОтклонения
		|			ПО (ВнутрисменныеОтклонения.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ВнутрисменныеОтклонения.Период = ВТСотрудникДата.ДатаТабеля)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоОсновнымНачислениям
		|			ПО (ложь)
		|				И (ГрафикПоОсновнымНачислениям.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоЧасам) = ГрафикПоОсновнымНачислениям.ВидУчетаВремени)
		|				И (ложь)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников КАК ВТСостояниеСотрудников
		|			ПО ВТСотрудникДата.Сотрудник = ВТСостояниеСотрудников.Сотрудник
		|				И ВТСотрудникДата.ДатаТабеля >= ВТСостояниеСотрудников.ПериодНачало
		|				И ВТСотрудникДата.ДатаТабеля <= ВТСостояниеСотрудников.ПериодКонец
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоСостояниюСотрудников
		|			ПО (ИндивидуальныйГрафикПоСостояниюСотрудников.ГрафикРаботы = ВТСотрудникДата.Сотрудник)
		|				И (ИндивидуальныйГрафикПоСостояниюСотрудников.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ВЫБОР
		|					КОГДА ВТСостояниеСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам)
		|					КОГДА ВТСостояниеСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоЧасам)
		|				КОНЕЦ = ИндивидуальныйГрафикПоСостояниюСотрудников.ВидУчетаВремени)
		|				И ((НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоСостояниюСотрудников
		|			ПО (ложь)
		|				И (ГрафикПоСостояниюСотрудников.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоЧасам) = ГрафикПоСостояниюСотрудников.ВидУчетаВремени)
		|				И (ложь)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизацийПриемы
		|			ПО (РаботникиОрганизацийПриемы.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (РаботникиОрганизацийПриемы.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.ПриемНаРаботу))
		|				И (РаботникиОрганизацийПриемы.Период <= ВТСотрудникДата.ДатаТабеля)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
		|			ПО (РаботникиОрганизацийУвольнения.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоРаботникам
		|			ПО (ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы = ВТСотрудникДата.Сотрудник)
		|				И (ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение >= 0)
		|				И (ИндивидуальныйГрафикПоРаботникам.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоДням))
		|				И ((НЕ(ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам))
		|						И ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0)))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоРаботникам
		|			ПО (ГрафикПоРаботникам.ГрафикРаботы = ВТГрафикиПериодами.ГрафикРаботы)
		|				И (ГрафикПоРаботникам.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ГрафикПоРаботникам.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоДням))
		|				И (ГрафикПоРаботникам.ВидУчетаВремени = ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени
		|					ИЛИ ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы ЕСТЬ NULL )
		|				И ((НЕ(ГрафикПоРаботникам.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам))
		|						И ГрафикПоРаботникам.ОсновноеЗначение = 0)))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|			ПО (ПлановыеНачисленияСотрудников.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ПлановыеНачисленияСотрудников.ДатаТабеля = ВТСотрудникДата.ДатаТабеля)
		|	ГДЕ
		|		(РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL 
		|				ИЛИ РаботникиОрганизацийУвольнения.Период > ВТСотрудникДата.ДатаТабеля)
		|		И (НЕ((НЕ ВЫБОР
		|							КОГДА (НЕ ВТРабочеВремя.ВидВремени ЕСТЬ NULL )
		|								ТОГДА ВТРабочеВремя.ВидВремени
		|							КОГДА (НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL )
		|								ТОГДА ВЫБОР
		|										КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|												ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|										ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|									КОНЕЦ
		|							КОГДА (НЕ ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL )
		|								ТОГДА ВЫБОР
		|										КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|										КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|										КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|										ИНАЧЕ ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа)
		|									КОНЕЦ
		|							КОГДА (НЕ ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL )
		|								ТОГДА ВЫБОР
		|										КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|										КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|										КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|										ИНАЧЕ ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа)
		|									КОНЕЦ
		|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						КОНЕЦ В (ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа), ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Праздники)))
		|					И ГрафикПоРаботникам.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам))))) КАК НеотфильтрованноеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации)) КАК Руководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОРуководителя
		|			ПО Руководитель.ФизЛицо = ФИОРуководителя.ФизЛицо
		|		ПО НеотфильтрованноеВремя.Организация = Руководитель.Учреждение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаОрганизации
		|			ПО РуководительКадровойСлужбыОрганизации.ФизЛицо = ФИОКадровикаОрганизации.ФизЛицо
		|		ПО НеотфильтрованноеВремя.Организация = РуководительКадровойСлужбыОрганизации.Учреждение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыПодразделения
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаПодразделения
		|			ПО РуководительКадровойСлужбыПодразделения.ФизЛицо = ФИОКадровикаПодразделения.ФизЛицо
		|		ПО НеотфильтрованноеВремя.Организация = РуководительКадровойСлужбыПодразделения.Учреждение
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
		|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Должность) КАК ДолжностьОтветственного,
		|			МАКСИМУМ(ЕСТЬNULL(ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия, РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо)) КАК ФИООтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК ИмяОтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК ОтчествоОтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК ФамилияОтветственного,
		|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо) КАК ФизлицоОтветственного
		|		ИЗ
		|			РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(&КонецПериода, Сотрудник.Физлицо = &Ответственный) КАК РаботникиОрганизацийСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
		|				ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РаботникиОрганизацийСрезПоследних.Организация) КАК Ответственный
		|		ПО НеотфильтрованноеВремя.Организация = Ответственный.Организация
		|ГДЕ
		|	(НЕ НеотфильтрованноеВремя.ВидВремени ЕСТЬ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации, Организация, " + ?(ГруппироватьПодразделения, "ПодразделениеОрганизации,", "") + " СотрудникНаименование, Сотрудник, Должность, ДатаТабеля, ПолеСортировки";
		
		РезультатЗапроса = ЗапросТабель.Выполнить();
		ВыборкаПоРаботнику = РезультатЗапроса.Выбрать();
		
		СоответствиеЦелодневныхНевыходов = Новый Соответствие;
		СоответствиеЦелодневныхНевыходовЧасы = Новый Соответствие;
		ВидыВремениЗаДень = Новый Соответствие;
		ПредыдущаяДата = 0;
		// Выводим информационное сообщение, если табель формируется "вперед"
		Если ТекущаяДата() < НачалоДня(КонецПериода) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст="Формирование табеля за неоконченный месяц";
			СообщениеПользователю.Сообщить();
			СообщениеПользователю.Текст="При формировании табеля за будущий или текущий месяц, выводятся данные только до рабочей даты (" + Формат(ТекущаяДата(), "ДЛФ=ДД") + ").";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если ГруппироватьПодразделения Тогда
			
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач     = НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				ОбластьДанныхШапка.Параметры.ДатаКон     = КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
						Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						НомерПП = 0;
						ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
						ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
						ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
						ОбластьДанныхПодвал.Параметры.ФИООтветственного = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоОтветственного, ВыборкаПоРаботнику.ФамилияОтветственного, ВыборкаПоРаботнику.ИмяОтветственного, ВыборкаПоРаботнику.ОтчествоОтветственного);
						ОбластьДанныхПодвал.Параметры.ФИОРуководителя   = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоРуководителя, ВыборкаПоРаботнику.ФамилияРуководителя, ВыборкаПоРаботнику.ИмяРуководителя, ВыборкаПоРаботнику.ОтчествоРуководителя);
						ОбластьДанныхПодвал.Параметры.ФИОКадровика      = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоКадровика, ВыборкаПоРаботнику.ФамилияКадровика, ВыборкаПоРаботнику.ИмяКадровика, ВыборкаПоРаботнику.ОтчествоКадровика);
						
						ДокументРезультат.Вывести(ОбластьДанныхШапка);
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
								
								НомерПП = НомерПП + 1;
								
								ДниПерваяПоловина  = 0;
								ЧасыПерваяПоловина = 0;
								ДниВтораяПоловина  = 0;
								ЧасыВтораяПоловина = 0;
								
								ПредыдущаяДата = Дата(1,1,1);
								
								Для Сч = 1 По ПараметровВстроке Цикл
									ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
								КонецЦикла;
								СоответствиеЦелодневныхНевыходов.Очистить();
								СоответствиеЦелодневныхНевыходовЧасы.Очистить();
								
								ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
								ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
								ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
								
								// ОбластьДанныхПодвал.
								
								
								Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
									
									СимволДня = ""; 
									ОтработаноЧасовЗаДень = 0;
									ОтработаноЧасовЗаДеньСтр = "";
									НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
									ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
									УчитыватьВыходнойДень = Истина;
									
									Пока ВыборкаПоРаботнику.Следующий() Цикл
										
										Если НЕ ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля Тогда
											// Очищаем соответствие
											ВидыВремениЗаДень.Очистить();
										КонецЕсли;
										
										Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени 
											И ВыборкаПоРаботнику.РабочееВремя Тогда
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
											Продолжить;
										КонецЕсли;
										
										Если ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.Праздники Тогда
											УчитыватьВыходнойДень = Ложь;
										ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни И НЕ УчитыватьВыходнойДень Тогда
											Продолжить;
										КонецЕсли;
										Если ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) = Неопределено Тогда
											ОсновнойВидВремениПолучен = Ложь;
											БуквенныйКод = ВыборкаПоРаботнику.БуквенныйКод;
											СимволДня = СимволДня + "/" + БуквенныйКод;
										Иначе
											ОсновнойВидВремениПолучен = Истина;
										КонецЕсли;
										// Обработка внутрисменных отклонений
										Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
											И ВыборкаПоРаботнику.РабочееВремя
											И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
											ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) Тогда
											
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
											
											ЧасыВходятВЯвку = (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.Сверхурочные)
											И (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя);
											
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - 
											?(ЧасыВходятВЯвку, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов, 0);
											БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениБуквенныйКод;
											СимволДня = СимволДня + "/" + БуквенныйКод;
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр +
											?(ОсновнойВидВремениПолучен, "", "/" + Строка(ВыборкаПоРаботнику.Часов - ?(ЧасыВходятВЯвку, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов, 0)))
											+ "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
											Если Не ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя Тогда
												Если СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
													СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, 0);
													СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
												Иначе
													СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
												КонецЕсли;
											КонецЕсли;										
										ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
											ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) 
											И ВыборкаПоРаботнику.РабочееВремя 
											И НЕ ОсновнойВидВремениПолучен Тогда
											
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
										ИначеЕсли ВыборкаПоРаботнику.РабочееВремя И НЕ ОсновнойВидВремениПолучен Тогда
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
										ИначеЕсли (НЕ ВыборкаПоРаботнику.РабочееВремя) И (ВыборкаПоРаботнику.Часов = 0) И (ВыборкаПоРаботнику.НеотработаноЧасов > 0) 
											И (ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.Командировка) Тогда
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.НеотработаноЧасов);
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.НеотработаноЧасов;
										КонецЕсли;
										
										Если (НЕ ВыборкаПоРаботнику.РабочееВремя)
											//И ВыборкаПоРаботнику.Часов <> 0
											И (ВыборкаПоРаботнику.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
											И (ВыборкаПоРаботнику.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.Командировка) Тогда
											Если  СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
												СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0));
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов);
											Иначе
												СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод,  ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0) + СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод));
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
											КонецЕсли;
											
											Если ОтработаноЧасовЗаДень > 0 И ВыборкаПоРаботнику.Часов > 0 тогда
												ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
											КонецЕсли;
										КонецЕсли;
										
										ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля;
										ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВыборкаПоРаботнику.Часов);
										ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
									КонецЦикла;	
									СимволДня = Сред(СимволДня, 2);
									ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
									ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
									ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
									
									Если ОтработаноЧасовЗаДень <> 0 Тогда
										Если ПерваяПоловина Тогда
											ДниПерваяПоловина = ДниПерваяПоловина + 1;
											ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
										Иначе
											ДниВтораяПоловина = ДниВтораяПоловина + 1;
											ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
								//	заполняем раздел "Отработано за"
								ОбластьДанныхСтрока.Параметры.ДниПерваяПоловина  = ДниПерваяПоловина;
								ОбластьДанныхСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
								ОбластьДанныхСтрока.Параметры.ДниВтораяПоловина  = ДниВтораяПоловина;
								ОбластьДанныхСтрока.Параметры.ЧасыВтораяПоловина = ЧасыВтораяПоловина;
								ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
								ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
								
								// заполняем раздел "Неявки по причинам"
								СчНеявок = 0;
								Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
									Если (Элемент.Значение > 0) ИЛИ СоответствиеЦелодневныхНевыходовЧасы.Получить(Элемент.Ключ) > 0 Тогда
										СчНеявок = СчНеявок + 1;
										ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = Элемент.Ключ;
										КоличествоЧасов = Строка(СоответствиеЦелодневныхНевыходовЧасы.Получить(Элемент.Ключ));
										Если КоличествоЧасов <> "0" Тогда
											ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Формат(Элемент.Значение) + "(" + КоличествоЧасов + ")";
										Иначе
											ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Формат(Элемент.Значение);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла; 
								
								// Проверим, уместится ли строка на странице или надо открывать новую страницу
								Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
									ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
									ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
								КонецЕсли;
								
								ДокументРезультат.Вывести(ОбластьДанныхСтрока);
								
							КонецЦикла;
						КонецЦикла;
						Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
							ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
							ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
						КонецЕсли;
						ДокументРезультат.Вывести(ОбластьДанныхПодвал);
					КонецЦикла;
					
				КонецЦикла;	
			КонецЦикла;	
			
		Иначе
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач     = НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				ОбластьДанныхШапка.Параметры.ДатаКон     = КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					НомерПП = 0;
					ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
					ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
					ОбластьДанныхШапка.Параметры.ИмяПодразделения = ?(ОтборПодразделения, Подразделение, "");
					ОбластьДанныхШапка.Параметры.ДатаЗаполнения = ДатаЗаполнения;
					ОбластьДанныхШапка.Параметры.НомерДокумента = НомерДокумента;
					ДокументРезультат.Вывести(ОбластьДанныхШапка);
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
							
							НомерПП = НомерПП + 1;
							
							ДниПерваяПоловина  = 0;
							ЧасыПерваяПоловина = 0;
							ДниВтораяПоловина  = 0;
							ЧасыВтораяПоловина = 0;
							
							ПредыдущаяДата = Дата(1,1,1);
							
							Для Сч = 1 По ПараметровВстроке Цикл
								ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
							КонецЦикла;
							СоответствиеЦелодневныхНевыходов.Очистить();
							СоответствиеЦелодневныхНевыходовЧасы.Очистить();
							
							ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
							ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
							ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
							ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
							ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
							ОбластьДанныхПодвал.Параметры.ФИООтветственного = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоОтветственного, ВыборкаПоРаботнику.ФамилияОтветственного, ВыборкаПоРаботнику.ИмяОтветственного, ВыборкаПоРаботнику.ОтчествоОтветственного);
							ОбластьДанныхПодвал.Параметры.ФИОРуководителя   = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоРуководителя, ВыборкаПоРаботнику.ФамилияРуководителя, ВыборкаПоРаботнику.ИмяРуководителя, ВыборкаПоРаботнику.ОтчествоРуководителя);
							ОбластьДанныхПодвал.Параметры.ФИОКадровика      = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоКадровика, ВыборкаПоРаботнику.ФамилияКадровика, ВыборкаПоРаботнику.ИмяКадровика, ВыборкаПоРаботнику.ОтчествоКадровика);
							
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
								
								СимволДня = ""; ОтработаноЧасовЗаДень = 0;
								ОтработаноЧасовЗаДеньСтр = "";
								
								НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
								ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
								УчитыватьВыходнойДень = Истина;
								
								Пока ВыборкаПоРаботнику.Следующий() Цикл
									
									Если НЕ ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля Тогда
										// Очищаем соответствие
										ВидыВремениЗаДень.Очистить();
									КонецЕсли;
									
									Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени 
										И ВыборкаПоРаботнику.РабочееВремя Тогда
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
										Продолжить;
									КонецЕсли;
									
									Если ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.Праздники Тогда
										УчитыватьВыходнойДень = Ложь;
									ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни И НЕ УчитыватьВыходнойДень Тогда
										Продолжить;
									КонецЕсли;
									
									Если ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) = Неопределено Тогда
										ОсновнойВидВремениПолучен = Ложь;
										БуквенныйКод = ВыборкаПоРаботнику.БуквенныйКод;
										СимволДня = СимволДня + "/" + БуквенныйКод;
									Иначе
										ОсновнойВидВремениПолучен = Истина;
									КонецЕсли;
									
									// Обработка внутрисменных отклонений
									Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
										И ВыборкаПоРаботнику.РабочееВремя
										И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
										ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) Тогда
										
										
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
										
										
										ЧасыВходятВЯвку = (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.Сверхурочные)
										И (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя);
										
										Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени
											= Справочники.удуКлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
											ЧасыВходятВЯвку = Ложь;
										ИначеЕсли ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя Тогда
											ЧасыВходятВЯвку = Истина;
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
										Иначе
											ЧасыВходятВЯвку = Ложь;
										КонецЕсли;
										
										БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениБуквенныйКод;
										СимволДня = СимволДня + "/" + БуквенныйКод;
										ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + 
										?(ОсновнойВидВремениПолучен, "", "/" + Строка(ВыборкаПоРаботнику.Часов - ?(ЧасыВходятВЯвку, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов, 0)))
										+ "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
										
										Если Не ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя Тогда	
											Если СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
												СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, 0);
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
											Иначе
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
											КонецЕсли;
										КонецЕсли;
									ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
										ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) 
										И ВыборкаПоРаботнику.РабочееВремя 
										И НЕ ОсновнойВидВремениПолучен Тогда
										
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
										ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
									ИначеЕсли ВыборкаПоРаботнику.РабочееВремя И НЕ ОсновнойВидВремениПолучен Тогда
										ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
									ИначеЕсли (НЕ ВыборкаПоРаботнику.РабочееВремя) И (ВыборкаПоРаботнику.Часов = 0) И (ВыборкаПоРаботнику.НеотработаноЧасов > 0) 
										И (ВыборкаПоРаботнику.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.Командировка) Тогда
										ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.НеотработаноЧасов);
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.НеотработаноЧасов;
									КонецЕсли;
									
									Если (НЕ ВыборкаПоРаботнику.РабочееВремя)
										//И ВыборкаПоРаботнику.НеотработаноЧасов <> 0
										И (ВыборкаПоРаботнику.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни)
										И (ВыборкаПоРаботнику.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.Командировка) Тогда
										Если  СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
											СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0));
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов);
										Иначе
											СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод,  ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0) + СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод));
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
										КонецЕсли;
										Если ОтработаноЧасовЗаДень > 0 тогда
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.НеотработаноЧасов);
										КонецЕсли;
									КонецЕсли;
									
									ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля;
									ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВыборкаПоРаботнику.Часов);
									ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
									
									
								КонецЦикла;	
								СимволДня = Сред(СимволДня, 2);
								ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
								ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
								ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
								
								Если ОтработаноЧасовЗаДень <> 0 Тогда
									Если ПерваяПоловина Тогда
										ДниПерваяПоловина = ДниПерваяПоловина + 1;
										ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
									Иначе
										ДниВтораяПоловина = ДниВтораяПоловина + 1;
										ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							//	заполняем раздел "Отработано за"
							ОбластьДанныхСтрока.Параметры.ДниПерваяПоловина  = ДниПерваяПоловина;
							ОбластьДанныхСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
							ОбластьДанныхСтрока.Параметры.ДниВтораяПоловина  = ДниВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.ЧасыВтораяПоловина = ЧасыВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
							
							// заполняем раздел "Неявки по причинам"
							СчНеявок = 0;
							Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
								СчНеявок = СчНеявок + 1;
								ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = Элемент.Ключ;
								КоличествоЧасов = Строка(СоответствиеЦелодневныхНевыходовЧасы.Получить(Элемент.Ключ));
								Если КоличествоЧасов <> "0" Тогда
									ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = формат(Элемент.Значение) + "(" + КоличествоЧасов + ")";
								Иначе
									ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = формат(Элемент.Значение);
								КонецЕсли;
							КонецЦикла; 
							
							// Проверим, уместится ли строка на странице или надо открывать новую страницу
							Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							КонецЕсли;
							
							ДокументРезультат.Вывести(ОбластьДанныхСтрока);
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхПодвал);
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Режим = "Бланк" Тогда 
		
		// Запрос сотрудников
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Имя = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|		КОНЕЦ, РаботникиОрганизаций.Сотрудник.Физлицо) КАК СотрудникНаименование,
		|	РаботникиОрганизаций.Организация КАК Организация,
		|	ПОДСТРОКА(РаботникиОрганизаций.Организация.ПолноеНаименование, 1, 250) КАК ИмяОрганизации,
		|	РаботникиОрганизаций.Организация.ОКПО КАК КодПоОКПО,
		|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизаций.Должность.Наименование КАК Должность,
		|	Руководитель.Должность КАК ДолжностьРуководителя,
		|		ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОРуководителя.Фамилия, ФИОРуководителя.ФизЛицо) КАК ФИОРуководителя,
		|		ФИОРуководителя.Имя КАК ИмяРуководителя,
		|		ФИОРуководителя.Фамилия КАК ФамилияРуководителя,
		|		ФИОРуководителя.Отчество КАК ОтчествоРуководителя,
		|		ФИОРуководителя.ФизЛицо КАК ФизЛицоРуководителя,
		|		ЕСТЬNULL(РуководительКадровойСлужбыПодразделения.Должность, РуководительКадровойСлужбыОрганизации.Должность) КАК ДолжностьКадровика,
		|		ВЫБОР КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|		ТОГДА ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОКадровикаОрганизации.Фамилия, РуководительКадровойСлужбыОрганизации.ФизЛицо)
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОКадровикаПодразделения.Фамилия, РуководительКадровойСлужбыПодразделения.ФизЛицо) 
		|		КОНЕЦ КАК ФИОКадровика,
		|	ФИОКадровикаПодразделения.Имя КАК ИмяКадровика,
		|	ФИОКадровикаПодразделения.Фамилия КАК ФамилияКадровика,
		|	ФИОКадровикаПодразделения.Отчество КАК ОтчествоКадровика,
		|	РуководительКадровойСлужбыПодразделения.ФизЛицо КАК ФизЛицоКадровика,
		|	Ответственный.ФИООтветственного КАК ФИООтветственного,
		|	Ответственный.ДолжностьОтветственного КАК ДолжностьОтветственного, 
		|	РаботникиОрганизаций.ПодразделениеОрганизации.Наименование КАК ИмяПодразделения
		|ИЗ
		|	ВТТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(
		|		&КонецПериода,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				ИСТИНА" + ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации)," И " + СтрЗаменить(УсловиеПоРаботникам,"Сотрудник","Ссылка")) + ")) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации)) КАК Руководитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОРуководителя
		|		ПО Руководитель.ФизЛицо = ФИОРуководителя.ФизЛицо
		|	ПО РаботникиОрганизаций.Организация = Руководитель.Учреждение
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаОрганизации
		|		ПО РуководительКадровойСлужбыОрганизации.ФизЛицо = ФИОКадровикаОрганизации.ФизЛицо
		|	ПО РаботникиОрганизаций.Организация = РуководительКадровойСлужбыОрганизации.Учреждение
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыПодразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаПодразделения
		|		ПО РуководительКадровойСлужбыПодразделения.ФизЛицо = ФИОКадровикаПодразделения.ФизЛицо
		|	ПО РаботникиОрганизаций.Организация = РуководительКадровойСлужбыПодразделения.Учреждение "+?(НЕ (ГруппироватьПодразделения ИЛИ ОтборПодразделения), " И ЛОЖЬ", "")+"
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Должность) КАК ДолжностьОтветственного,
		|		МАКСИМУМ(ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия, РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо)) КАК ФИООтветственного,
		|		МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК ИмяОтветственного,
		|		МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК ОтчествоОтветственного,
		|		МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК ФамилияОтветственного,
		|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо) КАК ФизЛицоОтветственного
		|				ИЗ
		|				РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(&КонецПериода, Сотрудник.Физлицо = &Ответственный) КАК РаботникиОрганизацийСрезПоследних
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
		|					ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо) КАК Ответственный
		|	ПО ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(&КонецПериода, ) КАК РаботникиОрганизацийСрезПоследних
		|	ПО РаботникиОрганизаций.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|ГДЕ
		|	ИСТИНА " + СтрЗаменить(УсловиеВЗапрос, "%Таблица%", "РаботникиОрганизаций") + "
		|		И НЕ (РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение))
		|	
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации, Организация, " + ПорядокГруппировки + " СотрудникНаименование, Сотрудник";
		
		ВыборкаПоРаботнику = ЗапросТабель.Выполнить().Выбрать();
		
		Если ГруппироватьПодразделения Тогда
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач = НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				ОбластьДанныхШапка.Параметры.ДатаКон = КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
						
						Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						НомерПП = 0;
						ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
						ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
						ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
						
						ДокументРезультат.Вывести(ОбластьДанныхШапка);
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
								
								НомерПП = НомерПП + 1;
								
								ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
								ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
								ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
								
								// Проверим, уместится ли строка на странице или надо открывать новую страницу
								Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
									ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
									ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
								КонецЕсли;
								ДокументРезультат.Вывести(ОбластьДанныхСтрока);
								
							КонецЦикла; 
						КонецЦикла; 
						Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
							ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
							ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
						КонецЕсли;
						ДокументРезультат.Вывести(ОбластьДанныхПодвал);
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
		Иначе
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач = НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				ОбластьДанныхШапка.Параметры.ДатаКон = КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					НомерПП = 0;
					ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
					ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
					ОбластьДанныхШапка.Параметры.ИмяПодразделения = "";
					ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
					ДокументРезультат.Вывести(ОбластьДанныхШапка);
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
							
							НомерПП = НомерПП + 1;
							
							ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
							ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
							ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
							ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
							
							// Проверим, уместится ли строка на странице или надо открывать новую страницу
							Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							КонецЕсли;
							ДокументРезультат.Вывести(ОбластьДанныхСтрока);
							
						КонецЦикла; 
					КонецЦикла; 
					Если Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
						ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
						ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьДанныхПодвал);
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		
		Если ДокументРезультат.ВысотаТаблицы = 0 Тогда
			
			Если ОтборОрганизации и ТипЗнч(Организация) = Тип("СправочникСсылка.удуУчреждения") Тогда
				ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(Организация.ПолноеНаименование);
				ОбластьДанныхШапка.Параметры.КодПоОКПО = Организация.ОКПО;
			КонецЕсли;
			Если ОтборПодразделения и ТипЗнч(Организация) = Тип("СправочникСсылка.удуПодразделенияУчереждения") Тогда
				ОбластьДанныхШапка.Параметры.ИмяПодразделения = Подразделение.Наименование;
			КонецЕсли;
			
			ОбластьДанныхСтрока.Параметры.Работник = " " + Символы.ПС + " ";
			ВыводимыеОбласти = Новый Массив();
			ВыводимыеОбласти.Добавить(ОбластьДанныхСтрока);
			ВыводимыеОбласти.Добавить(ОбластьДанныхПодвал);
			ДокументРезультат.Вывести(ОбластьДанныхШапка);
			ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
			Для Сч = 1 По ПараметровВстроке Цикл
				ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
			КонецЦикла;
			Пока удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти, Ложь) Цикл
				ДокументРезультат.Вывести(ОбластьДанныхСтрока);
			КонецЦикла;
			ДокументРезультат.Вывести(ОбластьДанныхПодвал);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтчет()
