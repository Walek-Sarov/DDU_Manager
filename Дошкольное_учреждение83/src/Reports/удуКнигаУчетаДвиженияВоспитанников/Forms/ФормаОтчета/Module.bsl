&НаСервере
Функция СформироватьОтчетНаСервере()	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Группа КАК Группа,
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок КАК Ребенок,
	               |	удуМатьРебенка.ЧленСемьи КАК МатьРебенка,
	               |	удуСведенияОМестеРаботыМатери.МестоРаботы КАК МестоРаботыМатери,
	               |	удуСведенияОМестеРаботыМатери.ЗанимаемаяДолжность КАК ЗанимаемаяДолжностьМатери,
	               |	удуОтецРебенка.ЧленСемьи КАК ОтецРебенка,
	               |	удуСведенияОМестеРаботыОтца.МестоРаботы КАК МестоРаботыОтца,
	               |	удуСведенияОМестеРаботыОтца.ЗанимаемаяДолжность КАК ЗанимаемаяДолжностьОтца,
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе,
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Регистратор,
	               |	удуСведенияОПредыдущихДОУСрезПоследних.Учреждение КАК УчреждениеСтарое,
	               |	удуСведенияОПредыдущихДОУСрезПоследних.Группа КАК ГруппаСтарая,
	               |	ВЫБОР
	               |		КОГДА удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе = &ПринятВГруппу
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоДетей,
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.ПричинаВыбытияИзГруппы КАК ПричинаВыбытия
	               |ИЗ
	               |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(&ПериодОтчета, ) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСведенияОПредыдущихДОУ.СрезПоследних(&ПериодОтчета, Нахождение = &Прибыл) КАК удуСведенияОПредыдущихДОУСрезПоследних
	               |		ПО удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок = удуСведенияОПредыдущихДОУСрезПоследних.Ребенок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСоставСемьиРебенка.СрезПоследних(&ПериодОтчета, СтепеньРодства = &Мать) КАК удуМатьРебенка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСведенияОМестеРаботы.СрезПоследних(&ПериодОтчета, ) КАК удуСведенияОМестеРаботыМатери
	               |			ПО удуМатьРебенка.ЧленСемьи = удуСведенияОМестеРаботыМатери.Работник
	               |		ПО удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок = удуМатьРебенка.Ребенок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСоставСемьиРебенка.СрезПоследних(&ПериодОтчета, СтепеньРодства = &Отец) КАК удуОтецРебенка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСведенияОМестеРаботы.СрезПоследних(&ПериодОтчета, ) КАК удуСведенияОМестеРаботыОтца
	               |			ПО удуОтецРебенка.ЧленСемьи = удуСведенияОМестеРаботыОтца.Работник
	               |		ПО удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок = удуОтецРебенка.Ребенок
	               |ГДЕ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе В(&СписокСостояний)";
	
	Если ЗначениеЗаполнено(Отчет.ГруппаОтбора) Тогда 
		ТекстЗапроса = ТекстЗапроса + "			
			|	И удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Группа = &Группа";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "  
			|ИТОГИ
			|	СУММА(КоличествоДетей)
			|ПО
			|	Группа";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПериодОтчета", ОтчетОбъект.ДатаОтчета);
	Запрос.УстановитьПараметр("Группа", ОтчетОбъект.ГруппаОтбора);
	Запрос.УстановитьПараметр("Мать", Справочники.удуСтепениРодства.Мать);
	Запрос.УстановитьПараметр("Отец", Справочники.удуСтепениРодства.Отец);
	Запрос.УстановитьПараметр("Прибыл", "Прибыл");
	Запрос.УстановитьПараметр("ПринятВГруппу", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
	
	СписокСостояний = Новый СписокЗначений;
	Если СокрЛП(Отчет.ОтборИнформации) = "Отображать сведения о зачисленных и выбывших детях" Тогда
		СписокСостояний.Добавить(Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
		СписокСостояний.Добавить(Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ИсключенИзГруппы);
	ИначеЕсли СокрЛП(Отчет.ОтборИнформации) = "Отображать сведения только о зачисленных детях" Тогда
		СписокСостояний.Добавить(Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
	ИначеЕсли СокрЛП(Отчет.ОтборИнформации) = "Отображать сведения только о выбывших детях" Тогда
		СписокСостояний.Добавить(Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ИсключенИзГруппы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РезультирующаяТаблица = Новый ТабличныйДокумент;
	
	Макет = ОтчетОбъект.ПолучитьМакет("Макет");
	
	СекцияШапкаОтчета = Макет.Получитьобласть("Шапка");
	СекцияСтрокаГруппа = Макет.Получитьобласть("СтрокаГруппа");
	
	СекцияШапкаОтчета.Параметры.ДатаФормированияОтчета = Формат(ОтчетОбъект.ДатаОтчета, "ДЛФ=D");	
	
	РезультирующаяТаблица.Вывести(СекцияШапкаОтчета);
	
	РезультирующаяТаблица.НачатьАвтогруппировкуСтрок();
	Для Каждого СтрокаГруппа ИЗ РезультатЗапроса.Строки Цикл
		СекцияСтрокаГруппа.Параметры.ГруппаНаименование = СокрЛП(СтрокаГруппа.Группа.Наименование) + 
			" (вместительность: " + ?(СтрокаГруппа.Группа.БезОграниченияВместительности, "<не ограничена>", Строка(СтрокаГруппа.Группа.Вместительность)) + ")" + 
			" (количество детей: " + Строка(СтрокаГруппа.КоличествоДетей) + ")";
		СекцияСтрокаГруппа.Параметры.ГруппаСсылка = СтрокаГруппа.Группа;
		РезультирующаяТаблица.Вывести(СекцияСтрокаГруппа, 1, "Группа", Ложь);	
		НПП = 0;
		Для Каждого СтрокаРебенок Из СтрокаГруппа.Строки Цикл
			Если (СтрокаРебенок.СостояниеУчетаВГруппе = Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ИсключенИзГруппы) И РаскрашиватьОтчет Тогда
				СекцияСтрокаРебенок = Макет.ПолучитьОбласть("СтрокаРебенокВыбытие");
			Иначе 
				СекцияСтрокаРебенок = Макет.ПолучитьОбласть("СтрокаРебенок");
			КонецЕсли;
			
			НПП = НПП + 1;
			СекцияСтрокаРебенок.Параметры.НПП = НПП;
			СекцияСтрокаРебенок.Параметры.ФИОРебенка = СокрЛП(СтрокаРебенок.Ребенок.Наименование);
			СекцияСтрокаРебенок.Параметры.РебенокСсылка = СтрокаРебенок.Ребенок;
			СекцияСтрокаРебенок.Параметры.ДатаРождения = Формат(СтрокаРебенок.Ребенок.ДатаРождения, "ДЛФ=D");

			НайденнаяСтрокаМестаПроживания = СтрокаРебенок.Ребенок.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияРебенка);
			Если НайденнаяСтрокаМестаПроживания <> Неопределено Тогда
				СекцияСтрокаРебенок.Параметры.АдресПроживания = СокрЛП(НайденнаяСтрокаМестаПроживания.Представление);
			Иначе
				СекцияСтрокаРебенок.Параметры.АдресПроживания = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРебенок.МатьРебенка) Тогда
				СекцияСтрокаРебенок.Параметры.СведенияОМатери = СокрЛП(СтрокаРебенок.МатьРебенка.Наименование) + Символы.ПС + 
					"Место работы: " + ?(ЗначениеЗаполнено(СтрокаРебенок.МестоРаботыМатери), СокрЛП(СтрокаРебенок.МестоРаботыМатери) + " (" + СокрЛП(СтрокаРебенок.ЗанимаемаяДолжностьМатери) + ")", "<нет сведений>");
				СекцияСтрокаРебенок.Параметры.МатьСсылка = СтрокаРебенок.МатьРебенка;
			Иначе
				СекцияСтрокаРебенок.Параметры.СведенияОМатери = "<нет сведений>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРебенок.ОтецРебенка) Тогда
				СекцияСтрокаРебенок.Параметры.СведенияОбОтце = СокрЛП(СтрокаРебенок.ОтецРебенка.Наименование) + Символы.ПС + 
					"Место работы: " + ?(ЗначениеЗаполнено(СтрокаРебенок.МестоРаботыОтца), СокрЛП(СтрокаРебенок.МестоРаботыОтца) + " (" + СокрЛП(СтрокаРебенок.ЗанимаемаяДолжностьОтца) + ")", "<нет сведений>");
				СекцияСтрокаРебенок.Параметры.ОтецСсылка = СтрокаРебенок.ОтецРебенка;
			Иначе
				СекцияСтрокаРебенок.Параметры.СведенияОбОтце = "<нет сведений>";
			КонецЕсли;
			
			Если ТипЗнч(СтрокаРебенок.Регистратор) = Тип("ДокументСсылка.удуПриказОЗачисленииРебенкаВГруппу") Тогда
				Если ЗначениеЗаполнено(СтрокаРебенок.УчреждениеСтарое) Или ЗначениеЗаполнено(СтрокаРебенок.ГруппаСтарая) Тогда
					СекцияСтрокаРебенок.Параметры.ОткудаПрибыл = СокрЛП(СтрокаРебенок.УчреждениеСтарое) + Символы.ПС + СокрЛП(СтрокаРебенок.ГруппаСтарая);
				КонецЕсли;				
				СекцияСтрокаРебенок.Параметры.ДокументПрибытия = "Приказ о зачислении №" + удуФормированиеПечатныхФорм.ПолучитьНомерНаПечать(СтрокаРебенок.Регистратор.Номер) + 
					" от " + Формат(СтрокаРебенок.Регистратор.Дата, "ДЛФ=D");
				СекцияСтрокаРебенок.Параметры.ДокументПрибытияСсылка = СтрокаРебенок.Регистратор;	
					
			ИначеЕсли ТипЗнч(СтрокаРебенок.Регистратор) = Тип("ДокументСсылка.удуПриказОПереводеВДругуюГруппу") Тогда
				Если СтрокаРебенок.СостояниеУчетаВГруппе = Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу Тогда
					СекцияСтрокаРебенок.Параметры.ОткудаПрибыл = СокрЛП(СтрокаРебенок.Регистратор.ГруппаПервоначальная.Наименование);
					СекцияСтрокаРебенок.Параметры.ДокументПрибытия = "Приказ о переводе №" + удуФормированиеПечатныхФорм.ПолучитьНомерНаПечать(СтрокаРебенок.Регистратор.Номер) + 
						" от " + Формат(СтрокаРебенок.Регистратор.Дата, "ДЛФ=D");
					СекцияСтрокаРебенок.Параметры.ДокументПрибытияСсылка = СтрокаРебенок.Регистратор;
				Иначе
					СекцияСтрокаРебенок.Параметры.ДокументВыбытия = "Приказ о переводе №" + удуФормированиеПечатныхФорм.ПолучитьНомерНаПечать(СтрокаРебенок.Регистратор.Номер) + 
						" от " + Формат(СтрокаРебенок.Регистратор.Дата, "ДЛФ=D");					
					СекцияСтрокаРебенок.Параметры.ДокументВыбытияСсылка = СтрокаРебенок.Регистратор;	
					СекцияСтрокаРебенок.Параметры.ПричинаВыбытия = СтрокаРебенок.ПричинаВыбытия;	
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаРебенок.Регистратор) = Тип("ДокументСсылка.удуПриказОВыбытииИзГруппы") Тогда
				СекцияСтрокаРебенок.Параметры.ДокументВыбытия = "Приказ о выбытии №" + удуФормированиеПечатныхФорм.ПолучитьНомерНаПечать(СтрокаРебенок.Регистратор.Номер) + 
					" от " + Формат(СтрокаРебенок.Регистратор.Дата, "ДЛФ=D");
				СекцияСтрокаРебенок.Параметры.ДокументВыбытияСсылка = СтрокаРебенок.Регистратор;
				СекцияСтрокаРебенок.Параметры.ПричинаВыбытия = СтрокаРебенок.ПричинаВыбытия;	
				
			КонецЕсли;
			
			РезультирующаяТаблица.Вывести(СекцияСтрокаРебенок, 2, "Ребенок", Ложь);	
		КонецЦикла;		
	КонецЦикла;
	РезультирующаяТаблица.ЗакончитьАвтогруппировкуСтрок();
				   
	Возврат РезультирующаяТаблица;
КонецФункции

&НаКлиенте
Процедура КомандаСформироватьОтчет(Команда)
	// Вставить содержимое обработчика.
	ОсновнаяТаблица = СформироватьОтчетНаСервере();
	
	ОсновнаяТаблица.ОтображатьЗаголовки = Ложь;
	ОсновнаяТаблица.ОтображатьСетку = Ложь;
	ОсновнаяТаблица.АвтоМасштаб = Истина;
	ОсновнаяТаблица.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	ОсновнаяТаблица.ТолькоПросмотр = Истина;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отчет.ДатаОтчета = ТекущаяДата();
	РаскрашиватьОтчет = Истина;
	Отчет.ОтборИнформации = "Отображать сведения о зачисленных и выбывших детях";
КонецПроцедуры

&НаКлиенте
Процедура ОтборИнформацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Отображать сведения о зачисленных и выбывших детях");
	СписокВыбора.Добавить("Отображать сведения только о зачисленных детях");
	СписокВыбора.Добавить("Отображать сведения только о выбывших детях");
	
	НайденноеЗначение = СписокВыбора.НайтиПоЗначению(Элемент.ВыделенныйТекст);
	Если НайденноеЗначение <> Неопределено Тогда
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент, НайденноеЗначение);
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Отчет.ОтборИнформации = ВыбранноеЗначение.Значение;
	КонецЕсли;	
КонецПроцедуры
