 
Процедура ПолучитьСписокиФизЛицИСотрудников(СтрокиДеревоДанных, СписокСотрудников, СписокФизЛиц)
	
	Для Каждого СтрокаДанных из СтрокиДеревоДанных Цикл
		Если СтрокаДанных.Сотрудник <> Неопределено тогда
			
			СписокСотрудников.Добавить(СтрокаДанных.Сотрудник);
			СписокФизЛиц.Добавить(СтрокаДанных.Сотрудник.ФизЛицо);
			
		ИначеЕсли СтрокаДанных.Строки.Количество() > 0 Тогда
			
			ПолучитьСписокиФизЛицИСотрудников(СтрокаДанных.Строки, СписокСотрудников, СписокФизЛиц);
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры
 
 
Процедура СформироватьОтчет(Отчет,ДокументРезультат, ЕстьОшибки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	
	НастрокаПоУмолчанию        = Отчет.КомпоновщикНастроек.ПолучитьНастройки();

	КомпоновщикНастроек=Отчет.КомпоновщикНастроек;
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
	ДокументРезультат.Очистить();
	
	Бланк=Ложь;
	ПараметрБланк = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "Бланк");
	Если ПараметрБланк <> Неопределено и ПараметрБланк.Использование тогда
		Бланк = ПараметрБланк.Значение;
	КонецЕсли;	
	
	
	Если Бланк тогда
		Макет = Отчеты.удуУнифицированнаяФормаТ2.ПолучитьМакет("ПФ_MXL_Т2_от_5_1_2004");
		ПерваяСтраницаТ2	= 	Макет.ПолучитьОбласть("ПерваяСтраницаТ2");
		ВтораяСтраницаТ2	=	Макет.ПолучитьОбласть("ВтораяСтраницаТ2");
		ТретьяСтраницаТ2	=	Макет.ПолучитьОбласть("ТретьяСтраницаТ2");
		ЧетвертаяСтраницаТ2	=	Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2");
		ДокументРезультат.Вывести(ПерваяСтраницаТ2);
		ДокументРезультат.Вывести(ВтораяСтраницаТ2);
		ДокументРезультат.Вывести(ТретьяСтраницаТ2);
		ЧетвертаяСтраницаТ2.Параметры["ДатаУвольнения"] = """__"" _____________ 20___ г. ";
		ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2);
		Возврат;
	КонецЕсли;
	
	удуУправлениеОтчетами.ДобавитьГруппировку(КомпоновщикНастроек, "Сотрудник");
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ЗначениеПараметра = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "Период");;
	ЗначениеПараметра.Использование = истина;
	Если ЗначениеПараметра <> Неопределено тогда
		Если ЗначениеПараметра.Значение <> '00010101' тогда
			ДатаАктуальности = удуОбщегоНазначенияСервер.ВыделитьДату(ЗначениеПараметра.Значение);
		Иначе
			ДатаАктуальности           = ТекущаяДата();
			ЗначениеПараметра.Значение = ТекущаяДата();
		КонецЕсли;
	Иначе
		ДатаАктуальности = ТекущаяДата();
	КонецЕсли;
	
	КадровыйРаботник = Справочники.удуСотрудникиОрганизаций.ПустаяСсылка();
	
	ЗначениеПараметраКадровыйРаботник  = удуУправлениеОтчетами.ПолучитьПараметр(КомпоновщикНастроек, "КадровыйРаботник");
	
	Если ЗначениеПараметраКадровыйРаботник <> Неопределено тогда
		КадровыйРаботник = ЗначениеПараметраКадровыйРаботник.Значение;
		ЗначениеПараметраКадровыйРаботник.Использование = истина;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Отчеты.удуУнифицированнаяФормаТ2.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДеревоДанных =  Новый ДеревоЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДеревоДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	
	// Получить список сотрудников
	СписокСотрудников = Новый СписокЗначений;
	СписокФизЛиц     = Новый СписокЗначений;
	
	ПолучитьСписокиФизЛицИСотрудников(ДеревоДанных.Строки, СписокСотрудников, СписокФизЛиц);
	
	// Сформировать запрос по сотрудникам
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(ДатаАктуальности));
	Запрос.УстановитьПараметр("Физлицо",		  СписокФизЛиц);
	Запрос.УстановитьПараметр("Сотрудник",		  СписокСотрудников);
	
   	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			ТОГДА ""Основная""
	|		ИНАЧЕ ""По совместительству""
	|	КОНЕЦ КАК ВидРаботы,
	|	СотрудникиОрганизаций.Код КАК ТабельныйНомер,
	|	СотрудникиОрганизаций.НомерДоговора КАК ТрудовойДоговорНомер,
	|	СотрудникиОрганизаций.ДатаДоговора КАК ТрудовойДоговорДата,
	|	СотрудникиОрганизаций.Физлицо.Наименование КАК Представление,
	|	СотрудникиОрганизаций.Физлицо.ДатаРождения КАК ДатаРождения,
	|	КонтактнаяИнформацияАдрес2.Представление КАК МестоРождения,
	|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол,
	|	СотрудникиОрганизаций.Физлицо.ИНН КАК ИНН,
	|	СотрудникиОрганизаций.Физлицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ""Гражданин Российской Федерации""
	|		КОГДА ГражданствоФизЛицСрезПоследних.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяССылка)
	|			ТОГДА ""Гражданин Российской Федерации""
	|		КОГДА ГражданствоФизЛицСрезПоследних.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ЛицоБезГражданства)
	|			ТОГДА ""Лицо без гражданства""
	|		ИНАЧЕ ""Иностранный гражданин""
	|	КОНЕЦ КАК Гражданство,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ""1""
	|		ИНАЧЕ ""3""
	|	КОНЕЦ КАК ГражданствоКодПоОКИН,
	|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Наименование КАК СемейноеПоложение,
	|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Код КАК СемейноеПоложениеКодПоОКИН,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента.Наименование КАК ВидДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента КАК ВидДокументаСсылка,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.КемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Серия КАК ДокументСерия,
	|	КонтактнаяИнформацияАдрес.Представление КАК АдресПоПаспорту,
	|	КонтактнаяИнформацияАдрес1.Представление КАК АдресФактический,
	|	КонтактнаяИнформацияАдрес.ЗначенияПолей КАК ЗначенияПолейАдресПоПаспорту,
	|	КонтактнаяИнформацияАдрес1.ЗначенияПолей КАК ЗначенияПолейАдресФактический,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДатаРегистрацииПоМестуЖительства,
	|	КонтактнаяИнформацияТелефон.Представление КАК Телефон,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК ОрганизацияПриема,
	|	ВЫРАЗИТЬ(РаботникиОрганизацииСрезПоследних.Организация.ПолноеНаименование КАК СТРОКА(300)) КАК НаименованиеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.Организация.ОКПО КАК КодПоОКПО,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				Сотрудник В (&Сотрудник)
	|					И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацииСрезПоследних
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацииСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&ФизЛицо)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО СотрудникиОрганизаций.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГражданствоФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&ФизЛицо)) КАК ГражданствоФизЛицСрезПоследних
	|		ПО СотрудникиОрганизаций.Физлицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&ФизЛицо)) КАК ФИОФизЛицСрезПоследних
	|		ПО СотрудникиОрганизаций.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСемейноеПоложениеФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&ФизЛицо)) КАК СемейноеПоложениеФизЛицСрезПоследних
	|		ПО СотрудникиОрганизаций.Физлицо = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес
	|		ПО СотрудникиОрганизаций.Физлицо = КонтактнаяИнформацияАдрес.Ссылка
	|			И (КонтактнаяИнформацияАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформацияАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПропискиФизическогоЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес1
	|		ПО СотрудникиОрганизаций.Физлицо = КонтактнаяИнформацияАдрес1.Ссылка
	|			И (КонтактнаяИнформацияАдрес1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформацияАдрес1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|		ПО СотрудникиОрганизаций.Физлицо = КонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес2
	|		ПО СотрудникиОрганизаций.Физлицо = КонтактнаяИнформацияАдрес2.Ссылка
	|			И (КонтактнаяИнформацияАдрес2.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаРожденияФизическогоЛица))
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&Сотрудник)";
	
	КадровыеДанные = Запрос.Выполнить().Выбрать();

	// ЗНАНИЕ ЯЗЫКА
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаЗнаниеЯзыков.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка.Наименование КАК СтепеньЗнанияЯзыка,
	|	ФизическиеЛицаЗнаниеЯзыков.Язык.Наименование КАК Язык,
	|	ФизическиеЛицаЗнаниеЯзыков.Язык.Код КАК ЯзыкКодПоОКИН
	|ИЗ
	|	Справочник.ФизическиеЛица.ЗнаниеЯзыков КАК ФизическиеЛицаЗнаниеЯзыков
	|ГДЕ
	|	ФизическиеЛицаЗнаниеЯзыков.Ссылка В (&Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическиеЛицаЗнаниеЯзыков.НомерСтроки";
	
	ИностраныйЯзык = Запрос.Выполнить().Выбрать();
	
	
	// ОБРАЗОВАНИЕ
	СписокПослеВузовскоеОбразование	=	Новый СписокЗначений;                    
	СписокПослеВузовскоеОбразование.Добавить(Справочники.удуВидыОбразованияФизЛиц.АспирантураОрдинатураАдъюнктура);
	СписокПослеВузовскоеОбразование.Добавить(Справочники.удуВидыОбразованияФизЛиц.Докторантура);
	ПослевузовскоеОбразование = Справочники.удуВидыОбразованияФизЛиц.НайтиПоНаименованию("Послевузовское образование");
	Если ЗначениеЗаполнено(ПослевузовскоеОбразование) Тогда
		СписокПослеВузовскоеОбразование.Добавить(ПослевузовскоеОбразование);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокПослеВузовскоеОбразование",	СписокПослеВузовскоеОбразование);
	
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаОбразование.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаОбразование.ВидОбразования.Наименование КАК ВидОбразования,
	|	ФизическиеЛицаОбразование.Специальность.Наименование КАК Специальность,
	|	ФизическиеЛицаОбразование.УчебноеЗаведение.Наименование КАК УчебноеЗаведение,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&СписокПослеВузовскоеОбразование)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокОбразования,
	|	ФизическиеЛицаОбразование.ВидОбразования.Код КАК ОбразованиеКодПоОКИН,
	|	ФизическиеЛицаОбразование.ГодОкончания,
	|	ФизическиеЛицаОбразование.Диплом,
	|	ФизическиеЛицаОбразование.Квалификация,
	|	ФизическиеЛицаОбразование.Специальность.Код КАК КодПоОКСО
	|ИЗ
	|	Справочник.ФизическиеЛица.Образование КАК ФизическиеЛицаОбразование
	|ГДЕ
	|	ФизическиеЛицаОбразование.Ссылка В (&Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбразования";
						 
	Образование = Запрос.Выполнить().Выбрать();
	
	// СОСТАВ СЕМЬИ
	Запрос.Текст =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаСоставСемьи.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаСоставСемьи.Имя КАК Родственник,
	|	ФизическиеЛицаСоставСемьи.СтепеньРодства.Наименование КАК СтепеньРодства,
	|	ФизическиеЛицаСоставСемьи.ДатаРождения
	|ИЗ
	|	Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛицаСоставСемьи
	|ГДЕ
	|	ФизическиеЛицаСоставСемьи.Ссылка В(&Физлицо)";
						
	СоставСемьи = Запрос.Выполнить().Выбрать();

	// ПРИЕМ И ПЕРЕВОДЫ НА ДРУГУЮ РАБОТУ
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работники.Период КАК Период,
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	Работники.Должность.Наименование КАК Должность,
	|	Работники.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	Работники.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
	|	Работники.ПервичныйДокумент КАК Регистратор,
	|	Работники.ПервичныйДокумент.Дата КАК ДатаПриказа,
	|	Работники.ПервичныйДокумент.Номер КАК НомерПриказа
	|ПОМЕСТИТЬ ВТПеремещенияРаботника
	|ИЗ
	|	РегистрСведений.удуРаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				Сотрудник В (&Сотрудник)
	|					И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО Работники.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	Работники.Сотрудник В(&Сотрудник)
	|	И Работники.Период <= &ДатаАктуальности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.Должность КАК Должность,
	|	Работники.ЗанимаемыхСтавок,
	|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1)
	|		ИНАЧЕ Работники.Период
	|	КОНЕЦ КАК ДатаПеревода,
	|	Работники.ПричинаИзмененияСостояния,
	|	Работники.ДатаПриказа КАК ДатаПриказа,
	|	Работники.НомерПриказа КАК НомерПриказа,
	|	УвольненияРаботники.СтатьяТКРФ.Наименование КАК ОснованиеУвольнения,
	|	УвольненияРаботники.ДатаУвольнения,
	|	УвольненияРаботники.Ссылка.Номер КАК НомерПриказаУвольнения,
	|	УвольненияРаботники.Ссылка.Дата КАК ДатаПриказаУвольнения,
	|	ПриемНаРаботуВОрганизациюРаботники.УсловияПриемаНаРаботу КАК ХарактерРаботы,
	|	ЛОЖЬ КАК ТребуетВводаТарифногоРазряда,
	|	ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизаций.Размер, 0) КАК ТарифнаяСтавка,
	|	""руб."" КАК ИмяВалюты
	|ИЗ
	|	ВТПеремещенияРаботника КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуУвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольненияРаботники
	|		ПО Работники.Сотрудник = УвольненияРаботники.Сотрудник
	|			И Работники.Регистратор = УвольненияРаботники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
	|		ПО Работники.Сотрудник = ПриемНаРаботуВОрганизациюРаботники.Сотрудник
	|			И Работники.Регистратор = ПриемНаРаботуВОрганизациюРаботники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|			ВложенныйЗапрос.ДатаПеревода КАК ДатаПеревода,
	|			ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизаций.Показатель1, 0) КАК Размер
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РаботникиОрганизаций.Период КАК ДатаПеревода,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК Период
	|			ИЗ
	|				ВТПеремещенияРаботника КАК РаботникиОрганизаций
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|					ПО РаботникиОрганизаций.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|						И РаботникиОрганизаций.Период >= ПлановыеНачисленияРаботниковОрганизаций.Период
	|			ГДЕ
	|				ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОрганизаций.Период,
	|				РаботникиОрганизаций.Сотрудник) КАК ВложенныйЗапрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|				ПО ВложенныйЗапрос.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|					И ВложенныйЗапрос.Период = ПлановыеНачисленияРаботниковОрганизаций.Период
	|		ГДЕ
	|			ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО) КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ПО Работники.Период = ПлановыеНачисленияРаботниковОрганизаций.ДатаПеревода
	|			И Работники.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПеревода";
	
	ПриемыИПереводы = Запрос.Выполнить().Выбрать();
	
	// НАГРАДЫ
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛицаНаграды.Награда,
	               |	ФизическиеЛицаНаграды.НомерПриказа,
	               |	ФизическиеЛицаНаграды.ДатаПриказа,
	               |	ФизическиеЛицаНаграды.ЧейПриказ,
	               |	ФизическиеЛицаНаграды.Ссылка КАК ФизЛицо
	               |ИЗ
	               |	Справочник.ФизическиеЛица.Награды КАК ФизическиеЛицаНаграды
	               |ГДЕ
	               |	ФизическиеЛицаНаграды.Ссылка В(&Физлицо)";
	
	Награды = Запрос.Выполнить().Выбрать();
	
	
	// ОТПУСКА
	СписокОтпусков = Новый Массив;
	СписокОтпусков.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ОтпускЕжегодный);
	СписокОтпусков.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	СписокОтпусков.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ОтпускУчебный);
	СписокОтпусков.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый);
	СписокОтпусков.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);
	Запрос.УстановитьПараметр("СписокОтпусков",	СписокОтпусков);
	
	Запрос.Текст	=	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтпускаРаботника.ДатаС КАК ДатаС,
	|	ОтпускаРаботника.ДатаПо КАК ДатаПо,
	|	ВЫБОР
	|		КОГДА ОтпускаРаботника.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|			ТОГДА ""Ежегодный""
	|		КОГДА ОтпускаРаботника.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|			ТОГДА ""Без сохранения заработной платы""
	|		КОГДА ОтпускаРаботника.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА ""Учебный оплачиваемый""
	|		КОГДА ОтпускаРаботника.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|			ТОГДА ""Учебный неоплачиваемый""
	|		КОГДА ОтпускаРаботника.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
	|			ТОГДА ""По уходу за ребенком""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПричинаОтсутствия,
	|	ОтпускаРаботника.ДополнительныйОтпуск,
	|	ОтпускаРаботника.ДатаНачалаДоп,
	|	ОтпускаРаботника.ДатаОкончанияДоп,
	|	ОтпускаРаботника.Регистратор,
	|	ОтпускаРаботника.ДатаПриказа,
	|	ОтпускаРаботника.НомерПриказа,
	|	ОтпускаРаботника.Продолжительность,
	|	ОтпускаРаботника.ПродолжительностьДоп,
	|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС КАК РабочийГодС,
	|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо КАК РабочийГодПо,
	|	ОтпускаОрганизацийРаботникиОрганизации.Основание КАК Основание,
	|	ОтпускаРаботника.Сотрудник КАК Сотрудник
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтпускаРаботника.ДатаС КАК ДатаС,
	|		ОтпускаРаботника.ДатаПо КАК ДатаПо,
	|		ОтпускаРаботника.ПричинаОтсутствия КАК ПричинаОтсутствия,
	|		ОтпускаРаботника.ДополнительныйОтпуск КАК ДополнительныйОтпуск,
	|		ОтпускаРаботника.ДатаНачалаДоп КАК ДатаНачалаДоп,
	|		ОтпускаРаботника.ДатаОкончанияДоп КАК ДатаОкончанияДоп,
	|		ОтпускаРаботника.Регистратор КАК Регистратор,
	|		ОтпускаРаботника.ДатаПриказа КАК ДатаПриказа,
	|		ОтпускаРаботника.НомерСтроки КАК НомерСтроки,
	|		ОтпускаРаботника.НомерПриказа КАК НомерПриказа,
	|		ВЫБОР
	|			КОГДА ОтпускаРаботника.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|				ТОГДА РАЗНОСТЬДАТ(ОтпускаРаботника.ДатаС, ОтпускаРаботника.ДатаПо, ДЕНЬ) + 1
	|			ИНАЧЕ ЕСТЬNULL(СУММА(ВЫБОР
	|							КОГДА РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаРаботника.ДатаС И ОтпускаРаботника.ДатаПо
	|								ТОГДА РегламентированныйПроизводственныйКалендарь.КалендарныеДни
	|							ИНАЧЕ 0
	|						КОНЕЦ), 0)
	|		КОНЕЦ КАК Продолжительность,
	|		ВЫБОР
	|			КОГДА ОтпускаРаботника.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(СУММА(ВЫБОР
	|							КОГДА РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаРаботника.ДатаНачалаДоп И ОтпускаРаботника.ДатаОкончанияДоп
	|								ТОГДА РегламентированныйПроизводственныйКалендарь.КалендарныеДни
	|							ИНАЧЕ 0
	|						КОНЕЦ), 0)
	|		КОНЕЦ КАК ПродолжительностьДоп,
	|		ОтпускаРаботника.Сотрудник КАК Сотрудник
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыОтпуска.ДатаС КАК ДатаС,
	|			ВЫБОР
	|				КОГДА ПериодыОтпуска.Состояние = ЗНАЧЕНИЕ(Перечисление.удуСостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|					ТОГДА ВЫБОР
	|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА ПериодыОтпуска.ДатаПо
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ПериодыОтпуска.ДатаПо < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
	|										ТОГДА ПериодыОтпуска.ДатаПо
	|									ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ПериодыОтпуска.ДатаПо
	|			КОНЕЦ КАК ДатаПо,
	|			ПериодыОтпуска.Состояние КАК ПричинаОтсутствия,
	|			ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска.Наименование КАК ДополнительныйОтпуск,
	|			ОтпускаОрганизацииРаботники.ДатаНачалаДоп КАК ДатаНачалаДоп,
	|			ВЫБОР
	|				КОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИНАЧЕ ПериодыОтпуска.ДатаПо
	|			КОНЕЦ КАК ДатаОкончанияДоп,
	|			ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
	|			ПериодыОтпуска.Регистратор КАК Регистратор,
	|			ПериодыОтпуска.Сотрудник КАК Сотрудник,
	|			ПериодыОтпуска.Регистратор.Дата КАК ДатаПриказа,
	|			ПериодыОтпуска.Регистратор.Номер КАК НомерПриказа
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ДатыУходаВОтпуск.Период КАК ДатаС,
	|				ДОБАВИТЬКДАТЕ(ВЫБОР
	|						КОГДА ДатыУходаВОтпуск.ПериодЗавершения >= МИНИМУМ(ДатыВозвращенияИзОтпуска.Период)
	|								ИЛИ ДатыУходаВОтпуск.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА МИНИМУМ(ДатыВозвращенияИзОтпуска.Период)
	|						ИНАЧЕ ДатыУходаВОтпуск.ПериодЗавершения
	|					КОНЕЦ, ДЕНЬ, -1) КАК ДатаПо,
	|				ДатыУходаВОтпуск.ПервичныйДокумент КАК Регистратор,
	|				ДатыУходаВОтпуск.Сотрудник КАК Сотрудник,
	|				ДатыУходаВОтпуск.Состояние КАК Состояние
	|			ИЗ
	|				РегистрСведений.удуСостояниеРаботниковОрганизаций КАК ДатыУходаВОтпуск
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСостояниеРаботниковОрганизаций КАК ДатыВозвращенияИзОтпуска
	|					ПО ДатыУходаВОтпуск.Период < ДатыВозвращенияИзОтпуска.Период
	|						И ДатыУходаВОтпуск.Сотрудник = ДатыВозвращенияИзОтпуска.Сотрудник
	|			ГДЕ
	|				ДатыУходаВОтпуск.Период <= &ДатаАктуальности
	|				И ДатыУходаВОтпуск.Состояние В(&СписокОтпусков)
	|				И ДатыУходаВОтпуск.Сотрудник В(&Сотрудник)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ДатыУходаВОтпуск.Период,
	|				ДатыУходаВОтпуск.ПериодЗавершения,
	|				ДатыУходаВОтпуск.ПервичныйДокумент,
	|				ДатыУходаВОтпуск.Сотрудник,
	|				ДатыУходаВОтпуск.Состояние) КАК ПериодыОтпуска
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
	|				ПО ПериодыОтпуска.ДатаС = ОтпускаОрганизацииРаботники.ДатаНачала
	|					И ПериодыОтпуска.Регистратор = ОтпускаОрганизацииРаботники.Ссылка
	|					И ПериодыОтпуска.Сотрудник = ОтпускаОрганизацииРаботники.Сотрудник) КАК ОтпускаРаботника
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|			ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаРаботника.ДатаС И ОтпускаРаботника.ДатаПо
	|					ИЛИ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаРаботника.ДатаНачалаДоп И ОтпускаРаботника.ДатаОкончанияДоп)
	|				И (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.удуВидыДнейПроизводственногоКалендаря.Праздник))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОтпускаРаботника.ДатаС,
	|		ОтпускаРаботника.ДатаПо,
	|		ОтпускаРаботника.ПричинаОтсутствия,
	|		ОтпускаРаботника.ДополнительныйОтпуск,
	|		ОтпускаРаботника.ДатаНачалаДоп,
	|		ОтпускаРаботника.ДатаОкончанияДоп,
	|		ОтпускаРаботника.Регистратор,
	|		ОтпускаРаботника.ДатаПриказа,
	|		ОтпускаРаботника.НомерСтроки,
	|		ОтпускаРаботника.НомерПриказа,
	|		ОтпускаРаботника.Сотрудник) КАК ОтпускаРаботника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ПО ОтпускаРаботника.Регистратор = ОтпускаОрганизацийРаботникиОрганизации.Ссылка
	|			И ОтпускаРаботника.НомерСтроки = ОтпускаОрганизацийРаботникиОрганизации.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаС,
	|	ДатаПо";
						
	Отпуска	= Запрос.Выполнить().Выбрать();
	
	// Профессии
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаПрофессии.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаПрофессии.Профессия.Код КАК КодПоОКПДТР,
	|	ФизическиеЛицаПрофессии.Профессия.Наименование КАК Профессия
	|ИЗ
	|	Справочник.ФизическиеЛица.Профессии КАК ФизическиеЛицаПрофессии
	|ГДЕ
	|	ФизическиеЛицаПрофессии.Ссылка В(&Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическиеЛицаПрофессии.НомерСтроки";
						 
	Профессии = Запрос.Выполнить().Выбрать();
	
	// Аттестации
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаАттестация.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаАттестация.ДатаАттестации,
	|	ФизическиеЛицаАттестация.РешениеКомиссии,
	|	ФизическиеЛицаАттестация.НомерПротокола КАК НомерДокумента,
	|	ФизическиеЛицаАттестация.ДатаПротокола КАК ДатаДокумента,
	|	ФизическиеЛицаАттестация.Основание КАК ОснованиеАттестации
	|ИЗ
	|	Справочник.ФизическиеЛица.Аттестация КАК ФизическиеЛицаАттестация
	|ГДЕ
	|	ФизическиеЛицаАттестация.Ссылка В(&Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическиеЛицаАттестация.НомерСтроки";
						 
	Аттестации = Запрос.Выполнить().Выбрать();

	// Квалификация
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаКвалификация.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаКвалификация.НачалоОбучения,
	|	ФизическиеЛицаКвалификация.ОкончаниеОбучения,
	|	ФизическиеЛицаКвалификация.ВидПовышенияКвалификации.Наименование КАК ВидПК,
	|	ФизическиеЛицаКвалификация.МестоПрохожденияОбучения КАК УчреждениеПК,
	|	ФизическиеЛицаКвалификация.Документ КАК ДокументПК,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаКвалификация.СерияДокумента = """"
	|			ТОГДА ФизическиеЛицаКвалификация.НомерДокумента
	|		ИНАЧЕ ФизическиеЛицаКвалификация.СерияДокумента + "", "" + ФизическиеЛицаКвалификация.НомерДокумента
	|	КОНЕЦ КАК НомерДокументаПК,
	|	ФизическиеЛицаКвалификация.СерияДокумента,
	|	ФизическиеЛицаКвалификация.ДатаДокумента КАК ДатаДокументаПК,
	|	ФизическиеЛицаКвалификация.Основание КАК ОснованиеПК
	|ИЗ
	|	Справочник.ФизическиеЛица.Квалификация КАК ФизическиеЛицаКвалификация
	|ГДЕ
	|	ФизическиеЛицаКвалификация.Ссылка В(&Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическиеЛицаКвалификация.НомерСтроки";
						 
	Квалификации = Запрос.Выполнить().Выбрать();
	

	Группировки = удуУправлениеОтчетами.ПолучитьПоляГруппировок(КомпоновщикНастроек);
	ВывестиКарточки(КомпоновщикНастроек, ДокументРезультат, ДеревоДанных.Строки, 0, Группировки, ЕстьОшибки,
	КадровыеДанные, ИностраныйЯзык, Образование, СоставСемьи, ПриемыИПереводы, Отпуска, Награды, Профессии, Аттестации, Квалификации, КадровыйРаботник, ДатаАктуальности);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	// Параметры документа
	ДокументРезультат.ПолеСлева				= 0;
	ДокументРезультат.ПолеСправа			= 0;
	ДокументРезультат.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_Т2";
	ДокументРезультат.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб           = истина;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
КонецПроцедуры 

Процедура ВывестиКарточки(КомпоновщикНастроек, ДокументРезультат, СтрокиДеревоДанных, Уровень, Группировки, ЕстьОшибки,
	КадровыеДанные, ИностраныйЯзык, Образование, СоставСемьи, ПриемыИПереводы, Отпуска, Награды, Профессии, Аттестации, Квалификации, КадровыйРаботник, ДатаАктуальности)
	
	// Выбрать карточки
	Для каждого СтрокаДерева из СтрокиДеревоДанных Цикл
		ПолеГруппировки = Группировки.Получить(Уровень);
		Если Группировки.Получить(Уровень) <> Неопределено и Группировки.Получить(Уровень).Значение <> "Сотрудник" тогда 
			// Нарисовать группировку
			ВывестиГруппировку(КомпоновщикНастроек, ДокументРезультат, СтрокаДерева, Группировки.Получить(Уровень).Значение, Уровень);
			Если Группировки.Количество()-1 >= Уровень+1 И Группировки.Получить(Уровень+1).Значение = "Сотрудник" тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ВывестиКарточки(КомпоновщикНастроек, ДокументРезультат, СтрокаДерева.Строки, Уровень+1, Группировки, ЕстьОшибки,
			КадровыеДанные, ИностраныйЯзык, Образование, СоставСемьи, ПриемыИПереводы, Отпуска, Награды, Профессии, Аттестации, Квалификации, КадровыйРаботник, ДатаАктуальности);
		ИначеЕсли Группировки.Получить(Уровень) <> Неопределено и Группировки.Получить(Уровень).Значение = "Сотрудник" тогда
			// Нарисовать карточку физлица
			СформироватьМакет(КомпоновщикНастроек, ДокументРезультат, СтрокаДерева.Сотрудник, ЕстьОшибки, Уровень,
			КадровыеДанные, ИностраныйЯзык, Образование, СоставСемьи, ПриемыИПереводы, Отпуска, Награды, Профессии, Аттестации, Квалификации, КадровыйРаботник, ДатаАктуальности);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиГруппировку(КомпоновщикНастроек, ДокументРезультат, СтрокаДанных, Поле, Уровень)
	
	МакетГруппировки  = Отчеты.удуУнифицированнаяФормаТ2.ПолучитьМакет("МакетГруппировки");
	ОбластьГрупировки = МакетГруппировки.ПолучитьОбласть("Группировка");
	
	ДоступноеПоле = удуУправлениеОтчетами.ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(Поле), КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
	
	ОбластьГрупировки.Параметры.НазваниеПарметра = ДоступноеПоле.Заголовок;
	ОбластьГрупировки.Параметры.Значение = СтрокаДанных[СтрЗаменить(Поле, ".", "")];
	
	ДокументРезультат.Вывести(ОбластьГрупировки, Уровень+1);
	
КонецПроцедуры 

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
Процедура СформироватьМакет(КомпоновщикНастроек, ДокументРезультат, Работник, ЕстьОшибки, Уровень,
	КадровыеДанные, ИностраныйЯзык, Образование, СоставСемьи, ПриемыИПереводы, Отпуска, Награды, Профессии, Аттестации, Квалификации, КадровыйРаботник, ДатаАктуальности) Экспорт

 	Макет 				= 	Отчеты.удуУнифицированнаяФормаТ2.ПолучитьМакет("ПФ_MXL_Т2_от_5_1_2004");;
	ПерваяСтраницаТ2	= 	Макет.ПолучитьОбласть("ПерваяСтраницаТ2");
	ВтораяСтраницаТ2	=	Макет.ПолучитьОбласть("ВтораяСтраницаТ2");
	ТретьяСтраницаТ2	=	Макет.ПолучитьОбласть("ТретьяСтраницаТ2");
	ЧетвертаяСтраницаТ2	=	Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2");
	
	
	СтруктураПоискаФизЛицо = Новый Структура("ФизЛицо", Работник.ФизЛицо);
	СтруктураПоискаСотрудник = Новый Структура("Сотрудник", Работник);
	
	КадровыеДанные.Сбросить();
	Если КадровыеДанные.НайтиСледующий(СтруктураПоискаСотрудник) тогда
		
		ПерваяСтраницаТ2.Параметры.Заполнить(КадровыеДанные);
		ПерваяСтраницаТ2.Параметры.НаименованиеОрганизации = СокрЛП(КадровыеДанные.НаименованиеОрганизации);
		ВтораяСтраницаТ2.Параметры.Заполнить(КадровыеДанные);
		
		Если КадровыеДанные.Фамилия = NULL тогда
			ФИО		=	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные.Представление, " ");
			Если ФИО.Количество()	>	0	тогда
				Фамилия	=	ФИО[0];
			КонецЕсли;
			Если ФИО.Количество()	>	1	тогда
				Имя		=	ФИО[1];
			КонецЕсли;
			Если ФИО.Количество()	>	2	тогда
				Отчество=	ФИО[2];
			КонецЕсли;
			// ФИО
			
			ПерваяСтраницаТ2.Параметры.Фамилия            = Фамилия;
			ПерваяСтраницаТ2.Параметры.Имя                = Имя;
			ПерваяСтраницаТ2.Параметры.Отчество           = Отчество;
		КонецЕсли;
		ПерваяСтраницаТ2.Параметры.ПерваяБукваФамилии = Лев(ПерваяСтраницаТ2.Параметры.Фамилия, 1);
		МестоРождения = КадровыеДанные.МестоРождения;
		ПерваяСтраницаТ2.Параметры.МестоРождения = СтрЗаменить(МестоРождения, "Населенный пункт: ", "");
		ПерваяСтраницаТ2.Параметры.ДатаАктуальности   = ДатаАктуальности;
		
		// ПАСПОРТ
		Если КадровыеДанные.ВидДокумента <> Null Тогда
			Если	КадровыеДанные.ВидДокументаСсылка <> Справочники.ДокументыУдостоверяющиеЛичность.ПаспортРФ И
				КадровыеДанные.ВидДокументаСсылка <> Справочники.ДокументыУдостоверяющиеЛичность.ПаспортСССР Тогда
				ВтораяСтраницаТ2.Параметры.ДатаВыдачи = "";
				ВтораяСтраницаТ2.Параметры.ДругойДокумент = ?(ЗначениеЗаполнено(КадровыеДанные.ВидДокумента),КадровыеДанные.ВидДокумента,"<вид документа не указан>") +
				" №" + ?(ЗначениеЗаполнено(КадровыеДанные.ДокументНомер),КадровыеДанные.ДокументНомер + " ","<номер документа не указан>") + ?(ЗначениеЗаполнено(КадровыеДанные.ДокументСерия),КадровыеДанные.ДокументСерия,"") + "; выдан: " + ?(ЗначениеЗаполнено(СОКРЛП(КадровыеДанные.ДокументКемВыдан)),СОКРЛП(КадровыеДанные.ДокументКемВыдан),"<не указано> ") + " "+ Формат(КадровыеДанные.ДатаВыдачи,"ДЛФ=DD");
			Иначе	
				ВтораяСтраницаТ2.Параметры.ВидДокумента	= " серия " + ?(ЗначениеЗаполнено(КадровыеДанные.ДокументСерия),КадровыеДанные.ДокументСерия,"") + "  № " + ?(ЗначениеЗаполнено(КадровыеДанные.ДокументНомер),КадровыеДанные.ДокументНомер + " ","");
				ВтораяСтраницаТ2.Параметры.ДатаВыдачи = Формат(КадровыеДанные.ДатаВыдачи, "ДФ=dd.MM.yyyy");
				ВтораяСтраницаТ2.Параметры.КемВыданДокумент	= ?(ЗначениеЗаполнено(СОКРЛП(КадровыеДанные.ДокументКемВыдан)), СОКРЛП(КадровыеДанные.ДокументКемВыдан),"") + ?(ЗначениеЗаполнено(КадровыеДанные.ДокументКодПодразделения)," № подразделения " + КадровыеДанные.ДокументКодПодразделения,"");
			КонецЕсли;
		КонецЕсли;
		
		// АДРЕСА
		Если ЗначениеЗаполнено(КадровыеДанные.ЗначенияПолейАдресФактический) Тогда			
			ЗначенияПолей=УправлениеКонтактнойИнформацией.ПреобразоватьСтрокуВСписокПолей(КадровыеДанные.ЗначенияПолейАдресФактический);
			Индекс="";
			Для Каждого ЭлементСписка Из ЗначенияПолей цикл
				Если  ЭлементСписка.Представление="Индекс" тогда
					Индекс=ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Индекс="" тогда
				АдресФактический=КадровыеДанные.АдресФактический;
			Иначе 
				АдресФактический=СтрЗаменить(КадровыеДанные.АдресФактический, Индекс + ",","");
			КонецЕсли;
			ВтораяСтраницаТ2.Параметры.АдресФактический	= АдресФактический;
			ВтораяСтраницаТ2.Параметры.ИндексАдресФактический	= Индекс;
		КонецЕсли;
		Если ЗначениеЗаполнено(КадровыеДанные.ЗначенияПолейАдресПоПаспорту) Тогда
			ЗначенияПолей=УправлениеКонтактнойИнформацией.ПреобразоватьСтрокуВСписокПолей(КадровыеДанные.ЗначенияПолейАдресПоПаспорту);
			Индекс="";
			Для Каждого ЭлементСписка Из ЗначенияПолей цикл
				Если  ЭлементСписка.Представление="Индекс" тогда
					Индекс=ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Индекс="" тогда
				АдресПоПаспорту=КадровыеДанные.АдресПоПаспорту;
			Иначе 
				АдресПоПаспорту=СтрЗаменить(КадровыеДанные.АдресПоПаспорту, Индекс + ",","");
			КонецЕсли;
			ВтораяСтраницаТ2.Параметры.АдресПоПаспорту	= АдресПоПаспорту;
			ВтораяСтраницаТ2.Параметры.ИндексАдресПоПаспорту	= Индекс;
		КонецЕсли;
		
	КонецЕсли;
	
	ИностраныйЯзык.Сбросить();
	инд	=	0;
	Пока ИностраныйЯзык.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл
		инд	=	1	+	инд;
		ПерваяСтраницаТ2.Параметры["НаименованиеЯзыка"+инд]		=	ИностраныйЯзык.Язык;
		ПерваяСтраницаТ2.Параметры["СтепеньЗнанияЯзыка"+инд]	=	ИностраныйЯзык.СтепеньЗнанияЯзыка;
		ПерваяСтраницаТ2.Параметры["ЯзыкКодПоОКИН"+инд]			=	ИностраныйЯзык.ЯзыкКодПоОКИН;
		Если инд = 2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Образование.Сбросить();
	НомерОбразованияВВУЗЕ = 0;
	Пока Образование.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл

		// Для вузовского образования отводится 2 строки
		Если (Образование.ПорядокОбразования = 1) тогда

			НомерОбразованияВВУЗЕ = НомерОбразованияВВУЗЕ + 1;

			Если  (НомерОбразованияВВУЗЕ >2 ) Тогда
				Продолжить;
			КонецЕсли; 

			Если	НомерОбразованияВВУЗЕ =	1	тогда
				ПерваяСтраницаТ2.Параметры["Образование1"]				=	Образование.ВидОбразования;
				ПерваяСтраницаТ2.Параметры["ОбразованиеКодПоОКИН1"]		=	Образование.ОбразованиеКодПоОКИН;
			Иначе
				ПерваяСтраницаТ2.Параметры["Образование1"]				=	"" + ПерваяСтраницаТ2.Параметры["Образование1"] + ", " +	Образование.ВидОбразования;
			КонецЕсли;

			ПерваяСтраницаТ2.Параметры["ОбразовательноеУчреждение"+НомерОбразованияВВУЗЕ]	=	Образование.УчебноеЗаведение;
			ПерваяСтраницаТ2.Параметры["ДипломСерияНомер"+НомерОбразованияВВУЗЕ]			=	Образование.Диплом;
			ПерваяСтраницаТ2.Параметры["ГодОкончания"+НомерОбразованияВВУЗЕ]				=	Формат(Образование.ГодОкончания, "ЧГ=");
			ПерваяСтраницаТ2.Параметры["КвалификацияПоДиплому"+НомерОбразованияВВУЗЕ]		=	Образование.Квалификация;
			ПерваяСтраницаТ2.Параметры["СпециальностьПоДиплому"+НомерОбразованияВВУЗЕ]		=	Образование.Специальность;
 			ПерваяСтраницаТ2.Параметры["КодПоОКСО"+НомерОбразованияВВУЗЕ]		=	Образование.КодПоОКСО;

		Иначе// Послевузовское образование

			ПерваяСтраницаТ2.Параметры["Образование3"]					=	Образование.ВидОбразования;
			ПерваяСтраницаТ2.Параметры["ОбразованиеКодПоОКИН3"]			=	Образование.ОбразованиеКодПоОКИН;
			ПерваяСтраницаТ2.Параметры["ОбразовательноеУчреждение3"]	=	Образование.УчебноеЗаведение;
			ПерваяСтраницаТ2.Параметры["ДипломСерияНомер3"]				=	Образование.Диплом;
			ПерваяСтраницаТ2.Параметры["ГодОкончания3"]					=	Формат(Образование.ГодОкончания, "ЧГ=");
			ПерваяСтраницаТ2.Параметры["СпециальностьПоДиплому3"]		=	Образование.Специальность;
			ПерваяСтраницаТ2.Параметры["КодПоОКСО3"]					=	Образование.КодПоОКСО;

			// Вывод сведений об образовании на этом заканчивается
			Прервать;
		КонецЕсли;

	КонецЦикла;

	инд	=	0;
	Профессии.Сбросить();
	
	Пока Профессии.НайтиСледующий(СтруктураПоискаФизЛицо) И Инд <= 1 Цикл
		инд = 1 + инд;
		ПерваяСтраницаТ2.Параметры["Профессия"+инд]   = Профессии.Профессия;
		ПерваяСтраницаТ2.Параметры["КодПоОКПДТР"+инд] = Профессии.КодПоОКПДТР;
	КонецЦикла;
	
	// СТАЖИ
	ВыводитьДатуСтажа = Ложь;
	ВыборкаПоСтажу = удуДокументыКадровогоУчета.ВыбратьСтажиРаботника(Работник.Физлицо);
	ВыведенПроизвольныйСтаж = Ложь;
	Пока ВыборкаПоСтажу.Следующий()	Цикл

		ДатаНачалаОтсчетаСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
		Лет		= 0;
		Месяцев	= 0;
		Дней	= 0;
		удуОбщегоНазначенияСервер.РазобратьРазностьДат(ДатаАктуальности, ДатаНачалаОтсчетаСтажа, Лет, Месяцев, Дней);

		Если ВыборкаПоСтажу.ВидСтажа = Справочники.удуВидыСтажа.НепрерывныйСтаж Тогда
			
			ВтораяСтраницаТ2.Параметры["ДнейСтажа2"]	=	Дней;
			ВтораяСтраницаТ2.Параметры["МесяцевСтажа2"]	=	Месяцев;
			ВтораяСтраницаТ2.Параметры["ЛетСтажа2"]		=	Лет;
			ВыводитьДатуСтажа = Истина;
			
		ИначеЕсли ВыборкаПоСтажу.ВидСтажа = Справочники.удуВидыСтажа.ОбщийСтаж Тогда
			
			ВтораяСтраницаТ2.Параметры["ДнейСтажа1"]	=	Дней;
			ВтораяСтраницаТ2.Параметры["МесяцевСтажа1"]	=	Месяцев;
			ВтораяСтраницаТ2.Параметры["ЛетСтажа1"]		=	Лет;
			ВыводитьДатуСтажа = Истина;
			
		ИначеЕсли ВыборкаПоСтажу.ВидСтажа = Справочники.удуВидыСтажа.СтажНаНадбавкуЗаВыслугуЛет Тогда
			
			ВтораяСтраницаТ2.Параметры["ДнейСтажа3"]	=	Дней;
			ВтораяСтраницаТ2.Параметры["МесяцевСтажа3"]	=	Месяцев;
			ВтораяСтраницаТ2.Параметры["ЛетСтажа3"]		=	Лет;
			ВыводитьДатуСтажа = Истина;
			
		ИначеЕсли Не ВыведенПроизвольныйСтаж Тогда
			
			ВыведенПроизвольныйСтаж = Истина;
			
			ВтораяСтраницаТ2.Параметры["ДнейСтажа4"]	=	Дней;
			ВтораяСтраницаТ2.Параметры["МесяцевСтажа4"]	=	Месяцев;
			ВтораяСтраницаТ2.Параметры["ЛетСтажа4"]		=	Лет;
			ВтораяСтраницаТ2.Параметры["ВидСтажа"]		=	ВыборкаПоСтажу.ВидСтажа;
			ВыводитьДатуСтажа = Истина;
		
		КонецЕсли; 
		
	КонецЦикла;
	
	// Дата стажа
	Если ВыводитьДатуСтажа И ЗначениеЗаполнено(ДатаАктуальности)Тогда
		ВтораяСтраницаТ2.Параметры["ДатаСтажа"] = "8. Стаж работы (по состоянию на  " + Формат(ДатаАктуальности, "ДЛФ=DD") + "):"
	Иначе
		ВтораяСтраницаТ2.Параметры["ДатаСтажа"] = "8. Стаж работы (по состоянию на  ""         "" _________ 20     г.):"
	КонецЕсли; 
	
	// СОСТАВ СЕМЬИ
	СоставСемьи.Сбросить();
	инд	=	0;
	Пока СоставСемьи.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл
		инд	= 1 + инд;
		Если инд >= 7 тогда
			Прервать;
		КонецЕсли;
		ВтораяСтраницаТ2.Параметры["СтепеньРодства"+инд]			=	СоставСемьи.СтепеньРодства;
		ВтораяСтраницаТ2.Параметры["ФИОРодственника"+инд]			=	СоставСемьи.Родственник;
		ВтораяСтраницаТ2.Параметры["ГодРожденияРодственника"+инд]	=	Формат(Год(СоставСемьи.ДатаРождения), "ЧГ=");

	КонецЦикла;

	//// ПРИЕМ И ПЕРЕВОДЫ НА ДРУГУЮ РАБОТУ
	ПоместилисьВсеПриемы = истина;
	инд	=	0;
	ЧетвертаяСтраницаТ2.Параметры.Приказ = "Приказ (распоряжение) № ____________ от   ""____"" _______________ 20___г. ";
	ПриемыИПереводы.Сбросить();
	Пока ПриемыИПереводы.НайтиСледующий(СтруктураПоискаСотрудник) Цикл

		Если ПриемыИПереводы.ПричинаИзмененияСостояния = Перечисления.удуПричиныИзмененияСостояния.Увольнение тогда
            
			// Встретили увольнение документом "Прием на работу" или "Увольнение".
			ЧетвертаяСтраницаТ2.Параметры["ОснованиеУвольнения"]	=	ПриемыИПереводы.ОснованиеУвольнения;
			ЧетвертаяСтраницаТ2.Параметры["ДатаУвольнения"]			=	?(ПриемыИПереводы.ДатаУвольнения = Null	, """__"" _____________ 200__ г. ", ПриемыИПереводы.ДатаУвольнения);
			ЧетвертаяСтраницаТ2.Параметры["Приказ"] = "Приказ (распоряжение) № """ + СокрЛП(ПриемыИПереводы.НомерПриказаУвольнения) +  """ от " + Формат(ПриемыИПереводы.ДатаПриказаУвольнения, "ДЛФ=DD");
			
		Иначе // Кадровое назначение	
			
			Если ПриемыИПереводы.ПричинаИзмененияСостояния = Перечисления.удуПричиныИзмененияСостояния.ПриемНаРаботу тогда
				ПерваяСтраницаТ2.Параметры.ХарактерРаботы = ПриемыИПереводы.ХарактерРаботы;
			КонецЕсли;
			
			ОписаниеТарифнаяСтавка = Формат(ПриемыИПереводы.ТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=' '");
			
			инд	= инд + 1;
			Если инд >= 14 тогда
				ПоместилисьВсеПриемы = ложь;
				Прервать;
			КонецЕсли;
			
			ТретьяСтраницаТ2.Параметры["ДатаПеревода"+инд]			= ПриемыИПереводы.ДатаПеревода;
			ТретьяСтраницаТ2.Параметры["ПодразделениеПеревода"+инд]	= ПриемыИПереводы.ПодразделениеОрганизации;
			ТретьяСтраницаТ2.Параметры["ДолжностьПеревода"+инд]		= ПриемыИПереводы.Должность;
			ТретьяСтраницаТ2.Параметры["ТарифнаяСтавка"+инд]		= ОписаниеТарифнаяСтавка;
			ТретьяСтраницаТ2.Параметры["ОснованиеПеревода"+инд]		= "Пр.№ "+ СокрЛП(ПриемыИПереводы.НомерПриказа) +" от " + Формат(ПриемыИПереводы.ДатаПриказа, "ДФ=dd.MM.yyyy");

			
	
		КонецЕсли;

	КонецЦикла;

	Если ЧетвертаяСтраницаТ2.Параметры["ДатаУвольнения"] = Неопределено тогда
		ЧетвертаяСтраницаТ2.Параметры["ДатаУвольнения"] = """__"" _____________ 200__ г. ";
	КонецЕсли;

	
	// НАГРАДЫ
	ПоместилисьВсеНаграды = истина;
	инд	=	0;
	Награды.Сбросить();
	Пока Награды.НайтиСледующий(СтруктураПоискаФизЛицо)	Цикл
		инд	=	инд + 1;
		Если инд = 6 Тогда
			ПоместилисьВсеНаграды = ложь;
			Прервать
		КонецЕсли;
		ЧетвертаяСтраницаТ2.Параметры["Награда"+инд]			=	Награды.Награда;
		ЧетвертаяСтраницаТ2.Параметры["Приказ"+инд]				=	Награды.ЧейПриказ;
		ЧетвертаяСтраницаТ2.Параметры["НомерПриказа"+инд]		=	Награды.НомерПриказа;
		ЧетвертаяСтраницаТ2.Параметры["ДатаПриказа"+инд]		=	Награды.ДатаПриказа;
	КонецЦикла;
	
	
	// Аттестации
	ПоместилисьВсеАттестации = истина;
	инд	=	0;
	Аттестации.Сбросить();
	Пока Аттестации.НайтиСледующий(СтруктураПоискаФизЛицо)	Цикл
		инд	=	инд + 1;
		Если инд = 6 Тогда
			ПоместилисьВсеАттестации = ложь;
			Прервать
		КонецЕсли;
		ТретьяСтраницаТ2.Параметры["ДатаАттестации"+инд]			=	Аттестации.ДатаАттестации;
		ТретьяСтраницаТ2.Параметры["РешениеКомиссии"+инд]			=	Аттестации.РешениеКомиссии;
		ТретьяСтраницаТ2.Параметры["НомерДокумента"+инд]			=	Аттестации.НомерДокумента;
		ТретьяСтраницаТ2.Параметры["ДатаДокумента"+инд]				=	Аттестации.ДатаДокумента;
		ТретьяСтраницаТ2.Параметры["ОснованиеАттестации"+инд]		=	Аттестации.ОснованиеАттестации;		
	КонецЦикла;

	// Квалификации
	ПоместилисьВсеКвалификации = истина;
	инд	=	0;
	Квалификации.Сбросить();
	Пока Квалификации.НайтиСледующий(СтруктураПоискаФизЛицо)	Цикл
		инд	=	инд + 1;
		Если инд = 6 Тогда
			ПоместилисьВсеКвалификации = ложь;
			Прервать
		КонецЕсли;
		ТретьяСтраницаТ2.Параметры["НачалоОбучения"+инд]			=	Квалификации.НачалоОбучения;
		ТретьяСтраницаТ2.Параметры["ОкончаниеОбучения"+инд]			=	Квалификации.ОкончаниеОбучения;
		ТретьяСтраницаТ2.Параметры["ВидПК"+инд]						=	Квалификации.ВидПК;
		ТретьяСтраницаТ2.Параметры["УчреждениеПК"+инд]				=	Квалификации.УчреждениеПК;
		ТретьяСтраницаТ2.Параметры["ДокументПК"+инд]				=	Квалификации.ДокументПК;
		ТретьяСтраницаТ2.Параметры["НомерДокументаПК"+инд]			=	Квалификации.НомерДокументаПК;
		ТретьяСтраницаТ2.Параметры["ДатаДокументаПК"+инд]			=	Квалификации.ДатаДокументаПК;
		ТретьяСтраницаТ2.Параметры["ОснованиеПК"+инд]				=	Квалификации.ОснованиеПК;
	КонецЦикла;

	// ОТПУСКА
	ПоместилисьВсеОтпуска = истина;
	инд	=	0;
	Отпуска.Сбросить();
	Пока Отпуска.НайтиСледующий(СтруктураПоискаСотрудник)	Цикл
		
		Если инд >= 14 Тогда
			ПоместилисьВсеОтпуска = ложь;
			Прервать
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Отпуска.ДатаНачалаДоп) или  Отпуска.ДатаС < Отпуска.ДатаНачалаДоп Тогда
			
			инд	=	инд + 1;
			
			// Вид отпуска
			ЧетвертаяСтраницаТ2.Параметры["ВидОтпуска"+инд]			=	Отпуска.ПричинаОтсутствия;
			
			// Период отпуска
			ЧетвертаяСтраницаТ2.Параметры["ДатаС"+инд]				=	Отпуска.ДатаС;
			ЧетвертаяСтраницаТ2.Параметры["ДатаПо"+инд]				=	Отпуска.ДатаПо;
			ЧетвертаяСтраницаТ2.Параметры["ДнейОтпуска"+инд]		=	Отпуска.Продолжительность;
			ЧетвертаяСтраницаТ2.Параметры["РабочийГодС"+инд]		=	Отпуска.РабочийГодС;
			ЧетвертаяСтраницаТ2.Параметры["РабочийГодПо"+инд]		=	Отпуска.РабочийГодПо;
			ЧетвертаяСтраницаТ2.Параметры["ОснованиеОтпуска"+инд]	=	"Пр.№ "+ СокрЛП(Отпуска.НомерПриказа) +" от " + Формат(Отпуска.ДатаПриказа, "ДФ=dd.MM.yyyy") + " " + Отпуска.Основание;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Отпуска.ДополнительныйОтпуск) и ЗначениеЗаполнено(Отпуска.ДатаНачалаДоп) и ЗначениеЗаполнено(Отпуска.ДатаОкончанияДоп) и Отпуска.ДатаНачалаДоп <= Отпуска.ДатаОкончанияДоп Тогда
			
			инд	=	инд + 1;
			Если инд >= 14 Тогда
				ПоместилисьВсеОтпуска = ложь;
				Прервать
			КонецЕсли;
			
			// Вид отпуска
			ЧетвертаяСтраницаТ2.Параметры["ВидОтпуска"+инд]			=	Отпуска.ДополнительныйОтпуск;
			
			// Период отпуска
			ЧетвертаяСтраницаТ2.Параметры["ДатаС"+инд]				=	Отпуска.ДатаНачалаДоп;
			ЧетвертаяСтраницаТ2.Параметры["ДатаПо"+инд]				=	Отпуска.ДатаОкончанияДоп;
			ЧетвертаяСтраницаТ2.Параметры["ДнейОтпуска"+инд]		=	Отпуска.ПродолжительностьДоп;
			ЧетвертаяСтраницаТ2.Параметры["РабочийГодС"+инд]		=	Отпуска.РабочийГодС;
			ЧетвертаяСтраницаТ2.Параметры["РабочийГодПо"+инд]		=	Отпуска.РабочийГодПо;
			ЧетвертаяСтраницаТ2.Параметры["ОснованиеОтпуска"+инд]	=	"Пр.№ "+ СокрЛП(Отпуска.НомерПриказа) +" от " + Формат(Отпуска.ДатаПриказа, "ДФ=dd.MM.yyyy") + " " + Отпуска.Основание;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	ЧетвертаяСтраницаТ2.Параметры["ДолжностьКадровика"] = КадровыйРаботник.Должность;
	ЧетвертаяСтраницаТ2.Параметры["ФИОКадровика"]       = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(КадровыйРаботник.ФизЛицо);
	ВтораяСтраницаТ2.Параметры["ДолжностьКадровика"]    = КадровыйРаботник.Должность;
	ВтораяСтраницаТ2.Параметры["ФИОКадровика"]          = удуУправлениеОтчетами.ФамилияИнициалыОтветсвенногоЛица(КадровыйРаботник.ФизЛицо);
		
	// Вывод страниц документа
	ДокументРезультат.Вывести(ПерваяСтраницаТ2,Уровень+1);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ДокументРезультат.Вывести(ВтораяСтраницаТ2, Уровень+1);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ДокументРезультат.Вывести(ТретьяСтраницаТ2, Уровень+1);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2, Уровень+1);
	
	
	// Дополнение к форме Т-2 по разделу 3 - Приемы кадровые назначения.
	
	Если НЕ ПоместилисьВсеПриемы тогда
		
		Шапка        = Макет.ПолучитьОбласть("ШапкаПриемыПеремещения");
		СтрокаДанных = Макет.ПолучитьОбласть("СтрокаПриемыПеремещения");
		ДокументРезультат.Вывести(Шапка, Уровень+1);
		
		Если ПриемыИПереводы.ПричинаИзмененияСостояния <> Перечисления.удуПричиныИзмененияСостояния.Увольнение тогда
				
				Если ПриемыИПереводы.ПричинаИзмененияСостояния = Перечисления.удуПричиныИзмененияСостояния.ПриемНаРаботу тогда
					ПерваяСтраницаТ2.Параметры.ХарактерРаботы = ПриемыИПереводы.ХарактерРаботы;
				КонецЕсли;
				
				ОписаниеТарифнаяСтавка = Формат(ПриемыИПереводы.ТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=' '");
				
				Если ПриемыИПереводы.ТребуетВводаТарифногоРазряда Тогда
						Если ЗначениеЗаполнено(ПриемыИПереводы.ТарифнаяСтавка) Тогда
							ОписаниеТарифнаяСтавка = ОписаниеТарифнаяСтавка	;//+ " (" + ПриемыИПереводы.ТарифныйРазряд + ")"
						Иначе
							ОписаниеТарифнаяСтавка = ПриемыИПереводы.ТарифныйРазряд + " (ставка не указана)"
						КонецЕсли;
				КонецЕсли;
								
				СтрокаДанных.Параметры["ДатаПеревода"]			= ПриемыИПереводы.ДатаПеревода;
				СтрокаДанных.Параметры["ПодразделениеПеревода"]	= ПриемыИПереводы.ПодразделениеОрганизации;
				СтрокаДанных.Параметры["ДолжностьПеревода"]		= ПриемыИПереводы.Должность;
				СтрокаДанных.Параметры["ТарифнаяСтавка"]		= ОписаниеТарифнаяСтавка;
				СтрокаДанных.Параметры["ОснованиеПеревода"]		= "Пр.№ "+ СокрЛП(ПриемыИПереводы.НомерПриказа) +" от " + Формат(ПриемыИПереводы.ДатаПриказа, "ДФ=dd.MM.yyyy");
				ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);
				
			КонецЕсли;

		Пока ПриемыИПереводы.НайтиСледующий(СтруктураПоискаСотрудник) Цикл
			
			Если ПриемыИПереводы.ПричинаИзмененияСостояния <> Перечисления.удуПричиныИзмененияСостояния.Увольнение тогда
				
				Если ПриемыИПереводы.ПричинаИзмененияСостояния = Перечисления.удуПричиныИзмененияСостояния.ПриемНаРаботу тогда
					ПерваяСтраницаТ2.Параметры.ХарактерРаботы = ПриемыИПереводы.ХарактерРаботы;
				КонецЕсли;
				
				ОписаниеТарифнаяСтавка = Формат(ПриемыИПереводы.ТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=' '");
				
					Если ПриемыИПереводы.ТребуетВводаТарифногоРазряда Тогда
						Если ЗначениеЗаполнено(ПриемыИПереводы.ТарифнаяСтавка) Тогда
							ОписаниеТарифнаяСтавка = ОписаниеТарифнаяСтавка;	//+ " (" + ПриемыИПереводы.ТарифныйРазряд + ")"
						Иначе
							ОписаниеТарифнаяСтавка = ПриемыИПереводы.ТарифныйРазряд + " (ставка не указана)"
						КонецЕсли;
					КонецЕсли;
								
				СтрокаДанных.Параметры["ДатаПеревода"]			= ПриемыИПереводы.ДатаПеревода;
				СтрокаДанных.Параметры["ПодразделениеПеревода"]	= ПриемыИПереводы.ПодразделениеОрганизации;
				СтрокаДанных.Параметры["ДолжностьПеревода"]		= ПриемыИПереводы.Должность;
				СтрокаДанных.Параметры["ТарифнаяСтавка"]		= ОписаниеТарифнаяСтавка;
				СтрокаДанных.Параметры["ОснованиеПеревода"]		= "Пр.№ "+ СокрЛП(ПриемыИПереводы.НомерПриказа) +" от " + Формат(ПриемыИПереводы.ДатаПриказа, "ДФ=dd.MM.yyyy");
				ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	
	// Дополнение к форме Т-2 по разделу 7 - Награды.	
		
	Если НЕ ПоместилисьВсеНаграды тогда
		Шапка        = Макет.ПолучитьОбласть("ШапкаНаграды");
		СтрокаДанных = Макет.ПолучитьОбласть("СтрокаНаграды");
		
		ДокументРезультат.Вывести(Шапка, Уровень+1);
		СтрокаДанных.Параметры["Награда"]			=	Награды.Награда;
		СтрокаДанных.Параметры["Приказ"]			=	Награды.ЧейПриказ;
		СтрокаДанных.Параметры["НомерПриказа"]		=	Награды.НомерПриказа;
		СтрокаДанных.Параметры["ДатаПриказа"]		=	Награды.ДатаПриказа;
		ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);
		
		Пока Награды.НайтиСледующий(СтруктураПоискаФизЛицо)	Цикл
			
			СтрокаДанных.Параметры["Награда"]			=	Награды.Награда;
			СтрокаДанных.Параметры["Приказ"]			=	Награды.ЧейПриказ;
			СтрокаДанных.Параметры["НомерПриказа"]		=	Награды.НомерПриказа;
			СтрокаДанных.Параметры["ДатаПриказа"]		=	Награды.ДатаПриказа;
			ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);
			
		КонецЦикла;
	КонецЕсли;

	
	// Дополнение к форме Т-2 по разделу 8 - Отпуска.
	
	Если НЕ ПоместилисьВсеОтпуска тогда
		
		Шапка         = Макет.ПолучитьОбласть("ШапкаОтпуска");
		СтрокаДанных = Макет.ПолучитьОбласть("СтрокаОтпуска");
		
		ДокументРезультат.Вывести(Шапка, Уровень+1);
		
		Если НЕ ЗначениеЗаполнено(Отпуска.ДатаНачалаДоп) или  Отпуска.ДатаС < Отпуска.ДатаНачалаДоп Тогда
				
				// Вид отпуска
				СтрокаДанных.Параметры["ВидОтпуска"]			=	Отпуска.ПричинаОтсутствия;
				
				// Период отпуска
				СтрокаДанных.Параметры["ДатаС"]				=	Отпуска.ДатаС;
				СтрокаДанных.Параметры["ДатаПо"]			=	Отпуска.ДатаПо;
				СтрокаДанных.Параметры["ДнейОтпуска"]		=	Отпуска.Продолжительность;
				СтрокаДанных.Параметры["РабочийГодС"]		=	Отпуска.РабочийГодС;
				СтрокаДанных.Параметры["РабочийГодПо"]		=	Отпуска.РабочийГодПо;
				СтрокаДанных.Параметры["ОснованиеОтпуска"]	=	"Пр.№ "+ СокрЛП(Отпуска.НомерПриказа) +" от " + Формат(Отпуска.ДатаПриказа, "ДФ=dd.MM.yyyy") + " " + Отпуска.Основание;
				ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);

				
			КонецЕсли;
			
		Если ЗначениеЗаполнено(Отпуска.ДополнительныйОтпуск) и ЗначениеЗаполнено(Отпуска.ДатаНачалаДоп) и ЗначениеЗаполнено(Отпуска.ДатаОкончанияДоп) и Отпуска.ДатаНачалаДоп <= Отпуска.ДатаОкончанияДоп Тогда
				
				// Вид отпуска
				СтрокаДанных.Параметры["ВидОтпуска"]			=	Отпуска.ДополнительныйОтпуск;
				
				// Период отпуска
				СтрокаДанных.Параметры["ДатаС"]				=	Отпуска.ДатаНачалаДоп;
				СтрокаДанных.Параметры["ДатаПо"]				=	Отпуска.ДатаОкончанияДоп;
				СтрокаДанных.Параметры["ДнейОтпуска"]		=	Отпуска.ПродолжительностьДоп;
				СтрокаДанных.Параметры["РабочийГодС"]		=	Отпуска.РабочийГодС;
				СтрокаДанных.Параметры["РабочийГодПо"]		=	Отпуска.РабочийГодПо;
				СтрокаДанных.Параметры["ОснованиеОтпуска"]	=	"Пр.№ "+ СокрЛП(Отпуска.НомерПриказа) +" от " + Формат(Отпуска.ДатаПриказа, "ДФ=dd.MM.yyyy") + " " + Отпуска.Основание;
				ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);
				
			КонецЕсли;

		Пока Отпуска.НайтиСледующий(СтруктураПоискаСотрудник)	Цикл
			
			Если НЕ ЗначениеЗаполнено(Отпуска.ДатаНачалаДоп) или  Отпуска.ДатаС < Отпуска.ДатаНачалаДоп Тогда
				
				// Вид отпуска
				СтрокаДанных.Параметры["ВидОтпуска"]			=	Отпуска.ПричинаОтсутствия;
				
				// Период отпуска
				СтрокаДанных.Параметры["ДатаС"]				=	Отпуска.ДатаС;
				СтрокаДанных.Параметры["ДатаПо"]			=	Отпуска.ДатаПо;
				СтрокаДанных.Параметры["ДнейОтпуска"]		=	Отпуска.Продолжительность;
				СтрокаДанных.Параметры["РабочийГодС"]		=	Отпуска.РабочийГодС;
				СтрокаДанных.Параметры["РабочийГодПо"]		=	Отпуска.РабочийГодПо;
				СтрокаДанных.Параметры["ОснованиеОтпуска"]	=	"Пр.№ "+ СокрЛП(Отпуска.НомерПриказа) +" от " + Формат(Отпуска.ДатаПриказа, "ДФ=dd.MM.yyyy") + " " + Отпуска.Основание;
				ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);

				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Отпуска.ДополнительныйОтпуск) и ЗначениеЗаполнено(Отпуска.ДатаНачалаДоп) и ЗначениеЗаполнено(Отпуска.ДатаОкончанияДоп) и Отпуска.ДатаНачалаДоп <= Отпуска.ДатаОкончанияДоп Тогда
				
				// Вид отпуска
				СтрокаДанных.Параметры["ВидОтпуска"]			=	Отпуска.ДополнительныйОтпуск;
				
				// Период отпуска
				СтрокаДанных.Параметры["ДатаС"]				=	Отпуска.ДатаНачалаДоп;
				СтрокаДанных.Параметры["ДатаПо"]				=	Отпуска.ДатаОкончанияДоп;
				СтрокаДанных.Параметры["ДнейОтпуска"]		=	Отпуска.ПродолжительностьДоп;
				СтрокаДанных.Параметры["РабочийГодС"]		=	Отпуска.РабочийГодС;
				СтрокаДанных.Параметры["РабочийГодПо"]		=	Отпуска.РабочийГодПо;
				СтрокаДанных.Параметры["ОснованиеОтпуска"]	=	"Пр.№ "+ СокрЛП(Отпуска.НомерПриказа) +" от " + Формат(Отпуска.ДатаПриказа, "ДФ=dd.MM.yyyy") + " " + Отпуска.Основание;
				ДокументРезультат.Вывести(СтрокаДанных, Уровень+2);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


