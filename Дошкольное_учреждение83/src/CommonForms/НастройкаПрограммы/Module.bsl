
//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

&НаСервере
Процедура КорректировкаГрифовДоступа()
	
	Если Не НаборКонстант.ИспользоватьГрифыДоступаКВходящимИИсходящимДокументам Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.ГрифДоступа.Пустая() Тогда
			ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
			ДокументОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.ГрифДоступа.Пустая() Тогда
			ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
			ДокументОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстантуИспользованияГрифовДоступа(ИспользоватьГрифыДоступы)
	
	Константы.ИспользоватьГрифыДоступаКВходящимИИсходящимДокументам.Установить(ИспользоватьГрифыДоступы);
	
КонецПроцедуры

&НаСервере
Функция СоздатьОрганизацию()
	
	НаименованиеПредприятия = НаборКонстант.НаименованиеПредприятия;
	РуководительПредприятия = НаборКонстант.РуководительПредприятия;
	РуководительСлужбыДОУ = НаборКонстант.РуководительСлужбыДОУ;
	РуководительАрхива = НаборКонстант.РуководительАрхива;
	
	ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	Если ЗначениеЗаполнено(НаименованиеПредприятия) Тогда 
		ОрганизацияОбъект.Наименование = НаименованиеПредприятия;
	Иначе	
		ОрганизацияОбъект.Наименование = "Наша организация";
	КонецЕсли;	
	ОрганизацияОбъект.Записать();
	Организация = ОрганизацияОбъект.Ссылка;
	
	Если ЗначениеЗаполнено(РуководительПредприятия) Тогда 
		МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Дата(2000, 1, 1);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации;
		МенеджерЗаписи.Пользователь = РуководительПредприятия;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РуководительСлужбыДОУ) Тогда 
		МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Дата(2000, 1, 1);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительСлужбыДОУ;
		МенеджерЗаписи.Пользователь = РуководительСлужбыДОУ;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РуководительАрхива) Тогда 
		МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Дата(2000, 1, 1);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительАрхива;
		МенеджерЗаписи.Пользователь = РуководительАрхива;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат Организация;	
	
КонецФункции	

&НаСервере
Функция МассивОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьОрганизацию(Организация)
	
	НачатьТранзакцию();
	Попытка
		МассивОМД = Новый Массив;
		МассивОМД.Добавить("Справочник.ВходящиеДокументы");
		МассивОМД.Добавить("Справочник.ИсходящиеДокументы");
		МассивОМД.Добавить("Справочник.ВнутренниеДокументы");
		МассивОМД.Добавить("Справочник.НоменклатураДел");
		МассивОМД.Добавить("Справочник.РазделыНоменклатурыДел");
		МассивОМД.Добавить("Документ.ПередачаДелВАрхив");
		МассивОМД.Добавить("Документ.УничтожениеДел");
		
		ТекстЗапроса = "";
		Для Каждого ИмяОМД Из МассивОМД Цикл
			
			УсловиеНаГруппу = "";
			Если Лев(ИмяОМД, 10) = "Справочник" Тогда
				МетаданныеСпр = Метаданные.Справочники[Сред(ИмяОМД, 12)];
				Если МетаданныеСпр.Иерархический И МетаданныеСпр.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Если МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда 
						УсловиеНаГруппу = " И Не ЭтоГруппа ";
					ИначеЕсли МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда 
						УсловиеНаГруппу = " И ЭтоГруппа ";
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса 
			+ " ВЫБРАТЬ Ссылка ИЗ " 
			+ ИмяОМД 
			+ " ГДЕ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) " + УсловиеНаГруппу + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЦикла;	
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-15);
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Организация = Организация;
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;		
	
КонецПроцедуры	

Функция НужноЗаполнитьОрганизацию()
	
	МассивОМД = Новый Массив;
	МассивОМД.Добавить("Справочник.ВходящиеДокументы");
	МассивОМД.Добавить("Справочник.ИсходящиеДокументы");
	МассивОМД.Добавить("Справочник.ВнутренниеДокументы");
	МассивОМД.Добавить("Справочник.НоменклатураДел");
	МассивОМД.Добавить("Справочник.РазделыНоменклатурыДел");
	МассивОМД.Добавить("Документ.ПередачаДелВАрхив");
	МассивОМД.Добавить("Документ.УничтожениеДел");
	
	ТекстЗапроса = "";
	Для Каждого ИмяОМД Из МассивОМД Цикл
		
		УсловиеНаГруппу = "";
		Если Лев(ИмяОМД, 10) = "Справочник" Тогда
			МетаданныеСпр = Метаданные.Справочники[Сред(ИмяОМД, 12)];
			Если МетаданныеСпр.Иерархический И МетаданныеСпр.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				Если МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда 
					УсловиеНаГруппу = " И Не ЭтоГруппа ";
				ИначеЕсли МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда 
					УсловиеНаГруппу = " И ЭтоГруппа ";
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса 
		+ " ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ " 
		+ ИмяОМД 
		+ " ГДЕ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) " + УсловиеНаГруппу + " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-15);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции	

&НаСервере
Процедура удуСохранитьКонстантуИспользоватьРеестрыОтправки()
	Константы.удуИспользоватьРеестрыОтправки.Установить(НаборКонстант.удуИспользоватьРеестрыОтправки);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МаксимальныйРазмерФайла = НаборКонстант.МаксимальныйРазмерФайла / (1024*1024);
	
	ИдентификаторРегламентногоЗадания = РегламентныеЗадания.НайтиПредопределенное(
		Метаданные.РегламентныеЗадания.УведомлениеИсполнителейОНовыхЗадачах).УникальныйИдентификатор;
		
	ИспользоватьВидыВходящихДокументов 		= НаборКонстант.ИспользоватьВидыВходящихДокументов;
	ИспользоватьВидыИсходящихДокументов 	= НаборКонстант.ИспользоватьВидыИсходящихДокументов;
	ИспользоватьВидыВнутреннихДокументов 	= НаборКонстант.ИспользоватьВидыВнутреннихДокументов;
	
	ИспользованиеГрифовДоступаБылоИзменено = Ложь;
	
	Если Не НаборКонстант.ЗапретЗагрузкиФайловПоРасширению Тогда
		Элементы.СписокЗапрещенныхРасширений.Доступность = Ложь;
	КонецЕсли;	
	
	ИспользоватьУчетПоОрганизациям = НаборКонстант.ИспользоватьУчетПоОрганизациям;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Элементы.СтраницаДанныеПредприятия.Видимость = Ложь;
	КонецЕсли;
	
	удуИспользоватьРеестрыОтправки = Константы.удуИспользоватьРеестрыОтправки.Получить();
	
	// уду. Для использования обмена данными 2011.09 	
	Элементы.удуПрефиксИнформационнойБазы.Доступность = НаборКонстант.ИспользоватьОбменДанными;
    //
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НаборКонстант.ИспользоватьВидыВходящихДокументов 
	 Или НаборКонстант.ИспользоватьВидыИсходящихДокументов 
	 Или НаборКонстант.ИспользоватьВидыВнутреннихДокументов Тогда
		НаборКонстант.ИспользоватьВидыДокументов = Истина;
	Иначе	
		НаборКонстант.ИспользоватьВидыДокументов = Ложь;
	КонецЕсли;
	
	
	Если Не ИспользоватьУчетПоОрганизациям И НаборКонстант.ИспользоватьУчетПоОрганизациям Тогда // включен учет по организациям
		
		Организации = МассивОрганизаций();
		Если Организации.Количество() = 0 Тогда // создание организации
			Организация = СоздатьОрганизацию();
		КонецЕсли;	
		
		Если НужноЗаполнитьОрганизацию() Тогда 
			
			Если Организации.Количество() = 1 Тогда 
				Организация = Организации[0];
			ИначеЕсли Организации.Количество() > 1 Тогда 
				СписокОрганизаций = Новый СписокЗначений;
				СписокОрганизаций.ЗагрузитьЗначения(Организации);
				
				ВыбранноеЗначение = СписокОрганизаций.ВыбратьЭлемент(
					НСтр("ru = 'Укажите организацию, к которой отнести существующие справочники и документы'"));
				
				Если ВыбранноеЗначение = Неопределено Тогда 
					Отказ = Истина;
					Возврат;	
				КонецЕсли;		
				Организация = ВыбранноеЗначение.Значение;
			КонецЕсли;	
			
			Состояние(НСтр("ru = 'Выполняется включение учета по организациям. Пожалуйста, подождите...'"));
			ЗаполнитьОрганизацию(Организация);
			Состояние(НСтр("ru = 'Использование учета по организациям включено.'"));
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
	Если Не ИспользоватьВидыВходящихДокументов И НаборКонстант.ИспользоватьВидыВходящихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ВходящийДокумент") > 0 Тогда 
			
			ПараметрыФормы = Новый Структура("ТипДокумента", "ВходящийДокумент");
			Результат = ОткрытьФормуМодально("Общаяформа.ВключениеИспользованияВидовДокументов", ПараметрыФормы, ЭтаФорма);
			Если Результат <> КодВозвратаДиалога.ОК Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не ИспользоватьВидыИсходящихДокументов И НаборКонстант.ИспользоватьВидыИсходящихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ИсходящийДокумент") > 0 Тогда 
			
			ПараметрыФормы = Новый Структура("ТипДокумента", "ИсходящийДокумент");
			Результат = ОткрытьФормуМодально("Общаяформа.ВключениеИспользованияВидовДокументов", ПараметрыФормы, ЭтаФорма);
			Если Результат <> КодВозвратаДиалога.ОК Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ИспользоватьВидыВнутреннихДокументов И НаборКонстант.ИспользоватьВидыВнутреннихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ВнутреннийДокумент") > 0 Тогда 
			
			ПараметрыФормы = Новый Структура("ТипДокумента", "ВнутреннийДокумент");
			Результат = ОткрытьФормуМодально("Общаяформа.ВключениеИспользованияВидовДокументов", ПараметрыФормы, ЭтаФорма);
			Если Результат <> КодВозвратаДиалога.ОК Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОграничениеДоступаНаУровнеЗаписейВключено = ТекущийОбъект.ОграничиватьДоступНаУровнеЗаписей И НЕ Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ИспользованиеГрифовДоступаБылоИзменено И НаборКонстант.ИспользоватьГрифыДоступаКВходящимИИсходящимДокументам Тогда 
		Состояние(НСтр("ru = 'Идет обновление грифов доступа входящих и исходящих документов. 
			|Пожалуйста, подождите...'"));
		КорректировкаГрифовДоступа();
		Состояние(НСтр("ru = 'Обновление грифов доступа завершено.'"));
	КонецЕсли;
	
	Если ОграничениеДоступаНаУровнеЗаписейВключено Тогда
		Предупреждение(НСтр("ru = 'Включено ограничение доступа на уровне записей.
		                          |Требуется заполнение данных, которое будет выполняться частями
		                          |регламентным заданием ""Заполнение данных для ограничения доступа""
		                          |(ход выполнения в журнале регистрации).'"));
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			Предупреждение(НСтр("ru = 'В режиме файловой информационной базы регламентное задание
			                          |""Заполнение данных для ограничения доступа""
			                          |необходимо выполнить вручную через консоль регламентных заданий.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
// 

&НаКлиенте
Процедура МаксимальныйРазмерФайлаПриИзменении(Элемент)
	
	НаборКонстант.МаксимальныйРазмерФайла = МаксимальныйРазмерФайла * (1024*1024);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеУведомления(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РегламентныеЗаданияСервер.ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания));
	Если Диалог.ОткрытьМодально() Тогда
		РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, Диалог.Расписание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПредприятияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, НаборКонстант.РуководительПредприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительСлужбыДОУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, НаборКонстант.РуководительСлужбыДОУ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГрифыДоступаКВходящимИИсходящимДокументамПриИзменении(Элемент)
	
	ИспользованиеГрифовДоступаБылоИзменено = Истина;
	
	СохранитьКонстантуИспользованияГрифовДоступа(НаборКонстант.ИспользоватьГрифыДоступаКВходящимИИсходящимДокументам);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретЗагрузкиФайловПоРасширениюПриИзменении(Элемент)
	Элементы.СписокЗапрещенныхРасширений.Доступность = НаборКонстант.ЗапретЗагрузкиФайловПоРасширению;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтоматическойЗагрузкиФайлов(Команда)
	ОткрытьФорму("ОбщаяФорма.НастройкаАвтоматическойЗагрузкиФайлов");
КонецПроцедуры


&НаКлиенте
Процедура удуИспользоватьРеестрыОтправкиПриИзменении(Элемент)
	удуСохранитьКонстантуИспользоватьРеестрыОтправки();
	ОбновитьИнтерфейс();
КонецПроцедуры


&НаКлиенте
Процедура удуИспользоватьПерсональныеДанныеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если НаборКонстант.удуИспользоватьПерсональныеДанные Тогда
		НаборКонстант.удуИспользоватьПерсональныеДанные = Ложь;
		ФормаПредупрежденияК2 = ПолучитьФорму("ОбщаяФорма.удуФормаПредупрежденияК2");
		ФормаПредупрежденияК2.ВладелецФормы = ЭтаФорма;
		ФормаПредупрежденияК2.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	НаборКонстант.удуИспользоватьПерсональныеДанные = Булево(ВыбранноеЗначение = "Согласен");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменДаннымиПриИзменении(Элемент)
	Элементы.удуПрефиксИнформационнойБазы.Доступность = НаборКонстант.ИспользоватьОбменДанными;
КонецПроцедуры
