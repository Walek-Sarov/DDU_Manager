
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Параметры.ОбъектСсылка;
	ОбновитьСписокФайлов();
	
	КаталогДляСохраненияДанных = РаботаС1СДокументооборотВызовСервера.ПолучитьЛокальныйКаталогФайлов();
	
	ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот 
		= РаботаС1СДокументооборотПовтИсп.ПолучитьНастройки().ИспользоватьЭлектронныеЦифровыеПодписи;
		
	ИспользоватьЭлектронныеЦифровыеПодписиВБСП = РаботаС1СДокументооборотВызовСервера.ПолучитьИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь Тогда
		Элементы.СписокФайловПодписанЭЦП.Видимость = Ложь;
		
		Элементы.СписокФайловСохранитьВместеСЭЦП.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭЦП.Видимость = Ложь;
	КонецЕсли;	
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь ИЛИ ИспользоватьЭлектронныеЦифровыеПодписиВБСП = Ложь Тогда
		Элементы.СписокФайловПодписать.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюПодписать.Видимость = Ложь;
		Элементы.СписокФайловДобавитьЭЦПИзФайла.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюДобавитьЭЦПИзФайла.Видимость = Ложь;
	КонецЕсли;	
	
	ИдентификаторКорневойПапки1СДокументооборот = ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокФайлов()
	
	СписокФайлов.Очистить();
	
	Файлы = РаботаС1СДокументооборотВызовСервера.ПолучитьСписокФайлов(ОбъектСсылка.УникальныйИдентификатор(),
		Строка(ОбъектСсылка), Строка(ТипЗнч(ОбъектСсылка)));
	
	Для каждого СведенияОФайле Из Файлы.files Цикл
		НоваяСтрока = СписокФайлов.Добавить();
		
		НоваяСтрока.Наименование = СведенияОФайле.name;
		НоваяСтрока.Расширение = СведенияОФайле.extension;
		НоваяСтрока.Описание = СведенияОФайле.description;
		НоваяСтрока.Размер = Формат(СведенияОФайле.size/1024, "ЧЦ=10; ЧН=0");
		НоваяСтрока.ПодписанЭЦП = СведенияОФайле.signed;
		НоваяСтрока.Автор = СведенияОФайле.author.name;
		НоваяСтрока.УникальныйИдентификатор = СведенияОФайле.objectId.id;
		НоваяСтрока.ДатаСоздания = СведенияОФайле.creationDate;
		НоваяСтрока.ДатаМодификацииУниверсальная = СведенияОФайле.modificationDateUniversal;
		Редактируется = СведенияОФайле.editing;
		Зашифрован = СведенияОФайле.encrypted;
	
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(НоваяСтрока.Расширение);
		
		Для Каждого ПодписьXDTO Из СведенияОФайле.signatures Цикл
			Подпись = НоваяСтрока.ТаблицаПодписей.Добавить();
			
			Подпись.КомуВыданСертификат = ПодписьXDTO.author;
			Подпись.ДатаПодписи = ПодписьXDTO.date;
			Подпись.Комментарий = ПодписьXDTO.comment;
			Подпись.Отпечаток = ПодписьXDTO.thumbprint;
			
			ДвоичныеДанные = ПодписьXDTO.signature;
			Подпись.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			
			ДвоичныеДанныеСертификата = ПодписьXDTO.certificate;
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				Подпись.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			Подпись.ИмяФайлаПодписи = ПодписьXDTO.signatureFileName;
			Подпись.УстановившийПодпись = ПодписьXDTO.signer.name;
			Подпись.УстановившийПодписьИд = ПодписьXDTO.signer.objectId.id;
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры	


&НаКлиенте
Процедура ОбновитьСписокФайловКлиент(ИдентификаторФайла = Неопределено)
	
	Если ИдентификаторФайла <> Неопределено Тогда
		ТекущийИдентификаторФайла = ИдентификаторФайла;
	ИначеЕсли Элементы.СписокФайлов.ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор;	
	КонецЕсли;	
	
	ОбновитьСписокФайлов();
	Элементы.СписокФайлов.Обновить();
	
	// восстановим положение в списке
	Для Каждого Строка Из СписокФайлов Цикл
		Если Строка.УникальныйИдентификатор = ТекущийИдентификаторФайла Тогда
			Элементы.СписокФайлов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуВыполнить()
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор);
	ОткрытьФорму("ОбщаяФорма.ДокументооборотКарточкаФайла", ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ОткрытьФайлВыполнить();
КонецПроцедуры


&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор;
	Расширение = Элементы.СписокФайлов.ТекущиеДанные.Расширение;
	Имя = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Размер = Элементы.СписокФайлов.ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = Элементы.СписокФайлов.ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	РаботаС1СДокументооборотКлиент.ОткрытьФайл(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная,
		КаталогДляСохраненияДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	СоздатьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайл(Команда)
	СоздатьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлВыполнить()
	
	ПараметрыОткрытия = Новый Структура("РежимСоздания", 1);
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотСозданиеНовогоФайла", ПараметрыОткрытия);
	
	Если (ТипЗнч(Результат) = Тип("КодВозвратаДиалога")) ИЛИ (Результат = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = 1 Тогда
		СоздатьИзФайлаНаДиске();
	ИначеЕсли Результат = 2 Тогда
		ВыбратьСуществующийФайлВ1СДокументооборот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзФайлаНаДиске()
	
	Если Не ЗначениеЗаполнено(ИдентификаторКорневойПапки1СДокументооборот) Тогда
		Предупреждение(НСтр("ru = 'Не указана корневая папка для хранения файлов 1С:Документооборот.'"));
		Возврат;
	КонецЕсли;	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	ИдентификаторСозданногоФайла = Неопределено;
	
	Если РасширениеПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Результат = ВыборФайла.Выбрать();
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеКлиент(ПолноеИмяФайла);
		
	Иначе 
		// Если веб-клиент без расширения
		
		ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");

		ВремяИзменения = Дата('00010101'); // Т.к. не можем получить дату модификации файла на диске
		ВремяИзмененияУниверсальное = Дата('00010101');
		Размер = 0;						// Т.к. не можем получить размер файла на диске
		ИмяБезРасширения = "";
		Расширение = "";
		АдресВременногоХранилищаТекста = "";

		// Поместим Файл в ВременноеХранилище
		АдресВременногоХранилищаФайла = "";
		ИмяФайла = "";
		Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, УникальныйИдентификатор) Тогда
			Возврат;
		КонецЕсли;

		СтрокиПути = ФайловыеФункцииСлужебныйКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
		Если СтрокиПути.Количество() >= 2 Тогда
			Расширение = СтрокиПути[СтрокиПути.Количество()-1];
			ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
		Иначе
			ВызватьИсключение
			  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"),ИмяФайла);
		КонецЕсли;
		
		ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		ПараметрыСоздания.Расширение = Расширение;
		ПараметрыСоздания.ВремяИзменения = ВремяИзменения;
		ПараметрыСоздания.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		ПараметрыСоздания.Имя = ИмяБезРасширения;
		ПараметрыСоздания.Размер = Размер;
		ПараметрыСоздания.Текст = "";
		ПараметрыСоздания.ВебКлиент = Истина;
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"".
			|Пожалуйста, подождите...'"),
			ИмяФайла);
		
		Состояние(ТекстПояснения);
		
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания);
		Состояние();
		
	КонецЕсли;
	
	
	Если ИдентификаторСозданногоФайла <> Неопределено Тогда
		// обновить список
		ОбновитьСписокФайловКлиент(ИдентификаторСозданногоФайла);
			
		// открыть карточку файла	
		ПараметрыФормы = Новый Структура("УникальныйИдентификатор", ИдентификаторСозданногоФайла);
		ОткрытьФорму("ОбщаяФорма.ДокументооборотКарточкаФайла", ПараметрыФормы);
		
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Функция СоздатьИзФайлаНаДискеКлиент(ПолноеИмяФайла)
	
	ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");
	ИдентификаторСозданногоФайла = Неопределено;
	
	НастройкиДокументооборот = РаботаС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	НужноИзвлечьТекст = НастройкиДокументооборот.НужноИзвлечьТекст;
		
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.ИмяБезРасширения + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	МаксРазмерФайла = РаботаС1СДокументооборотКлиентПовтИсп.ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
				 Файл.Имя, 
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),           
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда		
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Расширение = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(Файл.Расширение);
	ПараметрыСоздания.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ПараметрыСоздания.ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ПараметрыСоздания.Имя = Файл.ИмяБезРасширения;
	ПараметрыСоздания.Размер = Файл.Размер();
	ПараметрыСоздания.ВебКлиент = Ложь;
	
	Текст = "";
	Если НужноИзвлечьТекст Тогда
		Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(Файл.ПолноеИмя);
	КонецЕсли;	
	ПараметрыСоздания.Текст = Текст;
	
	ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания);
	
	Состояние();
	
	Возврат ИдентификаторСозданногоФайла;
	
КонецФункции

&НаСервере
// Возвращает ИдентификаторКорневойПапкиФайлов1СДокументооборот
Функция ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот() 
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторКорневойПапкиФайлов1СДокументооборот = Константы.ИдентификаторКорневойПапкиФайлов1СДокументооборот.Получить();
	Возврат ИдентификаторКорневойПапкиФайлов1СДокументооборот;
КонецФункции

&НаСервере
// создает в файл в 1С:Документооборот.  возвращает UUID созданного файла
Функция СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания)
	
	Прокси = РаботаС1СДокументооборотВызовСервера.ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMAddLinkedFileRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	Запрос.rootFolderID = ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот();
	
	ФайлТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMFile");
	Запрос.file = Прокси.ФабрикаXDTO.Создать(ФайлТип);
	
	ОбъектТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "ExternalObject");
	Запрос.file.externalObject = Прокси.ФабрикаXDTO.Создать(ОбъектТип);
	Запрос.file.externalObject.name = Строка(ОбъектСсылка);
	Запрос.file.externalObject.id = Строка(ОбъектСсылка.УникальныйИдентификатор());
	Запрос.file.externalObject.type = Строка(ТипЗнч(ОбъектСсылка));
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	Запрос.file.objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	
	Запрос.file.objectId.id = ""; // пусто - пока не создан
	Запрос.file.objectId.type = "DMFile";
	
	Запрос.file.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Запрос.file.extension = ПараметрыСоздания.Расширение;
	Запрос.file.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Запрос.file.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Запрос.file.name = ПараметрыСоздания.Имя;
	Запрос.file.size = ПараметрыСоздания.Размер;
	
	Размер = Запрос.File.BinaryData.Размер();
	МаксРазмерФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМб = Размер / (1024 * 1024);
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Размер > МаксРазмерФайла Тогда
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
			ПараметрыСоздания.Имя, 
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),                
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Запрос.file.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	РаботаС1СДокументооборотВызовСервера.ПроверитьВозвратВебСервиса(Прокси, Ответ);	
	
	Возврат Ответ.file.objectId.id;

КонецФункции

&НаКлиенте
Процедура ВыбратьСуществующийФайлВ1СДокументооборот()
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборФайла");
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		ДобавитьСсылкуНаСуществующийФайл(Результат);
		
		// обновить список
		ОбновитьСписокФайловКлиент(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
// создает в файл в 1С:Документооборот.  возвращает UUID созданного файла
Функция ДобавитьСсылкуНаСуществующийФайл(ИдентификаторФайлаВДокументооборот)
	
	Прокси = РаботаС1СДокументооборотВызовСервера.ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMAddObjectLinkRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "ExternalObject");
	Запрос.ownerObject = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	Запрос.ownerObject.id = Строка(ОбъектСсылка.УникальныйИдентификатор());
	Запрос.ownerObject.type = Строка(ТипЗнч(ОбъектСсылка));
	Запрос.ownerObject.name = "";
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	Запрос.linkedObject = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	Запрос.linkedObject.id = ИдентификаторФайлаВДокументооборот;
	Запрос.linkedObject.type = "DMFile";
	
	Ответ = Прокси.execute(Запрос);
	РаботаС1СДокументооборотВызовСервера.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецФункции

&НаКлиенте
Процедура СписокФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	ИдентификаторСозданногоФайла = Неопределено;
	Для Каждого ИмяФайла Из МассивИменФайлов Цикл
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеКлиент(ИмяФайла);
	КонецЦикла;
	
	// обновить список
	ОбновитьСписокФайловКлиент();
			
	Если МассивИменФайлов.Количество() = 1 И ИдентификаторСозданногоФайла <> Неопределено Тогда
		// открыть карточку файла	
		ПараметрыФормы = Новый Структура("УникальныйИдентификатор", ИдентификаторСозданногоФайла);
		ОткрытьФорму("ОбщаяФорма.ДокументооборотКарточкаФайла", ПараметрыФормы);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор;
	Расширение = Элементы.СписокФайлов.ТекущиеДанные.Расширение;
	Имя = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Размер = Элементы.СписокФайлов.ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = Элементы.СписокФайлов.ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	РаботаС1СДокументооборотКлиент.СохранитьКак(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьКарточкуВыполнить();
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдаление(Знач ВыделенныеСтроки)
	
	Прокси = РаботаС1СДокументооборотВызовСервера.ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMDeleteRequest");
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		
		Данные = СписокФайлов.НайтиПоИдентификатору(НомерСтроки);
		
		Объект = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
		Объект.id = Данные.УникальныйИдентификатор;
		Объект.type = "DMFile";
		
		Запрос.objectIds.Добавить(Объект);
		
	КонецЦикла;
	
	Ответ = Прокси.execute(Запрос);
	РаботаС1СДокументооборотВызовСервера.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаВопроса = "";
	
	Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() = 1 Тогда
		СтрокаВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Пометить ""%1"" на удаление?'"), Элементы.СписокФайлов.ТекущиеДанные.Наименование);
	Иначе			
		СтрокаВопроса = НСтр("ru='Пометить выделенные элементы на удаление?'");
	КонецЕсли;		
	
	Ответ = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;			
	
	ПометитьНаУдаление(Элементы.СписокФайлов.ВыделенныеСтроки);
	// обновить список
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор;
	Если РаботаС1СДокументооборотКлиент.ОбновитьИзФайлаНаДиске(ИдентификаторФайла, УникальныйИдентификатор) Тогда
		ОбновитьСписокФайловКлиент();
	КонецЕсли;		
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		ОбновитьСписокФайловКлиент();
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура Подписать(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор;
	ИмяФайла = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Описание = Элементы.СписокФайлов.ТекущиеДанные.Описание;
	Редактируется = Элементы.СписокФайлов.ТекущиеДанные.Редактируется;
	Зашифрован = Элементы.СписокФайлов.ТекущиеДанные.Зашифрован;
	
	МассивСуществующихПодписейФайла = РаботаС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, Элементы.СписокФайлов.ТекущиеДанные.ТаблицаПодписей);
	
	РаботаС1СДокументооборотКлиент.ПодписатьФайл(ИдентификаторФайла, ИмяФайла, Редактируется, Зашифрован,
		Описание, МассивСуществующихПодписейФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор;
	ИмяФайла = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Описание = Элементы.СписокФайлов.ТекущиеДанные.Описание;
	
	МассивСуществующихПодписейФайла = РаботаС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, Элементы.СписокФайлов.ТекущиеДанные.ТаблицаПодписей);
	
	РаботаС1СДокументооборотКлиент.ДобавитьЭЦПИзФайла(ИдентификаторФайла, ИмяФайла, УникальныйИдентификатор,
		Описание, МассивСуществующихПодписейФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.УникальныйИдентификатор;
	Расширение = Элементы.СписокФайлов.ТекущиеДанные.Расширение;
	Имя = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Размер = Элементы.СписокФайлов.ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = Элементы.СписокФайлов.ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	РаботаС1СДокументооборотКлиент.СохранитьВместеСЭЦП(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьСписокФайловКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПриАктивизацииСтроки(Элемент)
	ОбновитьДоступностьКомандСпискаФайлов();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов()
	УстановитьДоступностьКомманд(Элементы.СписокФайлов.ТекущиеДанные);
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКомманды(Команда, Доступность)
	Команда.Доступность = Доступность;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьКак, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюПодписать, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюДобавитьЭЦПИзФайла, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭЦП, Ложь);
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловОткрытьФайл, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьКак, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловПодписать, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловДобавитьЭЦПИзФайла, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьВместеСЭЦП, Ложь);
		
	Иначе	
		
		Редактируется = ТекущиеДанные.Редактируется;
		ПодписанЭЦП 	= ТекущиеДанные.ПодписанЭЦП;
		Зашифрован 	= ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьКак, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюПодписать, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюДобавитьЭЦПИзФайла, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭЦП, ПодписанЭЦП);
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловОткрытьФайл, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьКак, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловПодписать, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловДобавитьЭЦПИзФайла, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьВместеСЭЦП, ПодписанЭЦП);
		
	КонецЕсли;
	
КонецПроцедуры
