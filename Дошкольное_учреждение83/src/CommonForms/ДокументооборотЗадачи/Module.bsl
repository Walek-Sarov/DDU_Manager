
///////////////////////////////////////
//// Обработка событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Заголовок = НСтр("ru = 'Задачи по """ + Параметры.НаименованиеПредметаЗадач + """'");
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	СсылкаНаВнешнийОбъект = Параметры.СсылкаНаВнешнийОбъект;
	
	//условное оформление
	УстановитьУсловноеОформлениеДерева();		
	
КонецПроцедуры

///////////////////////////////////////
//// Обработка команд формы 

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ОткрытьКарточкуВыполнить();	
	
КонецПроцедуры

///////////////////////////////////////
//// Служебные процедуры и функции

// Удаление элемента оформления просроченных невыполненных задач для старой даты и установка нового элемента для текущей даты.
&НаСервере
Процедура УстановитьУсловноеОформлениеДерева()
	
	Если ЭтаФорма.УсловноеОформление.Элементы.Количество() = 3 Тогда
		ЭлементДляУдаления = ЭтаФорма.УсловноеОформление.Элементы[2];
		ЭтаФорма.УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
	КонецЕсли;
	
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.Выполнено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;	
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадачНаименование");
	
	НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадачСрокИсполнения");
		
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, СтрокиОтвета)
		
	Для Каждого ОднаСтрокаОтвета Из СтрокиОтвета Цикл
		Важность = 1;
		Если ОднаСтрокаОтвета.importance.objectId.id = "Низкая" Тогда
			Важность = 0;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectId.id = "Обычная" Тогда
			Важность = 1;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectId.id = "Высокая" Тогда 
			Важность = 2;
		КонецЕсли;
		Если Найти(ОднаСтрокаОтвета.objectId.type, "BusinessProcess") > 0
			И Найти(ОднаСтрокаОтвета.objectId.type, "Task") = 0 Тогда
			НоваяСтрока = СтрокиДереваЗадач.Добавить();	
			НоваяСтрока.Важность = Важность;
			НоваяСтрока.Выполнено = ЗначениеЗаполнено(ОднаСтрокаОтвета.endDate);
			НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
			НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
			НоваяСтрока.Автор = ОднаСтрокаОтвета.author.name;
			НоваяСтрока.Тип = 0;
			НоваяСтрока.DMТип = ОднаСтрокаОтвета.objectId.type;
			НоваяСтрока.DMИд = ОднаСтрокаОтвета.objectId.id;
			ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.tasks);
		ИначеЕсли Найти(ОднаСтрокаОтвета.objectId.type, "Task") > 0 Тогда
			НоваяСтрока = СтрокиДереваЗадач.Добавить();	
			НоваяСтрока.Важность = Важность;
			НоваяСтрока.Выполнено = ОднаСтрокаОтвета.executed;
			НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
			НоваяСтрока.СрокИсполнения = ОднаСтрокаОтвета.dueDate;
			НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
			Если ОднаСтрокаОтвета.performer.Установлено("user") Тогда
				НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.user.name;
			ИначеЕсли ОднаСтрокаОтвета.performer.Установлено("role") Тогда
				НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.role.name;
				Если ОднаСтрокаОтвета.performer.Установлено("mainAddressingObject") Тогда
					НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", " + ОднаСтрокаОтвета.performer.mainAddressingObject.name;			
				КонецЕсли;
				Если ОднаСтрокаОтвета.Performer.Установлено("secondaryAddressingObject") Тогда
					НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", " + ОднаСтрокаОтвета.performer.secondaryAddressingObject.name;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Тип = 1;
			НоваяСтрока.DMТип = ОднаСтрокаОтвета.objectId.type;
			НоваяСтрока.DMИд = ОднаСтрокаОтвета.objectId.id;
			ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.businessProcesses);			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКарточкуВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуВыполнить()
	
	Если Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("id, type", Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMИд, Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип);
	
	ФормаИмя = "";
	Если Найти(Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип, "Task") > 0 Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотКарточкаЗадачи";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessPerformance" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессИсполнение";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessAcquaintance" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессОзнакомление";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessOrder" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессПоручение";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessConsideration" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессРассмотрение";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessRegistration" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессРегистрация";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessApproval" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессСогласование";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessConfirmation" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессУтверждение";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессОбработкаВнутреннегоДокумента";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессОбработкаВходящегоДокумента";
		
	ИначеЕсли Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		ФормаИмя = "ОбщаяФорма.ДокументооборотБизнесПроцессОбработкаИсходящегоДокумента";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФормаИмя) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуМодально(ФормаИмя, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотБизнесПроцесс" Тогда
		РаскрытыеЭлементы = Новый СписокЗначений;
		ПолучитьМассивРаскрытыхЭлементов(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), РаскрытыеЭлементы);
		РаскрытыеЭлементы.Добавить(Параметр.ID);
		ЗагрузитьДеревоБизнесПроцессовИЗадач();	
		УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, РаскрытыеЭлементы);
		УстановитьТекущийЭлементВДереве(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, Параметр.ID);
						
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДеревоБизнесПроцессовИЗадач()
	
	Прокси = РаботаС1СДокументооборотВызовСервера.ПолучитьПрокси();	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMGetTasksTreeRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	QueryТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMGetTasksTreeQuery");
	Запрос.query = Прокси.ФабрикаXDTO.Создать(QueryТип);
	
	TargetТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "ExternalObject");
	Для Каждого ВнешнийID Из Параметры.IDПредметаЗадач Цикл
		Target = Прокси.ФабрикаXDTO.Создать(TargetТип);
		Target.id = ВнешнийID;
		Target.type = "";
		Target.name = "";
		Запрос.query.externalTarget.Добавить(Target);
	КонецЦикла;
	
	Ответ = Прокси.execute(Запрос);
	РаботаС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ДеревоЗадач = РеквизитФормыВЗначение("ДеревоБизнесПроцессовИЗадач", Тип("ДеревоЗначений"));
	ДеревоЗадач.Строки.Очистить();
	ПостроитьДеревоЗадачИзОтветаВебСервиса(ДеревоЗадач.Строки, Ответ.businessProcesses);
	ЗначениеВРеквизитФормы(ДеревоЗадач, "ДеревоБизнесПроцессовИЗадач");
    УстановитьУсловноеОформлениеДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБизнесПроцесс(Команда)
	РаботаС1СДокументооборотКлиент.СоздатьБизнесПроцесс(СсылкаНаВнешнийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	РаскрытыеЭлементы = Новый СписокЗначений;
	ПолучитьМассивРаскрытыхЭлементов(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), РаскрытыеЭлементы);
	ЗагрузитьДеревоБизнесПроцессовИЗадач();	
	УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, РаскрытыеЭлементы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМассивРаскрытыхЭлементов(ДеревоЭлемент, МассивСтрокОдногоУровня, СписокРаскрытыхЭлементов)
	
	Для Каждого СтрокаОдногоУровня Из МассивСтрокОдногоУровня Цикл
		ИдЭлемента = СтрокаОдногоУровня.ПолучитьИдентификатор();
		Если ДеревоЭлемент.Развернут(ИдЭлемента) <> Неопределено 
			И ДеревоЭлемент.Развернут(ИдЭлемента) Тогда
			СписокРаскрытыхЭлементов.Добавить(СтрокаОдногоУровня.DMИд);
		КонецЕсли;
		ПолучитьМассивРаскрытыхЭлементов(ДеревоЭлемент, СтрокаОдногоУровня.ПолучитьЭлементы(), СписокРаскрытыхЭлементов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазвернутостьЭлементовДерева(ДеревоЭлемент, ДеревоРеквизит, СписокЭлементовДляРазвертывания)
	
	Если СписокЭлементовДляРазвертывания <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СписокЭлементовДляРазвертывания Цикл
			Индекс = -1;
			НайтиЭлементВДереве(ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), ЭлементСписка.Значение, Индекс);
			Если Индекс > -1 Тогда
				Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Количество() > 0 Тогда
					ДеревоЭлемент.Развернуть(ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьИдентификатор(), Ложь);
				Иначе
					Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя() <> Неопределено Тогда
						ДеревоЭлемент.Развернуть(ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЭлементВДереве(КоллекцияЭлементовОдногоУровня, ИскомыйЭлемент, Индекс) 
	
	Если КоллекцияЭлементовОдногоУровня.Количество() > 0 Тогда
		Для Каждого ЭлементДерева Из КоллекцияЭлементовОдногоУровня Цикл
			Если ЭлементДерева.DMИд = ИскомыйЭлемент Тогда
				Индекс = ЭлементДерева.ПолучитьИдентификатор();
			Иначе
				НайтиЭлементВДереве(ЭлементДерева.ПолучитьЭлементы(), ИскомыйЭлемент, Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементВДереве(ДеревоЭлемент, ДеревоРеквизит, ТекущийЭлемент) 
	
	Если ТекущийЭлемент <> Неопределено Тогда
		Индекс = -1;
		НайтиЭлементВДереве(ДеревоРеквизит.ПолучитьЭлементы(), ТекущийЭлемент, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьКарточкуВыполнить();
КонецПроцедуры
