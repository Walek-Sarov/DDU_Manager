
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьКарточкуФайла(Параметры.УникальныйИдентификатор, ЭтаФорма);
	
	КаталогДляСохраненияДанных = РаботаС1СДокументооборотВызовСервера.ПолучитьЛокальныйКаталогФайлов();
	ЗаполнитьПоля(ОписаниеФайла);
	
	ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот 
		= РаботаС1СДокументооборотПовтИсп.ПолучитьНастройки().ИспользоватьЭлектронныеЦифровыеПодписи;
		
	ИспользоватьЭлектронныеЦифровыеПодписиВБСП = РаботаС1СДокументооборотВызовСервера.ПолучитьИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь Тогда
		Элементы.ГруппаЭЦП.Видимость = Ложь;
		
		Элементы.ФормаСохранитьВместеСЭЦП.Видимость = Ложь;
	КонецЕсли;	
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь ИЛИ ИспользоватьЭлектронныеЦифровыеПодписиВБСП = Ложь Тогда
		
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаДобавитьЭЦПИзФайла.Видимость = Ложь;
		
		Элементы.ТаблицаПодписейПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейПроверитьВсе.Видимость = Ложь;
		
	КонецЕсли;	
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ТаблицаПодписей").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
	Заголовок = Наименование + НСтр("ru = ' (Файл)'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоля(Параметры)
	
	Размер = Параметры.Размер;
	Наименование = Параметры.Наименование;
	Описание = Параметры.Описание;
	Расширение = Параметры.Расширение;
	ДатаСоздания = Параметры.ДатаСоздания;
	ДатаМодификацииУниверсальная = Параметры.ДатаМодификацииУниверсальная;
	Автор = Параметры.Автор;
	ИдентификаторФайла = Параметры.УникальныйИдентификатор;
	Зашифрован = Параметры.Зашифрован;
	Редактируется = Параметры.Редактируется;
	
	ТаблицаПодписей.Очистить();
	
	Подписи = Параметры.Подписи;
	
	НомерСтроки = 0;
	Для Каждого Подпись Из Параметры.Подписи Цикл
		
		НоваяСтрока = ТаблицаПодписей.Добавить();
		
		НоваяСтрока.КомуВыданСертификат = Подпись.КомуВыданСертификат;
		НоваяСтрока.ДатаПодписи = Подпись.ДатаПодписи;
		НоваяСтрока.Комментарий = Подпись.Комментарий;
		НоваяСтрока.Отпечаток 	= Подпись.Отпечаток;
		НоваяСтрока.УстановившийПодпись = Подпись.УстановившийПодпись;
		НоваяСтрока.Неверна 	= Ложь;
		НоваяСтрока.ИндексКартинки = -1;
		НоваяСтрока.Объект = "_"; // любая непустая строка
		
		ДвоичныеДанные = Подпись.Подпись;
		Если ДвоичныеДанные <> Неопределено Тогда 
			НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;
		
		ДвоичныеДанныеСертификата = Подпись.Сертификат;
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
			НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
		КонецЕсли;
		
		НоваяСтрока.ИмяФайлаПодписи = Подпись.ИмяФайлаПодписи;
		НоваяСтрока.УстановившийПодпись = Подпись.УстановившийПодпись;
		НоваяСтрока.УстановившийПодписьИд = Подпись.УстановившийПодписьИд;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;	
	
	ТекстЗаголовка = НСтр("ru = 'ЭЦП'");
	Если ТаблицаПодписей.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ТаблицаПодписей.Количество()) + ")";
	КонецЕсли;	
	Элементы.ГруппаЭЦП.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВыбранныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыбранныйФайл()
	
	РаботаС1СДокументооборотКлиент.ОткрытьФайл(ИдентификаторФайла, Расширение, Наименование, 
		Размер, ДатаМодификацииУниверсальная, КаталогДляСохраненияДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьВыполнитьКлиент();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	РаботаС1СДокументооборотКлиент.СохранитьКак(ИдентификаторФайла, Расширение, Наименование, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если РаботаС1СДокументооборотКлиент.ОбновитьИзФайлаНаДиске(ИдентификаторФайла, УникальныйИдентификатор) Тогда
		ПолучитьКарточкуИЗаполнитьПоля();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКарточкуИЗаполнитьПоля()
	
	ОписаниеФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьКарточкуФайла(ИдентификаторФайла);
	ЗаполнитьПоля(ОписаниеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		Если Источник = Параметр Тогда
			ПолучитьКарточкуИЗаполнитьПоля();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	МассивСуществующихПодписейФайла = РаботаС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей);
	
	РаботаС1СДокументооборотКлиент.ПодписатьФайл(ИдентификаторФайла, Наименование, Редактируется, Зашифрован,
		Описание, МассивСуществующихПодписейФайла);
		
	УстановитьДоступностьКомандСпискаЭЦП();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда)
	
	МассивСуществующихПодписейФайла = РаботаС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей);
	
	РаботаС1СДокументооборотКлиент.ДобавитьЭЦПИзФайла(ИдентификаторФайла, Наименование, УникальныйИдентификатор,
		Описание, МассивСуществующихПодписейФайла);
		
	УстановитьДоступностьКомандСпискаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда)
	
	РаботаС1СДокументооборотКлиент.СохранитьВместеСЭЦП(ИдентификаторФайла, Расширение, Наименование, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, АдресФайла)
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	Попытка
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ВыполнятьПроверкуЭЦПНаСервере = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере;
	
	Если ВыполнятьПроверкуЭЦПНаСервере И НЕ Зашифрован Тогда
		ДанныеВыделенныхСтрок = Новый Массив;
		ИменаКолонок = "";
		Для Каждого ИмяКолонки Из ОписаниеКолонокТаблицыПодписей Цикл
			ИменаКолонок = ИменаКолонок + ИмяКолонки + ",";
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок)-1);
		
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			ДанныеСтроки = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТаблицаПодписей.НайтиПоИдентификатору(Элемент));
			ДанныеВыделенныхСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ПроверитьНаСервере(ДанныеВыделенныхСтрок);
		
		Индекс = 0;
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			Строка = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
			Строка.Статус = ДанныеВыделенныхСтрок[Индекс].Статус;
			Строка.Неверна = ДанныеВыделенныхСтрок[Индекс].Неверна;
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
	
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		
		АдресФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьАдресФайла(ИдентификаторФайла, УникальныйИдентификатор);
		
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ТаблицаПодписей.ДанныеСтроки(Элемент);
			
			Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
				ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, АдресФайла);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ВыполнятьПроверкуЭЦПНаСервере = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере;
	
	Если ВыполнятьПроверкуЭЦПНаСервере И НЕ Зашифрован Тогда
		ДанныеСтрок = Новый Массив;
		ИменаКолонок = "";
		Для Каждого ИмяКолонки Из ОписаниеКолонокТаблицыПодписей Цикл
			ИменаКолонок = ИменаКолонок + ИмяКолонки + ",";
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок)-1);
		
		Для Каждого СтрокаТЗ Из ТаблицаПодписей Цикл
			ДанныеСтроки = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЗ);
			ДанныеСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ПроверитьВсеНаСервере(ДанныеСтрок);
		
		Индекс = 0;
		Для Каждого СтрокаТЗ Из ТаблицаПодписей Цикл
			СтрокаТЗ.Статус = ДанныеСтрок[Индекс].Статус;
			СтрокаТЗ.Неверна = ДанныеСтрок[Индекс].Неверна;
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		
		АдресФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьАдресФайла(ИдентификаторФайла, УникальныйИдентификатор);
		
		Для Каждого Строка Из ТаблицаПодписей Цикл
			Если НЕ ПустаяСтрока(Строка.Объект) Тогда
				ПроверитьОднуПодпись(Строка, МенеджерКриптографии, АдресФайла);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Проверяет все подписи (на сервере) из массива ДанныеВыделенныхСтрок
Процедура ПроверитьНаСервере(ДанныеВыделенныхСтрок)
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодписьПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	АдресФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьАдресФайла(ИдентификаторФайла, УникальныйИдентификатор);
	
	Для Каждого ДанныеСтроки Из ДанныеВыделенныхСтрок Цикл
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, АдресФайла);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Проверяет все подписи (на сервере) из ТаблицаПодписей
Процедура ПроверитьВсеНаСервере(ТаблицаПодписей) 
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодписьПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	АдресФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьАдресФайла(ИдентификаторФайла, УникальныйИдентификатор);
	
	Для Каждого Строка Из ТаблицаПодписей Цикл
		Если НЕ ПустаяСтрока(Строка.Объект) Тогда
			ПроверитьОднуПодписьНаСервере(Строка, МенеджерКриптографии, АдресФайла);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Проверяет одну подпись( на сервере)
Процедура ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, АдресФайла)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
	
	Попытка
		ЭлектроннаяЦифроваяПодпись.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
КонецПроцедуры


&НаКлиенте
Процедура Сохранить(Команда)
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Элементы.ТаблицаПодписей.ТекущиеДанные.Объект) Тогда	
		ЭлектроннаяЦифроваяПодписьКлиент.СохранитьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Удалить(Команда)
	
	Ответ = Вопрос(НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСуществующихПодписейФайла = РаботаС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей);
	
	УдалитьПодписиИОбновитьСписок(МассивСуществующихПодписейФайла);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, "");// Идентификатор не важен - только для обновления списка
	
	УстановитьДоступностьКомандСпискаЭЦП();
	
КонецПроцедуры


&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(МассивСуществующихПодписейФайла)
	
	ТаблицаВыделенныеСтроки = Новый ТаблицаЗначений;
	ТаблицаВыделенныеСтроки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ОбъектСсылка", Новый ОписаниеТипов("Строка"));
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ОбъектТип", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			НоваяСтрока = ТаблицаВыделенныеСтроки.Добавить();
			НоваяСтрока.ОбъектСсылка = ИдентификаторФайла;
			НоваяСтрока.ОбъектТип = "DMFile";
			НоваяСтрока.НомерСтроки = ДанныеСтроки.НомерСтроки;
			
		КонецЕсли;	
	КонецЦикла;
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	// формируем массив данных подписи
	Для Каждого ДанныеСтроки Из МассивСуществующихПодписейФайла Цикл
		
		// по GUID объекта + номер строки - удаляем из массива всех те, что надо удалить
		ПодписьУдалена = Ложь;
		Для Каждого СтрокаУдаленнойПодписи Из ТаблицаВыделенныеСтроки Цикл
			Если СтрокаУдаленнойПодписи.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
				ПодписьУдалена = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если НЕ ПодписьУдалена Тогда 
			МассивДанныхПодписей.Добавить(ДанныеСтроки);
		КонецЕсли;
			
	КонецЦикла;	
	
	ЗаписатьВыполнить(МассивДанныхПодписей); // запишем карточку файла с измененным списком подписей
	
	ПолучитьКарточкуИЗаполнитьПоля();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭЦП()
	
	ЕстьПодписи = (ТаблицаПодписей.Количество() <> 0);
	
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи;
	
	Элементы.ФормаСохранитьВместеСЭЦП.Доступность = ЕстьПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьКомандСпискаЭЦП();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьВыполнитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнитьКлиент()
	
	МассивСуществующихПодписейФайла = РаботаС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей);
	
	ЗаписатьВыполнить(МассивСуществующихПодписейФайла);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, "");// Идентификатор не важен - только для обновления списка
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВыполнить(МассивСуществующихПодписейФайла)
	
	Прокси = РаботаС1СДокументооборотВызовСервера.ПолучитьПрокси();
	
	ОбъектТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMFile");
	Объект = Прокси.ФабрикаXDTO.Создать(ОбъектТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	Объект.objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	
	Объект.objectId.id = ИдентификаторФайла;
	Объект.objectId.type = "DMFile";
	
	// только 2 поля - Имя и Описание передаем при записи
	Объект.name = Наименование;
	Объект.description = Описание;
	
	// тут ЭЦП добавить
	ПодписьТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMSignature");
	
	Для Каждого ДанныеПодписи Из МассивСуществующихПодписейФайла Цикл
		
		ПодписьXDTO = Прокси.ФабрикаXDTO.Создать(ПодписьТип);
		РаботаС1СДокументооборотВызовСервера.ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;	
	
	//дополнительные реквизиты
	РаботаС1СДокументооборот.СформироватьДополнительныеСвойства(Прокси, ЭтаФорма, Объект);
	
	Ответ = РаботаС1СДокументооборот.ЗаписатьОбъект(Прокси, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаС1СДокументооборотКлиент.ВыбратьЗначениеДополнительногоРеквизита(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ЗаписатьВыполнитьКлиент();
			
			ПараметрыОповещения = Новый Структура;
			Оповестить("Запись_ДокументооборотДокумент", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытиеСПараметром Тогда 
		Возврат;
	КонецЕсли;	
	
	ЗакрытиеСПараметром = Истина;
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры
