
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УзелИнформационнойБазы = Параметры.УзелИнформационнойБазы;
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Не заданы параметры формы. Форма не может быть открыта.'"), Отказ);
		Возврат;
	КонецЕсли;
	
	// выполняем проверку на то, что в подчиненном узле РИБ настройка обмена была выполнена полностью
	НастройкаПодчиненногоУзлаРИБЗавершена = Истина;
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		
		ИмяПланаОбменаРИБ = ПланыОбмена.ГлавныйУзел().Метаданные().Имя;
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
		
		Если ИмяПланаОбмена = ИмяПланаОбменаРИБ
			И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда
			
			НастройкаПодчиненногоУзлаРИБЗавершена = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// устанавливаем заголовок формы
	Заголовок = НСтр("ru = 'Обмен с ""%1""'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, Строка(УзелИнформационнойБазы));
	
	//
	
	ВидТранспортаСообщений = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
	
	Если ВидТранспортаСообщений = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		
		НастройкиТранспортаWS = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаWS(УзелИнформационнойБазы);
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиТранспортаWS);
		
	КонецЕсли;
	
	Если ВидТранспортаСообщений = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		
		СценарийОбменаЧерезВебСервис();
		
	Иначе
		
		СценарийОбменаОбычный();
		
	КонецЕсли;
	
	ВыполняетсяОбменДанными = Истина;
	ЕстьОшибки = Ложь;
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = Пользователи.РолиДоступны("ДобавлениеИзменениеОбменовДанными");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ВыполняетсяОбменДанными Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерейтиВЖурналРегистрации(Команда)
	
	ОткрытьФормуМодально("Обработка.ЖурналРегистрации.Форма", ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы), ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОСТАВЛЯЕМАЯ ЧАСТЬ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыполнитьПереходДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ВыполнениеОбменаДанными.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию - Ложь.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(
									ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = ""
	)
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМАЯ ЧАСТЬ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	СообщениеОбОшибке = "";
	
	СостояниеОперации = ОбменДаннымиСервер.СостояниеДлительнойОперации(ИдентификаторДлительнойОперации,
																		WSURLВебСервиса,
																		WSИмяПользователя,
																		WSПароль,
																		СообщениеОбОшибке
	);
	
	Если СостояниеОперации = "Active" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	Иначе
		
		Если СостояниеОперации <> "Completed" Тогда
			
			ДлительнаяОперацияЗавершенаСОшибкой = Истина;
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		ВыполнитьПереходДалее();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы)
	
	ОтбираемыеСобытия = Новый Массив;
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных));
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	СостоянияОбменовДаннымиЗагрузка = РегистрыСведений.СостоянияОбменовДанными.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СостоянияОбменовДаннымиВыгрузка = РегистрыСведений.СостоянияОбменовДанными.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	Результат = Новый Структура;
	Результат.Вставить("СобытиеЖурналаРегистрации", ОтбираемыеСобытия);
	Результат.Вставить("ДатаНачала",    Мин(СостоянияОбменовДаннымиЗагрузка.ДатаНачала, СостоянияОбменовДаннымиВыгрузка.ДатаНачала));
	Результат.Вставить("ДатаОкончания", Макс(СостоянияОбменовДаннымиЗагрузка.ДатаОкончания, СостоянияОбменовДаннымиВыгрузка.ДатаОкончания));
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОБРАБОТЧИКОВ СОБЫТИЙ ПЕРЕХОДОВ

// Обмен через обычные каналы связи

&НаКлиенте
Функция Подключаемый_ОбычнаяЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ОбычнаяЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщений);
	
	ЕстьОшибки = ЕстьОшибки ИЛИ Отказ;
	
	Отказ = Ложь; // чтобы не выполнять перехода назад
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбычнаяЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщений)
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
											Отказ,
											УзелИнформационнойБазы,
											Истина,
											Ложь,
											ВидТранспортаСообщений
	);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ОбычнаяВыгрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ОбычнаяВыгрузкаДанных_ОбработкаДлительнойОперации(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщений);
	
	ЕстьОшибки = ЕстьОшибки ИЛИ Отказ;
	
	Отказ = Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбычнаяВыгрузкаДанных_ОбработкаДлительнойОперации(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщений)
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
											Отказ,
											УзелИнформационнойБазы,
											Ложь,
											Истина,
											ВидТранспортаСообщений
	);
	
КонецПроцедуры

// Обмен через Веб-сервис

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	ЗагрузкаДанных_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации
	);
	
	ЕстьОшибки = ЕстьОшибки ИЛИ Отказ;
	
	Отказ = Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузкаДанных_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации
	)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
											Отказ,
											УзелИнформационнойБазы,
											Истина,
											Ложь,
											Перечисления.ВидыТранспортаСообщенийОбмена.WS,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											Истина
	);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ОбменДаннымиСервер.ЗафиксироватьЗавершениеОбменаСОшибкой(
											УзелИнформационнойБазы,
											"ЗагрузкаДанных",
											ДатаНачалаОперации,
											СообщениеОбОшибке
			);
			
		Иначе
			
			ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЗавершениеДлительнойОперации(
											Ложь,
											УзелИнформационнойБазы,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	ВыгрузкаДанных_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации
	);
	
	ЕстьОшибки = ЕстьОшибки ИЛИ Отказ;
	
	Отказ = Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыгрузкаДанных_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации
	)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
											Отказ,
											УзелИнформационнойБазы,
											Ложь,
											Истина,
											Перечисления.ВидыТранспортаСообщенийОбмена.WS,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											Истина
	);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
			
			ОбменДаннымиСервер.ЗафиксироватьЗавершениеОбменаСОшибкой(
											УзелИнформационнойБазы,
											"ВыгрузкаДанных",
											ДатаНачалаОперации,
											СообщениеОбОшибке
			);
			
		Иначе
			
			ОбменДаннымиСервер.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(
											УзелИнформационнойБазы,
											ДатаНачалаОперации
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_ЗавершениеОбмена_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	СтраницаОбменЗавершенСОшибкой = ?(РольДоступнаДобавлениеИзменениеОбменовДанными,
				Элементы.ОбменЗавершенСОшибкойДляАдминистратора,
				Элементы.ОбменЗавершенСОшибкой
	);
	
	Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = ?(ЕстьОшибки,
										СтраницаОбменЗавершенСОшибкой,
										Элементы.ОбменЗавершенУспешно
	);
	
	// Обновляем все открытые динамические списки
	ОбменДаннымиКлиент.ОбновитьВсеОткрытыеДинамическиеСписки();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗавершениеОбмена_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	ВыполняетсяОбменДанными = Ложь;
	
	Оповестить("ВыполненОбменДанными");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ИНИЦИАЛИЗАЦИИ ПЕРЕХОДОВ

&НаСервере
Процедура СценарийОбменаОбычный()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ЗагрузкаДанных",,,,,, Истина, "ОбычнаяЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(2, "ВыгрузкаДанных",,,,,, Истина, "ОбычнаяВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ЗавершениеОбмена",,, "ЗавершениеОбмена_ПриОткрытии",,, Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ЗагрузкаДанных",,,,,, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(2, "ЗагрузкаДанных",,,,,, Истина, "ЗагрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ЗагрузкаДанных",,,,,, Истина, "ЗагрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ВыгрузкаДанных",,,,,, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "ВыгрузкаДанных",,,,,, Истина, "ВыгрузкаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "ВыгрузкаДанных",,,,,, Истина, "ВыгрузкаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "ЗавершениеОбмена",,, "ЗавершениеОбмена_ПриОткрытии",,, Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры
