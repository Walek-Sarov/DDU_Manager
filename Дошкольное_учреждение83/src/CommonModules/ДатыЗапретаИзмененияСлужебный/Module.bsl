////////////////////////////////////////////////////////////////////////////////
// Подсистема "Даты запрета изменения".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.12";
	Обработчик.Процедура = "ДатыЗапретаИзмененияСлужебный.ЗаменитьНеопределеноНаЗначениеПеречисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.2";
	Обработчик.Процедура = "ДатыЗапретаИзмененияСлужебный.УдалитьПустыеДатыЗапретаПоУмолчанию";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет пересчет и обновление текущий значений относительных
// дат запрета по состоянию на текущую дату сеанса.
//
// Параметры:
//  ЗаписатьОписаниеРезультатаВЖурналРегистрации - Булево.
//  ОписаниеРезультата - Строка.
//
Процедура ПересчитатьТекущиеЗначенияОтносительныхДатЗапрета(ЗаписатьОписаниеРезультатаВЖурналРегистрации = Истина, ОписаниеРезультата = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.ДатыЗапретаИзменения";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыЗапретаИзменения.Раздел,
		|	ДатыЗапретаИзменения.Объект,
		|	ДатыЗапретаИзменения.Пользователь,
		|	ДатыЗапретаИзменения.ДатаЗапрета,
		|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяДатаНаСервере = НачалоДня(ТекущаяДатаСеанса());
		МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
		ПредставлениеОшибки = "";
		Отказ = Ложь;
		ЕстьОбновленныеДаты = Ложь;
		НетОтносительныхДат = Истина;
		
		Пока Выборка.Следующий() Цикл
			РассчитаннаяДатаЗапрета = РассчитатьДатуЗапретаПоОписанию(ТекущаяДатаНаСервере, Выборка.ОписаниеДатыЗапрета);
			
			Если ЗначениеЗаполнено(РассчитаннаяДатаЗапрета) Тогда
				НетОтносительныхДат = Ложь;
				Если Выборка.ДатаЗапрета <> РассчитаннаяДатаЗапрета Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.ДатаЗапрета = РассчитаннаяДатаЗапрета;
						Попытка
							МенеджерЗаписи.Записать();
							ЕстьОбновленныеДаты = Истина;
						Исключение
							Отказ = Истина;
							ПредставлениеОшибки = ПредставлениеОшибки + Символы.ПС + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						КонецПопытки
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если НетОтносительныхДат Тогда
		ОписаниеРезультата = НСтр("ru = 'Относительные даты запрета не заданы.'");
		
	ИначеЕсли Отказ Тогда
		Если ЕстьОбновленныеДаты Тогда
			ОписаниеРезультата = НСтр("ru = 'Пересчитаны некоторые текущие значения относительных дат запрета.
			                                |При пересчете возникли ошибки:'");
		Иначе
			ОписаниеРезультата = НСтр("ru = 'Не пересчитаны текущие значения дат запрета.
			                                |При пересчете возникли ошибки:'");
		КонецЕсли;
		ОписаниеРезультата = ОписаниеРезультата + ПредставлениеОшибки;
	Иначе
		Если ЕстьОбновленныеДаты Тогда
			ОписаниеРезультата = НСтр("ru = 'Успешно пересчитаны текущие значения относительных дат запрета.'");
		Иначе
			ОписаниеРезультата = НСтр("ru = 'Сегодня уже пересчитаны текущие значения относительных дат запрета.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписатьОписаниеРезультатаВЖурналРегистрации Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Даты запрета изменения.Пересчет относительных дат'"),
		                         ?(Отказ, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация),
		                         ,
		                         ,
		                         ОписаниеРезультата,
		                         РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения.
Процедура ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПересчитатьТекущиеЗначенияОтносительныхДатЗапрета();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Функция РассчитатьДатуЗапретаПоОписанию(ТекущаяДатаНаСервере, ОписаниеДатыЗапрета)
	
	Сутки = 60*60*24;
	ВариантДатыЗапрета = "";
	КоличествоДнейРазрешения = 0;
	
	Если ЗначениеЗаполнено(ОписаниеДатыЗапрета) Тогда
		ВариантДатыЗапрета = СтрПолучитьСтроку(ОписаниеДатыЗапрета, 1);
		Строка2            = СтрПолучитьСтроку(ОписаниеДатыЗапрета, 2);
		Если ЗначениеЗаполнено(Строка2) Тогда
			Попытка
				КоличествоДнейРазрешения = Число(Строка2);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантДатыЗапрета = "КонецПрошлогоГода" Тогда
		ТекущаяДатаЗапрета    = НачалоГода(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоГода(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоКвартала" Тогда
		ТекущаяДатаЗапрета    = НачалоКвартала(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоКвартала(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоМесяца" Тогда
		ТекущаяДатаЗапрета    = НачалоМесяца(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоМесяца(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлойНедели" Тогда
		ТекущаяДатаЗапрета    = НачалоНедели(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоНедели(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "ПредыдущийДень" Тогда
		ТекущаяДатаЗапрета    = НачалоДня(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоДня(ТекущаяДатаЗапрета) - Сутки;
	Иначе
		ТекущаяДатаЗапрета    = '00000000';
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяДатаЗапрета) Тогда
		СрокРазрешения = ТекущаяДатаЗапрета + КоличествоДнейРазрешения * Сутки;
		Если НЕ ТекущаяДатаНаСервере > СрокРазрешения Тогда
			ТекущаяДатаЗапрета = ПредыдущаяДатаЗапрета;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяДатаЗапрета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Обработчик обновления выполняет замену значения Неопределено
// измерения Пользователь регистра сведений ДатыЗапретаИзменения
// на значение Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей.
//
Процедура ЗаменитьНеопределеноНаЗначениеПеречисления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Неопределено);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Таблица = НаборЗаписей.Выгрузить();
		НаборЗаписей.Отбор.Пользователь.Установить(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
		Таблица.ЗаполнитьЗначения(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей, "Пользователь");
		НаборЗаписей.Загрузить(Таблица);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления выполняет удаление пустых дат запрета заданных
// для всех пользователей или всех планов обмена, т.е. "По умолчанию",
// т.к. по умолчанию даты запрета пустые.
//
Процедура УдалитьПустыеДатыЗапретаПоУмолчанию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", '00000000');
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел,
	|	ДатыЗапретаИзменения.Объект,
	|	ДатыЗапретаИзменения.Пользователь
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Пользователь В (ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей), ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехУзловПлановОбмена))
	|	И ДатыЗапретаИзменения.ДатаЗапрета = &ПустаяДата
	|	И ДатыЗапретаИзменения.ОписаниеДатыЗапрета = """"";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
		НачатьТранзакцию();
		Попытка
			Для каждого Строка Из Выгрузка Цикл
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

