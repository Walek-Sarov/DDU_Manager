///////////////////////////////////////////////////////////////////////////////////
// ПоставляемыеДанныеПовтИсп: Механизм сервиса поставляемых данных.
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция получает соответствующий узел для области данных
// 
// Параметры:
// ОбластьДанных - Число – область данных, для которой необходимо определить узел
//
// Возвращаемое значение:
// Ссылка на узел плана обмена
//
Функция ПолучитьУзелОбластиДанных(ОбластьДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмененияПоставляемыхДанных.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ИзмененияПоставляемыхДанных КАК ИзмененияПоставляемыхДанных
	|ГДЕ
	|	ИзмененияПоставляемыхДанных.ОбластьДанных = &ОбластьДанных";
	Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		ШаблонСообщения = НСтр("ru = 'Не найден узел, соответствующий области данных %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбластьДанных);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

// Функция определяет необходимость добавления элемента в области данных
//
// Параметры:
// ПустаяСсылкаТипа – ссылка элемента для копирования
//
// Возвращаемое значение:
// Добавить
// Булево - показатель необходимости добавления элемента в области данных
//
Функция НеобходимоДобавитьЭлементВОбласти(ПустаяСсылкаТипа) Экспорт
	
	Тип = ТипЗнч(ПустаяСсылкаТипа);
	
	ТаблицаСоответствия = ОбщегоНазначения.ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим();
	
	НайденнаяСтрока = ТаблицаСоответствия.Найти(Тип, "ТипОбщихДанных");
	Если НайденнаяСтрока = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Не найдена строка соответствия для типа поставляемых данных %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тип);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Добавить = НайденнаяСтрока.КопироватьВоВсеОбластиДанных;
	
	Возврат Добавить;
	
КонецФункции

// Функция получает менеджер объекта
//
// Параметры:
// ПустаяСсылкаТипа – ссылка, по которой определяется менеджер объекта
//
// Возвращаемое значение:
// МенеджерОбъекта 
//
Функция ПолучитьМенеджерПоПустойСсылкеТипа(ПустаяСсылкаТипа) Экспорт
	
	Тип = ТипЗнч(ПустаяСсылкаТипа);
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		Возврат Справочники[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
		Возврат РегистрыСведений[МетаданныеТипа.Имя];
	Иначе
		ШаблонСообщения = НСтр("ru='Неподдерживаемый тип: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тип);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// Функция получает тип общих данных по пустой ссылке
//
// Параметры:
// ВидПоставляемыхДанных – значение перечисления, по которому определяется тип общих данных 
//
Функция ПолучитьТипОбщихДанныхПоВиду(ВидПоставляемыхДанных) Экспорт
	
	ТаблицаСоответствия = ОбщегоНазначения.ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим();
	
	НайденнаяСтрока = ТаблицаСоответствия.Найти(ВидПоставляемыхДанных, "ВидПоставляемыхДанных");
	Если НайденнаяСтрока = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Не найден тип поставляемых данных соответствующий виду данных %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВидПоставляемыхДанных);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ТипОбщихДанных = НайденнаяСтрока.ТипОбщихДанных;
	
	Возврат ТипОбщихДанных;
	
КонецФункции

// Возвращает соответствие разделенных типов данных общим
//
// Возвращаемое значение:
// ФиксированноеСоответствие
//  Ключ - Тип общих данных
//  Значение - Тип Разделенных данных
//
Функция СоответствиеТиповРазделенныхДанныхОбщим() Экспорт
	
	ТипыПодлежащиеЗамене = Новый Соответствие;
	Для каждого СтрокаСоответствия Из ОбщегоНазначения.ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим() Цикл
		Если СтрокаСоответствия.ТипРазделенныхДанных <> Неопределено Тогда
			ТипыПодлежащиеЗамене.Вставить(СтрокаСоответствия.ТипОбщихДанных, 
				СтрокаСоответствия.ТипРазделенныхДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ТипыПодлежащиеЗамене);
	
КонецФункции
	
Функция ПолучитьТипыРеквизитовСправочникаПоИмениУзла(ИмяУзла) Экспорт
	
	ТипыРеквизитов = Новый Структура;
	
	ТипДанных = ПоставляемыеДанныеПовтИсп.ПолучитьТипОбщихДанныхПоВиду(
		XMLЗначение(Тип("ПеречислениеСсылка.ВидыПоставляемыхДанных"),
		"Справочник_" + Сред(ИмяУзла,Найти(ИмяУзла, ".")+1)));
	Если ТипДанных <> Неопределено Тогда
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипДанных);
	Иначе
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ИзXMLТипа(ИмяУзла, ""));
	КонецЕсли;
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	Для Каждого Реквизит Из МетаданныеСправочника.СтандартныеРеквизиты Цикл	
		ТипыРеквизитов.Вставить(Реквизит.Имя, Новый Структура("Тип, ИспользованиеРеквизита", Реквизит.Тип.Типы()[0], Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента));
	КонецЦикла;	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		ТипыРеквизитов.Вставить(Реквизит.Имя, Новый Структура("Тип, ИспользованиеРеквизита", Реквизит.Тип.Типы()[0], Реквизит.Использование));	
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из МетаданныеСправочника.ТабличныеЧасти Цикл 
		СписокТиповРеквизитовТабличнойЧасти = Новый Соответствие;
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			СписокТиповРеквизитовТабличнойЧасти.Вставить(Реквизит.Имя, Реквизит.Тип.Типы()[0]);
		КонецЦикла;
		ТипыРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("Тип, ИспользованиеРеквизита", СписокТиповРеквизитовТабличнойЧасти, ТабличнаяЧасть.Использование));
	КонецЦикла;
	
	Возврат ТипыРеквизитов;
	
КонецФункции

Функция ПолучитьТипыРеквизитовРегистраСведенийПоИмениУзла(ИмяУзла) Экспорт
	
	ТипыРеквизитов = Новый Структура;
	
	ТипДанных = ПоставляемыеДанныеПовтИсп.ПолучитьТипОбщихДанныхПоВиду(
		XMLЗначение(Тип("ПеречислениеСсылка.ВидыПоставляемыхДанных"),
		"РегистрСведений_" + Метаданные.НайтиПоТипу(ИзXMLТипа(ИмяУзла, "")).Имя));
	Если ТипДанных <> Неопределено Тогда
		МетаданныеРегистраСведений = Метаданные.НайтиПоТипу(ТипДанных);
	Иначе
		МетаданныеРегистраСведений = Метаданные.НайтиПоТипу(ИзXMLТипа(ИмяУзла, ""));
	КонецЕсли;
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведенийПоИмениУзла(ИмяУзла);
	Для Каждого Реквизит Из МетаданныеРегистраСведений.СтандартныеРеквизиты Цикл
		ТипыРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип.Типы()[0]);
	КонецЦикла;	
	Для Каждого Реквизит Из МетаданныеРегистраСведений.Измерения Цикл
		ТипыРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип.Типы()[0]);
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеРегистраСведений.Ресурсы Цикл
		ТипыРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип.Типы()[0]);
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеРегистраСведений.Реквизиты Цикл
		ТипыРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип.Типы()[0]);
	КонецЦикла;
	
	Возврат ТипыРеквизитов;
	
КонецФункции

Функция ПолучитьИмяСправочникаПоИмениУзла(ИмяУзла) Экспорт
	
	ТипДанных = ПоставляемыеДанныеПовтИсп.ПолучитьТипОбщихДанныхПоВиду(
		XMLЗначение(Тип("ПеречислениеСсылка.ВидыПоставляемыхДанных"),
		"Справочник_" + Сред(ИмяУзла,Найти(ИмяУзла, ".")+1)));
	Если ТипДанных <> Неопределено Тогда
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипДанных);
	Иначе
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ИзXMLТипа(ИмяУзла, ""));
	КонецЕсли;
	
	Возврат МетаданныеСправочника.Имя;	
	
КонецФункции

Функция ПолучитьИмяРегистраСведенийПоИмениУзла(ИмяУзла) Экспорт
	
	ТипДанных = ПоставляемыеДанныеПовтИсп.ПолучитьТипОбщихДанныхПоВиду(
		XMLЗначение(Тип("ПеречислениеСсылка.ВидыПоставляемыхДанных"),
		"РегистрСведений_" + Метаданные.НайтиПоТипу(ИзXMLТипа(ИмяУзла, "")).Имя));
	Если ТипДанных <> Неопределено Тогда
		МетаданныеРегистраСведений = Метаданные.НайтиПоТипу(ТипДанных);
	Иначе
		МетаданныеРегистраСведений = Метаданные.НайтиПоТипу(ИзXMLТипа(ИмяУзла, ""));
	КонецЕсли;
	
	Возврат МетаданныеРегистраСведений.Имя;
	
КонецФункции

