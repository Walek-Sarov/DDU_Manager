// Получает первичную информацию об ошибке
// Параметры:
//	ИнформацияОбОшибке - информация об ошибке
// Возвращает:
//	Информацию об ошибке, которая является первопричиной возникновения переданной ИнформацияОбОшибке
//  Если ошибка первичная, то возвращается сама ошибка, переданная в качестве параметра
Функция ПолучитьПричинуОшибки(ИнформацияОбОшибке) Экспорт
	ПричинаОшибки = ИнформацияОбОшибке.Причина;
	Если ПричинаОшибки = НеОпределено Тогда
		Возврат ИнформацияОбОшибке;
	КонецЕсли;
	Пока ПричинаОшибки.Причина <> НеОпределено Цикл
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;
	Возврат ПричинаОшибки;
	
КонецФункции

Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПарамтера, ЗначениеПарамтера) Экспорт

	Список.Параметры.УстановитьЗначениеПараметра(ИмяПарамтера, ЗначениеПарамтера);

КонецПроцедуры

Процедура УстановитьОтборДинамическогоСписка(Список, ИмяЭлементаОтбора, Значение, ВидСравнения) Экспорт
	
	ЭлементОтбора=Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение=Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
	ЭлементОтбора.Использование=Истина;
    ЭлементОтбора.ПравоеЗначение=Значение;
	ЭлементОтбора.ВидСравнения=ВидСравнения;

КонецПроцедуры




// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт
	
	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Ссылка.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Ссылка.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
	
	Если ДокументОбъект.Ссылка.Пустая() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Ссылка.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт 
	
	// Определяем назначенную для данного вида документов периодичность смены номера.
	ПериодСменыНомера = ДокументОбъект.Ссылка.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров.
	// Определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(НачальнаяДатаДокумента) - НачалоДня(ДокументОбъект.Дата);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНомерДокумента()

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат Новый (ЗаданныйТип);
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеТипа();

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт

	МетаданныеДокумента = Документ.Метаданные();

	ВидОперацииСтр = "";
	Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		ВидОперацииСтр = " (" + Документ.ВидОперации + ")";
	КонецЕсли;

	Возврат "Проведение документа: " + СокрЛП(Документ) + ВидОперацииСтр;

КонецФункции // ПредставлениеДокументаПриПроведении()

Процедура ДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено
		 ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс)  Тогда
		Префикс = "0";
	Иначе
                                
		Префикс = ДокументОбъект.Организация.Префикс;
        		
	КонецЕсли;
Конецпроцедуры

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	МассивТиповСсылок = Новый Массив;
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.удуСотрудникиОрганизаций"));
	СписокТиповСсылок	=Новый ОписаниеТипов(МассивТиповСсылок);
	
	МассивТиповОбъект = Новый Массив;
	МассивТиповОбъект.Добавить(Тип("СправочникОбъект.ФизическиеЛица"));
	МассивТиповОбъект.Добавить(Тип("СправочникОбъект.удуСотрудникиОрганизаций"));	
	СписокТиповОбъектов	= Новый ОписаниеТипов(МассивТиповОбъект);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
		
	ИначеЕсли ТипОбъекта <> Тип("Неопределено") И (СписокТиповСсылок.СодержитТип(ТипОбъекта) Или СписокТиповОбъектов.СодержитТип(ТипОбъекта)) Тогда
		Если СписокТиповСсылок.СодержитТип(ТипОбъекта) Тогда
			Наименование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект, "Наименование");
		Иначе
			Наименование = Объект.Наименование;
		КонецЕсли;
	
		// Избавление от возможных выражений в скобках, например (осн.), (вн. совм.).
		НачальнаяПозиция	= Найти(Наименование,"(");
		КонечнаяПозиция		= Найти(Наименование,")");
		ДлинаСтроки			= СтрДлина(Наименование);
		Если НачальнаяПозиция > 0 Тогда
			СтрокаДляОбработки = Лев(Наименование, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(Наименование, ДлинаСтроки - КонечнаяПозиция),"")
		Иначе
			СтрокаДляОбработки = Наименование;
		КонецЕсли; 
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(СтрокаДляОбработки)," ");
		
	Иначе
		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
				
	КонецЕсли;
			
	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);
	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);
	
КонецФункции	// ПолучитьОписаниеТиповДаты() 

// Предназначена для получения имени элемента перечисления по значению.
//
// Параметры:
//	Элемент перечисления.
//
// Возвращаемое значение:
//	Строка - имя элемента перечисления в метаданных.
//
Функция ПолучитьИмяЭлементаПеречисленияПоЗначению(ЗначениеПеречисления) Экспорт
	
	ИмяЭлемента = Строка(ЗначениеПеречисления);
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ЗначениеПеречисления.Метаданные().Имя].ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Синоним = Строка(ЗначениеПеречисления) Тогда
			ИмяЭлемента = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции // ПолучитьПериодичностьДляЗапросаПоЗначениюПеречисления()

// формирует список значений, описывающий государственные праздники РФ
//
// Параметры
//  КалендарныйГод - число - год, за который возвращается список праздников
//
// Возвращаемое значение:
//   список значений, содержащий строки-месяцедни праздников
//
Функция ПолучитьСписокПраздниковРФ(КалендарныйГод) Экспорт

	СписокПраздников = Новый СписокЗначений();
	Если КалендарныйГод < 1994 Тогда
		СписокПраздников.Добавить("0101", "Новый Год");
		СписокПраздников.Добавить("0102", "Новый Год");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0502", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День принятия Декларации о государственном суверенитете Российской Федерации");
		СписокПраздников.Добавить("1107", "годовщина Великой Октябрьской социалистической революции");
	ИначеЕсли КалендарныйГод < 2002 Тогда
		СписокПраздников.Добавить("0101", "Новый Год");
		СписокПраздников.Добавить("0102", "Новый Год");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0502", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День принятия Декларации о государственном суверенитете Российской Федерации");
		СписокПраздников.Добавить("1107", "годовщина Великой Октябрьской социалистической революции");
		СписокПраздников.Добавить("1212", "День Конституции РФ");
	ИначеЕсли КалендарныйГод < 2005 Тогда
		СписокПраздников.Добавить("0101", "Новый Год");
		СписокПраздников.Добавить("0102", "Новый Год");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0223", "День защитника Отечества");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0502", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День России");
		СписокПраздников.Добавить("1107", "День согласия и примирения");
		СписокПраздников.Добавить("1212", "День Конституции РФ");
	Иначе  // Федеральный закон №201-ФЗ от 29 декабря 2004 года
		СписокПраздников.Добавить("0101", "Новогодние каникулы");
		СписокПраздников.Добавить("0102", "Новогодние каникулы");
		СписокПраздников.Добавить("0103", "Новогодние каникулы");
		СписокПраздников.Добавить("0104", "Новогодние каникулы");
		СписокПраздников.Добавить("0105", "Новогодние каникулы");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0223", "День защитника Отечества");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День России");
		СписокПраздников.Добавить("1104", "День народного единства");
	КонецЕсли;

	Возврат СписокПраздников

КонецФункции // ПолучитьСписокПраздниковРФ()

// Функция формирует список элементов перечисления
//
// Параметры
//  ИмяПеречисления - имя перечисления, как оно задано в конфигураторе
//
// Возвращаемое значение:
//   СписокЗначений - список элементов перечисления
//
Функция ПолучитьСписокЭлементовПеречисления(ИмяПеречисления) Экспорт

	СписокЭлементовПеречисления = Новый СписокЗначений;
	
	Попытка
		КоллекцияЭлементовПеречисления = Перечисления[ИмяПеречисления];
	Исключение
		Возврат СписокЭлементовПеречисления;
	КонецПопытки;
	
	Для каждого ЭлементПеречисления Из КоллекцияЭлементовПеречисления Цикл
		СписокЭлементовПеречисления.Добавить(ЭлементПеречисления, Строка(ЭлементПеречисления));
	КонецЦикла;
	
	Возврат СписокЭлементовПеречисления;

КонецФункции // ПолучитьСписокЭлементовПеречисления()

&НаСервере
Функция ПреобразоватьСтрокуТЗВСтруктуру(СтрокаТЗ)   Экспорт
	
	СтруктураЗначений=Новый Структура;
	Если не СтрокаТЗ=Неопределено тогда
		Для Каждого Колонка из СтрокаТЗ.Владелец().Колонки цикл
			НомерКолонки=СтрокаТЗ.Владелец().Колонки.Индекс(Колонка);	
			СтруктураЗначений.Вставить(Колонка.Имя,СтрокаТЗ.Получить(НомерКолонки));
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураЗначений;
		
КонецФункции


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВНЕШНИХ КОМПОНЕНТ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Функция добавляет внешнюю компоненту в регистр сведений
//
Функция ДобавлениеВнешнейКомпоненты(ИсходныйФайл, ДвоичныеДанные = Неопределено, СообщатьОРезултате = Истина) Экспорт
	
	ФайлНаДиске = Новый Файл(ИсходныйФайл);
	
	Если ДвоичныеДанные = Неопределено Тогда
	
		Если НЕ ФайлНаДиске.Существует() Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст="- Исходный файл отсутствует на диске: " + ИсходныйФайл;
			СообщениеПользователю.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя);
				
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=ОписаниеОшибки();
			СообщениеПользователю.Сообщить();
			Возврат  Ложь;
				
		КонецПопытки;
		
		ДатаИзмененияФайла = ФайлНаДиске.ПолучитьВремяИзменения();
		
	Иначе
		ДатаИзмененияФайла = ТекущаяДата();
		
	КонецЕсли;
		
	НаборЗаписей = РегистрыСведений.удуВнешниеКомпоненты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяФайла.Установить(ФайлНаДиске.Имя);
	НаборЗаписей.Прочитать();
	
	Если Не НаборЗаписей.Количество() = 0 Тогда
		ПрошлаяДатаИзмененияФайла = НаборЗаписей[0].ДатаИзмененияФайла;
		НаборЗаписей.Очистить();
		
	Иначе
		ПрошлаяДатаИзмененияФайла = Неопределено;
		
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	Запись.ИмяФайла           = ФайлНаДиске.Имя;
	Запись.ДатаИзмененияФайла = ДатаИзмененияФайла;
	
	Запись.ХранилищеФайла     = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
		
	Попытка
		НаборЗаписей.Записать();
		Если ПрошлаяДатаИзмененияФайла = Неопределено Тогда 
			Сообщение = "Добавлена внешняя компонента: " + ФайлНаДиске.Имя + " (версия от " + ДатаИзмененияФайла + ")";
			
		Иначе
			Сообщение = "Изменена версия внешней компоненты: " + ФайлНаДиске.Имя + " (с версии от: " + ПрошлаяДатаИзмененияФайла + "  на версию от: " + ДатаИзмененияФайла + ")";
			
		КонецЕсли;
		Если СообщатьОРезултате Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=Сообщение;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
	Исключение
		Если СообщатьОРезултате Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=ОписаниеОшибки();
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ДобавлениеВнешнейКомпоненты()

// Функция склоняет переданую фразу
// Параметры:
//  Фраза (обязательный), тип строка
//   Параметр должен содержать фразу. Каждое слово фразы будет просклонено отдельно
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Результат (обязательный), тип строка
//   Переменная, в которую будет возвращен результат склонения.
//
//  Пол (необязательный), тип Перечисление.ПолФизическогоЛица или тип Перечисление.удуПол
//   Пол физического лица  или воспитанника
//
Функция Просклонять(Знач Фраза, Падеж,  Результат, Пол = Неопределено) Экспорт
	
	ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl");
	Компонента = Новый("AddIn.Decl.CNameDecl");
	
	Результат = "";
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Фраза, " ");
	
	// Выделим первые 3 слова, так как компонента не умеет склонять фразу большую 3х символов.
	НомерНесклоняемогоСимвола = 4;
	Для Номер = 1 По Мин(МассивСтрок.Количество(), 3) Цикл
		Если Не удуДокументыКадровогоУчета.ФИОНаписаноВерно(МассивСтрок[Номер-1], Истина) Тогда
			НомерНесклоняемогоСимвола = Номер;
			Прервать;
		КонецЕсли;

		Результат = Результат + ?(Номер > 1, " ", "") + МассивСтрок[Номер-1];
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = Фраза;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если Пол = Перечисления.ПолФизическогоЛица.Мужской ИЛИ Пол = Перечисления.удуПол.Мальчик Тогда
			Результат = Компонента.Просклонять(Результат, Падеж, 1) + " ";
			
		ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский ИЛИ Пол = Перечисления.удуПол.Девочка Тогда
			Результат = Компонента.Просклонять(Результат, Падеж, 2) + " ";
			
		Иначе
			Результат = Компонента.Просклонять(Результат, Падеж) + " ";
			
		КонецЕсли;
		
	Исключение
		Результат = Фраза;
		Возврат Ложь;
		
	КонецПопытки;
	
	// Остальные символы добавим без склонения
	Для Номер = НомерНесклоняемогоСимвола По МассивСтрок.Количество() Цикл
		Результат = Результат + " " + МассивСтрок[Номер-1];
	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	
	Возврат Истина;
		
КонецФункции // Просклонять()

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(ПустаяСтрока(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(ПустаяСтрока(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если Валюта <> Неопределено Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()


Функция ВыделитьДату(ОбъектДляВыделения) Экспорт
	  
	  Если ТипЗнч(ОбъектДляВыделения)=Тип("СтандартнаяДатаНачала") тогда
		  Возврат ОбъектДляВыделения.Дата
	  ИначеЕсли ТипЗнч(ОбъектДляВыделения)=Тип("Дата") тогда
		  Возврат ОбъектДляВыделения;
	  Иначе
		  Возврат ОбъектДляВыделения;
	  КонецЕсли;
	  
КонецФункции

// Возвращает строковое представление места рождения.
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);

    Если СтруктураМестоРождения.Особое = 1 Тогда
	
		Представление	=	"особое" +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Иначе
	
		Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"Населенный пункт: " + СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", район:  " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", область: "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", страна: "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		Если Лев(Представление, 1) = ","  Тогда
			Представление = Сред(Представление, 2)
		КонецЕсли;
			
	КонецЕсли; 

	Возврат Представление;
КонецФункции	 

// Функция раскладывает строку с данными о месте рождения на элементы структуры.
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";

	МассивМестоРождения	=	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве	>	0	тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" тогда
			Особое	=	1;
		КонецЕсли;	 
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Район	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Область	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Страна	=	СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции	 

// Процедура вычисляет количество лет, месяцев и дней между двумя датами
//
// Параметры
//  Дата1	– дата, первая дата (более поздняя, часто текущая, стаж определяется по состоянию на эту дату)
//  Дата2	– дата, вторая дата (ранняя дата, с нее начинается "течение" стажа)
//  Лет		– Число, в этот параметр будет записано кол-во лет между двумя датами (Дата1-Дата2)
//  Месяцев	– Число, в этот параметр будет записано кол-во месяцев между двумя датами (Дата1-Дата2)
//  Дней	– Число, в этот параметр будет записано кол-во дней между двумя датами (Дата1-Дата2)
//
Процедура РазобратьРазностьДат(Дата1, Дата2, Лет = 0, Месяцев = 0, Дней = 0) Экспорт
	
	Лет		= 0;
	Месяцев	= 0;
	Дней	= 0;
	Если Дата1 > Дата2 Тогда
		
		ВременнаяДата = Дата1;
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата,-1))/86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-1);
		КонецЕсли;
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-12);
			Месяцев = 12;
		КонецЕсли;
		Лет		= Макс(			 Год(ВременнаяДата)		- Год(Дата2),	0);
		Месяцев	= Макс(Месяцев	+ Месяц(ВременнаяДата)	- Месяц(Дата2),	0);
		Дней	= Макс(Дней		+ День(ВременнаяДата)	- День(Дата2),	0);
		
		// Скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах.
		Если Дата2 <> (ДобавитьМесяц(Дата1,-Лет*12-Месяцев)-Дней*86400) Тогда
			Дней = Дней + (День(КонецМесяца(Дата2)) - День(НачалоМесяца(Дата2))) - (День(КонецМесяца(ДобавитьМесяц(Дата1,-1))) - День(НачалоМесяца(ДобавитьМесяц(Дата1,-1))));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	// РазобратьРазностьДат
