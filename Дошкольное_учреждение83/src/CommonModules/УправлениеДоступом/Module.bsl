////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для проверки прав

// Проверяет, что у текущего пользователя есть роль в одном из профилей
// тех групп доступа в которых он участвует, например,
// роль ПросмотрЖурналаРегистрации, роль ПечатьНепроведенныхДокументов.
//
// Параметры:
//  Роль         - Строка - имя роли.
//
//  НаборыЗначенийДоступа - ТаблицаЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа).
//                 Пустую подготовленную таблицу можно получить с помощью функции
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
//  Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено.
//                 Если не заполнено, тогда право проверяется для текущего пользователя.
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРоль(Знач Роль, Знач НаборыЗначенийДоступа = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",           Пользователь);
	Запрос.УстановитьПараметр("Роль",                   Роль);
	
	Если НаборыЗначенийДоступа = Неопределено ИЛИ НЕ ОграничиватьДоступНаУровнеЗаписей() Тогда
		// Проверка, что роль назначается пользователю через группу доступа по профилю.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
		|			И ((НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль = &Роль)
		|			И ((НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления))";
	Иначе
		
		// Проверка, что роль назначается пользователю через группу доступа по профилю с разрешенными наборами значений доступа.
		
		Запрос.УстановитьПараметр("НаборыЗначенийДоступа", НаборыЗначенийДоступа);
		Запрос.УстановитьПараметр("СвойстваВидовДоступа",  УправлениеДоступомСлужебный.СвойстваВидаДоступа());
		Запрос.УстановитьПараметр("ДобавлятьРуководителямДоступПодчиненных", ДобавлятьРуководителямДоступПодчиненных());
		Запрос.УстановитьПараметр("ВидДоступаПользователи", ?(ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи"),
		                                                      ПланыВидовХарактеристик.ВидыДоступа.Пользователи,
		                                                      ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа
		|ПОМЕСТИТЬ НаборыЗначенийДоступаБезСвойств
		|ИЗ
		|	&НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваВидовДоступа.ВидДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа
		|ПОМЕСТИТЬ СвойстваВидовДоступа
		|ИЗ
		|	&СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения))
		|			ТОГДА ЕСТЬNULL(ТипыСсылок.ТипТаблицы, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипЗначенияДоступа,
		|	ТипыСсылок.Таблица
		|ПОМЕСТИТЬ НаборыЗначенийДоступа
		|ИЗ
		|	НаборыЗначенийДоступаБезСвойств КАК НаборыЗначенийДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
		|		ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТипыСсылок.ТипТаблицы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|		ПО НаборыЗначенийДоступа.ВидДоступа = СвойстваВидовДоступа.ВидДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|ПОМЕСТИТЬ ГруппыДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
		|			И ((НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль = &Роль)
		|			И ((НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Наборы.НомерНабора
		|				ИЗ
		|					НаборыЗначенийДоступа КАК Наборы
		|				) КАК НомераНаборов
		|			ГДЕ
		|				(НЕ ЛОЖЬ В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ЛОЖЬ
		|						ИЗ
		|							НаборыЗначенийДоступа КАК НаборыЗначений
		|						ГДЕ
		|							НаборыЗначений.НомерНабора = НомераНаборов.НомерНабора
		|							И (НЕ ВЫБОР
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|										ТОГДА НаборыЗначений.ЗначениеДоступа <> НЕОПРЕДЕЛЕНО
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа))
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
		|													И ТаблицыГруппДоступаПроверкаПраваНаОбъект.Добавление = ИСТИНА)
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
		|													И ТаблицыГруппДоступаПроверкаПраваНаОбъект.Изменение = ИСТИНА)
		|									КОГДА НаборыЗначений.ВидДоступаЧерезПраваПоЗначениямДоступа
		|										ТОГДА ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|															ПО
		|																ИерархияЗначений.ИспользоватьПраваСсылки
		|																	И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																	И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																	И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																	И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
		|																	И ПраваПоЗначениям.Чтение
		|																	И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|															ПО
		|																ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|																	И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
		|																	И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь)
		|												И (НЕ ЛОЖЬ В
		|														(ВЫБРАТЬ ПЕРВЫЕ 1
		|															ЛОЖЬ
		|														ИЗ
		|															РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|																ПО
		|																	ИерархияЗначений.ИспользоватьПраваСсылки
		|																		И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																		И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																		И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
		|																		И ПраваПоЗначениям.ЧтениеЗапрещено
		|																		И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|																ПО
		|																	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|																		И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
		|																		И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь))
		|									ИНАЧЕ (НаборыЗначений.ВидДоступаЕдинственныйДляТипаЗначенияДоступа
		|											ИЛИ (НЕ ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ГруппыЗначенийДоступа КАК ВидыЗначений
		|													ГДЕ
		|														ВидыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|														И ВидыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|														И ВидыЗначений.ТолькоВидДоступа = ИСТИНА)))
		|											И ВЫБОР
		|												КОГДА ВЫБОР
		|															КОГДА НаборыЗначений.ВидДоступа = &ВидДоступаПользователи
		|																ТОГДА ВЫБОР
		|																		КОГДА &ДобавлятьРуководителямДоступПодчиненных <> ИСТИНА
		|																			ТОГДА ИСТИНА В
		|																					(ВЫБРАТЬ ПЕРВЫЕ 1
		|																						ИСТИНА
		|																					ИЗ
		|																						РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|																					ГДЕ
		|																						ПользователиИГруппыПользователей.ВидДоступа = &ВидДоступаПользователи
		|																						И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
		|																						И ПользователиИГруппыПользователей.ГруппаДоступа = НаборыЗначений.ЗначениеДоступа)
		|																		ИНАЧЕ ИСТИНА В
		|																				(ВЫБРАТЬ ПЕРВЫЕ 1
		|																					ИСТИНА
		|																				ИЗ
		|																					РегистрСведений.ПодчиненныеПользователи КАК ПодчиненныеПользователи
		|																				ГДЕ
		|																					ПодчиненныеПользователи.Пользователь = &Пользователь
		|																					И ПодчиненныеПользователи.ПодчиненныйПользователь = НаборыЗначений.ЗначениеДоступа
		|																					И ПодчиненныеПользователи.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа)
		|																	КОНЕЦ
		|															ИНАЧЕ ЛОЖЬ
		|														КОНЕЦ
		|														ИЛИ ВЫБОР
		|															КОГДА НаборыЗначений.ВидДоступаБезГруппЗначенияДоступа
		|																ТОГДА ВЫБОР
		|																		КОГДА ИСТИНА В
		|																				(ВЫБРАТЬ
		|																					ИСТИНА
		|																				ИЗ
		|																					РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																				ГДЕ
		|																					Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																					И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																					И Значения.ТолькоВидДоступа = ЛОЖЬ
		|																					И Значения.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа)
		|																			ТОГДА ИСТИНА
		|																		ИНАЧЕ ЛОЖЬ
		|																	КОНЕЦ
		|															ИНАЧЕ ВЫБОР
		|																	КОГДА ИСТИНА В
		|																			(ВЫБРАТЬ ПЕРВЫЕ 1
		|																				ИСТИНА
		|																			ИЗ
		|																				РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																					ПО
		|																						ГруппыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И ГруппыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																							И Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																							И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И Значения.ТолькоВидДоступа = ГруппыЗначений.ТолькоВидДоступа
		|																							И Значения.ЗначениеДоступа = ГруппыЗначений.ГруппаДоступа)
		|																		ТОГДА ИСТИНА
		|																	ИНАЧЕ ЛОЖЬ
		|																КОНЕЦ
		|														КОНЕЦ = ВЫБОР
		|															КОГДА ИСТИНА В
		|																	(ВЫБРАТЬ
		|																		ИСТИНА
		|																	ИЗ
		|																		РегистрСведений.ЗначенияГруппДоступа КАК Виды
		|																	ГДЕ
		|																		Виды.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																		И Виды.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И Виды.ТолькоВидДоступа = ИСТИНА)
		|																ТОГДА ИСТИНА
		|															ИНАЧЕ ЛОЖЬ
		|														КОНЕЦ
		|													ТОГДА ИСТИНА
		|												ИНАЧЕ ЛОЖЬ
		|											КОНЕЦ
		|								КОНЕЦ))))";
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет, что у пользователя есть право, устанавливаемое по значению доступа.
//  Например, по папке файлов могут устанавливаться права "УправлениеПравами",
// "ЧтениеПапокФайлов", "ЧтениеФайлов", которые являются, как правами для папки файлов,
// так и правами для файлов или для двух элементов данных сразу - "ЧтениеПапокИФайлов".
//
// Параметры:
//  Право           - Строка.
//
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка, Неопределено - значение,
//                    для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//
//  Пользователь    - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено. Если не заполнено,
//                    тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьПравоПоЗначениюДоступа(Знач Право, Знач ЗначениеДоступа, Знач Пользователь = Неопределено) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка массива ролей, хотя бы одна из которых требуется для права по значению доступа.
	ОписаниеПрава = УправлениеДоступомСлужебный.ВозможныеПраваПоЗначениюДоступа(
		ЗначениеДоступа.Метаданные().ПолноеИмя()).Найти(Право, "Имя");
	
	Если ОписаниеПрава = Неопределено Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдено право ""%1"" таблицы ""%2""'"), Право, ЗначениеДоступа.Метаданные().ПолноеИмя()));
	КонецЕсли;
	
	// Проверка, что хотя бы одна из ролей назначается пользователю через профиль его групп доступа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|ПОМЕСТИТЬ ГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|			И ((НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|			И (ПрофилиГруппДоступаРоли.Роль В (&Роли))
	|			И ((НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роли",         ОписаниеПрава.ТребуемаяРоль);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
	
	Если ЕстьПраво Тогда
	
		// Проверка, что по виду доступа ограничение установлено в каждой группе доступа пользователя.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(ГруппыДоступаПользователя.ГруппаДоступа) КАК КоличествоГруппДоступа,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначенияГруппДоступа.ГруппаДоступа ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоВключенныхОграничений
		|ИЗ
		|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
		|		ПО ГруппыДоступаПользователя.ГруппаДоступа = ЗначенияГруппДоступа.ГруппаДоступа
		|			И (ЗначенияГруппДоступа.ВидДоступа = &ВидДоступа)
		|			И (ЗначенияГруппДоступа.ТолькоВидДоступа)";
		
		Запрос.УстановитьПараметр("ВидДоступа", УправлениеДоступомСлужебный.ВидыДоступаТаблицы(
			ЗначениеДоступа.Метаданные().ПолноеИмя())[0]);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		// Проверка права пользователя по значению доступа.
		Если Выборка.КоличествоГруппДоступа = Выборка.КоличествоВключенныхОграничений И
			 ЗначениеДоступа <> Неопределено И
			 ОграничиватьДоступНаУровнеЗаписей() Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИСТИНА КАК ЗначениеИстина
			|ГДЕ
			|	ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|					ПО
			|						ИерархияЗначений.ВидДоступа = &ВидДоступа
			|							И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|							И ИерархияЗначений.ИспользоватьПраваСсылки
			|							И ПраваПоЗначениям.Право = &Право
			|							И (НЕ ПраваПоЗначениям.Запрещено)
			|							И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
			|							И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|					ПО
			|						ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
			|							И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
			|							И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
			|							И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь)
			|	И (НЕ ЛОЖЬ В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ЛОЖЬ
			|				ИЗ
			|					РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|						ПО
			|							ИерархияЗначений.ВидДоступа = &ВидДоступа
			|								И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|								И ИерархияЗначений.ИспользоватьПраваСсылки
			|								И ПраваПоЗначениям.Право = &Право
			|								И ПраваПоЗначениям.Запрещено
			|								И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
			|								И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|						ПО
			|							ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
			|								И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
			|								И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
			|								И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь))";
			Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
			Запрос.УстановитьПараметр("Право",           Право);
			ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции // ЕстьПравоПоЗначениюДоступа()

// Проверяет, что у текущего пользователя есть право "УправлениеПравами",
// разрешающее изменять права заданного значения доступа для пользователей и групп пользователей
// или права различных значений доступа для заданного пользователя или группы пользователей.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.Пользователи, СправочникСсылка.ГруппыПользователей,
//                   или значение доступа СправочникСсылка, ПланВидовХарактеристикСсылка,
//                   для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//
//  ОписаниеОшибки - Строка, заполнена когда разрешения нет.
//
//  ТолькоПросмотр - Булево, только для внутренних нужд - не использовать.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешеноУправлениеПравамиПоЗначениямДоступа(Знач СсылкаНаОбъект, ОписаниеОшибки, ТолькоПросмотр = Неопределено) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоЗначениеДоступа = НЕ (ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
	                         ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыПользователей") ИЛИ
	                         ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	                         ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") );
	
	РазрешеноУправлениеПравами = Истина;
	
	Если НЕ ЕстьПравоПоЗначениюДоступа("УправлениеПравами", СсылкаНаОбъект) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 ""%2"" недоступна для управления правами.'"), СсылкаНаОбъект.Метаданные().ПредставлениеОбъекта, СсылкаНаОбъект);
		РазрешеноУправлениеПравами = Ложь;
	КонецЕсли;
		
	Возврат РазрешеноУправлениеПравами;
	
КонецФункции // РазрешеноУправлениеПравамиПоЗначениямДоступа()

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для получения общих настроек подсистемы

// Возвращает значение ПараметрСеанса.ОграничиватьДоступПоВиду,
// установленное по значению Константа.ОграничиватьДоступНаУровнеЗаписей.
//
Функция ОграничиватьДоступНаУровнеЗаписей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ОграничиватьДоступПоВиду <> "";
	
КонецФункции

// Возвращает значение константы ДобавлятьРуководителямДоступПодчиненных.
Функция ДобавлятьРуководителямДоступПодчиненных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Константы.ДобавлятьРуководителямДоступПодчиненных КАК Значение
	|ИЗ
	|	Константы КАК Константы");
	
	Возврат Запрос.Выполнить().Выгрузить()[0].Значение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с наборами значений доступа

// Проверяет предусмотрена ли для объекта метаданных
// процедура заполнения наборов значений доступа.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка.
//
// Возвращаемое значение:
//  Булево.
//
Функция ВозможноЗаполнитьНаборыЗначенийДоступа(Ссылка) Экспорт
	
	ТипОбъекта = Тип(ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка) + "Объект." + Ссылка.Метаданные().Имя);
	
	НаборыЗаполняются = Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипОбъекта)
	                ИЛИ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипОбъекта);
	
	Возврат НаборыЗаполняются;
	
КонецФункции

// Возвращает пустую таблицу, которая заполняется для передачи в функцию ЕстьРоль() и
// в процедуры ЗаполнитьНаборыЗначенийДоступа(Таблица), определенные прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
Функция ТаблицаНаборыЗначенийДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерНабора",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ВидДоступа",      Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	Таблица.Колонки.Добавить("ЗначениеДоступа", Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.ЗначениеДоступа.Тип);
	Таблица.Колонки.Добавить("Чтение",          Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Добавление",      Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Изменение",       Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Удаление",        Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// Заполняет наборы значений доступа объекта, используя процедуру ЗаполнитьНаборыЗначенийДоступа(Таблица),
// созданную прикладным разработчиком в модуле объекта, тип которого задан в одной из подписок на событие
// ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 Если передана ссылка, то по ней будет получен объект.
//
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 Неопределено, тогда будет создана таблица значений
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), содержащая поля:
//                     НомерНабора     - Число                                     (необязательно, если набор один),
//                     ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//                     ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//                     Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  СсылкаНаПодчиненныйОбъект - ЛюбаяСсылка, используется, когда нужно заполнить наборы значений доступа объекта-владельца
//                 для подчиненного объекта.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Знач Объект, Таблица, Знач СсылкаНаПодчиненныйОбъект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передана ссылка, тогда получить объект.
	// Объект не изменяется, а используется для вызова метода ЗаполнитьНаборыЗначенийДоступа()
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) И
	     НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры.
				           |Тип объекта ""%1""
				           |не найден ни в одной из подписок на события
				           |""Записать наборы значений доступа"",
				           |""Записать зависимые наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Таблица = ?(Таблица = Неопределено, ТаблицаНаборыЗначенийДоступа(), Таблица);
	Объект.ЗаполнитьНаборыЗначенийДоступа(Таблица);
	
	Если Таблица.Количество() = 0 Тогда
		// Если это условие отключить, тогда зациклится регламентное задание
		// заполнения данных для ограничения доступа.
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект ""%1"" сформировал пустой набор значений доступа.'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если СсылкаНаПодчиненныйОбъект <> Неопределено Тогда
		// Добавление наборов проверки прав Чтения, Изменения "ведущего" объекта-владельца,
		// при формировании зависимых наборов значений в процедурах,
		// подготовленных прикладным разработчиком.
		//
		// Действие не требуется при заполнении конечного набора (даже включающего зависимые наборы),
		// т.к. в стандартных шаблонах проверка прав встроена в логику работы вида доступа "Объект".
		
		// Добавление пустого набора, чтобы установить все флажки прав и упорядочить строки наборов.
		ДобавитьНаборыЗначенийДоступа(Таблица, ТаблицаНаборыЗначенийДоступа());
		
		Если НЕ Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.ЗначениеДоступа.Тип.СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В измерении ""ЗначениеДоступа"" регистра сведений ""Наборы значений доступа""
				           |не задан тип ""%1"" для значения ""%2""'"),
				Строка(ТипЗнч(СсылкаНаОбъект)),
				Строка(СсылкаНаОбъект) ));
		КонецЕсли;
		
		// Подготовка наборов объекта по отдельным правам.
		НаборыЧтения     = ТаблицаНаборыЗначенийДоступа();
		НаборыДобавления = ТаблицаНаборыЗначенийДоступа();
		НаборыИзменения  = ТаблицаНаборыЗначенийДоступа();
		Для каждого Строка Из Таблица Цикл
			Если Строка.Чтение Тогда
				НоваяСтрока = НаборыЧтения.Добавить();
				НоваяСтрока.НомерНабора     = Строка.НомерНабора + 1;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
			Если Строка.Добавление Тогда
				НоваяСтрока = НаборыДобавления.Добавить();
				НоваяСтрока.НомерНабора     = (Строка.НомерНабора + 1)*2;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
			Если Строка.Изменение Тогда
				НоваяСтрока = НаборыИзменения.Добавить();
				НоваяСтрока.НомерНабора     = (Строка.НомерНабора + 1)*3;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗависимостиПравДоступа.ПриПроверкеПраваЧтение,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваДобавление,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваИзменение,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваУдаление,
		|	ЗависимостиПравДоступа.ОтключитьПроверкуПравВедущейТаблицы
		|ИЗ
		|	РегистрСведений.ЗависимостиПравДоступа КАК ЗависимостиПравДоступа
		|ГДЕ
		|	ЗависимостиПравДоступа.ПодчиненнаяТаблица = &ПодчиненнаяТаблица
		|	И ЗависимостиПравДоступа.ТипВедущейТаблицы = &ТипВедущейТаблицы");
		Запрос.УстановитьПараметр("ПодчиненнаяТаблица", СсылкаНаПодчиненныйОбъект.Метаданные().ПолноеИмя());
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СсылкаНаОбъект));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		Запрос.УстановитьПараметр("ТипВедущейТаблицы", ОписаниеТипов.ПривестиЗначение(Неопределено));
		ЗависимостиПрав = Запрос.Выполнить().Выгрузить();
		
		Таблица.Очистить();
		
		Если ЗависимостиПрав.Количество() = 0 Тогда
			
			// Добавление наборов по стандартному правилу.
			
			// Проверка права Чтения "ведущего" объекта-владельца наборов
			// при проверке права Чтения "подчиненного" объекта.
			Строка = Таблица.Добавить();
			Строка.НомерНабора     = 1;
			Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
			Строка.ЗначениеДоступа = СсылкаНаОбъект;
			Строка.Чтение          = Истина;
			
			// Проверка права Изменения "ведущего" объекта-владельца наборов
			// при проверке прав Добавления, Изменения, Удаления "подчиненного" объекта.
			Строка = Таблица.Добавить();
			Строка.НомерНабора     = 2;
			Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения;
			Строка.ЗначениеДоступа = СсылкаНаОбъект;
			Строка.Добавление      = Истина;
			Строка.Изменение       = Истина;
			Строка.Удаление        = Истина;
			
			// Пометка прав, требующих проверки наборов ограничения права чтения "ведущего" объекта-владельца.
			НаборыЧтения.ЗаполнитьЗначения(Истина, "Чтение");
			// Пометка прав, требующих проверки наборов ограничения права изменения "ведущего" объекта-владельца.
			НаборыИзменения.ЗаполнитьЗначения(Истина, "Добавление, Изменение, Удаление");
			
			ДобавитьНаборыЗначенийДоступа(НаборыЧтения, НаборыИзменения);
			ДобавитьНаборыЗначенийДоступа(Таблица, НаборыЧтения, Истина);
		Иначе
			// Проверка права Чтения "ведущего" объекта-владельца наборов
			// при проверке прав "подчиненного" объекта.
			
			ЗависимостиПрав = ЗависимостиПрав[0];
			НаборыПравДляУмножения        = Таблица.Скопировать();
			НаборыОграниченийДляУмножения = Таблица.Скопировать();
			
			ДобавитьНаборыДляПрава(
				"Чтение",
				ЗависимостиПрав,
				Таблица,
				НаборыПравДляУмножения,
				НаборыОграниченийДляУмножения,
				НаборыЧтения,
				НаборыДобавления,
				НаборыИзменения,
				СсылкаНаОбъект);
			
			ДобавитьНаборыДляПрава(
				"Добавление",
				ЗависимостиПрав,
				Таблица,
				НаборыПравДляУмножения,
				НаборыОграниченийДляУмножения,
				НаборыЧтения,
				НаборыДобавления,
				НаборыИзменения,
				СсылкаНаОбъект);
			
			ДобавитьНаборыДляПрава(
				"Изменение",
				ЗависимостиПрав,
				Таблица,
				НаборыПравДляУмножения,
				НаборыОграниченийДляУмножения,
				НаборыЧтения,
				НаборыДобавления,
				НаборыИзменения,
				СсылкаНаОбъект);
				
			ДобавитьНаборыДляПрава(
				"Удаление",
				ЗависимостиПрав,
				Таблица,
				НаборыПравДляУмножения,
				НаборыОграниченийДляУмножения,
				НаборыЧтения,
				НаборыДобавления,
				НаборыИзменения,
				СсылкаНаОбъект);
			
			Если НаборыПравДляУмножения.Количество() > 0 Тогда
				
				ДобавитьНаборыЗначенийДоступа(
					НаборыПравДляУмножения, НаборыОграниченийДляУмножения, Истина);
				
				Если НаборыПравДляУмножения.Количество() > 0 Тогда
					ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПравДляУмножения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет добавить к одной таблице наборов значений доступа другую
// таблицу наборов значений доступа, либо логическим сложением, либо логическим умножением.
// Результат помещается в приемник.
//
// Параметры:
//  Приемник,
//  Источник     - ТабличнаяЧасть или ТаблицаЗначений
//                 с полями, как в таблице, возвращаемой функцией
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
//  Умножение    - Булево, определяет способ логического объединения наборов приемника и источника.
//
//  Упростить    - Булево, определяет требуется ли упрощение наборов после добавления.
//
Процедура ДобавитьНаборыЗначенийДоступа(Приемник, Знач Источник, Знач Умножение = Ложь, Знач Упростить = Ложь) Экспорт
	
	Если Источник.Количество() = 0 И Приемник.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли Умножение И ( Источник.Количество() = 0 ИЛИ  Приемник.Количество() = 0 ) Тогда
		Приемник.Очистить();
		Источник.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если Приемник.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Приемник", Источник);
		Запрос.УстановитьПараметр("Источник", Приемник);
	Иначе
		Запрос.УстановитьПараметр("Приемник", Приемник);
		Запрос.УстановитьПараметр("Источник", Источник);
	КонецЕсли;
	
	// Подготовка временных таблиц приемника.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приемник.НомерНабора + 1 КАК НомерНабора,
	|	Приемник.ВидДоступа,
	|	Приемник.ЗначениеДоступа,
	|	Приемник.Чтение,
	|	Приемник.Добавление,
	|	Приемник.Изменение,
	|	Приемник.Удаление
	|ПОМЕСТИТЬ Приемник
	|ИЗ
	|	&Приемник КАК Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваБезНормализации.НомерНабора,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Чтение
	|	КОНЕЦ КАК Чтение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Добавление
	|	КОНЕЦ КАК Добавление,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Изменение
	|	КОНЕЦ КАК Изменение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Удаление
	|	КОНЕЦ КАК Удаление,
	|	ПраваБезНормализации.ДлинаНабора
	|ПОМЕСТИТЬ ПраваНаборовПриемника
	|ИЗ
	|	(ВЫБРАТЬ
	|		Приемник.НомерНабора КАК НомерНабора,
	|		МАКСИМУМ(Приемник.Чтение) КАК Чтение,
	|		МАКСИМУМ(Приемник.Добавление) КАК Добавление,
	|		МАКСИМУМ(Приемник.Изменение) КАК Изменение,
	|		МАКСИМУМ(Приемник.Удаление) КАК Удаление,
	|		КОЛИЧЕСТВО(Приемник.НомерНабора) КАК ДлинаНабора
	|	ИЗ
	|		Приемник КАК Приемник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Приемник.НомерНабора) КАК ПраваБезНормализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Приемник.НомерНабора) КАК НомерНабораПриемника
	|ПОМЕСТИТЬ Максимальный
	|ИЗ
	|	Приемник КАК Приемник";
	
	// Подготовка временных таблиц источника.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	Источник.НомерНабора + 1 КАК НомерНабора,
	|	Источник.ВидДоступа,
	|	Источник.ЗначениеДоступа,
	|	Источник.Чтение,
	|	Источник.Добавление,
	|	Источник.Изменение,
	|	Источник.Удаление
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Источник КАК Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваБезНормализации.НомерНабора,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Чтение
	|	КОНЕЦ КАК Чтение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Добавление
	|	КОНЕЦ КАК Добавление,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Изменение
	|	КОНЕЦ КАК Изменение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Удаление
	|	КОНЕЦ КАК Удаление,
	|	ПраваБезНормализации.ДлинаНабора
	|ПОМЕСТИТЬ ПраваНаборовИсточника
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.НомерНабора КАК НомерНабора,
	|		МАКСИМУМ(Источник.Чтение) КАК Чтение,
	|		МАКСИМУМ(Источник.Добавление) КАК Добавление,
	|		МАКСИМУМ(Источник.Изменение) КАК Изменение,
	|		МАКСИМУМ(Источник.Удаление) КАК Удаление,
	|		МАКСИМУМ(Источник.НомерНабора) КАК ДлинаНабора
	|	ИЗ
	|		Источник КАК Источник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Источник.НомерНабора) КАК ПраваБезНормализации";
	
	// Выполнение операции логического сложения или логического умножения.
	Если Умножение Тогда
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	(Приемник.НомерНабора - 1) * Максимальный.НомерНабораПриемника + Источник.НомерНабора КАК НомерНабора,
		|	Приемник.НомерНабора КАК НомерНабораПриемника,
		|	Источник.НомерНабора КАК НомерНабораИсточника,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Чтение
		|				И ПраваНаборовИсточника.Чтение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Чтение,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Добавление
		|				И ПраваНаборовИсточника.Добавление
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Добавление,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Изменение
		|				И ПраваНаборовИсточника.Изменение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Изменение,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Удаление
		|				И ПраваНаборовИсточника.Удаление
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удаление,
		|	ПраваНаборовПриемника.ДлинаНабора + ПраваНаборовИсточника.ДлинаНабора КАК ДлинаНабора
		|ПОМЕСТИТЬ ПраваУмноженныхНаборов
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|			ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ПО (ПраваНаборовПриемника.Чтение
		|					И ПраваНаборовИсточника.Чтение
		|				ИЛИ ПраваНаборовПриемника.Добавление
		|					И ПраваНаборовИсточника.Добавление
		|				ИЛИ ПраваНаборовПриемника.Изменение
		|					И ПраваНаборовИсточника.Изменение
		|				ИЛИ ПраваНаборовПриемника.Удаление
		|					И ПраваНаборовИсточника.Удаление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
		Если НЕ Упростить Тогда
			Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
			"ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Приемник.ВидДоступа,
			|	Приемник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приемник КАК Приемник
			|		ПО ПраваУмноженныхНаборов.НомерНабораПриемника = Приемник.НомерНабора
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Источник.ВидДоступа,
			|	Источник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
			|		ПО ПраваУмноженныхНаборов.НомерНабораИсточника = Источник.НомерНабора";
		Иначе
			Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
			"ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Приемник.ВидДоступа,
			|	Приемник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление,
			|	ПраваУмноженныхНаборов.ДлинаНабора
			|ПОМЕСТИТЬ ВсеНаборы
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приемник КАК Приемник
			|		ПО ПраваУмноженныхНаборов.НомерНабораПриемника = Приемник.НомерНабора
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Источник.ВидДоступа,
			|	Источник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление,
			|	ПраваУмноженныхНаборов.ДлинаНабора
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
			|		ПО ПраваУмноженныхНаборов.НомерНабораИсточника = Источник.НомерНабора";
		КонецЕсли;
	ИначеЕсли НЕ Упростить Тогда
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Приемник.НомерНабора КАК НомерНабора,
		|	Приемник.ВидДоступа,
		|	Приемник.ЗначениеДоступа,
		|	ПраваНаборовПриемника.Чтение,
		|	ПраваНаборовПриемника.Добавление,
		|	ПраваНаборовПриемника.Изменение,
		|	ПраваНаборовПриемника.Удаление
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.НомерНабора + Максимальный.НомерНабораПриемника,
		|	Источник.ВидДоступа,
		|	Источник.ЗначениеДоступа,
		|	ПраваНаборовИсточника.Чтение,
		|	ПраваНаборовИсточника.Добавление,
		|	ПраваНаборовИсточника.Изменение,
		|	ПраваНаборовИсточника.Удаление
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|		ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
	Иначе
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Приемник.НомерНабора КАК НомерНабора,
		|	Приемник.ВидДоступа,
		|	Приемник.ЗначениеДоступа,
		|	ПраваНаборовПриемника.Чтение,
		|	ПраваНаборовПриемника.Добавление,
		|	ПраваНаборовПриемника.Изменение,
		|	ПраваНаборовПриемника.Удаление,
		|	ПраваНаборовПриемника.ДлинаНабора
		|ПОМЕСТИТЬ ВсеНаборы
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.НомерНабора + Максимальный.НомерНабораПриемника,
		|	Источник.ВидДоступа,
		|	Источник.ЗначениеДоступа,
		|	ПраваНаборовИсточника.Чтение,
		|	ПраваНаборовИсточника.Добавление,
		|	ПраваНаборовИсточника.Изменение,
		|	ПраваНаборовИсточника.Удаление,
		|	ПраваНаборовИсточника.ДлинаНабора
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|		ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если НЕ Упростить Тогда
		
		Если ТипЗнч(Приемник) = Тип("ТаблицаЗначений") Тогда
			// Подготовка результата с избавлением от типа NULL в колонках таблицы значений.
			НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			Приемник = НаборЗаписей.Выгрузить(, "НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление");
		Иначе
			Приемник.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Подготовка номеров всех наборов для определения копий наборов по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеНаборы.НомерНабора,
	|	ВсеНаборы.Чтение,
	|	ВсеНаборы.Добавление,
	|	ВсеНаборы.Изменение,
	|	ВсеНаборы.Удаление,
	|	ВсеНаборы.ДлинаНабора
	|ПОМЕСТИТЬ ВсеНомераНаборов
	|ИЗ
	|	ВсеНаборы КАК ВсеНаборы";
	
	// Определение копий наборов в пределах прав.
	// "Копии" возникают из-за правил раскрытия скобок в логических выражениях:
	//  Для наборов в пределах права и наборов разных прав:
	//     X  И  X = X,
	//     X ИЛИ X = X, где X - набор строк-аргументов.
	//  Только для наборов в пределах права:
	//     (а И б И в) ИЛИ (а И б) = (а И б), где а,б,в - строки-аргументы наборов.
	// Исходя из этих правил одинаковые строки в наборе и одинаковые наборы можно удалить.
	//
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуЧтение
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Чтение)
	|			И (ВсеНомераНаборов2.Чтение)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Чтение
	|									И ВсеНаборы2.Чтение
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Чтение
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуДобавление
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Добавление)
	|			И (ВсеНомераНаборов2.Добавление)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Добавление
	|									И ВсеНаборы2.Добавление
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Добавление
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуИзменение
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Изменение)
	|			И (ВсеНомераНаборов2.Изменение)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Изменение
	|									И ВсеНаборы2.Изменение
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Изменение
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуУдаление
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Удаление)
	|			И (ВсеНомераНаборов2.Удаление)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Удаление
	|									И ВсеНаборы2.Удаление
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Удаление
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))";
	
	// Выбор номеров наборов копий по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерКопииНабора) КАК НомерКопииНабора,
	|	ИСТИНА КАК Чтение,
	|	ЛОЖЬ КАК Добавление,
	|	ЛОЖЬ КАК Изменение,
	|	ЛОЖЬ КАК Удаление
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравам
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуЧтение.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуЧтение.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуЧтение КАК НомераКопийВсехНаборовПоПравуЧтение
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуЧтение.НомерНабора, НомераКопийВсехНаборовПоПравуЧтение.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуЧтение КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуЧтение
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуДобавление.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуДобавление.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуДобавление КАК НомераКопийВсехНаборовПоПравуДобавление
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуДобавление.НомерНабора, НомераКопийВсехНаборовПоПравуДобавление.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуДобавление КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуДобавление
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуИзменение.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуИзменение.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуИзменение КАК НомераКопийВсехНаборовПоПравуИзменение
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуИзменение.НомерНабора, НомераКопийВсехНаборовПоПравуИзменение.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуИзменение КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуИзменение
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуУдаление.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуУдаление.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуУдаление КАК НомераКопийВсехНаборовПоПравуУдаление
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуУдаление.НомерНабора, НомераКопийВсехНаборовПоПравуУдаление.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуУдаление КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуУдаление
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерКопииНабора) ЕСТЬ NULL )";
	
	// Подготовка номеров всех наборов для определения копий наборов между правами.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКопийВсехНаборовПоПравам.НомерКопииНабора КАК НомерНабора,
	|	НомераКопийВсехНаборовПоПравам.Чтение,
	|	НомераКопийВсехНаборовПоПравам.Добавление,
	|	НомераКопийВсехНаборовПоПравам.Изменение,
	|	НомераКопийВсехНаборовПоПравам.Удаление
	|ПОМЕСТИТЬ ВсеНомераНаборовПоПравам
	|ИЗ
	|	НомераКопийВсехНаборовПоПравам КАК НомераКопийВсехНаборовПоПравам";
	
	// Определение копий наборов.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	ВсеНомераНаборовПоПравам1.НомерНабора,
	|	МИНИМУМ(ВсеНомераНаборовПоПравам2.НомерНабора) КАК НомерКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборов
	|ИЗ
	|	ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам2
	|		ПО ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборовПоПравам2.НомерНабора
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.НомерНабора = ВсеНомераНаборовПоПравам1.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборовПоПравам1.НомерНабора
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.НомерНабора = ВсеНомераНаборовПоПравам2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеНомераНаборовПоПравам1.НомерНабора";
	
	// Выбор номеров наборов со сжатием по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	НомераКопийВсехНаборов.НомерКопииНабора КАК НомерНабора,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Чтение) КАК Чтение,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Добавление) КАК Добавление,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Изменение) КАК Изменение,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Удаление) КАК Удаление
	|ПОМЕСТИТЬ НомераНаборовСПравами
	|ИЗ
	|	ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераКопийВсехНаборов КАК НомераКопийВсехНаборов
	|		ПО ВсеНомераНаборовПоПравам.НомерНабора = НомераКопийВсехНаборов.НомерНабора
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераКопийВсехНаборов.НомерКопииНабора";
	
	// Выбор наборов и помещение в приемник.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	НомераНаборовСПравами.НомерНабора,
	|	ВсеНаборы.ВидДоступа,
	|	ВсеНаборы.ЗначениеДоступа,
	|	НомераНаборовСПравами.Чтение,
	|	НомераНаборовСПравами.Добавление,
	|	НомераНаборовСПравами.Изменение,
	|	НомераНаборовСПравами.Удаление
	|ИЗ
	|	НомераНаборовСПравами КАК НомераНаборовСПравами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы
	|		ПО НомераНаборовСПравами.НомерНабора = ВсеНаборы.НомерНабора";
	
	Если ТипЗнч(Приемник) = Тип("ТаблицаЗначений") Тогда
		// Подготовка результата с избавлением от типа NULL в колонках таблицы значений.
		НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		Приемник = НаборЗаписей.Выгрузить(, "НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление");
	Иначе
		Приемник.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует или отменяет регистрацию объектов, которые должны быть исключены из
// обновления зависимых наборов значений доступа в событии ПриИзмененииНаборовЗначенийДоступа.
//
//  Как правило, процедура не требуется, т.к. обновление наборов значений доступа не происходит
// если они действительно не изменены, а это можно использовать при проектировании зависимостей.
//  Процедура может быть использована для предотвращения зацикливания в сложно зависимых
// наборах значений доступа.
//  В основном имеет смысл только для объектов, использующих табличную часть НаборыЗначенийДоступа
// с шаблоном #ПоНаборамЗначений
//  Регистрация необходима, например в таких случаях, когда наборы значений доступа
// задачи зависят от бизнес-процесса и сохраняются в табличной части задачи
// НаборыЗначенийДоступа. При этом запись задачи завершающей бизнес-процесс
// вызывает запись бизнес-процесса, который в свою очередь пытается обновить
// наборы значений доступа задачи и, как следствие, пытается её перезаписать
// в транзакции ПриЗаписи самой задачи. Это может привести к ошибке, т.к. задачу
// заблокированную в форме нельзя повторно заблокировать.
//  Чтобы исключить эту ситуацию (или подобные) необходимо, например:
//  1) ПередЗаписьюНаСервере в форме задачи
//     зарегистрировать ссылку на задачу для ручного обновления зависимых наборов,
//  2) ПослеЗаписиНаСервере в форме задачи
//     - отменить регистрацию ссылки на задачу для ручного обновления зависимых наборов
//     - вызвать процедуру УправлениеДоступом.ОбновитьНаборыЗначенийДоступа(<Ссылка на задачу>)
//     - выполнить метод Прочитать() формы задачи, чтобы получить обновленную версию объекта
//  Если задача выполняется программно, то нужно (пример):
//  1) перед вызовом метода выполнить задачу
//     зарегистрировать ссылку на задачу для ручного обновления зависимых наборов
//  2) после вызова метода выполнить задачу
//     - отменить регистрацию ссылки на задачу для ручного обновления зависимых наборов
//     - вызвать процедуру УправлениеДоступом.ОбновитьНаборыЗначенийДоступа(<Ссылка на задачу>)
//
// Параметры:
//  Ссылка           - СправочникСсылка.*, ДокументСсылка.*, ...
//  Зарегистрировать - Булево - если Истина объект будет зарегистрирован, если Ложь, регистрация будет отменена.
//
Процедура РучноеОбновлениеЗависимыхНаборовЗначенийДоступа(Ссылка, Зарегистрировать) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеЗначения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбъектыРучногоОбновленияЗависимыхНаборовЗначенийДоступа");
	ОбъектыРучногоОбновления = ?(ТипЗнч(ХранилищеЗначения) = Тип("ХранилищеЗначения"), ХранилищеЗначения.Получить(), Неопределено);
	
	Если ОбъектыРучногоОбновления = Неопределено Тогда
		ОбъектыРучногоОбновления = Новый ТаблицаЗначений;
		ОбъектыРучногоОбновления.Колонки.Добавить("КлючСеанса");
		ОбъектыРучногоОбновления.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	КлючСеанса = УправлениеДоступомСлужебныйПовтИсп.КлючСеанса();
	
	Индекс = ОбъектыРучногоОбновления.Количество()-1;
	РегистрацияНеНайдена = Истина;
	
	Пока Индекс >= 0 Цикл
		Если ОбъектыРучногоОбновления[Индекс].КлючСеанса <> КлючСеанса Тогда
			ОбъектыРучногоОбновления.Удалить(Индекс);
			
		ИначеЕсли ОбъектыРучногоОбновления[Индекс].Ссылка = Ссылка Тогда
			
			Если Зарегистрировать Тогда
				РегистрацияНеНайдена = Ложь;
			Иначе
				ОбъектыРучногоОбновления.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если Зарегистрировать И РегистрацияНеНайдена Тогда
		Строка = ОбъектыРучногоОбновления.Добавить();
		Строка.КлючСеанса   = КлючСеанса;
		Строка.Ссылка       = Ссылка;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбъектыРучногоОбновленияЗависимыхНаборовЗначенийДоступа", , Новый ХранилищеЗначения(ОбъектыРучногоОбновления));
	
КонецПроцедуры

// Выполняет обновление наборов значений доступа объекта, если они изменились.
//  Наборы обновляются в табличной части (если используется) и
// в регистре сведений НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка, ДокументСсылка, ...
//
Процедура ОбновитьНаборыЗначенийДоступа(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры.
				           |Тип объекта ""%1""
				           |не найден в подписке на события
				           |""Записать наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи наборов значений доступа:
				           |в регистре сведений НаборыЗначенийДоступа в измерении Объект
				           |не задан тип %1'"),
				СсылкаНаОбъект.Метаданные().ПолноеИмя()));
	КонецЕсли;
	
	Если СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
		// Изменение объекта не требуется
		УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(Объект);
	Иначе
		// Изменение объекта требуется
		Таблица = УправлениеДоступомСлужебный.ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
		
		Если УправлениеДоступомСлужебный.НаборыЗначенийДоступаТабличнойЧастиИзменены(
		         СсылкаНаОбъект, Таблица) Тогда
		
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьЗависимыеНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("НаборыЗначенийДоступаТабличнойЧастиЗаполнены");
			Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписок ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей* на событие ПередЗаписью
// вызывает заполнение значений доступа табличной части объекта НаборыЗначенийДоступа,
// когда для ограничения доступа к самому объекту используется шаблон #ПоНаборамЗначений.
//  Возможен случай использования подсистемы Управление доступом, когда
// указанной подписки не существует, если для указанной цели наборы не применяются.
//
// Обработчик подписки на событие ПередЗаписью для типов:
//  СправочникОбъект
//  ДокументОбъект
//  ПланВидовХарактеристикОбъект
//  ПланСчетовОбъект
//  ПланВидовРасчетаОбъект
//  БизнесПроцессОбъект
//  ЗадачаОбъект
//  ПланОбменаОбъект
//
Процедура ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей(Объект, Отказ = Неопределено, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьНаборыЗначенийДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ (  ПривилегированныйРежим()
	         И Объект.ДополнительныеСвойства.Свойство(
	               "НаборыЗначенийДоступаТабличнойЧастиЗаполнены")) Тогда
		
		Объект.НаборыЗначенийДоступа.Загрузить(
			УправлениеДоступомСлужебный.ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в переопределяемом модуле

// Возвращает структуру для удобства описания поставляемых профилей.
//
//  Чтобы указать предустановленный вид доступа,
// нужно в представлении задать строку Предустановленный.
//
//  Чтобы добавить значение доступа нужно указать
// полное имя предопределенного элемента, например,
// "Справочник.ГруппыПользователей.ВсеПользователи".
// 
Функция НовоеОписаниеПрофиляГруппДоступа() Экспорт
	
	НовоеОписание = Новый Структура;
	НовоеОписание.Вставить("Идентификатор",   "");
	НовоеОписание.Вставить("Наименование",    "");
	НовоеОписание.Вставить("Описание",        "");
	НовоеОписание.Вставить("Роли",            Новый Массив);
	НовоеОписание.Вставить("ВидыДоступа",     Новый СписокЗначений);
	НовоеОписание.Вставить("ЗначенияДоступа", Новый СписокЗначений);
	
	Возврат НовоеОписание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для обновления вспомогательных данных

// Перезаписывает группы значения доступа и виды доступа значения доступа
// в РегистрСведений.ГруппыЗначенийДоступа, используя объект или ссылку на объект.
//  Вызывается из УправлениеДоступомСлужебный.ЗаписатьГруппыИВидыДоступа(), но может быть вызвана
// из любого места, например, при включении ограничения доступа на уровне записи.
//
// В частности используется для обновления группировок пользователей,
// при изменении источника данных, используемого в тексте запроса, указанного
// в функции "УправлениеДоступомПереопределяемый.ТаблицаГруппИсполнителей()".
// Способ вызова из прикладного кода:
//   УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыПользователей.ВсеПользователи);
//
// Параметры:
//  Объект - объект или ссылка на объект (обычно Справочник<Объект|Ссылка>).
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//                 Ссылка объекта должна быть типа ОписаниеТипов измерения Значение
//                 в РегистрСведений.ГруппыЗначенийДоступа.
// 
Процедура ЗаписатьГруппыИВидыДоступа(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыПользователей") ИЛИ
	     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
		// Проверка, что тип объектов авторизации совпадает с использованным в группах доступа
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПРЕДСТАВЛЕНИЕ(ГруппыДоступаПользователи.Ссылка) КАК СсылкаПредставление,
			|	ГруппыДоступаПользователи.Ссылка.ТипПользователей
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
			|		ПО (ГруппыДоступаПользователи.Пользователь = &ВнешнийПользователь)
			|			И (ВнешниеПользователи.Ссылка = &ВнешнийПользователь)
			|			И (ГруппыДоступаПользователи.Ссылка.ТипПользователей <> НЕОПРЕДЕЛЕНО)
			|			И (ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) <> ТИПЗНАЧЕНИЯ(ГруппыДоступаПользователи.Ссылка.ТипПользователей))");
			Запрос.УстановитьПараметр("ВнешнийПользователь", СсылкаНаОбъект);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПредставлениеДругогоТипаОбъектаАвторизации = Выборка.ТипПользователей.Метаданные().Синоним;
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Внешний пользователь ""%1""
					           |используется в группе доступа ""%2""
					           |с другим типом объектов информационной базы ""%3"".'"),
					Строка(СсылкаНаОбъект),
					Выборка.СсылкаПредставление,
					ПредставлениеДругогоТипаОбъектаАвторизации);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПРЕДСТАВЛЕНИЕ(ГруппыДоступаПользователи.Ссылка) КАК СсылкаПредставление,
			|	ГруппыДоступаПользователи.Ссылка.ТипПользователей
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
			|		ПО (ГруппыДоступаПользователи.Пользователь = &ГруппаВнешнихПользователей)
			|			И (ГруппыВнешнихПользователей.Ссылка = &ГруппаВнешнихПользователей)
			|			И (ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> НЕОПРЕДЕЛЕНО)
			|			И (ГруппыДоступаПользователи.Ссылка.ТипПользователей <> НЕОПРЕДЕЛЕНО)
			|			И (ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> ГруппыДоступаПользователи.Ссылка.ТипПользователей)");
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", СсылкаНаОбъект);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПредставлениеДругогоТипаОбъектаАвторизации = Выборка.ТипПользователей.Метаданные().Синоним;
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Группа внешних пользователей ""%1""
					           |используется в группе доступа ""%2""
					           |с другим типом объектов информационной базы ""%3"".'"),
					Строка(СсылкаНаОбъект),
					Выборка.СсылкаПредставление,
					ПредставлениеДругогоТипаОбъектаАвторизации);
			КонецЕсли;
		КонецЕсли;
		
		ИзмененныеПользователи = Новый Массив;
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
		     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			
			ИзмененныеПользователи.Добавить(СсылкаНаОбъект);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка таблицы подчиненности пользователей.
		Если НЕ ДобавлятьРуководителямДоступПодчиненных()
		 ИЛИ НЕ УправлениеДоступомПереопределяемый.ТаблицаПодчиненностиПользователей(Запрос.МенеджерВременныхТаблиц) Тогда
			//
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	Пользователи.Ссылка КАК ПодчиненныйПользователь
			|ПОМЕСТИТЬ ТаблицаПодчиненностиПользователей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	ЛОЖЬ";
			Запрос.Выполнить();
		КонецЕсли;
		
		// 1. Подготовка данных для отбора групп доступа авторизованного пользователя в шаблоне ограничения доступа.
		//
		//    <состав поля ЗначениеДоступа>             <cостав поля ГруппаДоступа>
		//
		//    Пользователь                              - тот же Пользователь
		//                                              - ГруппыПользователей            того же пользователя
		//                                              - ПодчиненныеПользователи        того же пользователя
		//                                              - ГруппыПодчиненныхПользователей того же пользователя
		//    {cравнение с &ТекущийПользователь}        {cравнение с ГруппыДоступаУчастники.Пользователь}
		//    {cравнение с &ТекущийПользователь}        {если установлено ДобавлятьРуководителямДоступПодчиненных,
		//                                               тогда отбор подчиненных пользователей для расширения списка
		//                                               "текущих пользователей" при проверке по виду доступа Пользователи}
		//
		//    ВнешнийПользователь                       - тот же ВнешнийПользователь
		//                                              - ГруппыВнешнихПользователей            того же внешнего пользователя
		//                                              - ПодчиненныеВнешниеПользователи        того же внешнего пользователя
		//                                              - ГруппыПодчиненныхВнешнихПользователей того же внешнего пользователя
		//    {cравнение с &ТекущийВнешнийПользователь} {cравнение с ГруппыДоступаУчастники.Пользователь}
		//    {cравнение с &ТекущийВнешнийПользователь} {если установлено ДобавлятьРуководителямДоступПодчиненных
		//                                               тогда отбор подчиненных внешних пользователей для расширения списка
		//                                               "текущих внешних пользователей" при проверке по виду доступа ВнешниеПользователи}
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПодчиненностиПользователей.Пользователь КАК ЗначениеДоступа,
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаДоступа
		|ПОМЕСТИТЬ НовыеДанныеДляОтбораГруппДоступа
		|ИЗ
		|	ТаблицаПодчиненностиПользователей КАК ТаблицаПодчиненностиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь = СоставыГруппПользователей.Пользователь
		|			И (ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи))
		|			И (ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.Пользователь) = ТИП(Справочник.Пользователи))
		|			И (ТаблицаПодчиненностиПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаПодчиненностиПользователей.Пользователь,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	ТаблицаПодчиненностиПользователей КАК ТаблицаПодчиненностиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь = СоставыГруппПользователей.Пользователь
		|			И (ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи))
		|			И (ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи))
		|			И (ТаблицаПодчиненностиПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПодчиненностиПользователей";
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("ВсеПустыеСсылки",
			УправлениеДоступомСлужебныйПовтИсп.ВсеПустыеСсылки());
		
		// 2. Подготовка данных для работы ограничений по видам доступа Пользователи и ВнешниеПользователи
		//    (данные не учитывают подчиненность пользователей)
		//
		//    <состав поля ЗначениеДоступа>             <cостав поля ГруппаДоступа>
		//
		//    а) для вида доступа Пользователи
		//    {cравнение с Т.<поле>}                    {cравнение со ЗначенияГруппДоступа.ЗначениеДоступа}
		//                                              {cравнение с &ТекущийПользователь, когда не ДобавлятьРуководителямДоступПодчиненных}}
		//
		//    Пользователь                              - тот же Пользователь
		//                                              - ГруппыПользователей того же пользователя
		//
		//    ГруппаПользователей                       - та же ГруппаПользователей
		//                                              - Пользователи той же группы пользователей
		//
		//    ГруппаИсполнителей                        - Пользователи                       той же группы исполнителей
		//                                              - Группы пользователей               той же группы исполнителей
		//                                              - Группы пользователей пользователей той же группы исполнителей
		//                                              - Пользователи групп пользователей   той же группы исполнителей
		//
		//    б) для вида доступа ВнешниеПользователи
		//    {cравнение с Т.<поле>}                    {cравнение со ЗначенияГруппДоступа.ЗначениеДоступа}
		//                                              {cравнение с &ТекущийВнешнийПользователь, когда не ДобавлятьРуководителямДоступПодчиненных}
		//
		//    ВнешнийПользователь                       - тот же ВнешнийПользователь
		//                                              - ГруппыВнешнихПользователей того же внешнего пользователя
		//
		//    ГруппаВнешнихПользователей                - та же ГруппаВнешнихПользователей
		//                                              - Внешние пользователи той же группы внешних пользователей
		//
		//    ОбъектАвторизации                         - ВнешнийПользователь                              того же объекта авторизации
		//                                              - ГруппыВнешнихПользователей внешнего пользователя того же объекта авторизации
		//
		//    ГруппаИсполнителей                        - Внешние пользователи                               той же группы исполнителей
		//                                              - Группы внешних пользователей                       той же группы исполнителей
		//                                              - Группы внешних пользователей внешних пользователей той же группы исполнителей
		//                                              - Внешние пользователи групп внешних пользователей   той же группы исполнителей
		
		// Подготовка таблицы дополнительных групп пользователей - групп доступа исполнителей (например, задач).
		Если НЕ УправлениеДоступомПереопределяемый.ТаблицаГруппИсполнителей(Запрос.МенеджерВременныхТаблиц) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК ГруппаИсполнителей,
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ВсеПользователиГруппИсполнителей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВнешниеПользователи.Ссылка КАК ГруппаИсполнителей,
			|	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь
			|ПОМЕСТИТЬ ВсеВнешниеПользователиГруппИсполнителей
			|ИЗ
			|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
			|ГДЕ
			|	ЛОЖЬ";
		Иначе
			// Получение всех пользователей групп исполнителей:
			//   пользователи                       групп исполнителей
			// + группы пользователей               групп исполнителей
			// + группы пользователей пользователей групп исполнителей
			// + пользователи групп пользователей   групп исполнителей
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаГруппИсполнителей.ГруппаИсполнителей,
			|	ТаблицаГруппИсполнителей.Пользователь
			|ПОМЕСТИТЬ ПользователиГруппИсполнителей
			|ИЗ
			|	ТаблицаГруппИсполнителей КАК ТаблицаГруппИсполнителей
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыПользователей)
			|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.Пользователи)
			|	И (НЕ ТаблицаГруппИсполнителей.ГруппаИсполнителей В (&ВсеПустыеСсылки))
			|	И (НЕ(ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.ГруппыПользователей)
			|				И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.Пользователи)))
			|	И (НЕ ТаблицаГруппИсполнителей.Пользователь В (&ВсеПустыеСсылки))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаГруппИсполнителей.ГруппаИсполнителей КАК ГруппаИсполнителей,
			|	ТаблицаГруппИсполнителей.Пользователь КАК ВнешнийПользователь
			|ПОМЕСТИТЬ ВнешниеПользователиГруппИсполнителей
			|ИЗ
			|	ТаблицаГруппИсполнителей КАК ТаблицаГруппИсполнителей
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыВнешнихПользователей)
			|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ВнешниеПользователи)
			|	И (НЕ ТаблицаГруппИсполнителей.ГруппаИсполнителей В (&ВсеПустыеСсылки))
			|	И (НЕ(ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.ГруппыВнешнихПользователей)
			|				И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.ВнешниеПользователи)))
			|	И (НЕ ТаблицаГруппИсполнителей.Пользователь В (&ВсеПустыеСсылки))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаГруппИсполнителей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	ПользователиГруппИсполнителей.Пользователь
			|ПОМЕСТИТЬ ВсеПользователиГруппИсполнителей
			|ИЗ
			|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставыГруппПользователей.ГруппаПользователей
			|ИЗ
			|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО ПользователиГруппИсполнителей.Пользователь = СоставыГруппПользователей.Пользователь
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО ПользователиГруппИсполнителей.Пользователь = СоставыГруппПользователей.ГруппаПользователей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиГруппИсполнителей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь
			|ПОМЕСТИТЬ ВсеВнешниеПользователиГруппИсполнителей
			|ИЗ
			|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставыГруппПользователей.ГруппаПользователей
			|ИЗ
			|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь = СоставыГруппПользователей.Пользователь
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь = СоставыГруппПользователей.ГруппаПользователей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВнешниеПользователиГруппИсполнителей";
		КонецЕсли;
		// Подготовка всех новых данных
		Запрос.Текст = Запрос.Текст + ";
		|" +
		"ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь КАК ЗначениеДоступа,
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаДоступа
		|ПОМЕСТИТЬ НовыеЗаписиПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.ГруппаПользователей,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.ГруппаПользователей,
		|	СоставыГруппПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВсеПользователиГруппИсполнителей.ГруппаИсполнителей,
		|	ВсеПользователиГруппИсполнителей.Пользователь
		|ИЗ
		|	ВсеПользователиГруппИсполнителей КАК ВсеПользователиГруппИсполнителей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи),
		|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВсеПользователиГруппИсполнителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь КАК ЗначениеДоступа,
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаДоступа
		|ПОМЕСТИТЬ НовыеЗаписиВнешнихПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.ГруппаПользователей,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.ГруппаПользователей,
		|	СоставыГруппПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СоставыГруппПользователей.Пользователь КАК Справочник.ВнешниеПользователи).ОбъектАвторизации,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|	И (НЕ ВЫРАЗИТЬ(СоставыГруппПользователей.Пользователь КАК Справочник.ВнешниеПользователи).ОбъектАвторизации В (&ВсеПустыеСсылки))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВсеВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
		|	ВсеВнешниеПользователиГруппИсполнителей.ВнешнийПользователь
		|ИЗ
		|	ВсеВнешниеПользователиГруппИсполнителей КАК ВсеВнешниеПользователиГруппИсполнителей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи),
		|	ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВсеВнешниеПользователиГруппИсполнителей";
		Запрос.Выполнить();
		
		// Получение записей для удаления.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиИГруппыПользователей.ВидДоступа,
		|	ПользователиИГруппыПользователей.ЗначениеДоступа,
		|	ПользователиИГруппыПользователей.ТолькоВидДоступа,
		|	ПользователиИГруппыПользователей.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеДанныеДляОтбораГруппДоступа КАК НовыеДанныеДляОтбораГруппДоступа
		|		ПО ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа
		|			И ПользователиИГруппыПользователей.ГруппаДоступа = НовыеДанныеДляОтбораГруппДоступа.ГруппаДоступа
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
		|	И НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользователиИГруппыПользователей.ВидДоступа,
		|	ПользователиИГруппыПользователей.ЗначениеДоступа,
		|	ПользователиИГруппыПользователей.ТолькоВидДоступа,
		|	ПользователиИГруппыПользователей.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписиПользователей КАК НовыеЗаписиПользователей
		|		ПО ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиПользователей.ЗначениеДоступа
		|			И ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиПользователей.ГруппаДоступа
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи)
		|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
		|	И НовыеЗаписиПользователей.ЗначениеДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользователиИГруппыПользователей.ВидДоступа,
		|	ПользователиИГруппыПользователей.ЗначениеДоступа,
		|	ПользователиИГруппыПользователей.ТолькоВидДоступа,
		|	ПользователиИГруппыПользователей.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписиВнешнихПользователей КАК НовыеЗаписиВнешнихПользователей
		|		ПО ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиВнешнихПользователей.ЗначениеДоступа
		|			И ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиВнешнихПользователей.ГруппаДоступа
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи)
		|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
		|	И НовыеЗаписиВнешнихПользователей.ЗначениеДоступа ЕСТЬ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		МенеджерЗаписи = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьМенеджерЗаписи();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			Если ( ТипЗнч(МенеджерЗаписи.ЗначениеДоступа) = Тип("СправочникСсылка.Пользователи") ИЛИ
				   ТипЗнч(МенеджерЗаписи.ЗначениеДоступа) = Тип("СправочникСсылка.ВнешниеПользователи") ) И
			     ИзмененныеПользователи.Найти(МенеджерЗаписи.ЗначениеДоступа) = Неопределено Тогда
				
				ИзмененныеПользователи.Добавить(МенеджерЗаписи.ЗначениеДоступа);
			КонецЕсли;
			
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		// Получение записей для добавления.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка) КАК ВидДоступа,
		|	НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа,
		|	ЛОЖЬ КАК ТолькоВидДоступа,
		|	НовыеДанныеДляОтбораГруппДоступа.ГруппаДоступа
		|ИЗ
		|	НовыеДанныеДляОтбораГруппДоступа КАК НовыеДанныеДляОтбораГруппДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = НовыеДанныеДляОтбораГруппДоступа.ГруппаДоступа)
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи),
		|	НовыеЗаписиПользователей.ЗначениеДоступа,
		|	ЛОЖЬ,
		|	НовыеЗаписиПользователей.ГруппаДоступа
		|ИЗ
		|	НовыеЗаписиПользователей КАК НовыеЗаписиПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиПользователей.ЗначениеДоступа)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиПользователей.ГруппаДоступа)
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи),
		|	НовыеЗаписиВнешнихПользователей.ЗначениеДоступа,
		|	ЛОЖЬ,
		|	НовыеЗаписиВнешнихПользователей.ГруппаДоступа
		|ИЗ
		|	НовыеЗаписиВнешнихПользователей КАК НовыеЗаписиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиВнешнихПользователей.ЗначениеДоступа)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиВнешнихПользователей.ГруппаДоступа)
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа ЕСТЬ NULL ";
		
		НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для каждого Запись Из НаборЗаписей Цикл
			Если ( ТипЗнч(Запись.ЗначениеДоступа) = Тип("СправочникСсылка.Пользователи") ИЛИ
			       ТипЗнч(Запись.ЗначениеДоступа) = Тип("СправочникСсылка.ВнешниеПользователи") ) И
			     ИзмененныеПользователи.Найти(Запись.ЗначениеДоступа) = Неопределено Тогда
				
				ИзмененныеПользователи.Добавить(Запись.ЗначениеДоступа);
			КонецЕсли;
		КонецЦикла;
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		// 3. Подготовка данных для работы ограничений по видам доступа Пользователи и ВнешниеПользователи
		//    когда ДобавлятьРуководителямДоступПодчиненных для проверки текущих пользователей
		//    (ТекущиеПользователи = ТекущийПользователь + ПодчиненныеПользователиПроверяемойГруппыДоступа)
		УправлениеДоступомСлужебный.ОбновитьПодчиненныхПользователейГруппДоступа();
		
		// Обновление ролей пользователей, для которых роли могли быть изменены.
		Если СсылкаНаОбъект = Справочники.ГруппыПользователей.ВсеПользователи ИЛИ
		     СсылкаНаОбъект = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &ПредопределеннаяГруппа");
			Запрос.УстановитьПараметр("ПредопределеннаяГруппа", СсылкаНаОбъект);
			
			ИзмененныеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;
		
		ОбновитьРолиПользователей(ИзмененныеПользователи);
	Иначе
		
		ВидыДоступа = УправлениеДоступомСлужебный.ВидыДоступаТаблицы(
			СсылкаНаОбъект.Метаданные().ПолноеИмя());
		
		ВидДоступаЧерезПраваПоЗначениямДоступа =
			  (ВидыДоступа.Количество() = 1)
			И УправлениеДоступомСлужебный.СвойстваВидаДоступа(
				ВидыДоступа[0]).ВидДоступаЧерезПраваПоЗначениямДоступа;
		
		Если ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			
			ВидДоступа = ВидыДоступа[0];
			
			// Подготовка групп доступа (родителей) значения доступа.
			НаборЗаписей = РодителиЗначенияДоступа(СсылкаНаОбъект, ВидДоступа);
			
			// Проверка изменения состава родителей.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НовыеРодители.ТолькоВидДоступа,
			|	НовыеРодители.ГруппаДоступа
			|ПОМЕСТИТЬ НовыеРодители
			|ИЗ
			|	&НовыеРодители КАК НовыеРодители
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтарыеРодители.ТолькоВидДоступа,
			|	СтарыеРодители.ГруппаДоступа
			|ПОМЕСТИТЬ СтарыеРодители
			|ИЗ
			|	РегистрСведений.ГруппыЗначенийДоступа КАК СтарыеРодители
			|ГДЕ
			|	СтарыеРодители.ВидДоступа = &ВидДоступа
			|	И СтарыеРодители.ЗначениеДоступа = &ЗначениеДоступа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЗначениеИстина
			|ИЗ
			|	СтарыеРодители КАК СтарыеРодители
			|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРодители КАК НовыеРодители
			|		ПО (НовыеРодители.ТолькоВидДоступа = СтарыеРодители.ТолькоВидДоступа)
			|			И (НовыеРодители.ГруппаДоступа = СтарыеРодители.ГруппаДоступа)
			|ГДЕ
			|	НовыеРодители.ГруппаДоступа ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	НовыеРодители КАК НовыеРодители
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРодители КАК СтарыеРодители
			|		ПО НовыеРодители.ТолькоВидДоступа = СтарыеРодители.ТолькоВидДоступа
			|			И НовыеРодители.ГруппаДоступа = СтарыеРодители.ГруппаДоступа
			|ГДЕ
			|	СтарыеРодители.ГруппаДоступа ЕСТЬ NULL ");
			Запрос.УстановитьПараметр("ВидДоступа",      ВидДоступа);
			Запрос.УстановитьПараметр("ЗначениеДоступа", СсылкаНаОбъект);
			Запрос.УстановитьПараметр("НовыеРодители",   НаборЗаписей.Выгрузить(, "ТолькоВидДоступа, ГруппаДоступа"));
			СоставРодителейИзменился = НЕ Запрос.Выполнить().Пустой();
			
			Если СоставРодителейИзменился Тогда
				
				НаборЗаписей.Записать();
				
				// Обновление состава родителей элементов в иерархии текущего значения.
				Запрос = Новый Запрос(СтрЗаменить(
				"ВЫБРАТЬ
				|	ТаблицаСИерархией.Ссылка КАК ПодчиненнаяСсылка
				|ИЗ
				|	ПодставляемаяТаблица КАК ТаблицаСИерархией
				|ГДЕ
				|	ТаблицаСИерархией.Ссылка В ИЕРАРХИИ(&ЗначениеДоступа)
				|	И ТаблицаСИерархией.Ссылка <> &ЗначениеДоступа", "ПодставляемаяТаблица", СсылкаНаОбъект.Метаданные().ПолноеИмя()));
				Запрос.УстановитьПараметр("ЗначениеДоступа", СсылкаНаОбъект);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					РодителиЗначенияДоступа(Выборка.ПодчиненнаяСсылка, ВидДоступа).Записать();
				КонецЦикла;
			КонецЕсли;
			
		Иначе
		
			НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗначениеДоступа.Установить(СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			Индекс = НаборЗаписей.Количество()-1;
			Пока Индекс >= 0 Цикл
				Если НаборЗаписей[Индекс].ВидДоступа <> ПланыВидовХарактеристик.ВидыДоступа.Пользователи
				   И НаборЗаписей[Индекс].ВидДоступа <> ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи Тогда
					НаборЗаписей.Удалить(Индекс);
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
			
			Если ОграничиватьДоступНаУровнеЗаписей() Тогда
				// Заполнение группы значений для каждого вида доступа.
				Для каждого ВидДоступа Из ВидыДоступа Цикл
					Свойства = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа);
					ПостфиксИмени = ?(Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, "", ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(ВидДоступа));
					
					Если НЕ Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа И Объект["ВидДоступа" + ПостфиксИмени] <> Истина Тогда
						// Когда значение не разрешено по виду доступа.
						Запись = НаборЗаписей.Добавить();
						Запись.ВидДоступа       = ВидДоступа;
						Запись.ЗначениеДоступа  = СсылкаНаОбъект;
						Запись.ТолькоВидДоступа = Истина;
						Запись.ГруппаДоступа    = Неопределено;
					ИначеЕсли Свойства.ВидДоступаСОднойГруппойЗначенияДоступа Тогда
						Запись = НаборЗаписей.Добавить();
						Запись.ВидДоступа       = ВидДоступа;
						Запись.ЗначениеДоступа  = СсылкаНаОбъект;
						Запись.ТолькоВидДоступа = Ложь;
						Запись.ГруппаДоступа    = Объект["ГруппаДоступа" + ПостфиксИмени];
					Иначе
						Для каждого СтрокаТЧ Из Объект["ГруппыДоступа" + ПостфиксИмени] Цикл
							Запись = НаборЗаписей.Добавить();
							Запись.ВидДоступа       = ВидДоступа;
							Запись.ЗначениеДоступа  = СсылкаНаОбъект;
							Запись.ТолькоВидДоступа = Ложь;
							Запись.ГруппаДоступа    = СтрокаТЧ["ГруппаДоступа" + ПостфиксИмени];
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если НаборЗаписей.Количество() = 0 Тогда
					// Если это условие отключить, тогда зациклится регламентное задание
					// "Заполнение данных для ограничения доступа".
					ВызватьИсключение(НСтр("ru = 'Попытка записать пустой набор групп доступа или видов доступа.'"));
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет список ролей пользователей информационной базы
// по их текущим принадлежностям к группам доступа.
//  Пользователи с ролью "ПолныеПрава" игнорируется.
// 
// Параметры:
//  МассивПользователей - Массив элементов СправочникСсылка.Пользователи,
//                        СправочникСсылка.ВнешниеПользователи.
//
Процедура ОбновитьРолиПользователей(Знач МассивПользователей) Экспорт
	
	Если НЕ ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
		// Роли устанавливаются механизмами подсистем Пользователи и ВнешниеПользователи.
		Возврат;
	КонецЕсли;
	
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователи.НайтиНеоднозначныхПользователейИБ();
	
	// Все не служебные пользователи, администраторы и внешние пользователи.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ПОМЕСТИТЬ ВсеПользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&Пользователи)
	|	И Пользователи.Служебный = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.Ссылка В(&Пользователи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПользователи.Пользователь,
	|	ВЫБОР
	|		КОГДА НЕ Пользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА Пользователи.ИдентификаторПользователяИБ
	|		КОГДА НЕ ВнешниеПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВнешниеПользователи.ИдентификаторПользователяИБ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	ВсеПользователи КАК ВсеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ВсеПользователи.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ПО (ВнешниеПользователи.Ссылка = ВсеПользователи.Пользователь)");
	Запрос.УстановитьПараметр("Пользователи", МассивПользователей);
	ОбновляемыеПользователи = Запрос.Выполнить().Выгрузить();
	
	// Подготовка таблицы старых ролей пользователей.
	СтарыеРолиПользователей = Новый ТаблицаЗначений;
	СтарыеРолиПользователей.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи"));
	СтарыеРолиПользователей.Колонки.Добавить("Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	
	ТекущийНомер = ОбновляемыеПользователи.Количество() - 1;
	Пока ТекущийНомер >= 0 Цикл
		// Проверка необходимости обработки пользователя.
		ИдентификаторПользователяИБ = ОбновляемыеПользователи[ТекущийНомер].ИдентификаторПользователяИБ;
		Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		Если ПользовательИБ = Неопределено ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда
			ОбновляемыеПользователи.Удалить(ОбновляемыеПользователи[ТекущийНомер]);
		Иначе
			Для каждого Роль Из ПользовательИБ.Роли Цикл
				СтараяРольПользователя = СтарыеРолиПользователей.Добавить();
				СтараяРольПользователя.Пользователь = ОбновляемыеПользователи[ТекущийНомер].Пользователь;
				СтараяРольПользователя.Роль = Роль.Имя;
			КонецЦикла;
		КонецЕсли;
		ТекущийНомер = ТекущийНомер - 1;
	КонецЦикла;
	
	// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь,
	|	СтарыеРолиПользователей.Роль
	|ПОМЕСТИТЬ СтарыеРолиПользователей
	|ИЗ
	|	&СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДоступныеРоли.Имя КАК Имя
	|ПОМЕСТИТЬ ВсеДоступныеРоли
	|ИЗ
	|	&ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ПОМЕСТИТЬ Администраторы
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|	И ГруппыДоступаПользователи.Пользователь В(&ОбновляемыеПользователи)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьРазделениеПоОбластямДанных КАК ИспользоватьРазделениеПоОбластямДанных
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтарыеРолиПользователей.Роль = ""ПолныеПрава""
	|	И ИспользоватьРазделениеПоОбластямДанных.Значение = ЛОЖЬ
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|				ГДЕ
	|					ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|					И ГруппыДоступаПользователи.Пользователь В (&ОбновляемыеПользователи))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ПОМЕСТИТЬ СнятыеАдминистраторы
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|ГДЕ
	|	СтарыеРолиПользователей.Роль = ""ПолныеПрава""
	|	И НЕ СтарыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					Администраторы.Пользователь
	|				ИЗ
	|					Администраторы КАК Администраторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь,
	|	Роли.Ссылка КАК Профиль,
	|	Роли.Роль
	|ПОМЕСТИТЬ ВсеНовыеРолиПользователей
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|			ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|				И (ПользователиИГруппыПользователей.ЗначениеДоступа В (&ОбновляемыеПользователи))
	|				И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|				И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|				И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|		ПО Роли.Ссылка = ГруппыДоступаПользователи.Ссылка.Профиль
	|			И (НЕ Роли.Ссылка.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеНовыеРолиПользователей.Пользователь,
	|	ВсеНовыеРолиПользователей.Роль
	|ПОМЕСТИТЬ НовыеРолиПользователей
	|ИЗ
	|	ВсеНовыеРолиПользователей КАК ВсеНовыеРолиПользователей
	|ГДЕ
	|	ВсеНовыеРолиПользователей.Роль <> ""ПолныеПрава""
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЗначениеИстина
	|			ИЗ
	|				ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|			ГДЕ
	|				ВсеДоступныеРоли.Имя = ВсеНовыеРолиПользователей.Роль)
	|	И НЕ ВсеНовыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					Администраторы.Пользователь
	|				ИЗ
	|					Администраторы КАК Администраторы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Администраторы.Пользователь,
	|	""ПолныеПрава""
	|ИЗ
	|	Администраторы КАК Администраторы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Администраторы.Пользователь,
	|	""АдминистраторСистемы""
	|ИЗ
	|	Администраторы КАК Администраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьРазделениеПоОбластямДанных КАК ИспользоватьРазделениеПоОбластямДанных
	|		ПО (ИспользоватьРазделениеПоОбластямДанных.Значение = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ПОМЕСТИТЬ ИзмененныеПользователи
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиПользователей КАК НовыеРолиПользователей
	|		ПО (НовыеРолиПользователей.Пользователь = СтарыеРолиПользователей.Пользователь)
	|			И (НовыеРолиПользователей.Роль = СтарыеРолиПользователей.Роль)
	|ГДЕ
	|	НовыеРолиПользователей.Роль ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НовыеРолиПользователей.Пользователь
	|ИЗ
	|	НовыеРолиПользователей КАК НовыеРолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|		ПО НовыеРолиПользователей.Пользователь = СтарыеРолиПользователей.Пользователь
	|			И НовыеРолиПользователей.Роль = СтарыеРолиПользователей.Роль
	|ГДЕ
	|	СтарыеРолиПользователей.Роль ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СнятыеАдминистраторы.Пользователь
	|ИЗ
	|	СнятыеАдминистраторы КАК СнятыеАдминистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНовыеРолиПользователей.Пользователь,
	|	ВсеНовыеРолиПользователей.Профиль,
	|	ВсеНовыеРолиПользователей.Роль
	|ИЗ
	|	ВсеНовыеРолиПользователей КАК ВсеНовыеРолиПользователей
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|				ГДЕ
	|					ВсеДоступныеРоли.Имя = ВсеНовыеРолиПользователей.Роль)";
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВсеДоступныеРоли", ПользователиСлужебныйПовтИсп.ВсеРоли());
	Запрос.УстановитьПараметр("ОбновляемыеПользователи", ОбновляемыеПользователи);
	Запрос.УстановитьПараметр("СтарыеРолиПользователей", СтарыеРолиПользователей);
	
	// Регистрация ошибок имен ролей в профилях групп доступа.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Роль не найдена в метаданных'"),
		                         УровеньЖурналаРегистрации.Ошибка,
		                         ,
		                         ,
		                         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                              НСтр("ru= 'При обновлении ролей пользователя ""<%1>"" роль ""<%2>"" профиля групп доступа ""<%3>"" не найдена в метаданных.'"),
		                              СокрЛП(Выборка.Пользователь.Наименование),
		                              Выборка.Роль,
		                              Выборка.Профиль),
		                         РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецЦикла;
	
	// Обновление ролей пользователейИБ.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль
	|ПОМЕСТИТЬ ИзмененныеПользователиИРоли
	|ИЗ
	|	(ВЫБРАТЬ
	|		НовыеРолиПользователей.Пользователь КАК Пользователь,
	|		НовыеРолиПользователей.Роль КАК Роль
	|	ИЗ
	|		НовыеРолиПользователей КАК НовыеРолиПользователей
	|	ГДЕ
	|		НовыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Пользователи.Ссылка,
	|		""""
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	ГДЕ
	|		Пользователи.Ссылка В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВнешниеПользователи.Ссылка,
	|		""""
	|	ИЗ
	|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|	ГДЕ
	|		ВнешниеПользователи.Ссылка В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)) КАК ИзмененныеПользователиИРоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль
	|ИЗ
	|	ИзмененныеПользователиИРоли КАК ИзмененныеПользователиИРоли
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА (ИзмененныеПользователиИРоли.Пользователь, ""ПолныеПрава"") В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователиИРоли.Пользователь,
	|					ИзмененныеПользователиИРоли.Роль
	|				ИЗ
	|					ИзмененныеПользователиИРоли КАК ИзмененныеПользователиИРоли)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПользовательИБ = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Роль) Тогда
			Если ПользовательИБ <> Неопределено Тогда
				ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ);
			КонецЕсли;
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ОбновляемыеПользователи.Найти(
					Выборка.Пользователь, "Пользователь").ИдентификаторПользователяИБ);
			
			ПользовательИБ.Роли.Очистить();
		Иначе
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
		КонецЕсли;
	КонецЦикла;
	Если ПользовательИБ <> Неопределено Тогда
		ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые при обновлении информационной базы

// Обновляет поставляемые профили, и при необходимости обновляет группы доступа этих профилей.
//  Создаются не найденные поставляемые профили групп доступа.
// 
// Параметры:
//  ТолькоНеИзмененные - Булево, обновлять только те поставляемые профили групп доступа,
//                 у которых реквизит ПоставляемыйПрофильИзменен = Ложь.
//
//  ОбновлятьГруппыДоступа - Булево, обновлять группы доступа
//                 обновляемых профилей групп доступа.
//
//  УдаляемыеВидыДоступаБезНастройки - Булево, обновлять все группы доступа,
//                 обновляемых профилей групп доступа кроме тех, у которых для
//                 удаляемых видов доступа не пустой список значений доступа.
//
Процедура ОбновитьПоставляемыеПрофилиИГруппыДоступа(ТолькоНеИзмененные = Истина, ОбновлятьГруппыДоступа = Истина, УдаляемыеВидыДоступаБезНастройки = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен,
	|	ПрофилиГруппДоступа.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа");
	ТекущиеПрофили = Запрос.Выполнить().Выгрузить();
	
	ОписанияПрофилей = УправлениеДоступомСлужебныйПовтИсп
		.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	ОбновленныеПрофили       = Новый Массив;
	ОбновленныеГруппыДоступа = Новый Массив;
	
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
	
		Профиль = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеПрофиля.Идентификатор));
		СтрокаТекущегоПрофиля = ТекущиеПрофили.Найти(Профиль, "Ссылка");
		ПрофильОбновлен = Ложь;
		
		Если СтрокаТекущегоПрофиля = Неопределено Тогда
			// Создание нового поставляемого профиля.
			УправлениеДоступомСлужебный.ОбновитьПрофильГруппДоступа(ОписаниеПрофиля);
			
		ИначеЕсли НЕ СтрокаТекущегоПрофиля.ПоставляемыйПрофильИзменен
		      ИЛИ НЕ ТолькоНеИзмененные Тогда
			
			// Обновление поставляемого профиля.
			ПрофильОбновлен = УправлениеДоступомСлужебный.ОбновитьПрофильГруппДоступа(
				ОписаниеПрофиля, Истина);
		КонецЕсли;
		
		Если ОбновлятьГруппыДоступа Тогда
			ГруппыДоступаПрофиляОбновлены = УправлениеДоступомСлужебный.ОбновитьГруппыДоступаПрофиля(
				Профиль, УдаляемыеВидыДоступаБезНастройки);
			
			ПрофильОбновлен = ПрофильОбновлен ИЛИ ГруппыДоступаПрофиляОбновлены;
		КонецЕсли;
		
		Если ПрофильОбновлен Тогда
			ОбновленныеПрофили.Добавить(Профиль);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление ролей пользователей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь
	|			И (ГруппыДоступаПользователи.Ссылка.Профиль В (&Профили))
	|			И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.ВнешниеПользователи))");
	Запрос.УстановитьПараметр("Профили", ОбновленныеПрофили);
	ПользователиДляОбновления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	ОбновитьРолиПользователей(ПользователиДляОбновления);
	
КонецПроцедуры

// Обновляет имена ролей в профилях групп доступа,
// если они были переименованы в конфигураторе,
// например, при обновлении информационной базы.
//
// Параметры:
//  ПереименованныеРоли - ТаблицаЗначений (СтароеИмяРоли, НовоеИмяРоли)
//                 если НовоеИмяРоли не задано, роль удаляется.
//
Процедура ОбновитьПереименованныеРоли(ПереименованныеРоли) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиГруппДоступаРоли.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль В(&СтарыеИменаРолей)");
	Запрос.УстановитьПараметр("СтарыеИменаРолей", ПереименованныеРоли.ВыгрузитьКолонку("СтароеИмяРоли"));
	ОбновляемыеПрофили = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ОбновляемыйПрофиль Из ОбновляемыеПрофили Цикл
		ПрофильОбъект = ОбновляемыйПрофиль.ПолучитьОбъект();
		ПрофильОбъект.ОбменДанными.Загрузка = Истина;
		Для каждого ПереименованнаяРоль Из ПереименованныеРоли Цикл
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(ПереименованнаяРоль.СтароеИмяРоли, "Роль");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПереименованнаяРоль.НовоеИмяРоли) Тогда
					НайденнаяСтрока.Роль = ПереименованнаяРоль.НовоеИмяРоли;
				Иначе
					ПрофильОбъект.Роли.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПрофильОбъект.Записать();
	КонецЦикла;
	
	Для каждого ОбновляемыйПрофиль Из ОбновляемыеПрофили Цикл
		ПрофильОбъект = ОбновляемыйПрофиль.ПолучитьОбъект();
		ПрофильОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Заполняет НаборЗаписей родителями значения доступа, включая себя, как родителя.
//
// Параметры:
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка.
//  ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа - для заполнения.
//
// Возвращаемое значение:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ГруппыЗначенийДоступа.
//
Функция РодителиЗначенияДоступа(ЗначениеДоступа, ВидДоступа)
	
	// Получение флажка наследования права родителей для значения доступа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыЗначенийДоступа.НаследоватьПраваРодителей
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
	|ГДЕ
	|	ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступа
	|	И ГруппыЗначенийДоступа.ЗначениеДоступа = &ЗначениеДоступа
	|	И ГруппыЗначенийДоступа.ГруппаДоступа = &ЗначениеДоступа");
	Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
	Запрос.УстановитьПараметр("ВидДоступа", ВидДоступа);
	Выборка = Запрос.Выполнить().Выбрать();
	НаследоватьПраваРодителей = ?(Выборка.Следующий(), Выборка.НаследоватьПраваРодителей, Истина);
	
	НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДоступа.Установить(ВидДоступа);
	НаборЗаписей.Отбор.ЗначениеДоступа.Установить(ЗначениеДоступа);
	
	ТекущийРодитель = ЗначениеДоступа;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
	
		Запись = НаборЗаписей.Добавить();
		Запись.ВидДоступа                = ВидДоступа;
		Запись.ЗначениеДоступа           = ЗначениеДоступа;
		Запись.ГруппаДоступа             = ТекущийРодитель;
		Запись.НаследоватьПраваРодителей = ?(ЗначениеДоступа = Запись.ГруппаДоступа, НаследоватьПраваРодителей, Ложь);
		Запись.ИспользоватьПраваСсылки   = ?(ЗначениеДоступа = Запись.ГруппаДоступа, Истина, НаследоватьПраваРодителей);
		Запись.СвязьСРодителем           = ЗначениеДоступа <> Запись.ГруппаДоступа;
		
		ТекущийРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийРодитель, "Родитель");
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции // ЗаполнитьРодителейЗначенияДоступа()

Процедура ДобавитьНаборыДляПрава(Право, ЗависимостиПрав, Таблица, НаборыПравДляУмножения, НаборыОграниченийДляУмножения, НаборыЧтения, НаборыДобавления, НаборыИзменения, СсылкаНаВедущийОбъект)
	
	// Определение права, которое требуется проверить.
	ВидДоступаПроверяемогоПрава = Неопределено;
	// Определение наборов ограничения, которые требуется использовать.
	НаборыОграничений = Неопределено;
	
	Если      ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Чтение" Тогда
		НаборыОграничений           = НаборыЧтения;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
		
	ИначеЕсли ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Добавление" Тогда
		НаборыОграничений           = НаборыДобавления;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления;
	
	ИначеЕсли ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Изменение" Тогда
		НаборыОграничений           = НаборыИзменения;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения;
	КонецЕсли;
	
	Если ЗависимостиПрав.ОтключитьПроверкуПравВедущейТаблицы Тогда
		ВидДоступаПроверяемогоПрава = Неопределено;
	КонецЕсли;
	
	Если ВидДоступаПроверяемогоПрава <> Неопределено И НаборыОграничений <> Неопределено Тогда
		
		Строка = НаборыПравДляУмножения.Добавить();
		Строка.НомерНабора     = НаборыПравДляУмножения.Количество();
		Строка.ВидДоступа      = ВидДоступаПроверяемогоПрава;
		Строка.ЗначениеДоступа = СсылкаНаВедущийОбъект;
		Строка[Право] = Истина;
		
		НовыеНаборы = НаборыОграничений.Скопировать();
		НовыеНаборы.ЗаполнитьЗначения(Истина, Право);
		ДобавитьНаборыЗначенийДоступа(НаборыОграниченийДляУмножения, НовыеНаборы);
		
	ИначеЕсли ВидДоступаПроверяемогоПрава <> Неопределено Тогда
		
		НовыеНаборы = НаборыПравДляУмножения.Скопировать();
		НовыеНаборы.Очистить();
		Строка.НомерНабора     = НаборыПравДляУмножения.Количество();
		Строка.ВидДоступа      = ВидДоступаПроверяемогоПрава;
		Строка.ЗначениеДоступа = СсылкаНаВедущийОбъект;
		Строка[Право] = Истина;
		ДобавитьНаборыЗначенийДоступа(Таблица, НовыеНаборы);
		
	ИначеЕсли НаборыОграничений <> Неопределено Тогда
		
		НовыеНаборы = НаборыОграничений.Скопировать();
		НовыеНаборы.ЗаполнитьЗначения(Истина, Право);
		ДобавитьНаборыЗначенийДоступа(Таблица, НовыеНаборы);
		
	КонецЕсли;
	
КонецПроцедуры

