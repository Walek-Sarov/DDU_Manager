////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает параметры сеанса по текущим настройкам констант и
// настройкам групп доступа пользователей.
//  Вызывается ПриНачалеРаботыСистемы.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
		// Для корректной работы препроцессора в ограничениях доступа, требуется инициализации всех
		// параметров сеанса, которые могут быть востребованы в работе препроцессора.
		Если ИмяПараметра = "ВидыДоступаЕдинственныеДляТипаЗначенияДоступа" ИЛИ
		     ИмяПараметра = "ВидыДоступаБезГруппЗначенияДоступа" Тогда
			ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(Новый Массив);
			//
		ИначеЕсли ИмяПараметра = "ДобавлятьРуководителямДоступПодчиненных" Тогда
			ПараметрыСеанса[ИмяПараметра] = Ложь;
		Иначе
			ПараметрыСеанса[ИмяПараметра] = "";
		КонецЕсли;
		УстановленныеПараметры.Добавить(ИмяПараметра);
		Возврат;
	КонецЕсли;
	
	ПараметрыСеанса.ДобавлятьРуководителямДоступПодчиненных = Константы.ДобавлятьРуководителямДоступПодчиненных.Получить();
	УстановленныеПараметры.Добавить("ДобавлятьРуководителямДоступПодчиненных");
	
	// Следующие виды доступа не самостоятельные,
	// поэтому не учитываются при расчете необходимости ограничения в целом.
	// В стандартных шаблонах проверка по этим видам доступа всегда выполняется,
	// а в препроцессоре проверка использования не выполнятся.
	ПараметрыСеанса.ОграничиватьДоступПоВидуУсловие = "";
	ПараметрыСеанса.ОграничиватьДоступПоВидуОбъект  = "";
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВидуУсловие");
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВидуОбъект");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДоступаПрофилейГруппДоступа.ВидДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступаПрофилейГруппДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|				ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|					И (ПользователиИГруппыПользователей.ЗначениеДоступа = &ТекущийПользователь)
	|					И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|					И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|			ПО ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка
	|				И ((НЕ ГруппыДоступа.ПометкаУдаления))
	|		ПО (ГруппыДоступа.Профиль = ВидыДоступаПрофилейГруппДоступа.Ссылка)
	|			И ((НЕ ВидыДоступаПрофилейГруппДоступа.Ссылка.ПометкаУдаления))");
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	ОграничиваемыеВидыДоступа = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДоступа");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка КАК ВидДоступа
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КаждыйВидЕдинственный = Истина;
	КаждыйВидБезГрупп     = Истина;
	
	ВидыДоступаБезОграничения                     = Новый Массив;
	ВидыДоступаЕдинственныеДляТипаЗначенияДоступа = Новый Массив;
	ВидыДоступаБезГруппЗначенияДоступа            = Новый Массив;
	ВидыДоступаЧерезПраваПоЗначениямДоступа       = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваВидаДоступа = СвойстваВидаДоступа(Выборка.ВидДоступа);
		
		Если  СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда Тогда
			// Такие виды доступа не самостоятельные, поэтому не учитываются при расчете
			// необходимости ограничения в целом.
			// В стандартных шаблонах проверка по этим видам доступа всегда выполняется,
			// а в препроцессоре проверка использования не выполнятся.
			ОписаниеВидаДоступа = "";
			
		ИначеЕсли НЕ СвойстваВидаДоступа.ВидДоступаИспользуется Тогда
			ОписаниеВидаДоступа = "";
			ВидыДоступаБезОграничения.Добавить(Выборка.ВидДоступа);
			
		ИначеЕсли ОграничиваемыеВидыДоступа.Найти(Выборка.ВидДоступа) = Неопределено Тогда
			ОписаниеВидаДоступа = "";
			ВидыДоступаБезОграничения.Добавить(Выборка.ВидДоступа);
			
		ИначеЕсли СвойстваВидаДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			ОписаниеВидаДоступа = "ЧерезПраваПоЗначениямДоступа";
			ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(Выборка.ВидДоступа);
		Иначе
			Если СвойстваВидаДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа Тогда
				ОписаниеВидаДоступа   = "ЕдинственныйВид,  ";
				ВидыДоступаЕдинственныеДляТипаЗначенияДоступа.Добавить(Выборка.ВидДоступа);
			Иначе
				ОписаниеВидаДоступа   = "ОдинИзМногихВидов,";
				КаждыйВидЕдинственный = Ложь;
			КонецЕсли;
			Если СвойстваВидаДоступа.ВидДоступаБезГруппЗначенияДоступа Тогда
				ОписаниеГрупп = "БезГрупп";
				ВидыДоступаБезГруппЗначенияДоступа.Добавить(Выборка.ВидДоступа);
			Иначе
				ОписаниеГрупп = ?(СвойстваВидаДоступа.ВидДоступаСОднойГруппойЗначенияДоступа, "ОднаГруппа", "МножествоГрупп");
				КаждыйВидБезГрупп = Ложь;
			КонецЕсли;
			ОписаниеВидаДоступа = ОписаниеВидаДоступа + ОписаниеГрупп;
		КонецЕсли;
		ИмяВидаДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(Выборка.ВидДоступа);
		ПараметрыСеанса["ОграничиватьДоступПоВиду" + ИмяВидаДоступа] = ОписаниеВидаДоступа;
		УстановленныеПараметры.Добавить("ОграничиватьДоступПоВиду" + ИмяВидаДоступа);
	КонецЦикла;
	
	ПараметрыСеанса.ВидыДоступаБезОграничения = Новый ФиксированныйМассив(ВидыДоступаБезОграничения);
	УстановленныеПараметры.Добавить("ВидыДоступаБезОграничения");
	
	ПараметрыСеанса.ВидыДоступаЕдинственныеДляТипаЗначенияДоступа = Новый ФиксированныйМассив(ВидыДоступаЕдинственныеДляТипаЗначенияДоступа);
	УстановленныеПараметры.Добавить("ВидыДоступаЕдинственныеДляТипаЗначенияДоступа");
	
	ПараметрыСеанса.ВидыДоступаБезГруппЗначенияДоступа = Новый ФиксированныйМассив(ВидыДоступаБезГруппЗначенияДоступа);
	УстановленныеПараметры.Добавить("ВидыДоступаБезГруппЗначенияДоступа");
	
	ПараметрыСеанса.ВидыДоступаЧерезПраваПоЗначениямДоступа = ?(ВидыДоступаЧерезПраваПоЗначениямДоступа.Количество() = 0,
	                                                            "",
	                                                            Новый ФиксированныйМассив(ВидыДоступаЧерезПраваПоЗначениямДоступа));
	УстановленныеПараметры.Добавить("ВидыДоступаЧерезПраваПоЗначениямДоступа");
	
	Если КаждыйВидЕдинственный И КаждыйВидБезГрупп Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидЕдинственный, КаждыйВидБезГрупп";
	ИначеЕсли КаждыйВидЕдинственный Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидЕдинственный";
	ИначеЕсли КаждыйВидБезГрупп Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидБезГрупп";
	Иначе
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "Да";
	КонецЕсли;
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВиду");
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьПоставляемыеПрофилиИГруппыДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьТаблицыРолейПрофилейГруппДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьЗависимостиПравДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьТаблицыПравПоЗначениямДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ПометитьНаУдалениеГруппыДоступаПомеченныхПрофилей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.3";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьПодчиненностьПользователей_1_1_2_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.3";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ПриИзмененииКонстантыДобавлятьРуководителямДоступПодчиненных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.4";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьПодчиненностьПользователей_1_1";
	
КонецПроцедуры

// Переопределяет стандартное поведение при получении данных в распределенной ИБ.
// Игнорирует получение данных подсистемы из автономного рабочего места в сервис.
// Выполняет отправку данных подсистемы в автономное рабочее место для их синхронизации с сервисом.
//
Процедура ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			
			// Стандартную обработку не переопределяем
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ДобавлятьРуководителямДоступПодчиненных")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ОграничиватьДоступНаУровнеЗаписей")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыДоступа")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ПрофилиГруппДоступа")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ГруппыЗначенийДоступа")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ЗависимостиПравДоступа")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ЗначенияГруппДоступа")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ПодчиненныеПользователи")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ПраваПоЗначениямДоступа")
			ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ТаблицыГруппДоступа")
			Тогда
			
			// Получение элемента из автономного рабочего места игнорируем.
			// Дополнительно отправляем данные в автономное рабочее место для полной синхронизации с сервисом.
			ОтправкаНазад = Истина;
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("УпрощенныйИнтерфейсНастройкиПравДоступа", 
		УправлениеДоступомПереопределяемый.УпрощенныйИнтерфейсНастройкиПравДоступа());
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

// Обработчик подписки ЗаписатьГруппыИВидыДоступа на событие ПриЗаписи
// вызывает метод записи групп значений доступа и видов доступа
// в РегистрСведений.ГруппыЗначенийДоступа, для требуемых объектов метаданных.
//
Процедура ЗаписатьГруппыИВидыДоступаПриЗаписи(Знач Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьГруппыИВидыДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Пользователи")
	   И Объект.Служебный Тогда
	
		Возврат;
	КонецЕсли;
	
	#Если Сервер Тогда
		УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Объект);
	#Иначе
		УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Объект.Ссылка);
	#КонецЕсли

КонецПроцедуры

// Обработчик подписки ЗаписатьНаборыЗначенийДоступа на событие ПриЗаписи
// вызывает метод записи значений доступа объекта в РегистрСведений.НаборыЗначенийДоступа.
//  Возможен случай использования подсистемы "УправлениеДоступом", когда
// указанной подписки не существует, если наборы значений доступа не применяются.
//
Процедура ЗаписатьНаборыЗначенийДоступаПриЗаписи(Знач Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьНаборыЗначенийДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	#Если Сервер Тогда
		ЗаписатьНаборыЗначенийДоступа(Объект);
	#Иначе
		ЗаписатьНаборыЗначенийДоступа(Объект.Ссылка);
	#КонецЕсли

КонецПроцедуры

// Обработчик подписки ЗаписатьЗависимыеНаборыЗначенийДоступа события ПриЗаписи
// вызывает перезапись зависимых наборов значений доступа в регистре сведений НаборыЗначенийДоступа.
//
//  Возможен случай использования подсистемы "УправлениеДоступом", когда
// указанной подписки не существует, если зависимые наборы значений доступа не применяются.
//
Процедура ЗаписатьЗависимыеНаборыЗначенийДоступаПриЗаписи(Знач Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьЗависимыеНаборыЗначенийДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	#Если Сервер Тогда
		ЗаписатьЗависимыеНаборыЗначенийДоступа(Объект);
	#Иначе
		ЗаписатьЗависимыеНаборыЗначенийДоступа(Объект.Ссылка);
	#КонецЕсли

КонецПроцедуры

// Обработчик регламентного задания ЗаполнениеДанныхДляОграниченияДоступа.
Процедура ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания() Экспорт
	
	ЗаполнениеДанныхДляОграниченияДоступа();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики регламентных заданий

// Выполняет последовательное заполнение и обновление данных, необходимых для работы
// подсистемы УправленияДоступом в режиме ограничения доступа на уровне записей.
// 
//  При включенном режиме ограничения доступа на уровне записей заполняет наборы
// значений доступа. Заполнение выполняется частями при каждом запуске, пока все
// наборы значений доступа не будут заполнены.
//  При отключении режима ограничения доступа на уровне записей наборы значений доступа
// (заполненные ранее) удаляются при перезаписи объектов, а не все сразу.
//  Независимо от режима ограничения доступа на уровне записей обновляет вторичные
// данные: группы значений доступа и дополнительные поля в существующих наборах значений доступа.
//  После завершения всех обновлений и заполнений отключает использование регламентного
// задания.
//
//  Сведения о состоянии работы записываются в журнал регистрации.
//
//  Возможно вызывать программно, например, при обновлении информационной базы.
// Также для целей обновления есть форма Справочник.ГруппыДоступа.ОбновлениеДанныхОграниченияДоступа,
// с помощью которой можно сделать интерактивное обновление данных ограничения доступа
// при обновлении информационной базы.
//
Процедура ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыПользователей.ВсеПользователи);
		
		// Заполнение РегистрСведений.ГруппыЗначенийДоступа.
		Для каждого Тип Из Метаданные.ПодпискиНаСобытия.ЗаписатьГруппыИВидыДоступа.Источник.Типы() Цикл
			
			Если Тип = Тип("ПланВидовХарактеристикОбъект.ВидыДоступа") Тогда
				Продолжить;
			КонецЕсли;
			
			Таблица = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			
			ВидыДоступа = ВидыДоступаТаблицы(Таблица);
			Если ВидыДоступа.Количество() = 1 И
			     ( ВидыДоступа[0] = ПланыВидовХарактеристик.ВидыДоступа.Пользователи ИЛИ 
			       ВидыДоступа[0] = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоДанных < 1000 И Тип <> Тип("Строка") Тогда
				
				Запрос = Новый Запрос(СтрЗаменить(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
				|	Таблица.Ссылка
				|ИЗ
				|	ПодставляемаяТаблица КАК Таблица
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК РегистрСведенийГруппыЗначенийДоступа
				|		ПО Таблица.Ссылка = РегистрСведенийГруппыЗначенийДоступа.ЗначениеДоступа
				|ГДЕ
				|	РегистрСведенийГруппыЗначенийДоступа.ЗначениеДоступа ЕСТЬ NULL ", "ПодставляемаяТаблица", Таблица));
				Выгрузка = Запрос.Выполнить().Выгрузить();
				КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
				
				Для каждого СтрокаТЧ Из Выгрузка Цикл
					УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(СтрокаТЧ.Ссылка);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоДанных < 1000 Тогда
			
			// Заполнение РегистрСведений.НаборыЗначенийДоступа.
			Для каждого Тип Из Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.Типы() Цикл
				
				Если Тип = Тип("ПланВидовХарактеристикОбъект.ВидыДоступа") Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьТабличнуюЧасть = Метаданные.НайтиПоТипу(Тип).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") <> Неопределено;
				
				Если КоличествоДанных < 1000 И Тип <> Тип("Строка") Тогда
				
					Запрос = Новый Запрос(СтрЗаменить(
					"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
					|	Таблица.Ссылка
					|ИЗ
					|	ПодставляемаяТаблица КАК Таблица
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаборыЗначенийДоступа КАК РегистрСведенийНаборыЗначенийДоступа
					|		ПО Таблица.Ссылка = РегистрСведенийНаборыЗначенийДоступа.Объект
					|ГДЕ
					|	РегистрСведенийНаборыЗначенийДоступа.Объект ЕСТЬ NULL ", "ПодставляемаяТаблица", Метаданные.НайтиПоТипу(Тип).ПолноеИмя()));
					Выгрузка = Запрос.Выполнить().Выгрузить();
					КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
					
					Для каждого СтрокаТЧ Из Выгрузка Цикл
						Если ЗаполнитьТабличнуюЧасть Тогда
							// Запись наборов табличной части и наборов регистра (без зависимых наборов).
							Объект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
							Объект.ОбменДанными.Загрузка = Истина;
							Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
							Объект.Записать();
						Иначе
							// Запись только наборов регистра (без зависимых наборов).
							ЗаписатьНаборыЗначенийДоступа(СтрокаТЧ.Ссылка);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоДанных < 1000 Тогда
		// Обновление вторичных данных в наборах значений доступа: свойств видов доступа , и других.
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвойстваВидовДоступа.ВидДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа
		|ПОМЕСТИТЬ ТаблицаСвойств
		|ИЗ
		|	&СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	НаборыЗначенийДоступа.Объект,
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа,
		|	НаборыЗначенийДоступа.Чтение,
		|	НаборыЗначенийДоступа.Добавление,
		|	НаборыЗначенийДоступа.Изменение,
		|	НаборыЗначенийДоступа.Удаление,
		|	ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа, ЛОЖЬ) КАК ВидДоступаБезГруппЗначенияДоступа,
		|	ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, ЛОЖЬ) КАК ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа, ЛОЖЬ) КАК ВидДоступаЧерезПраваПоЗначениямДоступа,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.Чтение
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	КОНЕЦ КАК ВидДоступаПравоЧтения,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.Добавление
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	КОНЕЦ КАК ВидДоступаПравоДобавления,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.Изменение
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	КОНЕЦ КАК ВидДоступаПравоИзменения,
		|	НаборыЗначенийДоступа.ТипОбъекта,
		|	ЕСТЬNULL(ТипыСсылок.ТипТаблицы, НЕОПРЕДЕЛЕНО) КАК ТипЗначенияДоступа
		|ИЗ
		|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойств КАК СвойстваВидовДоступа
		|		ПО НаборыЗначенийДоступа.ВидДоступа = СвойстваВидовДоступа.ВидДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
		|		ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТипыСсылок.ТипТаблицы))
		|			И (НаборыЗначенийДоступа.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)))
		|ГДЕ
		|	(НЕ(НаборыЗначенийДоступа.ВидДоступаБезГруппЗначенияДоступа = ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа, ЛОЖЬ)
		|				И НаборыЗначенийДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, ЛОЖЬ)
		|				И НаборыЗначенийДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа = ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа, ЛОЖЬ)
		|				И НаборыЗначенийДоступа.ТипЗначенияДоступа = ЕСТЬNULL(ТипыСсылок.ТипТаблицы, НЕОПРЕДЕЛЕНО)
		|				И НаборыЗначенийДоступа.ВидДоступаПравоЧтения = ВЫБОР
		|					КОГДА НаборыЗначенийДоступа.Чтение
		|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|				КОНЕЦ
		|				И НаборыЗначенийДоступа.ВидДоступаПравоДобавления = ВЫБОР
		|					КОГДА НаборыЗначенийДоступа.Добавление
		|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|				КОНЕЦ
		|				И НаборыЗначенийДоступа.ВидДоступаПравоИзменения = ВЫБОР
		|					КОГДА НаборыЗначенийДоступа.Изменение
		|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|				КОНЕЦ))");
		Запрос.УстановитьПараметр("СвойстваВидовДоступа", СвойстваВидаДоступа());
		Выгрузка = Запрос.Выполнить().Выгрузить();
		КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
		
		Для каждого СтрокаТЧ Из Выгрузка Цикл
			МенеджерЗаписи = РегистрыСведений.НаборыЗначенийДоступа.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,
									 СтрокаТЧ,
									 "Объект,
									 |НомерНабора,
									 |ВидДоступа,
									 |ЗначениеДоступа,
									 |Чтение,
									 |Добавление,
									 |Изменение,
									 |Удаление,
									 |ВидДоступаБезГруппЗначенияДоступа,
									 |ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
									 |ВидДоступаЧерезПраваПоЗначениямДоступа,
									 |ВидДоступаПравоЧтения,
									 |ВидДоступаПравоДобавления,
									 |ВидДоступаПравоИзменения,
									 |ТипОбъекта,
									 |ТипЗначенияДоступа");
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоДанных < 1000 Тогда
		// Обновление вторичных данных в наборах значений доступа: ТипОбъекта
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТипыОбъектов.Объект
		|ИЗ
		|	(ВЫБРАТЬ
		|		НаборыЗначенийДоступа.Объект КАК Объект,
		|		ВЫБОР
		|			КОГДА НаборыЗначенийДоступа.ТипОбъекта <> НЕОПРЕДЕЛЕНО
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ТипЗадан,
		|		ВЫБОР
		|			КОГДА НаборыЗначенийДоступа.ТипОбъекта <> НЕОПРЕДЕЛЕНО
		|					И НаборыЗначенийДоступа.ТипОбъекта <> ТипыСсылок.ТипТаблицы
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НеверныйТип
		|	ИЗ
		|		РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
		|			ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.Объект) = ТИПЗНАЧЕНИЯ(ТипыСсылок.ТипТаблицы))) КАК ТипыОбъектов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТипыОбъектов.Объект
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТипыОбъектов.ТипЗадан) <> 1
		|		ИЛИ СУММА(ТипыОбъектов.НеверныйТип) <> 0)");
		Выгрузка = Запрос.Выполнить().Выгрузить();
		КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
		
		НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
		Для каждого СтрокаТЧ Из Выгрузка Цикл
		
			НаборЗаписей.Отбор.Объект.Установить(СтрокаТЧ.Объект);
			НаборЗаписей.Прочитать();
			ПерваяЗапись = Истина;
			
			Для каждого Запись Из НаборЗаписей Цикл
				
				Если ПерваяЗапись Тогда
					ТипыОбъекта = Новый Массив;
					ТипыОбъекта.Добавить(ТипЗнч(Запись.Объект));
					ОписаниеТипаОбъекта = Новый ОписаниеТипов(ТипыОбъекта);
					
					Запись.ТипОбъекта = ОписаниеТипаОбъекта.ПривестиЗначение(Неопределено);
					ПерваяЗапись = Ложь;
				Иначе
					Запись.ТипОбъекта = Неопределено;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоДанных < 1000 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'"), 
			УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Завершено заполнение данных для ограничения доступа'"), 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			СтандартныеПодсистемыПереопределяемый.УстановитьИспользованиеЗаданияЗаполненияДанныхУправленияДоступом(Ложь);
		Иначе
			Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа);
			Задание.Использование = Ложь;
			Задание.Записать();
		КонецЕсли;
	Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'"),
			УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Выполнена запись порции данных для ограничения доступа'"), 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			СтандартныеПодсистемыПереопределяемый.УстановитьИспользованиеЗаданияЗаполненияДанныхУправленияДоступом(Истина);
		Иначе
			Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа);
			Задание.Использование = Истина;
			Задание.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с видами доступа

// Возвращает свойства вида доступа, используя функцию
// УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа().
//
// Параметры:
//  ВидДоступа   - ПланВидовХарактеристикСсылка.ВидыДоступа, Неопределено.
//
// Возвращаемое значение:
//  Неопределено - когда для вида доступа свойств не найдено,
//  ТаблицаЗначений или СтрокаТаблицыЗначений с полями:
//                 описание которых см. в комментарии к функции
//                 УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа().
//
Функция СвойстваВидаДоступа(Знач ВидДоступа = Неопределено) Экспорт
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа().Скопировать();
	
	Если ВидДоступа = Неопределено Тогда
	
		Возврат СвойстваВидовДоступа;
	Иначе
		Возврат СвойстваВидовДоступа.Найти(ВидДоступа, "ВидДоступа");
	КонецЕсли;
	
КонецФункции

// Возвращает массив видов доступа для таблицы с указанным именем.
//
// Параметры:
//  Таблица   - Строка, как в фукнции ПолноеИмя() объекта метаданных.
//
// Возвращаемое значение:
//  Массив       - элементы типа ПланВидовХарактеристикСсылка.ВидыДоступа.
//
Функция ВидыДоступаТаблицы(Знач Таблица) Экспорт
	
	ВидыДоступа = Новый Массив;
	
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа() Цикл
	
		Если СвойстваВидаДоступа.Таблицы.Найти(Таблица) <> Неопределено Тогда
		
			ВидыДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДоступа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с профилями групп доступа

// Проверяет изменен ли поставляемый профиль по сравнению с описанием из функции
// УправлениеДоступомСлужебныйПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа()
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//                     (возвращается реквизит ПоставляемыйПрофильИзменен),
//               - СправочникОбъект.ПрофилиГруппДоступа
//                     (возвращается результат сравнения заполнения объекта
//                      с описанием в переопределяемом общем модуле).
//
// Возвращаемое значение:
//  Булево.
//
Функция ПоставляемыйПрофильИзменен(Профиль) Экспорт
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Профиль, "ПоставляемыйПрофильИзменен");
	КонецЕсли;
	
	ОписанияПрофилей = УправлениеДоступомСлужебныйПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	ОписаниеНайдено = Ложь;
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.Ссылка.УникальныйИдентификатор()) Тогда
			ОписаниеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеНайдено Тогда
		
		Если ВРег(Профиль.Наименование) <> ВРег(ОписаниеПрофиля.Наименование) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Профиль.Роли.Количество()            <> ОписаниеПрофиля.Роли.Количество()
		 ИЛИ Профиль.ВидыДоступа.Количество()     <> ОписаниеПрофиля.ВидыДоступа.Количество()
		 ИЛИ Профиль.ЗначенияДоступа.Количество() <> ОписаниеПрофиля.ЗначенияДоступа.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для каждого СтрокаРоли Из ОписаниеПрофиля.Роли Цикл
			Если Профиль.Роли.Найти(СтрокаРоли) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ОписаниеВидаДоступа Из ОписаниеПрофиля.ВидыДоступа Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДоступа", ПланыВидовХарактеристик.ВидыДоступа[ОписаниеВидаДоступа.Значение]);
			Отбор.Вставить("Предустановленный", ОписаниеВидаДоступа.Представление = "Предустановленный");
			Отбор.Вставить("ДоступРазрешен",    ОписаниеВидаДоступа.Представление = "ВначалеВсеРазрешены");
			Если Профиль.ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ОписаниеЗначенияДоступа Из ОписаниеПрофиля.ЗначенияДоступа Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДоступа", ПланыВидовХарактеристик.ВидыДоступа[ОписаниеЗначенияДоступа.Значение]);
			Запрос = Новый Запрос(СтрЗаменить("Выбрать Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.Представление));
			Отбор.Вставить("ЗначениеДоступа", Запрос.Выполнить().Выгрузить()[0].Значение);
			Если Профиль.ЗначенияДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Замещает имеющийся или создает новый профиль групп доступа по его начальному описанию.
//
// Параметры:
//  ОписаниеПрофиля - Структура (см. функцию НовоеОписаниеПрофиляГруппДоступа()).
// 
// Возвращаемое значение:
//  Булево. Истина - профиль изменен.
//
Функция ОбновитьПрофильГруппДоступа(ОписаниеПрофиля, НеОбновлятьРолиПользователей = Ложь) Экспорт
	
	ПрофильИзменен = Ложь;
	
	УникальныйИдентификаторПрофиля = Новый УникальныйИдентификатор(ОписаниеПрофиля.Идентификатор);
	ПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(УникальныйИдентификаторПрофиля);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ПрофильСсылка);
	Если Запрос.Выполнить().Пустой() Тогда
		// Элемента данных нет, нужно создать новый.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(УникальныйИдентификаторПрофиля));
		ПрофильИзменен = Истина;
	Иначе
		ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
		ПрофильИзменен = ПоставляемыйПрофильИзменен(ПрофильОбъект);
	КонецЕсли;
	
	
	Если ПрофильИзменен Тогда
		ЗаблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка, ПрофильОбъект.ВерсияДанных);
		
		ПрофильОбъект.Наименование = ОписаниеПрофиля.Наименование;
		
		ПрофильОбъект.Роли.Очистить();
		Для каждого Роль Из ОписаниеПрофиля.Роли Цикл
			Строка = ПрофильОбъект.Роли.Добавить();
			Строка.Роль = Роль;
		КонецЦикла;
		
		ПрофильОбъект.ВидыДоступа.Очистить();
		Для каждого ОписаниеВидаДоступа Из ОписаниеПрофиля.ВидыДоступа Цикл
			Строка = ПрофильОбъект.ВидыДоступа.Добавить();
			Строка.ВидДоступа        = ПланыВидовХарактеристик.ВидыДоступа[ОписаниеВидаДоступа.Значение];
			Строка.Предустановленный = ОписаниеВидаДоступа.Представление = "Предустановленный";
			Строка.ДоступРазрешен    = ОписаниеВидаДоступа.Представление = "ВначалеВсеРазрешены";
		КонецЦикла;
		
		ПрофильОбъект.ЗначенияДоступа.Очистить();
		Для каждого ОписаниеЗначенияДоступа Из ОписаниеПрофиля.ЗначенияДоступа Цикл
			СтрокаЗначения = ПрофильОбъект.ЗначенияДоступа.Добавить();
			СтрокаЗначения.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа[ОписаниеЗначенияДоступа.Значение];
			Запрос = Новый Запрос(СтрЗаменить("Выбрать Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.Представление));
			СтрокаЗначения.ЗначениеДоступа = Запрос.Выполнить().Выгрузить()[0].Значение;
		КонецЦикла;
		
		Если НеОбновлятьРолиПользователей Тогда
			ПрофильОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
		КонецЕсли;
		ПрофильОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка);
	КонецЕсли;
	
	Возврат ПрофильИзменен;
	
КонецФункции

// Проверяет изменен ли поставляемый профиль по сравнению с описанием из функции
// УправлениеДоступомСлужебныйПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа().
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//
// Возвращаемое значение:
//  Строка.
//
Функция ОписаниеПоставляемогоПрофиля(Профиль) Экспорт
	
	ОписанияПрофилей = УправлениеДоступомСлужебныйПовтИсп
		.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	Текст = "";
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			Текст = ОписаниеПрофиля.Описание;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Определяет наличие начального заполнения для профиля групп доступа в переопределяемом модуле.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//  
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьНачальноеЗаполнениеПрофиляГруппДоступа(Знач Профиль) Экспорт
	
	ОписанияПрофилей = УправлениеДоступомСлужебныйПовтИсп
		.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	ОписаниеНайдено = Ложь;
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			ОписаниеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеНайдено;
	
КонецФункции

// Создает элементы в справочнике ПрофилиГруппДоступа, свойственные прикладному решению,
// и позволяет восстановить ранее заполненный элемент по его уникальному идентификатору,
// если для него предусмотрено начальное заполнение.
//  Поиск начального заполнения осуществляется по строке уникального идентификатора профиля.
//
// Параметры:
//  Профиль      - Неопределено, СправочникСсылка.ПрофилиГруппДоступа.
//                 Если для указанного профиля описание начального заполнения найдено,
//                 содержимое профиля полностью замещается.
//
// ОбновитьГруппыДоступа - Булево, если Истина, виды доступа групп доступа профиля будут обновлены.
//
// НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа - Булево, если Истина, группы доступа не будут
//                 обновлены, если в них есть хотя бы один удаляемый вид доступа,
//                 по которому заданы значения доступа.
//
Процедура НачальноеЗаполнениеПрофилейГруппДоступа(Знач Профиль = Неопределено, ОбновитьГруппыДоступа = Ложь, НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа = Истина) Экспорт
	
	ОписанияПрофилей = УправлениеДоступомСлужебныйПовтИсп
		.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если Профиль = Неопределено ИЛИ ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			ОбновитьПрофильГруппДоступа(ОписаниеПрофиля);
			Если ОбновитьГруппыДоступа Тогда
				ОбновитьГруппыДоступаПрофиля(Профиль, НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет табличную часть ТаблицыРолей каждого профиля групп доступа.
Процедура ОбновитьТаблицыРолейПрофилейГруппДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПраваОМДРолей",
		УправлениеДоступомСлужебныйПовтИсп.ОграничиваемыеПраваОбъектовМетаданныхРолей());
	
	Запрос.УстановитьПараметр("ТипыСсылок",
		УправлениеДоступомСлужебныйПовтИсп.ТипыСсылок());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПраваОМДРолей.Роль,
	|	ПраваОМДРолей.Таблица,
	|	ПраваОМДРолей.Добавление,
	|	ПраваОМДРолей.Изменение,
	|	ПраваОМДРолей.Удаление,
	|	ПраваОМДРолей.ТипТаблицы
	|ПОМЕСТИТЬ ПраваОМДРолей
	|ИЗ
	|	&ПраваОМДРолей КАК ПраваОМДРолей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыСсылок.Таблица,
	|	ТипыСсылок.ТипТаблицы
	|ПОМЕСТИТЬ НовыеТипыСсылок
	|ИЗ
	|	&ТипыСсылок КАК ТипыСсылок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор) КАК Профиль
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК СтарыеТипыСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеТипыСсылок КАК НовыеТипыСсылок
	|		ПО (НовыеТипыСсылок.Таблица = СтарыеТипыСсылок.Таблица)
	|			И (НовыеТипыСсылок.ТипТаблицы = СтарыеТипыСсылок.ТипТаблицы)
	|ГДЕ
	|	СтарыеТипыСсылок.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|	И НовыеТипыСсылок.Таблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|ИЗ
	|	НовыеТипыСсылок КАК НовыеТипыСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК СтарыеТипыСсылок
	|		ПО (СтарыеТипыСсылок.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))
	|			И НовыеТипыСсылок.Таблица = СтарыеТипыСсылок.Таблица
	|			И НовыеТипыСсылок.ТипТаблицы = СтарыеТипыСсылок.ТипТаблицы
	|ГДЕ
	|	СтарыеТипыСсылок.Таблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТипыСсылок.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
	|ГДЕ
	|	ТипыСсылок.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК ТаблицыРолей
	|ГДЕ
	|	ТаблицыРолей.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтарыеТаблицы.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК СтарыеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РолиПрофиля.Ссылка КАК Профиль,
	|			ПраваОМДРолей.Роль КАК Роль,
	|			ПраваОМДРолей.Таблица КАК Таблица,
	|			ПраваОМДРолей.Добавление КАК Добавление,
	|			ПраваОМДРолей.Изменение КАК Изменение,
	|			ПраваОМДРолей.Удаление КАК Удаление,
	|			ПраваОМДРолей.ТипТаблицы КАК ТипТаблицы
	|		ИЗ
	|			ПраваОМДРолей КАК ПраваОМДРолей
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофиля
	|				ПО ПраваОМДРолей.Роль = РолиПрофиля.Роль) КАК НовыеТаблицы
	|		ПО (НовыеТаблицы.Профиль = СтарыеТаблицы.Ссылка)
	|			И (НовыеТаблицы.Роль = СтарыеТаблицы.Роль)
	|			И (НовыеТаблицы.Таблица = СтарыеТаблицы.Таблица)
	|			И (НовыеТаблицы.Добавление = СтарыеТаблицы.Добавление)
	|			И (НовыеТаблицы.Изменение = СтарыеТаблицы.Изменение)
	|			И (НовыеТаблицы.Удаление = СтарыеТаблицы.Удаление)
	|			И (НовыеТаблицы.ТипТаблицы = СтарыеТаблицы.ТипТаблицы)
	|ГДЕ
	|	НовыеТаблицы.Роль ЕСТЬ NULL 
	|	И СтарыеТаблицы.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НовыеТаблицы.Профиль
	|ИЗ
	|	(ВЫБРАТЬ
	|		РолиПрофиля.Ссылка КАК Профиль,
	|		ПраваОМДРолей.Роль КАК Роль,
	|		ПраваОМДРолей.Таблица КАК Таблица,
	|		ПраваОМДРолей.Добавление КАК Добавление,
	|		ПраваОМДРолей.Изменение КАК Изменение,
	|		ПраваОМДРолей.Удаление КАК Удаление,
	|		ПраваОМДРолей.ТипТаблицы КАК ТипТаблицы
	|	ИЗ
	|		ПраваОМДРолей КАК ПраваОМДРолей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофиля
	|			ПО ПраваОМДРолей.Роль = РолиПрофиля.Роль) КАК НовыеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК СтарыеТаблицы
	|		ПО НовыеТаблицы.Профиль = СтарыеТаблицы.Ссылка
	|			И НовыеТаблицы.Роль = СтарыеТаблицы.Роль
	|			И НовыеТаблицы.Таблица = СтарыеТаблицы.Таблица
	|			И НовыеТаблицы.Добавление = СтарыеТаблицы.Добавление
	|			И НовыеТаблицы.Изменение = СтарыеТаблицы.Изменение
	|			И НовыеТаблицы.Удаление = СтарыеТаблицы.Удаление
	|			И НовыеТаблицы.ТипТаблицы = СтарыеТаблицы.ТипТаблицы
	|ГДЕ
	|	СтарыеТаблицы.Роль ЕСТЬ NULL 
	|	И НовыеТаблицы.Профиль <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Профиль.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, Объект.ВерсияДанных);
		Объект.ДополнительныеСвойства.Вставить("НеОбновлятьРеквизитПоставляемыйПрофильИзменен");
		Объект.Записать();
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с группами доступа

// Выполняет обновление видов доступа групп доступа указанного профиля.
//  При этом возможно не удалять виды доступа из группы доступа,
// которые удалены в профиле этой группы доступа, в случае
// когда в группе доступа назначены значения доступа по
// удаляемому виду доступа.
// 
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//  НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа - Булево
//
// Возвращаемое значение:
//  Булево - когда Истина, группа доступа была изменена,
//           когда Ложь никаких изменений не было выполнено.
//
Функция ОбновитьГруппыДоступаПрофиля(Профиль, НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа) Экспорт
	
	ГруппаДоступаОбновлена = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	(ГруппыДоступа.Профиль = &Профиль
	|			ИЛИ &Профиль = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|				И ГруппыДоступа.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы))");
	
	Запрос.УстановитьПараметр("Профиль", Профиль.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Проверка необходимости/возможности обновления группы доступа.
		ГруппаДоступа = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ГруппаДоступа.Ссылка = Справочники.ГруппыДоступа.Администраторы
		   И ГруппаДоступа.Профиль <> Справочники.ПрофилиГруппДоступа.Администратор Тогда
			// Установка профиля Администратор, если не задан.
			ГруппаДоступа.Профиль = Справочники.ПрофилиГруппДоступа.Администратор;
		КонецЕсли;
		
		// Проверка состава видов доступа.
		СоставВидовДоступаИзменен                           = Ложь;
		ЕстьУдаляемыеВидыДоступаСЗаданнымиЗначениямиДоступа = Ложь;
		Если ГруппаДоступа.ВидыДоступа.Количество() <> Профиль.ВидыДоступа.НайтиСтроки(Новый Структура("Предустановленный", Ложь)).Количество() Тогда
			СоставВидовДоступаИзменен = Истина;
		Иначе
			Для каждого СтрокаВидаДоступа Из ГруппаДоступа.ВидыДоступа Цикл
				Если Профиль.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа, Предустановленный", СтрокаВидаДоступа.ВидДоступа, Ложь)).Количество() = 0 Тогда
					СоставВидовДоступаИзменен = Истина;
					Если ГруппаДоступа.ЗначенияДоступа.Найти(СтрокаВидаДоступа.ВидДоступа, "ВидДоступа") <> Неопределено Тогда
						ЕстьУдаляемыеВидыДоступаСЗаданнымиЗначениямиДоступа = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СоставВидовДоступаИзменен
		   И (     НЕ НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа
		       ИЛИ НЕ ЕстьУдаляемыеВидыДоступаСЗаданнымиЗначениямиДоступа ) Тогда
			// Обновление группы доступа.
			// 1. Удаление лишних видов доступа и значений доступа (если есть).
			ТекущийНомерСтроки = ГруппаДоступа.ВидыДоступа.Количество()-1;
			Пока ТекущийНомерСтроки >= 0 Цикл
				ТекущийВидДоступа = ГруппаДоступа.ВидыДоступа[ТекущийНомерСтроки].ВидДоступа;
				Если Профиль.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа, Предустановленный", ТекущийВидДоступа, Ложь)).Количество() = 0 Тогда
					СтрокиЗначенийВидаДоступа = ГруппаДоступа.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа));
					Для каждого СтрокаЗначения Из СтрокиЗначенийВидаДоступа Цикл
						ГруппаДоступа.ЗначенияДоступа.Удалить(СтрокаЗначения);
					КонецЦикла;
					ГруппаДоступа.ВидыДоступа.Удалить(ТекущийНомерСтроки);
				КонецЕсли;
				ТекущийНомерСтроки = ТекущийНомерСтроки - 1;
			КонецЦикла;
			// 2. Добавление новых видов доступа (если есть).
			Для каждого СтрокаВидаДоступа Из Профиль.ВидыДоступа Цикл
				Если НЕ СтрокаВидаДоступа.Предустановленный 
				   И ГруппаДоступа.ВидыДоступа.Найти(СтрокаВидаДоступа.ВидДоступа, "ВидДоступа") = Неопределено Тогда
					
					НоваяСтрока = ГруппаДоступа.ВидыДоступа.Добавить();
					НоваяСтрока.ВидДоступа     = СтрокаВидаДоступа.ВидДоступа;
					НоваяСтрока.ДоступРазрешен = СтрокаВидаДоступа.ДоступРазрешен;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ГруппаДоступа.Модифицированность() Тогда
			ЗаблокироватьДанныеДляРедактирования(ГруппаДоступа.Ссылка, ГруппаДоступа.ВерсияДанных);
			ГруппаДоступа.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
			ГруппаДоступа.Записать();
			ГруппаДоступаОбновлена = Истина;
			РазблокироватьДанныеДляРедактирования(ГруппаДоступа.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГруппаДоступаОбновлена;
	
КонецФункции

// Возвращает ссылку на группу-родителя персональных групп доступа.
//  Если родитель не найден он будет создан.
//
// Параметры:
//  НеСоздавать  - Булево, если задан Истина, родитель не будет автоматически создан,
//                 а функция вернет Неопределено, если родитель не найден
//
// Возвращаемое значение:
//  СправочникСсылка.ГруппыДоступа
//
Функция РодительПерсональныхГруппДоступа(Знач НеСоздавать = Ложь, НаименованиеГруппыЭлементов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеГруппыЭлементов = НСтр("ru = 'Персональные группы доступа'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеГруппыЭлементов", НаименованиеГруппыЭлементов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Наименование ПОДОБНО &НаименованиеГруппыЭлементов
	|	И ГруппыДоступа.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ГруппаЭлементов = Выборка.Ссылка;
	ИначеЕсли НеСоздавать Тогда
		ГруппаЭлементов = Неопределено;
	Иначе
		ГруппаЭлементовОбъект = Справочники.ГруппыДоступа.СоздатьГруппу();
		ГруппаЭлементовОбъект.Наименование = НаименованиеГруппыЭлементов;
		ГруппаЭлементовОбъект.Записать();
		ГруппаЭлементов = ГруппаЭлементовОбъект.Ссылка;
	КонецЕсли;
	
	Возврат ГруппаЭлементов;
	
КонецФункции

// Ообновляет состав РегистрСведений.ТаблицыГруппДоступа для одной или
// всех групп доступа пользователей, в которых есть пользователи.
//  Процедура использует таблицу Справочник.ПрофилиГруппДоступ.ТаблицыРолей.
//
// Параметры:
//  ГруппаДоступа - СправочникСсылка.ГруппыДоступа.
//
Процедура ОбновитьТаблицыГруппДоступа(Знач ГруппаДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицыРолей.Таблица КАК Таблица,
	|	МАКСИМУМ(ТаблицыРолей.Добавление) КАК Добавление,
	|	МАКСИМУМ(ТаблицыРолей.Изменение) КАК Изменение,
	|	МАКСИМУМ(ТаблицыРолей.Удаление) КАК Удаление,
	|	МАКСИМУМ(ТаблицыРолей.ТипТаблицы) КАК ТипТаблицы
	|ПОМЕСТИТЬ ТаблицыПрофиля
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК ТаблицыРолей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО (ГруппыДоступа.Профиль = ТаблицыРолей.Ссылка)
	|			И (ГруппыДоступа.Ссылка = &ГруппаДоступа)
	|			И (НЕ ГруппыДоступа.ПометкаУдаления)
	|			И (НЕ ТаблицыРолей.Ссылка.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицыРолей.Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицыПрофиля.Таблица,
	|	ПользователиГрупп.Пользователь,
	|	ТаблицыПрофиля.Добавление КАК Добавление,
	|	ТаблицыПрофиля.Изменение КАК Изменение,
	|	ТаблицыПрофиля.Удаление КАК Удаление,
	|	ТаблицыПрофиля.ТипТаблицы КАК ТипТаблицы,
	|	ВЫБОР
	|		КОГДА ТаблицыПрофиля.Добавление
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДоступаПравоДобавления,
	|	ВЫБОР
	|		КОГДА ТаблицыПрофиля.Изменение
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДоступаПравоИзменения
	|ПОМЕСТИТЬ ТаблицыПользователейГруппы
	|ИЗ
	|	ТаблицыПрофиля КАК ТаблицыПрофиля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ПользователиГрупп
	|		ПО (ПользователиГрупп.Ссылка = &ГруппаДоступа)
	|			И (НЕ ПользователиГрупп.Ссылка.ПометкаУдаления)
	|			И (НЕ ПользователиГрупп.Пользователь В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицыПрофиля.Таблица,
	|	ПользователиГрупп.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
	|		ПО (ТаблицыПользователейГруппы.Таблица = ТаблицыГруппДоступа.Таблица)
	|			И (ТаблицыПользователейГруппы.Пользователь = ТаблицыГруппДоступа.Пользователь)
	|			И (ТаблицыПользователейГруппы.Добавление = ТаблицыГруппДоступа.Добавление)
	|			И (ТаблицыПользователейГруппы.Изменение = ТаблицыГруппДоступа.Изменение)
	|			И (ТаблицыПользователейГруппы.Удаление = ТаблицыГруппДоступа.Удаление)
	|			И (ТаблицыПользователейГруппы.ТипТаблицы = ТаблицыГруппДоступа.ТипТаблицы)
	|			И (ТаблицыПользователейГруппы.ВидДоступаПравоДобавления = ТаблицыГруппДоступа.ВидДоступаПравоДобавления)
	|			И (ТаблицыПользователейГруппы.ВидДоступаПравоИзменения = ТаблицыГруппДоступа.ВидДоступаПравоИзменения)
	|ГДЕ
	|	ТаблицыГруппДоступа.ГруппаДоступа = &ГруппаДоступа
	|	И ТаблицыПользователейГруппы.Таблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|		ПО ТаблицыПользователейГруппы.Таблица = ТаблицыГруппДоступа.Таблица
	|			И ТаблицыПользователейГруппы.Пользователь = ТаблицыГруппДоступа.Пользователь
	|			И (ТаблицыГруппДоступа.ГруппаДоступа = &ГруппаДоступа)
	|			И ТаблицыПользователейГруппы.Добавление = ТаблицыГруппДоступа.Добавление
	|			И ТаблицыПользователейГруппы.Изменение = ТаблицыГруппДоступа.Изменение
	|			И ТаблицыПользователейГруппы.Удаление = ТаблицыГруппДоступа.Удаление
	|			И ТаблицыПользователейГруппы.ТипТаблицы = ТаблицыГруппДоступа.ТипТаблицы
	|			И ТаблицыПользователейГруппы.ВидДоступаПравоДобавления = ТаблицыГруппДоступа.ВидДоступаПравоДобавления
	|			И ТаблицыПользователейГруппы.ВидДоступаПравоИзменения = ТаблицыГруппДоступа.ВидДоступаПравоИзменения
	|ГДЕ
	|	ТаблицыГруппДоступа.Таблица ЕСТЬ NULL ");
	
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТаблицыГруппДоступа");
	ЭлементБлокировки.УстановитьЗначение("ГруппаДоступа", ГруппаДоступа);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатыЗапросы = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатыЗапросы[РезультатыЗапросы.Количество()-1].Пустой() Тогда
			
			Если РезультатыЗапросы[РезультатыЗапросы.Количество()-2].Выгрузить()[0].Количество < 10000 Тогда
				// Запись одним набором записей.
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицыПользователейГруппы.Таблица КАК Таблица,
				|	ТаблицыПользователейГруппы.Пользователь КАК Пользователь,
				|	&ГруппаДоступа КАК ГруппаДоступа,
				|	ТаблицыПользователейГруппы.Добавление,
				|	ТаблицыПользователейГруппы.Изменение,
				|	ТаблицыПользователейГруппы.Удаление,
				|	ТаблицыПользователейГруппы.ТипТаблицы,
				|	ТаблицыПользователейГруппы.ВидДоступаПравоДобавления,
				|	ТаблицыПользователейГруппы.ВидДоступаПравоИзменения
				|ИЗ
				|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы";
				НаборЗаписей = РегистрыСведений.ТаблицыГруппДоступа.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
				НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
				НаборЗаписей.Записать();
			Иначе
				// Запись несколькими наборами записей.
				// Очистка записей по группе доступа.
				НаборЗаписей = РегистрыСведений.ТаблицыГруппДоступа.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
				НаборЗаписей.Записать();
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицыПользователейГруппы.Таблица КАК Таблица,
				|	ТаблицыПользователейГруппы.Пользователь КАК Пользователь,
				|	ТаблицыПользователейГруппы.Добавление,
				|	ТаблицыПользователейГруппы.Изменение,
				|	ТаблицыПользователейГруппы.Удаление,
				|	ТаблицыПользователейГруппы.ТипТаблицы,
				|	ТаблицыПользователейГруппы.ВидДоступаПравоДобавления,
				|	ТаблицыПользователейГруппы.ВидДоступаПравоИзменения
				|ИЗ
				|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
				|ИТОГИ ПО
				|	Таблица";
				// Добавление записей по группе доступа частями по таблицам.
				Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка.Следующий() Цикл
					ВыборкаСтрок = Выборка.Выбрать();
					НаборЗаписей = РегистрыСведений.ТаблицыГруппДоступа.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
					НаборЗаписей.Отбор.Таблица.Установить(Выборка.Таблица);
					Пока ВыборкаСтрок.Следующий() Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтрок);
						НоваяЗапись.ГруппаДоступа = ГруппаДоступа;
					КонецЦикла;
					НаборЗаписей.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет записи в РегистрСведений.ЗначенияГруппДоступа для указанной группы доступа.
//
// Параметры:
//  ГруппаДоступа - СправочникСсылка.ГруппыДоступа.
//
Процедура ЗаписатьЗначенияГруппДоступа(Знач ГруппаДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.УстановитьПараметр("ПрофильГруппыДоступа", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ГруппаДоступа, "Профиль"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДоступаПрофиля.ВидДоступа КАК ВидДоступа,
	|	ИСТИНА КАК ТолькоВидДоступа,
	|	НЕОПРЕДЕЛЕНО КАК ЗначениеДоступа
	|ПОМЕСТИТЬ ЗначенияГруппы
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступаПрофиля
	|ГДЕ
	|	(НЕ ВидыДоступаПрофиля.ДоступРазрешен)
	|	И ВидыДоступаПрофиля.Ссылка = &ПрофильГруппыДоступа
	|	И ВидыДоступаПрофиля.Предустановленный
	|	И (НЕ ВидыДоступаПрофиля.Ссылка.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыДоступа.ВидДоступа,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПредустановленныеВидыДоступа
	|		ПО ВидыДоступа.Ссылка.Профиль = ПредустановленныеВидыДоступа.Ссылка
	|			И ВидыДоступа.ВидДоступа = ПредустановленныеВидыДоступа.ВидДоступа
	|			И ((НЕ ВидыДоступа.Ссылка.ПометкаУдаления))
	|			И ((НЕ ПредустановленныеВидыДоступа.Ссылка.ПометкаУдаления))
	|ГДЕ
	|	(НЕ ВидыДоступа.ДоступРазрешен)
	|	И ВидыДоступа.Ссылка = &ГруппаДоступа
	|	И (НЕ ПредустановленныеВидыДоступа.Предустановленный)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗначенияДоступаПрофиля.ВидДоступа,
	|	ЛОЖЬ,
	|	ЗначенияДоступаПрофиля.ЗначениеДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступаПрофиля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ЗначенияДоступа КАК ЗначенияДоступаПрофиля
	|		ПО (ВидыДоступаПрофиля.Предустановленный)
	|			И ((НЕ ВидыДоступаПрофиля.Ссылка.ПометкаУдаления))
	|			И (ВидыДоступаПрофиля.Ссылка = &ПрофильГруппыДоступа)
	|			И (ЗначенияДоступаПрофиля.Ссылка = &ПрофильГруппыДоступа)
	|			И ВидыДоступаПрофиля.ВидДоступа = ЗначенияДоступаПрофиля.ВидДоступа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗначенияДоступа.ВидДоступа,
	|	ЛОЖЬ,
	|	ЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПредустановленныеВидыДоступа
	|		ПО ВидыДоступа.Ссылка.Профиль = ПредустановленныеВидыДоступа.Ссылка
	|			И ВидыДоступа.ВидДоступа = ПредустановленныеВидыДоступа.ВидДоступа
	|			И ((НЕ ПредустановленныеВидыДоступа.Ссылка.ПометкаУдаления))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ЗначенияДоступа
	|		ПО (ВидыДоступа.Ссылка = &ГруппаДоступа)
	|			И (ЗначенияДоступа.Ссылка = &ГруппаДоступа)
	|			И ВидыДоступа.ВидДоступа = ЗначенияДоступа.ВидДоступа
	|			И ((НЕ ПредустановленныеВидыДоступа.Предустановленный))
	|			И ((НЕ ЗначенияДоступа.Ссылка.ПометкаУдаления))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияГруппы КАК ЗначенияГруппы
	|		ПО (ЗначенияГруппы.ВидДоступа = ЗначенияГруппДоступа.ВидДоступа)
	|			И (ЗначенияГруппы.ТолькоВидДоступа = ЗначенияГруппДоступа.ТолькоВидДоступа)
	|			И (ЗначенияГруппы.ЗначениеДоступа = ЗначенияГруппДоступа.ЗначениеДоступа)
	|ГДЕ
	|	ЗначенияГруппДоступа.ГруппаДоступа = &ГруппаДоступа
	|	И ЗначенияГруппы.ВидДоступа ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ЗначенияГруппы КАК ЗначенияГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	|		ПО (ЗначенияГруппДоступа.ГруппаДоступа = &ГруппаДоступа)
	|			И ЗначенияГруппы.ВидДоступа = ЗначенияГруппДоступа.ВидДоступа
	|			И ЗначенияГруппы.ТолькоВидДоступа = ЗначенияГруппДоступа.ТолькоВидДоступа
	|			И ЗначенияГруппы.ЗначениеДоступа = ЗначенияГруппДоступа.ЗначениеДоступа
	|ГДЕ
	|	ЗначенияГруппДоступа.ВидДоступа ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ГруппаДоступа КАК ГруппаДоступа,
	|	ЗначенияГруппы.ВидДоступа,
	|	ЗначенияГруппы.ТолькоВидДоступа,
	|	ЗначенияГруппы.ЗначениеДоступа
	|ИЗ
	|	ЗначенияГруппы КАК ЗначенияГруппы";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.ЗначенияГруппДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
		НаборЗаписей.Загрузить(РезультатыЗапроса[2].Выгрузить());
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
//  Вызывается при обновлении данных регистра сведений ГруппыЗначенийДоступа
// по видам доступа ПустаяСсылка, Пользователи, Внешние пользователи и
// при изменении состава участников групп доступа.
// 
Процедура ОбновитьПодчиненныхПользователейГруппДоступа() Экспорт
	
	//    Подготовка данных для работы ограничений по видам доступа Пользователи и ВнешниеПользователи
	//    когда ДобавлятьРуководителямДоступПодчиненных для проверки текущих пользователей
	//    (ТекущиеПользователи = ТекущийПользователь + ПодчиненныеПользователиПроверяемойГруппыДоступа)
	//
	//    <состав поля Пользователь>                 <cостав поля Подчиненныйпользователь>             <cостав поля ГруппаДоступа>
	//
	//    а) для вида доступа Пользователи
	//    {cравнение с &ТекущийПользователь}}        {cравнение с Т.<поле>}                            {cравнение с проверяемой группой доступа}
	//
	//    Пользователь                              - тот же Пользователь                              Группа доступа того же пользователя
	//                                              - Подчиненный пользователь                         Группа доступа подчиненного пользователя
	//                                              - ГруппаИсполнителей того же пользователя          Группа доступа того же пользователя
	//                                              - ГруппаИсполнителей подчиненного пользователя     Группа доступа подчиненного пользователя
	//
	//    б) для вида доступа ВнешниеПользователи
	//    {cравнение с &ТекущийВнешнийПользователь}} {cравнение с Т.<поле>}                                  {cравнение с проверяемой группой доступа}
	//
	//    Внешний пользователь                      - тот же Внешний пользователь                            Группа доступа того же внешнего пользователя
	//                                              - Подчиненный пользователь                               Группа доступа подчиненного внешнего пользователя
	//                                              - ГруппаИсполнителей того же внешнего пользователя       Группа доступа того же внешнего пользователя
	//                                              - ГруппаИсполнителей подчиненного внешнего пользователя  Группа доступа подчиненного внешнего пользователя
	//                                              - ОбъектАвторизации того же внешнего пользователя        Группа доступа того же внешнего пользователя
	//                                              - ОбъектАвторизации подчиненного внешнего пользователя   Группа доступа подчиненного внешнего пользователя
	
	// Результат получается на основании подчиненности пользователей и
	// данных для ограничения по видам доступа Пользователи и ВнешниеПользователи
	// подготовленных в регистре сведений ГруппыЗначенийДоступа,
	// а также участников групп доступа
	
	// Порядок получения данных
	// 1. Получить подчиненных пользователей
	// 2. Получить группы доступа пользователей без учета подчиненности
	// 3. Получить значения доступа пользователей по полученным группам доступа
	// 4. Получить новые данные: подчиненных пользователей по группам доступа,
	//    где в качестве подчиненных пользователей могут быть не только пользователи,
	//    но и группы пользователей и группы исполнителей задач и др.
	// 5. Получить строки для удаления
	// 6. Получить строки для добавления
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ УправлениеДоступом.ДобавлятьРуководителямДоступПодчиненных() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.ПодчиненныеПользователи КАК ПодчиненныеПользователи";
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			НаборЗаписей = РегистрыСведений.ПодчиненныеПользователи.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();
		КонецЕсли;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка таблицы подчиненности пользователей.
		Если НЕ УправлениеДоступомПереопределяемый.ТаблицаПодчиненностиПользователей(Запрос.МенеджерВременныхТаблиц) Тогда
			//
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	Пользователи.Ссылка КАК ПодчиненныйПользователь
			|ПОМЕСТИТЬ ТаблицаПодчиненностиПользователей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	ЛОЖЬ";
			Запрос.Выполнить();
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПодчиненностиПользователей.Пользователь,
		|	ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь
		|ПОМЕСТИТЬ ПодчиненныеПользователи
		|ИЗ
		|	ТаблицаПодчиненностиПользователей КАК ТаблицаПодчиненностиПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.Пользователь) = ТИП(Справочник.Пользователи)
		|	И ТаблицаПодчиненностиПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь) = ТИП(Справочник.Пользователи)
		|	И ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
		|	И ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.Пользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодчиненностиПользователей.Пользователь КАК ВнешнийПользователь,
		|	ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь КАК ПодчиненныйВнешнийПользователь
		|ПОМЕСТИТЬ ПодчиненныеВнешниеПользователи
		|ИЗ
		|	ТаблицаПодчиненностиПользователей КАК ТаблицаПодчиненностиПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|	И ТаблицаПодчиненностиПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка)
		|	И ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь) = ТИП(Справочник.ВнешниеПользователи)
		|	И ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь <> ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь,
		|	СоставыГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|	И ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ВнешниеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПодчиненностиПользователей";
		
		Запрос.Текст = Запрос.Текст + Символы.ПС+ ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодчиненныеПользователи.Пользователь,
		|	ГруппыЗначенийДоступа.ЗначениеДоступа КАК ПодчиненныйПользователь,
		|	УчастникиГруппДоступа.Ссылка КАК ГруппаДоступа
		|ПОМЕСТИТЬ НовыеДанные
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеПользователи КАК ПодчиненныеПользователи
		|		ПО (ГруппыЗначенийДоступа.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи))
		|			И ГруппыЗначенийДоступа.ГруппаДоступа = ПодчиненныеПользователи.ПодчиненныйПользователь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = ПодчиненныеПользователи.ПодчиненныйПользователь)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК УчастникиГруппДоступа
		|		ПО (УчастникиГруппДоступа.Пользователь = ПользователиИГруппыПользователей.ГруппаДоступа)
		|			И ((НЕ УчастникиГруппДоступа.Ссылка.ПометкаУдаления))
		|			И ((НЕ УчастникиГруппДоступа.Ссылка.Профиль.ПометкаУдаления))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодчиненныеВнешниеПользователи.ВнешнийПользователь,
		|	ГруппыЗначенийДоступа.ЗначениеДоступа,
		|	УчастникиГруппДоступа.Ссылка
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеВнешниеПользователи КАК ПодчиненныеВнешниеПользователи
		|		ПО (ГруппыЗначенийДоступа.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи))
		|			И ГруппыЗначенийДоступа.ГруппаДоступа = ПодчиненныеВнешниеПользователи.ПодчиненныйВнешнийПользователь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = ПодчиненныеВнешниеПользователи.ПодчиненныйВнешнийПользователь)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК УчастникиГруппДоступа
		|		ПО (УчастникиГруппДоступа.Пользователь = ПользователиИГруппыПользователей.ГруппаДоступа)
		|			И ((НЕ УчастникиГруппДоступа.Ссылка.ПометкаУдаления))
		|			И ((НЕ УчастникиГруппДоступа.Ссылка.Профиль.ПометкаУдаления))";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтарыеДанные.Пользователь,
		|	СтарыеДанные.ПодчиненныйПользователь,
		|	СтарыеДанные.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ПодчиненныеПользователи КАК СтарыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеДанные КАК НовыеДанные
		|		ПО СтарыеДанные.Пользователь = НовыеДанные.Пользователь
		|			И СтарыеДанные.ПодчиненныйПользователь = НовыеДанные.ПодчиненныйПользователь
		|			И СтарыеДанные.ГруппаДоступа = НовыеДанные.ГруппаДоступа
		|ГДЕ
		|	НовыеДанные.Пользователь ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеДанные.Пользователь,
		|	НовыеДанные.ПодчиненныйПользователь,
		|	НовыеДанные.ГруппаДоступа
		|ИЗ
		|	НовыеДанные КАК НовыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненныеПользователи КАК СтарыеДанные
		|		ПО (СтарыеДанные.Пользователь = НовыеДанные.Пользователь)
		|			И (СтарыеДанные.ПодчиненныйПользователь = НовыеДанные.ПодчиненныйПользователь)
		|			И (СтарыеДанные.ГруппаДоступа = НовыеДанные.ГруппаДоступа)
		|ГДЕ
		|	СтарыеДанные.Пользователь ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеДанные";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		// Удаление лишних записей
		МенеджерЗаписи = РегистрыСведений.ПодчиненныеПользователи.СоздатьМенеджерЗаписи();
		УдаляемыеСтроки = РезультатЗапроса[0].Выбрать();
		//
		Пока УдаляемыеСтроки.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, УдаляемыеСтроки);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		// Добавление недостающих записей
		Выгрузка = РезультатЗапроса[1].Выгрузить();
		Если Выгрузка.Количество() > 0 Тогда
			НаборЗаписей = РегистрыСведений.ПодчиненныеПользователи.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(Выгрузка);
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с правами по значения доступа

// Возвращает описание возможных прав по значениям доступа.
//  Подробнее о возможных правах см. в комментарии к функции
// УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//
// Параметры:
//  Таблица      - Строка, Неопределено - полное имя таблицы значений доступа,
//                 для которых нужно получить описание возможных прав,
//                 когда Неопределено, возвращается таблица всех описаний,
//                 заданных прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками, описание которых см. в комментарии к функции
//    УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//    Если задан параметр Таблица, возвращаются только её описания.
//
Функция ВозможныеПраваПоЗначениюДоступа(Таблица = Неопределено) Экспорт
	
	ВозможныеПрава = УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваПоЗначениямДоступа();
	
	Если Таблица = Неопределено Тогда
		Строки = Неопределено;
	Иначе
		Строки = ВозможныеПрава.НайтиСтроки(Новый Структура("ВладелецПрав", Таблица));
	КонецЕсли;
	
	Возврат ВозможныеПрава.Скопировать(Строки);
	
КонецФункции

// Выполняет обновление таблиц в регистре сведений ПраваПоЗначенияДоступа,
// когда изменена процедура ЗаполнитьВозможныеПраваПоЗначениямДоступа
// модуля УправлениеДоступомПереопределяемый.
// 
Процедура ОбновитьТаблицыПравПоЗначениямДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозможныеПрава = УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваПоЗначениямДоступа();
	
	ТаблицыПрав = Новый ТаблицаЗначений;
	ТаблицыПрав.Колонки.Добавить("ВладелецПрав", Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.Измерения.ЗначениеДоступа.Тип);
	ТаблицыПрав.Колонки.Добавить("Право",        Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.Измерения.Право.Тип);
	ТаблицыПрав.Колонки.Добавить("Таблица",      Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.Измерения.Таблица.Тип);
	ТаблицыПрав.Колонки.Добавить("Чтение",       Новый ОписаниеТипов("Булево"));
	ТаблицыПрав.Колонки.Добавить("Добавление",   Новый ОписаниеТипов("Булево"));
	ТаблицыПрав.Колонки.Добавить("Изменение",    Новый ОписаниеТипов("Булево"));
	ТаблицыПрав.Колонки.Добавить("Удаление",     Новый ОписаниеТипов("Булево"));
	
	Для каждого ОписаниеПрава Из ВозможныеПрава Цикл
		ВладелецПрав = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеПрава.ВладелецПрав).ПустаяСсылка();
		Если ТаблицыПрав.Колонки.ВладелецПрав.ТипЗначения.СодержитТип(ТипЗнч(ВладелецПрав)) Тогда
			Для каждого Таблица Из ОписаниеПрава.ЧтениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Чтение       = Истина;
			КонецЦикла;
			Для каждого Таблица Из ОписаниеПрава.ДобавлениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Добавление   = Истина;
			КонецЦикла;
			Для каждого Таблица Из ОписаниеПрава.ИзменениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Изменение    = Истина;
			КонецЦикла;
			Для каждого Таблица Из ОписаниеПрава.УдалениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Удаление     = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицыПрав", ТаблицыПрав);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицыПрав.ВладелецПрав,
	|	ТаблицыПрав.Право,
	|	ТаблицыПрав.Таблица,
	|	ТаблицыПрав.Чтение,
	|	ТаблицыПрав.Добавление,
	|	ТаблицыПрав.Изменение,
	|	ТаблицыПрав.Удаление
	|ПОМЕСТИТЬ ТаблицыПрав
	|ИЗ
	|	&ТаблицыПрав КАК ТаблицыПрав
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаписи.ЗначениеДоступа,
	|	НовыеЗаписи.Пользователь,
	|	НовыеЗаписи.Право,
	|	НовыеЗаписи.Таблица,
	|	НовыеЗаписи.Запрещено,
	|	НовыеЗаписи.РаспространяетсяВИерархии,
	|	НовыеЗаписи.Чтение,
	|	НовыеЗаписи.ЧтениеЗапрещено,
	|	НовыеЗаписи.Добавление,
	|	НовыеЗаписи.ДобавлениеЗапрещено,
	|	НовыеЗаписи.Изменение,
	|	НовыеЗаписи.ИзменениеЗапрещено,
	|	НовыеЗаписи.Удаление,
	|	НовыеЗаписи.УдалениеЗапрещено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПраваПоЗначениям.ЗначениеДоступа КАК ЗначениеДоступа,
	|		ПраваПоЗначениям.Пользователь КАК Пользователь,
	|		ПраваПоЗначениям.Право КАК Право,
	|		ПраваПоЗначениям.Запрещено КАК Запрещено,
	|		ПраваПоЗначениям.РаспространяетсяВИерархии КАК РаспространяетсяВИерархии,
	|		ЕСТЬNULL(ТаблицыПрав.Таблица, """") КАК Таблица,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|		КОНЕЦ КАК Чтение,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЧтениеЗапрещено,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|		КОНЕЦ КАК Добавление,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДобавлениеЗапрещено,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|		КОНЕЦ КАК Изменение,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИзменениеЗапрещено,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|		КОНЕЦ КАК Удаление,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК УдалениеЗапрещено
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПраваПоЗначениямДоступа.ЗначениеДоступа КАК ЗначениеДоступа,
	|			ПраваПоЗначениямДоступа.Пользователь КАК Пользователь,
	|			ПраваПоЗначениямДоступа.Право КАК Право,
	|			МАКСИМУМ(ПраваПоЗначениямДоступа.Запрещено) КАК Запрещено,
	|			МАКСИМУМ(ПраваПоЗначениямДоступа.РаспространяетсяВИерархии) КАК РаспространяетсяВИерархии
	|		ИЗ
	|			РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПраваПоЗначениямДоступа.ЗначениеДоступа,
	|			ПраваПоЗначениямДоступа.Пользователь,
	|			ПраваПоЗначениямДоступа.Право) КАК ПраваПоЗначениям
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыПрав КАК ТаблицыПрав
	|			ПО (ТИПЗНАЧЕНИЯ(ПраваПоЗначениям.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТаблицыПрав.ВладелецПрав))
	|				И ПраваПоЗначениям.Право = ТаблицыПрав.Право) КАК НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоЗначениямДоступа КАК ТекущиеЗаписи
	|		ПО НовыеЗаписи.ЗначениеДоступа = ТекущиеЗаписи.ЗначениеДоступа
	|			И НовыеЗаписи.Пользователь = ТекущиеЗаписи.Пользователь
	|			И НовыеЗаписи.Право = ТекущиеЗаписи.Право
	|			И НовыеЗаписи.Таблица = ТекущиеЗаписи.Таблица
	|			И НовыеЗаписи.Запрещено = ТекущиеЗаписи.Запрещено
	|			И НовыеЗаписи.РаспространяетсяВИерархии = ТекущиеЗаписи.РаспространяетсяВИерархии
	|			И НовыеЗаписи.Чтение = ТекущиеЗаписи.Чтение
	|			И НовыеЗаписи.ЧтениеЗапрещено = ТекущиеЗаписи.ЧтениеЗапрещено
	|			И НовыеЗаписи.Добавление = ТекущиеЗаписи.Добавление
	|			И НовыеЗаписи.ДобавлениеЗапрещено = ТекущиеЗаписи.ДобавлениеЗапрещено
	|			И НовыеЗаписи.Изменение = ТекущиеЗаписи.Изменение
	|			И НовыеЗаписи.ИзменениеЗапрещено = ТекущиеЗаписи.ИзменениеЗапрещено
	|			И НовыеЗаписи.Удаление = ТекущиеЗаписи.Удаление
	|			И НовыеЗаписи.УдалениеЗапрещено = ТекущиеЗаписи.УдалениеЗапрещено
	|ГДЕ
	|	ТекущиеЗаписи.ЗначениеДоступа ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаписи.ЗначениеДоступа,
	|	НовыеЗаписи.Пользователь,
	|	НовыеЗаписи.Право,
	|	НовыеЗаписи.Таблица
	|ИЗ
	|	РегистрСведений.ПраваПоЗначениямДоступа КАК ТекущиеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПраваПоЗначениям.ЗначениеДоступа КАК ЗначениеДоступа,
	|			ПраваПоЗначениям.Пользователь КАК Пользователь,
	|			ПраваПоЗначениям.Право КАК Право,
	|			ПраваПоЗначениям.Запрещено КАК Запрещено,
	|			ПраваПоЗначениям.РаспространяетсяВИерархии КАК РаспространяетсяВИерархии,
	|			ЕСТЬNULL(ТаблицыПрав.Таблица, """") КАК Таблица,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|			КОНЕЦ КАК Чтение,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ЧтениеЗапрещено,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|			КОНЕЦ КАК Добавление,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ДобавлениеЗапрещено,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|			КОНЕЦ КАК Изменение,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ИзменениеЗапрещено,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|			КОНЕЦ КАК Удаление,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК УдалениеЗапрещено
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПраваПоЗначениямДоступа.ЗначениеДоступа КАК ЗначениеДоступа,
	|				ПраваПоЗначениямДоступа.Пользователь КАК Пользователь,
	|				ПраваПоЗначениямДоступа.Право КАК Право,
	|				МАКСИМУМ(ПраваПоЗначениямДоступа.Запрещено) КАК Запрещено,
	|				МАКСИМУМ(ПраваПоЗначениямДоступа.РаспространяетсяВИерархии) КАК РаспространяетсяВИерархии
	|			ИЗ
	|				РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПраваПоЗначениямДоступа.ЗначениеДоступа,
	|				ПраваПоЗначениямДоступа.Пользователь,
	|				ПраваПоЗначениямДоступа.Право) КАК ПраваПоЗначениям
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыПрав КАК ТаблицыПрав
	|				ПО (ТИПЗНАЧЕНИЯ(ПраваПоЗначениям.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТаблицыПрав.ВладелецПрав))
	|					И ПраваПоЗначениям.Право = ТаблицыПрав.Право) КАК НовыеЗаписи
	|		ПО НовыеЗаписи.ЗначениеДоступа = ТекущиеЗаписи.ЗначениеДоступа
	|			И НовыеЗаписи.Пользователь = ТекущиеЗаписи.Пользователь
	|			И НовыеЗаписи.Право = ТекущиеЗаписи.Право
	|			И НовыеЗаписи.Таблица = ТекущиеЗаписи.Таблица
	|			И НовыеЗаписи.Запрещено = ТекущиеЗаписи.Запрещено
	|			И НовыеЗаписи.РаспространяетсяВИерархии = ТекущиеЗаписи.РаспространяетсяВИерархии
	|			И НовыеЗаписи.Чтение = ТекущиеЗаписи.Чтение
	|			И НовыеЗаписи.ЧтениеЗапрещено = ТекущиеЗаписи.ЧтениеЗапрещено
	|			И НовыеЗаписи.Добавление = ТекущиеЗаписи.Добавление
	|			И НовыеЗаписи.ДобавлениеЗапрещено = ТекущиеЗаписи.ДобавлениеЗапрещено
	|			И НовыеЗаписи.Изменение = ТекущиеЗаписи.Изменение
	|			И НовыеЗаписи.ИзменениеЗапрещено = ТекущиеЗаписи.ИзменениеЗапрещено
	|			И НовыеЗаписи.Удаление = ТекущиеЗаписи.Удаление
	|			И НовыеЗаписи.УдалениеЗапрещено = ТекущиеЗаписи.УдалениеЗапрещено
	|ГДЕ
	|	НовыеЗаписи.ЗначениеДоступа ЕСТЬ NULL ";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Для каждого ОписаниеУдаляемойЗаписи ИЗ РезультатыЗапроса[2].Выгрузить() Цикл
		МенеджерЗаписи = РегистрыСведений.ПраваПоЗначениямДоступа.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ОписаниеУдаляемойЗаписи);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ПраваПоЗначениямДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(РезультатыЗапроса[1].Выгрузить());
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с наборами значений доступа

// Заполняет вспомогательные данные, ускоряющие работу шаблонов ограничений доступа.
//  Выполняется перед записью в регистр НаборыЗначенийДоступа или
// перед записью объекта с табличной частью НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.*, ДокументСсылка.*, ...
//  Таблица        - ТабличнаяЧасть (или ТаблицаЗначений), РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа
//
Процедура ПодготовкаНаборовЗначенийДоступаПередЗаписью(СсылкаНаОбъект, Таблица) Экспорт
	
	ПодготовкаНабораЗаписей = ТипЗнч(Таблица) = Тип("РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа");
	
	// Нормализация ресурсов Чтение, Добавление, Изменение, Удаление.
	НомерНабора = -1;
	Для каждого Строка Из Таблица Цикл
		
		Если ПодготовкаНабораЗаписей Тогда
			// Установка значения измерения Объект
			Строка.Объект = СсылкаНаОбъект;
			// Заполнение свойств вида доступа:
			//   ВидДоступаБезГруппЗначенияДоступа,
			//   ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
			//   ВидДоступаЧерезПраваПоЗначениямДоступа
			СвойстваВидаДоступа = СвойстваВидаДоступа(Строка.ВидДоступа);
			Если СвойстваВидаДоступа <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Строка, СвойстваВидаДоступа(Строка.ВидДоступа));
			КонецЕсли;
			// Установка типа объекта для одной строки всех наборов (в качестве типа пустая ссылка)
			Если НомерНабора = -1 Тогда
				ТипыОбъекта = Новый Массив;
				ТипыОбъекта.Добавить(ТипЗнч(СсылкаНаОбъект));
				ОписаниеТипаОбъекта = Новый ОписаниеТипов(ТипыОбъекта);
				Строка.ТипОбъекта = ОписаниеТипаОбъекта.ПривестиЗначение(Неопределено);
			КонецЕсли;
			// Установка типа значения доступа для значений доступа по видам доступа
			// ПравоЧтения, ПравоДобавления, ПравоИзменения (в качестве типа пустая ссылка)
			Если Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения
			 ИЛИ Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления
			 ИЛИ Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения Тогда
				МенеджерОбъекта = ?(Строка.ЗначениеДоступа <> Неопределено, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Строка.ЗначениеДоступа), Неопределено);
				Если МенеджерОбъекта <> Неопределено Тогда
					Строка.ТипЗначенияДоступа = МенеджерОбъекта.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Очистка флажков прав и соответствующих им вторичных данных
		// для всех строк каждого набора, кроме первой строки
		Если НомерНабора = Строка.НомерНабора Тогда
			Строка.Чтение     = Ложь;
			Строка.Добавление = Ложь;
			Строка.Изменение  = Ложь;
			Строка.Удаление   = Ложь;
		Иначе
			НомерНабора = Строка.НомерНабора;
		КонецЕсли;
		
		Если ПодготовкаНабораЗаписей Тогда
			// Описание прав Чтение, Добавление, Изменение через ссылки видов доступа для
			// оптимизации работы механизма зависимостей по правам в шаблоне ограничения доступа
			Строка.ВидДоступаПравоЧтения     = ?(Строка.Чтение,     ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения,     ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка());
			Строка.ВидДоступаПравоДобавления = ?(Строка.Добавление, ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления, ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка());
			Строка.ВидДоступаПравоИзменения  = ?(Строка.Изменение,  ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения,  ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект) Экспорт
	
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если Объект.Метаданные().ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры.
				           |Тип объекта ""%1""
				           |не найдена табличная часть ""Наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Таблица = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) И
		     НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
			ВызватьИсключение(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверные параметры.
					           |Тип объекта ""%1""
					           |не найден ни в одной из подписок на события
					           |""Записать наборы значений доступа"",
					           |""Записать зависимые наборы значений доступа"".'"),
					ТипЗначенияОбъект));
		КонецЕсли;
		
		Объект.ЗаполнитьНаборыЗначенийДоступа(Таблица);
		
		Если Таблица.Количество() = 0 Тогда
			// Если это условие отключить, тогда зациклится регламентное задание
			// заполнения данных для ограничения доступа.
			ВызватьИсключение(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект ""%1"" сформировал пустой набор значений доступа.'"),
					ТипЗначенияОбъект));
		КонецЕсли;
		
		УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), Ложь, Истина);
		
		ПодготовкаНаборовЗначенийДоступаПередЗаписью(СсылкаНаОбъект, Таблица);
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Перезаписывает наборы значений доступа проверяемого объекта
// в РегистрСведений.НаборыЗначенийДоступа, используя процедуру
// УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа().
//
//  Процедура вызывается из УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// но может быть вызвана из любого места, например,
// при включении ограничения доступа на уровне записей.
//
// Вызывает процедуру прикладного разработчика
// УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(),
// которая используется для перезаписи зависимых наборов значений доступа.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//
Процедура ЗаписатьНаборыЗначенийДоступа(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры.
				           |Тип объекта ""%1""
				           |не найден в подписке на события
				           |""Записать наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи наборов значений доступа:
				           |в регистре сведений НаборыЗначенийДоступа в измерении Объект
				           |не задан тип %1'"),
				СсылкаНаОбъект.Метаданные().ПолноеИмя()));
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		Если Метаданные.НайтиПоТипу(ТипЗначенияОбъект).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
			
			УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Объект, НаборЗаписей);
			
			УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(
				НаборЗаписей, УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), Ложь, Истина);
		Иначе
			// Записан объект с уже заполненной табличной частью НаборыЗначенийДоступа
			НаборЗаписей.Загрузить(Объект.НаборыЗначенийДоступа.Выгрузить());
		КонецЕсли;
		
		НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
		ПодготовкаНаборовЗначенийДоступаПередЗаписью(СсылкаНаОбъект, НаборЗаписей);
		Если НаборыЗначенийДоступаРегистраИзменены(СсылкаНаОбъект, НаборЗаписей) Тогда
			НаборЗаписей.Записать();
			ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|ГДЕ
		|	НаборыЗначенийДоступа.Объект = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			// Очистка устаревшего набора.
			// Запись нового набора будет выполнена регламентным заданием,
			// после включения ограничения на уровне записей.
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
			НаборЗаписей.Записать();
			
			// Очистка устаревших зависимых наборов.
			ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Перезаписывает наборы значений доступа зависимых объектов.
//
//  Процедура вызывается из УправлениеДоступомСлужебный.ЗаписатьЗависимыеНаборыЗначенийДоступа(),
// состав типов подписки дополняет (без пересечения) состав типов подписки ЗаписатьНаборыЗначенийДоступа,
// теми типами, для которых выполнять запись наборов в регистр сведений НаборыЗначенийДоступа
// не требуется, но сами наборы входят в состав других наборов, например, наборы некоторых файлов
// из справочника "Файлы" могут входить в состав некоторых бизнес-процессов "Задание", созданных
// на основании файлов, при этом наборы файлов записывать в регистр не требуется.
//
// Вызывает процедуру прикладного разработчика
// УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(),
// которая используется для перезаписи зависимых наборов значений доступа,
// то есть организуется рекурсия.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//
Процедура ЗаписатьЗависимыеНаборыЗначенийДоступа(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры.
				           |Тип объекта ""%1""
				           |не найден в подписке на события
				           |""Записать зависимые наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект);
	
КонецПроцедуры

Функция НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаОбъект, НовыеНаборы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтарыеНаборы", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "НаборыЗначенийДоступа"));
	Запрос.УстановитьПараметр("НовыеНаборы",  НовыеНаборы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеНаборы.НомерНабора,
	|	НовыеНаборы.ВидДоступа,
	|	НовыеНаборы.ЗначениеДоступа,
	|	НовыеНаборы.Чтение,
	|	НовыеНаборы.Добавление,
	|	НовыеНаборы.Изменение,
	|	НовыеНаборы.Удаление
	|ПОМЕСТИТЬ НовыеНаборы
	|ИЗ
	|	&НовыеНаборы КАК НовыеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеНаборы.НомерНабора,
	|	СтарыеНаборы.ВидДоступа,
	|	СтарыеНаборы.ЗначениеДоступа,
	|	СтарыеНаборы.Чтение,
	|	СтарыеНаборы.Добавление,
	|	СтарыеНаборы.Изменение,
	|	СтарыеНаборы.Удаление
	|ПОМЕСТИТЬ СтарыеНаборы
	|ИЗ
	|	&СтарыеНаборы КАК СтарыеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	СтарыеНаборы КАК СтарыеНаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеНаборы КАК НовыеНаборы
	|		ПО СтарыеНаборы.НомерНабора = НовыеНаборы.НомерНабора
	|			И СтарыеНаборы.ВидДоступа = НовыеНаборы.ВидДоступа
	|			И СтарыеНаборы.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа
	|			И СтарыеНаборы.Чтение = НовыеНаборы.Чтение
	|			И СтарыеНаборы.Добавление = НовыеНаборы.Добавление
	|			И СтарыеНаборы.Изменение = НовыеНаборы.Изменение
	|			И СтарыеНаборы.Удаление = НовыеНаборы.Удаление
	|ГДЕ
	|	НовыеНаборы.НомерНабора ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеНаборы КАК НовыеНаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеНаборы КАК СтарыеНаборы
	|		ПО (СтарыеНаборы.НомерНабора = НовыеНаборы.НомерНабора)
	|			И (СтарыеНаборы.ВидДоступа = НовыеНаборы.ВидДоступа)
	|			И (СтарыеНаборы.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа)
	|			И (СтарыеНаборы.Чтение = НовыеНаборы.Чтение)
	|			И (СтарыеНаборы.Добавление = НовыеНаборы.Добавление)
	|			И (СтарыеНаборы.Изменение = НовыеНаборы.Изменение)
	|			И (СтарыеНаборы.Удаление = НовыеНаборы.Удаление)
	|ГДЕ
	|	СтарыеНаборы.НомерНабора ЕСТЬ NULL ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для действий при изменений настроек подсистемы

// Если необходимо, включает заполнение данных для ограничения доступа и
// обновляет некоторые данные сразу.
//
// Вызывается из обработчика ПриЗаписи константы ОграничиватьДоступаНаУровнеЗаписей.
//
Процедура ПриИзмененииОграниченияДоступаНаУровнеЗаписей(ОграничениеДоступаНаУровнеЗаписейВключено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОграничениеДоступаНаУровнеЗаписейВключено Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'"), 
			УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начато заполнение данных для ограничения доступа'"), 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		// Дополнительно обновляются таблицы прав, т.к. они будут использоваться
		// в процедуре заполнения регистра сведений ТаблицыГруппДоступа.
		ОбновитьТаблицыРолейПрофилейГруппДоступа();
		
		// Обновление РегистрСведений.ТаблицыГруппДоступа и РегистрСведений.ЗначенияГруппДоступа.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ГруппыДоступа.Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступа КАК ГруппыДоступа
			|ГДЕ
			|	(НЕ ГруппыДоступа.ЭтоГруппа)");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбновитьТаблицыГруппДоступа(Выборка.Ссылка);
			ЗаписатьЗначенияГруппДоступа(Выборка.Ссылка);
		КонецЦикла;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			СтандартныеПодсистемыПереопределяемый.УстановитьИспользованиеЗаданияЗаполненияДанныхУправленияДоступом(Истина);
		Иначе
			Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа);
			Задание.Использование = Истина;
			Задание.Записать();
		КонецЕсли;
	КонецЕсли;
	
	// Обновление параметров сеанса.
	// Требуется для того, чтобы администратор не выполнял перезапуск.
	УстановленныеПараметры = Новый Массив;
	УстановкаПараметровСеанса("ОграничиватьДоступПоВиду", УстановленныеПараметры);
	
КонецПроцедуры

// Обновляет данные, зависимые от константы ДобавлятьРуководителямДоступПодчиненных.
// Вызывается из обработчика ПриЗаписи константы.
//
Процедура ПриИзмененииКонстантыДобавлятьРуководителямДоступПодчиненных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыПользователей.ВсеПользователи);
	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи);
	
	// Обновление параметра сеанса.
	// Требуется для того, чтобы администратор не выполнял перезапуск.
	УстановленныеПараметры = Новый Массив;
	УстановкаПараметровСеанса("ДобавлятьРуководителямДоступПодчиненных", УстановленныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы интерфейсов пользователей

// Возвращает список значений доступа не помеченных на удаление.
//  Используется в обработчиках событий ОкончаниеВводаТекста и АвтоПодбор.
//
// Параметры:
//  Текст         - Строка, символы введенные пользователем.
//  ВключаяГруппы - Булево, если Истина, включать группы пользователей и внешних пользователей.
//  ВидДоступа    - ПланыВидовХарактеристикСсылка.ВидыДоступа, значения доступа которого выбираются.
//
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВключаяГруппы", ВключаяГруппы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредставленияПеречислений.Ссылка,
	|	ПредставленияПеречислений.Наименование КАК Наименование
	|ПОМЕСТИТЬ ПредставленияПеречислений
	|ИЗ
	|	&ПредставленияПеречислений КАК ПредставленияПеречислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	"""" КАК Наименование
	|ГДЕ
	|	ЛОЖЬ";
	
	ЗапросПредставленийПеречислений = Новый Запрос;
	ЗапросПредставленийПеречислений.Текст =
	"ВЫБРАТЬ
	|	"""" КАК Ссылка,
	|	"""" КАК Наименование
	|ГДЕ
	|	ЛОЖЬ";
	
	Для каждого Тип Из ВидДоступа.ТипЗначения.Типы() Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		
		ПолноеИмяТаблицы = МетаданныеТипа.ПолноеИмя();
		
		Если (     Метаданные.Справочники.Содержит(МетаданныеТипа)
		       ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) )
		   И МетаданныеТипа.Иерархический
		   И МетаданныеТипа.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
		   И НЕ ВключаяГруппы Тогда
			
			УсловиеДляГруппы = "НЕ Таблица.ЭтоГруппа";
		Иначе
			УсловиеДляГруппы = "Истина";
		КонецЕсли;
		
		Если Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
			//
			ЗапросПредставленийПеречислений.Текст = ЗапросПредставленийПеречислений.Текст + Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "  + Символы.ПС + Символы.ПС;
			ЗапросПредставленийПеречислений.Текст = ЗапросПредставленийПеречислений.Текст + СтрЗаменить(
			"ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Наименование
			|ИЗ
			|	&ПолноеИмяТаблицы КАК Таблица", "&ПолноеИмяТаблицы", ПолноеИмяТаблицы);
		Иначе
			Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "  + Символы.ПС + Символы.ПС;
			Запрос.Текст = Запрос.Текст + СтрЗаменить(СтрЗаменить(
			"ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	Таблица.Наименование
			|ИЗ
			|	&ПолноеИмяТаблицы КАК Таблица
			|ГДЕ
			|	(НЕ Таблица.ПометкаУдаления)
			|	И Таблица.Наименование ПОДОБНО &Текст
			|	И &УсловиеДляГруппы", "&ПолноеИмяТаблицы", ПолноеИмяТаблицы), "&УсловиеДляГруппы", УсловиеДляГруппы);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПредставленияПеречислений", ЗапросПредставленийПеречислений.Выполнить().Выгрузить());
	Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "  + Символы.ПС + Символы.ПС;
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ПредставленияПеречислений.Ссылка,
	|	ПредставленияПеречислений.Наименование
	|ИЗ
	|	ПредставленияПеречислений КАК ПредставленияПеречислений
	|ГДЕ
	|	ПредставленияПеречислений.Наименование ПОДОБНО &Текст";
	
	ДанныеВыбора = Новый СписокЗначений;
	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Заполняет шаблон заголовка подчиненной формы свойствами ссылки-владельца,
// например, НСтр("ru = 'Права доступа: %1 (%2)'" -> "Права доступа: Иванов (Пользователь)".
//
// Параметры:
//  СсылкаНаВладельца - ссылка на объект-владелец.
//
Функция ЗаголовокПодчиненнойФормы(СтрокаЗаголовкаСПараметрами, СсылкаНаВладельца) Экспорт
	
	МетаданныеВладельца   = СсылкаНаВладельца.Метаданные();
	НаименованиеВладельца = Строка(СсылкаНаВладельца);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СтрокаЗаголовкаСПараметрами,
					НаименованиеВладельца,
					НазваниеОбъектаИзМетаданных(МетаданныеВладельца) );
	
КонецФункции

// Возвращает название объекта метаданных с учетом заданных свойств в порядке:
//  - РасширенноеПредставлениеОбъекта,
//  - ПредставлениеОбъекта,
//  - Синоним,
//  - Имя.
//
// Параметры:
//  МетаданныеОбъекта - ОбъектМетаданных.
//
// Возвращаемое значение:
//  Строка.
//
Функция НазваниеОбъектаИзМетаданных(МетаданныеОбъекта) Экспорт
	
	Если ЗначениеЗаполнено(МетаданныеОбъекта.РасширенноеПредставлениеОбъекта) Тогда
		НазваниеОбъекта = МетаданныеОбъекта.РасширенноеПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(МетаданныеОбъекта.ПредставлениеОбъекта) Тогда
		НазваниеОбъекта = МетаданныеОбъекта.ПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(МетаданныеОбъекта.Синоним) Тогда
		НазваниеОбъекта = МетаданныеОбъекта.Синоним;
	Иначе
		НазваниеОбъекта = МетаданныеОбъекта.Имя;
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для начального заполнения

// Обновляет содержимое регистра сведений ЗависимостиПравДоступа,
// если прикладной разработчик изменил зависимости в переопределяемом модуле.
//
Процедура ОбновитьЗависимостиПравДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЗависимостиПравДоступа.СоздатьНаборЗаписей();
	УправлениеДоступомПереопределяемый.ЗаполнитьЗависимостиПравДоступа(НаборЗаписей);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НовыеЗаписи.ПодчиненнаяТаблица,
	|	НовыеЗаписи.ТипВедущейТаблицы,
	|	НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы,
	|	НовыеЗаписи.ПриПроверкеПраваЧтение,
	|	НовыеЗаписи.ПриПроверкеПраваДобавление,
	|	НовыеЗаписи.ПриПроверкеПраваИзменение,
	|	НовыеЗаписи.ПриПроверкеПраваУдаление
	|ПОМЕСТИТЬ НовыеЗаписи
	|ИЗ
	|	&НовыеЗаписи КАК НовыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ЗависимостиПравДоступа КАК СтарыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписи КАК НовыеЗаписи
	|		ПО СтарыеЗаписи.ПодчиненнаяТаблица = НовыеЗаписи.ПодчиненнаяТаблица
	|			И СтарыеЗаписи.ТипВедущейТаблицы = НовыеЗаписи.ТипВедущейТаблицы
	|			И СтарыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы = НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы
	|			И СтарыеЗаписи.ПриПроверкеПраваЧтение = НовыеЗаписи.ПриПроверкеПраваЧтение
	|			И СтарыеЗаписи.ПриПроверкеПраваДобавление = НовыеЗаписи.ПриПроверкеПраваДобавление
	|			И СтарыеЗаписи.ПриПроверкеПраваИзменение = НовыеЗаписи.ПриПроверкеПраваИзменение
	|			И СтарыеЗаписи.ПриПроверкеПраваУдаление = НовыеЗаписи.ПриПроверкеПраваУдаление
	|ГДЕ
	|	НовыеЗаписи.ПодчиненнаяТаблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеЗаписи КАК НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗависимостиПравДоступа КАК СтарыеЗаписи
	|		ПО НовыеЗаписи.ПодчиненнаяТаблица = СтарыеЗаписи.ПодчиненнаяТаблица
	|			И НовыеЗаписи.ТипВедущейТаблицы = СтарыеЗаписи.ТипВедущейТаблицы
	|			И НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы = СтарыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы
	|			И НовыеЗаписи.ПриПроверкеПраваЧтение = СтарыеЗаписи.ПриПроверкеПраваЧтение
	|			И НовыеЗаписи.ПриПроверкеПраваДобавление = СтарыеЗаписи.ПриПроверкеПраваДобавление
	|			И НовыеЗаписи.ПриПроверкеПраваИзменение = СтарыеЗаписи.ПриПроверкеПраваИзменение
	|			И НовыеЗаписи.ПриПроверкеПраваУдаление = СтарыеЗаписи.ПриПроверкеПраваУдаление
	|ГДЕ
	|	СтарыеЗаписи.ПодчиненнаяТаблица ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("НовыеЗаписи", НаборЗаписей);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ПриИзмененииНаборовЗначенийДоступа(Знач СсылкаНаОбъект)
	
	СсылкиНаЗависимыеОбъекты = Новый Массив;
	УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект, СсылкиНаЗависимыеОбъекты);
	
	Для каждого СсылкаНаЗависимыйОбъект Из СсылкиНаЗависимыеОбъекты Цикл
		//
		Если СсылкаНаЗависимыйОбъект.Метаданные().ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
			// Изменение объекта не требуется
			ЗаписатьНаборыЗначенийДоступа(СсылкаНаЗависимыйОбъект);
		Иначе
			// Изменение объекта требуется
			Объект = СсылкаНаЗависимыйОбъект.ПолучитьОбъект();
			Таблица = ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
			Если НЕ НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаЗависимыйОбъект, Таблица) Тогда
				Продолжить;
			КонецЕсли;
			Если ЭтоОбъектРучногоОбновленияЗависимыхНаборовЗначенийДоступа(СсылкаНаЗависимыйОбъект) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ЗаблокироватьДанныеДляРедактирования(СсылкаНаЗависимыйОбъект, Объект.ВерсияДанных);
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
				Объект.ДополнительныеСвойства.Вставить("ЗаписатьЗависимыеНаборыЗначенийДоступа");
				Объект.ДополнительныеСвойства.Вставить("НаборыЗначенийДоступаТабличнойЧастиЗаполнены");
				Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
				Объект.Записать();
				РазблокироватьДанныеДляРедактирования(СсылкаНаЗависимыйОбъект);
			Исключение
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При обновлении зависимого набора значений доступа объекта
						           |""%1"" возникла ошибка:
						           |
						           |%2'"),
						Строка(СсылкаНаЗависимыйОбъект),
						КраткоеПредставлениеОшибки));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоОбъектРучногоОбновленияЗависимыхНаборовЗначенийДоступа(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеЗначения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбъектыРучногоОбновленияЗависимыхНаборовЗначенийДоступа");
	ОбъектыРучногоОбновления = ?(ТипЗнч(ХранилищеЗначения) = Тип("ХранилищеЗначения"), ХранилищеЗначения.Получить(), Неопределено);
	
	Если ОбъектыРучногоОбновления = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючСеанса = УправлениеДоступомСлужебныйПовтИсп.КлючСеанса();
	Отбор = Новый Структура("КлючСеанса, Ссылка", КлючСеанса, Ссылка);
	
	Возврат ОбъектыРучногоОбновления.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

Функция НаборыЗначенийДоступаРегистраИзменены(СсылкаНаОбъект, НаборЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("НовыеНаборы",    НаборЗаписей.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеНаборы.Объект,
	|	НовыеНаборы.НомерНабора,
	|	НовыеНаборы.ВидДоступа,
	|	НовыеНаборы.ЗначениеДоступа,
	|	НовыеНаборы.Чтение,
	|	НовыеНаборы.Добавление,
	|	НовыеНаборы.Изменение,
	|	НовыеНаборы.Удаление,
	|	НовыеНаборы.ВидДоступаБезГруппЗначенияДоступа,
	|	НовыеНаборы.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
	|	НовыеНаборы.ВидДоступаЧерезПраваПоЗначениямДоступа,
	|	НовыеНаборы.ВидДоступаПравоЧтения,
	|	НовыеНаборы.ВидДоступаПравоДобавления,
	|	НовыеНаборы.ВидДоступаПравоИзменения,
	|	НовыеНаборы.ТипОбъекта,
	|	НовыеНаборы.ТипЗначенияДоступа
	|ПОМЕСТИТЬ НовыеНаборы
	|ИЗ
	|	&НовыеНаборы КАК НовыеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеНаборы КАК НовыеНаборы
	|		ПО НаборыЗначенийДоступа.Объект = НовыеНаборы.Объект
	|			И НаборыЗначенийДоступа.НомерНабора = НовыеНаборы.НомерНабора
	|			И НаборыЗначенийДоступа.ВидДоступа = НовыеНаборы.ВидДоступа
	|			И НаборыЗначенийДоступа.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа
	|			И НаборыЗначенийДоступа.Чтение = НовыеНаборы.Чтение
	|			И НаборыЗначенийДоступа.Добавление = НовыеНаборы.Добавление
	|			И НаборыЗначенийДоступа.Изменение = НовыеНаборы.Изменение
	|			И НаборыЗначенийДоступа.Удаление = НовыеНаборы.Удаление
	|			И НаборыЗначенийДоступа.ВидДоступаБезГруппЗначенияДоступа = НовыеНаборы.ВидДоступаБезГруппЗначенияДоступа
	|			И НаборыЗначенийДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = НовыеНаборы.ВидДоступаЕдинственныйДляТипаЗначенияДоступа
	|			И НаборыЗначенийДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа = НовыеНаборы.ВидДоступаЧерезПраваПоЗначениямДоступа
	|			И НаборыЗначенийДоступа.ВидДоступаПравоЧтения = НовыеНаборы.ВидДоступаПравоЧтения
	|			И НаборыЗначенийДоступа.ВидДоступаПравоДобавления = НовыеНаборы.ВидДоступаПравоДобавления
	|			И НаборыЗначенийДоступа.ВидДоступаПравоИзменения = НовыеНаборы.ВидДоступаПравоИзменения
	|			И НаборыЗначенийДоступа.ТипОбъекта = НовыеНаборы.ТипОбъекта
	|			И НаборыЗначенийДоступа.ТипЗначенияДоступа = НовыеНаборы.ТипЗначенияДоступа
	|ГДЕ
	|	НаборыЗначенийДоступа.Объект = &СсылкаНаОбъект
	|	И НовыеНаборы.Объект ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеНаборы КАК НовыеНаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
	|		ПО (НаборыЗначенийДоступа.Объект = НовыеНаборы.Объект)
	|			И (НаборыЗначенийДоступа.НомерНабора = НовыеНаборы.НомерНабора)
	|			И (НаборыЗначенийДоступа.ВидДоступа = НовыеНаборы.ВидДоступа)
	|			И (НаборыЗначенийДоступа.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа)
	|			И (НаборыЗначенийДоступа.Чтение = НовыеНаборы.Чтение)
	|			И (НаборыЗначенийДоступа.Добавление = НовыеНаборы.Добавление)
	|			И (НаборыЗначенийДоступа.Изменение = НовыеНаборы.Изменение)
	|			И (НаборыЗначенийДоступа.Удаление = НовыеНаборы.Удаление)
	|			И (НаборыЗначенийДоступа.ВидДоступаБезГруппЗначенияДоступа = НовыеНаборы.ВидДоступаБезГруппЗначенияДоступа)
	|			И (НаборыЗначенийДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = НовыеНаборы.ВидДоступаЕдинственныйДляТипаЗначенияДоступа)
	|			И (НаборыЗначенийДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа = НовыеНаборы.ВидДоступаЧерезПраваПоЗначениямДоступа)
	|			И (НаборыЗначенийДоступа.ВидДоступаПравоЧтения = НовыеНаборы.ВидДоступаПравоЧтения)
	|			И (НаборыЗначенийДоступа.ВидДоступаПравоДобавления = НовыеНаборы.ВидДоступаПравоДобавления)
	|			И (НаборыЗначенийДоступа.ВидДоступаПравоИзменения = НовыеНаборы.ВидДоступаПравоИзменения)
	|			И (НаборыЗначенийДоступа.ТипОбъекта = НовыеНаборы.ТипОбъекта)
	|			И (НаборыЗначенийДоступа.ТипЗначенияДоступа = НовыеНаборы.ТипЗначенияДоступа)
	|ГДЕ
	|	НаборыЗначенийДоступа.Объект ЕСТЬ NULL ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Обработчик обновления информационной базы.
// Требуется при удалении предопределенных профилей
// групп доступа, т.к. платформа не вызывает обработчики
// объектов при установке пометки удаления бывшим предопределенным
// элементам в процессе обновления конфигурации базы данных.
//
Процедура ПометитьНаУдалениеГруппыДоступаПомеченныхПрофилей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Профиль.ПометкаУдаления
	|	И НЕ ГруппыДоступа.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ГруппаДоступаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ГруппаДоступаОбъект.ПометкаУдаления = Истина;
		ГруппаДоступаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления информационной базы
Процедура ОбновитьПодчиненностьПользователей_1_1_2_3() Экспорт
	
	// См. обработчик ПриИзмененииКонстантыДобавлятьРуководителямДоступПодчиненных.
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыПользователей.ВсеПользователи);
	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи);
	
КонецПроцедуры

// Обработчик обновления информационной базы
Процедура ОбновитьПодчиненностьПользователей_1_1() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыПользователей.ВсеПользователи);
	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи);
	
КонецПроцедуры

