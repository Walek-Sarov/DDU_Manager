////////////////////////////////////////////////////////////////////////////////
// Подсистема "Оценка производительности".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция время начала замера
//
// Возвращаемое значение:
//  Число - время начала замера
//
Функция ЗафиксироватьВремяНачала() Экспорт
	
	Возврат ТочноеВремя();
	
КонецФункции

// Процедура фиксирует время окончания замер
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации, замер этой ключевой операции заканчивается
//  ВремяНачалаКлючевойОперации - Число, время начала ключевой операции полученное функцией ЗафиксироватьВремяНачала()
//
// Возвращаемое значение:
//  Число - время окончания замера
//  0 - если ни один замер не начат
//
Функция ЗафиксироватьВремяОкончания(КлючеваяОперация, ВремяНачалаКлючевойОперации, ВызовИзОбработчикаОжидания = Ложь, ВремяНачалаКлючевойОперацииПроверка = 0) Экспорт
	
	ВремяОкончания = ТочноеВремя();
	
	Запись = РегистрыСведений.ЗамерыВремени.СоздатьМенеджерЗаписи();
	Запись.ДатаЗамера = ТекущаяДатаСеанса();
	Запись.КлючеваяОперация = КлючеваяОперация;
	Запись.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	Запись.ВремяВыполнения = (ВремяОкончания - ВремяНачалаКлючевойОперации - ?(ВызовИзОбработчикаОжидания, 100, 0)) / 1000;
	Запись.ИмяПользователя = ИмяПользователя();
	
	Запись.ВремяНачала = ВремяНачалаКлючевойОперации;
	Запись.ВремяКонца = ВремяОкончания;
	Запись.ВремяНачалаПроверка = ВремяНачалаКлючевойОперацииПроверка;
	Запись.ВремяКонцаПроверка = ВремяСервер();
	Запись.Записать(Ложь);
	
	
	Возврат ВремяОкончания;
	
КонецФункции

// Функция получает точное время
//
// Возвращаемое значение:
//  Число - время с точностью до миллисекунд
Функция ТочноеВремя()
	
	Инструменты = ПолучитьИнструменты();
	
	Возврат ЗначениеТаймера(Инструменты);
	
КонецФункции

Функция ВремяСервер() Экспорт
	Возврат ТекущаяДата();
КонецФункции	

// Функция получает предопределенное занчение справочника ОбщаяПроизводительностьСистемы
//
// Возвращаемое значение:
//  СправочникСсылка.КлючевыеОперации - элемент справочника
//  СправочникСсылка.КлючевыеОперации.ПустаяСсылка - элемент отсутствует
//
Функция ПолучитьПредопределенный() Экспорт
	
	Попытка
		Возврат Справочники.КлючевыеОперации.ОбщаяПроизводительностьСистемы;
	Исключение
		Возврат Справочники.КлючевыеОперации.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Работа с внешней компонентой

// Получить объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция ПолучитьИнструменты()
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьИнструменты();
	
КонецФункции

// Создать объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция СоздатьИнструменты()
	
	Возврат Новый("Addin.SSLPerfAssessment.Tools");
	
КонецФункции

// Подключить внешнюю компоненту ОценкаПроизводительностиВнешнийКомпонент
//
Процедура ПодключитьВнешнийКомпонент()
	
	ИмяКомпонента = "ОбщийМакет.ОценкаПроизводительностиВнешнийКомпонент";

	Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "SSLPerfAssessment") Тогда
		#Если Клиент Тогда
			УстановитьВнешнююКомпоненту(ИмяКомпонента);
		#КонецЕсли
		
		Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "SSLPerfAssessment") Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения внешнего компонента.'");
		КонецЕсли;
	КонецЕсли;
	
	Инструменты = СоздатьИнструменты();
	ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);
	ТребуемаяВерсия = "2.0.4.52";
	
	Если ПодключеннаяВерсия <> ТребуемаяВерсия Тогда
		ТекстИсключения = НСтр("ru = 'Версия подключенного внешнего компонента (%1) не совпадает с требуемой версией (%2).
			|Для устранения несоответствия версий, выгрузите всех клиентов и перезагрузите сервер 1С:Предприятия этой информационной базы.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ПодключеннаяВерсия);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%2", ТребуемаяВерсия);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Выполнить метод внешнего компонента
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//
// Возвращаемое значение:
//   Произвольный - результат, возвращаемый методом
//
Функция ВыполнитьМетод(Объект, Имя, Параметры = Неопределено)
	
	ИменаПараметров = "";
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "Параметры." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");
	Исключение
		Если Объект <> Неопределено И Объект.ЕстьОшибка() Тогда
			ВызватьИсключение Объект.ОписаниеОшибки();
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

// Получить значение таймера для замера интервала времени
//
// Параметры:
//  Инструменты - Объект внешнего компонента
//
// Возвращаемое значение:
//  Число - текущее значение таймера в миллисекундах
//
Функция ЗначениеТаймера(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ЗначениеТаймера");
	
КонецФункции

// Получить версию текущего компонента.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ВерсияКомпонента(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьВерсию");
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Регламентное задание

// Процедура обработки регламентного задания по выгрузке данных APDEX
//
// Параметры:
//  КаталогЭкспорта - Строка, каталог сохранения данных
//
Процедура ЭкспортОценкиПроизводительности(КаталогЭкспорта) Экспорт
	// Если система отключена, то выгрузку данных делать не будем.
	Если не ОценкаПроизводительностиПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
	    Возврат;	
	КонецЕсли;
		
	ДатаЗамера = ТекущаяДатаСеанса();
	
	//ВыгрузитьСырыеДанные(КаталогЭкспорта, ДатаЗамера, ВыборкаСырыхДанных());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗамера", ДатаЗамера);
	СформироватьЗапросРассчетаAPDEX(Запрос);	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыгрузитьРезультаты(КаталогЭкспорта, ДатаЗамера, Выборка);
	
КонецПроцедуры

// Формирет запрос для рассчета индекса APDEX и устанавливает значения необходимых параметров
//
// Параметры:
//  Запрос - Запрос, процедура заполняет текст и параметры переданного запроса
//
Процедура СформироватьЗапросРассчетаAPDEX(Запрос)
	
	ПолучениеЗамеров = 
	"ВЫБРАТЬ
	|	&КлючеваяОперация%НомерКО% КАК КлючеваяОперация,
	|	Замеры.ВремяВыполнения КАК ВремяВыполнения
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 100
	|		Замеры.КлючеваяОперация КАК КлючеваяОперация,
	|		Замеры.ВремяВыполнения КАК ВремяВыполнения
	|	ИЗ
	|		РегистрСведений.ЗамерыВремени КАК Замеры
	|	ГДЕ
	|		Замеры.ДатаЗамера < &ДатаЗамера
	|		И Замеры.КлючеваяОперация = &КлючеваяОперация%НомерКО%
	|       И Замеры.ВремяВыполнения > 0
	|       И Замеры.ВремяВыполнения < &КлючеваяОперация%НомерКО%_МаксВремя
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Замеры.ДатаЗамера УБЫВ) КАК Замеры";
	
	ОбъединитьВсе =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ИндексироватьПо = 
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючеваяОперация";
	
	РазделительВременныхТаблиц = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ПустаяВыборка = 
	"ВЫБРАТЬ	
	|	ЗНАЧЕНИЕ(Справочник.КлючевыеОперации.ПустаяСсылка),
	|	0";
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК КлючеваяОперация,
	|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя,
	|	КлючевыеОперации.МинимальноДопустимыйУровень КАК ДопустимыйУровень
	|ПОМЕСТИТЬ ВТ_КлючевыеОперации
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	КлючевыеОперации.ПометкаУдаления = ЛОЖЬ
	|	И КлючевыеОперации.Ссылка <> ЗНАЧЕНИЕ(Справочник.КлючевыеОперации.ОбщаяПроизводительностьСистемы)";
	
	ТекстЗапроса = ТекстЗапроса + ИндексироватьПо + РазделительВременныхТаблиц;
	
	Выборка = Справочники.КлючевыеОперации.Выбрать();
	
	нет_ключевых_операций = Истина;
	НомерКО = 1;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Или Выборка.Ссылка = ПолучитьПредопределенный() Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КлючеваяОперация" + НомерКО, Выборка.Ссылка);
		Запрос.УстановитьПараметр("КлючеваяОперация" + НомерКО + "_МаксВремя", 1000*Выборка.Ссылка.ЦелевоеВремя);
		Врем = СтрЗаменить(ПолучениеЗамеров, "%НомерКО%", Строка(НомерКО));
		Врем = СтрЗаменить(Врем, "%ИмяВременнойТаблицы%", ?(НомерКО = 1, "ПОМЕСТИТЬ ВТ_Замеры", ""));
		ТекстЗапроса = ТекстЗапроса + Врем + ОбъединитьВсе;
		
		НомерКО = НомерКО + 1;
		нет_ключевых_операций = Ложь;
	КонецЦикла;
	// Если нет ключевых операций, то и не будем заморачиваться, вернем пустую выборку.
	Если нет_ключевых_операций Тогда
		Запрос.Текст = "Выбрать 1 ГДЕ 1 < 0;";
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ПустаяВыборка + ИндексироватьПо + РазделительВременныхТаблиц;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ВТ_КлючевыеОперации.КлючеваяОперация КАК КлючеваяОперация,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ВТ_Замеры.ВремяВыполнения, 0)) = 0
	|			ТОГДА -1
	|		ИНАЧЕ ВЫРАЗИТЬ((СУММА(ВЫБОР
	|						КОГДА ВТ_Замеры.ВремяВыполнения <= ВТ_КлючевыеОперации.ЦелевоеВремя
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) + СУММА(ВЫБОР
	|						КОГДА ВТ_Замеры.ВремяВыполнения > ВТ_КлючевыеОперации.ЦелевоеВремя
	|								И ВТ_Замеры.ВремяВыполнения <= ВТ_КлючевыеОперации.ЦелевоеВремя * 4
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) / 2) / СУММА(1) КАК ЧИСЛО(6, 3))
	|	КОНЕЦ КАК ТекущийAPDEX,
	|	ВЫБОР
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Идеально)
	|			ТОГДА 1
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Отлично)
	|			ТОГДА 0.94
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Хорошо)
	|			ТОГДА 0.85
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Удовлетворительно)
	|			ТОГДА 0.7
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Плохо)
	|			ТОГДА 0.5
	|	КОНЕЦ КАК МинимальныйAPDEX
	|ИЗ
	|	ВТ_КлючевыеОперации КАК ВТ_КлючевыеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Замеры КАК ВТ_Замеры
	|		ПО ВТ_КлючевыеОперации.КлючеваяОперация = ВТ_Замеры.КлючеваяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КлючевыеОперации.КлючеваяОперация,
	|	ВЫБОР
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Идеально)
	|			ТОГДА 1
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Отлично)
	|			ТОГДА 0.94
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Хорошо)
	|			ТОГДА 0.85
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Удовлетворительно)
	|			ТОГДА 0.7
	|		КОГДА ВТ_КлючевыеОперации.ДопустимыйУровень = ЗНАЧЕНИЕ(Перечисление.УровниПроизводительности.Плохо)
	|			ТОГДА 0.5
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ВТ_Замеры.ВремяВыполнения, 0)) = 0
	|			ТОГДА -1
	|		ИНАЧЕ ВЫРАЗИТЬ((СУММА(ВЫБОР
	|						КОГДА ВТ_Замеры.ВремяВыполнения <= ВТ_КлючевыеОперации.ЦелевоеВремя
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) + СУММА(ВЫБОР
	|						КОГДА ВТ_Замеры.ВремяВыполнения > ВТ_КлючевыеОперации.ЦелевоеВремя
	|								И ВТ_Замеры.ВремяВыполнения <= ВТ_КлючевыеОперации.ЦелевоеВремя * 4
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) / 2) / СУММА(1) КАК ЧИСЛО(6, 3))
	|	КОНЕЦ >= 0";
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

// Сохраняет результаты вычисления APDEX в файл
//
// Параметры:
//  КаталогЭкспорта - Строка, каталог сохранения файла
//  ДатаЗамера - Дата, дата выполнения экспорта
//  ВыборкаРезультатов - ВыборкаИзРезультатаЗапроса, выборка с результатами которые необходимо сохранить
//
Процедура ВыгрузитьРезультаты(КаталогЭкспорта, ДатаЗамера, ВыборкаРезультатов)
	
	ПространствоИмен = "www.v8.1c.ru/ssl/performace-assessment/apdexExport";
	СоздатьКаталог(КаталогЭкспорта);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПолучитьПолноеИмяФайлаЭкспорта(КаталогЭкспорта, ДатаЗамера, ".xml"), "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Performance", ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("prf", ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	ЗаписьXML.ЗаписатьАтрибут("version", ПространствоИмен, "1.0.0.0");
	ЗаписьXML.ЗаписатьАтрибут("period", ПространствоИмен, Строка(ДатаЗамера));
	
	ТипКлючеваяОперация = ФабрикаXDTO.Тип(ПространствоИмен, "KeyOperation");
	КлючеваяОперация = ФабрикаXDTO.Создать(ТипКлючеваяОперация);
	
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		КлючеваяОперация.name = Строка(ВыборкаРезультатов.КлючеваяОперация);
		КлючеваяОперация.currentApdexValue = ВыборкаРезультатов.ТекущийAPDEX;
		КлючеваяОперация.minimalApdexValue = ВыборкаРезультатов.МинимальныйAPDEX;
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КлючеваяОперация);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
КонецПроцедуры

// Генерирует имя файла для экспорта
//
// Параметры:
//  КаталогЭкспорта - Строка, 
//  ДатаЗамера - Дата, дата и время выполнения замера
//
// Возвращаемое значение:
//  Строка - полный путь к файлу экспорта
//
Функция ПолучитьПолноеИмяФайлаЭкспорта(КаталогЭкспорта, ДатаЗамера, РасширениеСТочкой)
	
	ПоследнийСимвол = Прав(КаталогЭкспорта, 1);
	ЕстьРазделитель = Ложь;
	Если ПоследнийСимвол = "\" Или ПоследнийСимвол = "/" Тогда
		ЕстьРазделитель = Истина;
	КонецЕсли;
	
	Возврат КаталогЭкспорта + ?(ЕстьРазделитель, "", "/") + Формат(ДатаЗамера, "ДФ=""гггг-ММ-дд ЧЧ-мм-сс""") + РасширениеСТочкой;
	
КонецФункции



// Получает имя дополнительного свойства не проверять приоритеты при записи ключевой операции
//
// Возвращаемое значение:
//  Строка - имя дополнительного свойства
//
Функция НеПроверятьПриоритет() Экспорт
	
	Возврат "НеПровеятьПриоритет";
	
КонецФункции
