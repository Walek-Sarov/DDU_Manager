////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Можно ли освободить Файл
// Параметры
//  ОбъектСсылка - СправочникСсылка.Файлы - файл
//  РедактируетТекущийПользователь - Булево - файл редактирует текущий пользователь
//  Редактирует - СправочникСсылка.Пользователи - тот, кто занял файл
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ВозможностьОсвободитьФайл(ОбъектСсылка, РедактируетТекущийПользователь, Редактирует, СтрокаОшибки = "") Экспорт

	Если РедактируетТекущийПользователь Тогда 
		Возврат Истина;
	ИначеЕсли Редактирует.Пустая() Тогда
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя освободить файл ""%1"" т.к. он никем не занят.'"),
			Строка(ОбъектСсылка));
		Возврат Ложь;
	Иначе
		Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЭтоПолноправныйПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя освободить файл ""%1"" т.к. он занят пользователем ""%2"".'"),
			Строка(ОбъектСсылка),
			Строка(Редактирует));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ВозможностьОсвободитьФайл()

// Пометка файла как занятого для редактирования - по ссылке
// (без ПолучитьДанныеФайла - для минимизации числа вызовов сервера)
// Параметры
//  ОбъектСсылка - СправочникСсылка.Файлы - файл
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ЗанятьФайлПоСсылке(ОбъектСсылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИЗанятьФайл(ОбъектСсылка, ДанныеФайла, 
		СтрокаОшибки, УникальныйИдентификатор) Тогда
		
		// Если занять нельзя, то сообщаем об ошибке
		Предупреждение(СтрокаОшибки);
		Возврат Ложь;
		
	КонецЕсли;	
	
	Если РасширениеПодключено Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		    НСтр("ru = 'Файл ""%1"" занят для редактирования.'"), Строка(ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
			
	Возврат Истина;		
	
КонецФункции //ЗанятьФайлПоСсылке

// Пометка файлов как занятых для редактирования - по массиву ссылок
//
// Параметры
//  МассивФайлов - Массив - массив файлов
Процедура ЗанятьФайлыПоСсылкам(Знач МассивФайлов) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) ИЛИ Не ДанныеФайла.Редактирует.Пустая() Тогда // занять невозможно
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;	
	КонецЦикла;	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	// Занять файлы
	КоличествоЗанятых = 0;
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		Если Не РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, "") Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если РасширениеПодключено Тогда
			НаЧтение = Ложь;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		КоличествоЗанятых = КоличествоЗанятых + 1;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(  
		НСтр("ru = 'Занять файлы'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1 из %2) заняты для редактирования.'"), 
			КоличествоЗанятых, МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры //ЗанятьФайлПоСсылкам

// Процедура предназначена для открытия Файла в режиме редактирования - принимает ссылку на Файл
// по ссылке (без ПолучитьДанныеФайла - для минимизации числа вызовов сервера)
// Параметры
//  ОбъектСсылка - СправочникСсылка.Файлы - файл
//  УникальныйИдентификатор - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция РедактироватьФайлПоСсылке(ОбъектСсылка, УникальныйИдентификатор = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт
	
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ОбъектСсылка, ДанныеФайла, 
		СтрокаОшибки, УникальныйИдентификатор, РабочийКаталогВладельца) Тогда
		
		СтандартнаяОбработка = Истина;
		РаботаСФайламиКлиентПереопределяемый.ПриОшибкеЗахватаФайла(ДанныеФайла, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			// Если занять нельзя, то сообщаем об ошибке
			Предупреждение(СтрокаОшибки);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" занят для редактирования.'"), Строка(ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
	
	// Если Файл без файла, то открываем карточку
	Если ДанныеФайла.Версия.Пустая() Тогда 
		ОткрытьЗначение(ДанныеФайла.Ссылка);
		Возврат Истина;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		Результат = ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор);
		Если Результат Тогда
			ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьНапоминаниеПриРедактировании();
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолучитьФайл(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);		
		
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
			УдалитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РедактироватьФайлПоСсылке()

// Процедура предназначена для открытия Файла в режиме редактирования
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура РедактироватьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Предупреждение(СтрокаОшибки);
		Возврат;
	КонецЕсли;	
	
	// Если Файл никем не занят - займем Файл
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		ЗанятьФайл(ДанныеФайла);
	КонецЕсли;
	
	// Если Файл без файла нужно в таких случаях открывать карточку
	Если ДанныеФайла.Версия.Пустая() Тогда 
		ОткрытьЗначение(ДанныеФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		Результат = ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор);
		Если Результат Тогда
			ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьНапоминаниеПриРедактировании();
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолучитьФайл(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
		
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
			УдалитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РедактироватьФайл()

// Процедура открытия Файла
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОткрытьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Если Файл без файла нужно в таких случаях открывать карточку
	Если ДанныеФайла.Версия.Пустая() Тогда 
		ОткрытьЗначение(ДанныеФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		ДополнительныеПараметры = Новый Структура("ОткрытьФайл", Истина);
		Результат = ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор, ДополнительныеПараметры);
		Если Результат Тогда
			ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		Если ДанныеФайла.РедактируетТекущийПользователь Тогда 
			ФайловыеФункцииСлужебныйКлиент.ПоказатьНапоминаниеПриРедактировании();
		КонецЕсли;
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолучитьФайл(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
		
		// для варианта с хранением файлов на диске (на сервере) не удаляем сразу Файл из временного хранилища
		// - делаем это только при следующем вызове ПолучитьДанныеФайлаДляОткрытия или вообще не делаем
		//  - при закрытии формы это будет сделано автоматически
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайл()

// Процедура предназначена для открытия версии Файла
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОткрытьВерсиюФайла(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		Результат = ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор);
		Если Результат Тогда
			ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		Адрес = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ДанныеФайла.Версия, УникальныйИдентификатор);
		
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолучитьФайл(Адрес, ИмяФайла, Истина);		
		
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОткрытьВерсиюФайла()

// На основе переданного пути к файлу на диске создает Файл его и открывает карточку
// Параметры
//  ПолноеИмяФайла - Строка - полный путь к файлу
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//  ФормаВладелец - Форма - форма, откуда вызвано создание файла
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - не открывает карточку файла после создания, если Истина
//  ИмяСоздаваемогоФайла - Строка - явно заданное имя файла (по умолчанию имя берется из ПолноеИмяФайла)
Процедура СоздатьДокументНаОсновеФайла(ПолноеИмяФайла, ВладелецФайла, ФормаВладелец, 
	НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено, ИмяСоздаваемогоФайла = Неопределено) Экспорт
	
	// здесь не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. вызов может придти только с тонкого клиента (не с веб)
	
	// Здесь создаем Файл ...
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СписокЗапрещенныхРасширений;
	РасширениеФайла = Файл.Расширение;
	Если Не ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				 РасширениеФайла);
	КонецЕсли;	
	
	МаксРазмерФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
				 Файл.Имя, 
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),               
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Если НЕ ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
			Файл.ПолноеИмя, 
			ФормаВладелец.УникальныйИдентификатор);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	ИмяСоздания = Файл.ИмяБезРасширения;
	Если ИмяСоздаваемогоФайла <> Неопределено Тогда
		ИмяСоздания = ИмяСоздаваемогоФайла;
	КонецЕсли;	
	
	ИмяФайла = ИмяСоздания + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ФормаВладелец.УникальныйИдентификатор) Тогда		
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	// Создадим карточку Файла в БД
	Док = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
		ВладелецФайла,
		ИмяСоздания,
		ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(Файл.Расширение),
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Файл.Размер(),
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста,
		Ложь, // это не веб клиент
		Неопределено, // Пользователь
		"",  // Комментарий
		Истина // ЗаписатьВИсторию
		);

	Состояние();
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл", Док);
	ПараметрыОповещения.Вставить("Событие", "СозданФайл");
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Док);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"),
		НавигационнаяСсылка,
		Док,
		БиблиотекаКартинок.Информация32);
	
	Если НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Ключ", Док);
		Параметры.Вставить("КарточкаОткрытаПослеСозданияФайла", Истина);
		
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры, ФормаВладелец);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создания нового Файла
// Параметры:
//	РежимСоздания - как создавать новый Файл
//		1 - создать из шаблона
//		2 - создать из файла
//		3 - создать пустую карточку
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//  ФормаВладелец - Форма - форма, откуда вызвано создание файла
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - не открывает карточку файла после создания, если Истина
Процедура СоздатьФайл(РежимСоздания, ВладелецФайла, ФормаВладелец, НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если РежимСоздания = 1 Тогда
		
		// Создание из шаблона
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ВыборШаблона", Истина);
		ПараметрыОткрытияФормы.Вставить("ТекущаяСтрока", ПредопределенноеЗначение("Справочник.ПапкиФайлов.Шаблоны"));
		Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыОткрытияФормы);
		
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("ФайлОснование", Результат);
		Параметры.Вставить("ВладелецФайла", ВладелецФайла);
		Параметры.Вставить("РежимСоздания", "ИзШаблона");
		
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры, ФормаВладелец);
		
	ИначеЕсли РежимСоздания = 2 Тогда
		
		// Создание из файла
		ПолноеИмяФайла = "";
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если РасширениеПодключено Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
			ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
			
			РабочийКаталог = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(ВладелецФайла);
			ВыборФайла.Каталог = РабочийКаталог;

			Результат = ВыборФайла.Выбрать();
			ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
		
			Если НЕ Результат Тогда
				Возврат;
			КонецЕсли;
			
			СоздатьДокументНаОсновеФайла(ПолноеИмяФайла, ВладелецФайла, ФормаВладелец, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
		Иначе 
			// Если веб-клиент
			ВремяИзменения = Дата('00010101'); // Т.к. не можем получить дату модификации файла на диске
			ВремяИзмененияУниверсальное = Дата('00010101');
			Размер = 0;						// Т.к. не можем получить размер файла на диске
			ИмяБезРасширения = "";
			Расширение = "";
			АдресВременногоХранилищаТекста = "";

			// Поместим Файл в ВременноеХранилище
			АдресВременногоХранилищаФайла = "";
			ИмяФайла = "";
			Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, ФормаВладелец.УникальныйИдентификатор) Тогда
				Возврат;
			КонецЕсли;

			СтрокиПути = ФайловыеФункцииСлужебныйКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
			Если СтрокиПути.Количество() >= 2 Тогда
				Расширение = СтрокиПути[СтрокиПути.Количество()-1];
				ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
			Иначе
				ВызватьИсключение
				  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				    НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"),ИмяФайла);
			КонецЕсли;
			
			// Создадим карточку файла в БД
			Док = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
				ВладелецФайла,
				ИмяБезРасширения,
				ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(Расширение),
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Размер,
				АдресВременногоХранилищаФайла,
				АдресВременногоХранилищаТекста,
				Истина); // это веб клиент
				
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Владелец", ВладелецФайла);
			ПараметрыОповещения.Вставить("Файл", Док);
			ПараметрыОповещения.Вставить("Событие", "СозданФайл");
			Оповестить("Запись_Файл", ПараметрыОповещения);
	
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Док);
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создание:'"),
				НавигационнаяСсылка,
				Док,
				БиблиотекаКартинок.Информация32);	
				
			Если НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
				Параметры = Новый Структура;
				Параметры.Вставить("Ключ", Док);
				
				ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры, ФормаВладелец);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РежимСоздания = 3 Тогда
		// со сканера
		РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(
			ВладелецФайла, 
			ФормаВладелец.УникальныйИдентификатор, 
			ФормаВладелец, 
			НеОткрыватьКарточкуПослеСозданияИзФайла);
	Иначе
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		    НСтр("ru = 'Неверный режим создания файла: %1'"), РежимСоздания);
	КонецЕсли;
	
КонецПроцедуры // СоздатьФайл()

// Закончить редактирование - по массиву ссылок
//
// Параметры
//  МассивФайлов - Массив - массив файлов
//  ИдентификаторФормы - уникальный идентификатор формы
Функция ЗакончитьРедактированиеПоСсылкам(Знач МассивФайлов, ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		// Проверяем возможность освобождения
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	
	ФормаВозврата = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
	
	СоздатьНовуюВерсию = Истина;
	СоздатьНовуюВерсиюДоступность = Истина;

	ВозвратМассив = Новый Массив;
	
	СтруктураПараметров = Новый Структура("ФайлСсылка, КомментарийКВерсии, СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность", 
		Неопределено, "", СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность);
	ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
	
	Результат = ФормаВозврата.ОткрытьМодально();
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат ВозвратМассив;
	КонецЕсли;	
	
	КодВозврата = Результат.КодВозврата;
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат ВозвратМассив;
	КонецЕсли;	
	
	СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	ПрименитьКоВсем = Ложь;
	ОсвобождатьФайлы = Истина;
	
	// Занять файлы
	Для Каждого Данные Из ДанныеФайлов Цикл
		
		ПоказыватьОповещение = Ложь;
		
		Если ЗакончитьРедактирование(
					Данные.Ссылка, 
					ИдентификаторФормы, 
					Данные.ХранитьВерсии,
					Данные.РедактируетТекущийПользователь, 
					Данные.Редактирует,
					Данные.АвторТекущейВерсии,
					"",
					СоздатьНовуюВерсию,
					КомментарийКВерсии,
					ПоказыватьОповещение,
					ПрименитьКоВсем,
					ОсвобождатьФайлы) Тогда
					
			ВозвратМассив.Добавить(Данные.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(  
		НСтр("ru = 'Закончить редактирование файлов'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Закончено редактирование файлов (%1 из %2).'"), 
			ВозвратМассив.Количество(), МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
	Возврат ВозвратМассив;
	
КонецФункции //ЗакончитьРедактированиеПоСсылкам

// Закончить редактирование Файла и поместить его на сервер
//
// Параметры
//  ОбъектСсылка  - СправочникСсылка.Файлы - файл
//  ИдентификаторФормы - уникальный идентификатор формы
//  ХранитьВерсии -  Булево - Хранить версии
//  РедактируетТекущийПользователь -  Булево - файл редактирует текущи пользователь
//  Редактирует - СправочникСсылка.Пользователи - кто занял файл
//  АвторТекущейВерсии - СправочникСсылка.Пользователи - Автор текущей версии
//  ПереданныйПолныйПутьКФайлу - Строка - полный путь к файлу (вместо взятия пути из рабочего каталога)
//  СоздатьНовуюВерсию -  Булево - Создать новую версию
//  КомментарийКВерсии - Строка - Комментарий к версии
//  ПоказыватьОповещение -  Булево - Показывать оповещение
//  ПрименитьКоВсем -  Булево - Применить ко всем
//  ОсвобождатьФайлы -  Булево - Освобождать файлы
Функция ЗакончитьРедактирование(ОбъектСсылка, ИдентификаторФормы, Знач ХранитьВерсии = Неопределено,
			Знач РедактируетТекущийПользователь = Неопределено, 
			Знач Редактирует = Неопределено,
			Знач АвторТекущейВерсии = Неопределено,
			ПереданныйПолныйПутьКФайлу = "",
			СоздатьНовуюВерсию = Неопределено,
			КомментарийКВерсии = Неопределено,
			ПоказыватьОповещение = Истина,
			ПрименитьКоВсем = Ложь,
			ОсвобождатьФайлы = Истина,
			Кодировка = Неопределено) Экспорт
			
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда // код для тонкого (или толстого) клиента (или веб с подключенным расширением)

		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ОбъектСсылка);
	
		// Проверяем возможность освобождения
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		Если ПолныйПутьКФайлу = "" Тогда
			
			ПолныйПутьКФайлу = ФайловыеФункцииСлужебныйКлиент
				.ПолучитьПолныйПутьКФайлуВРабочемКаталоге(ДанныеФайла);
		КонецЕсли;
		
		// Проверяем наличие файла на диске
		ФайлНовойВерсии = Новый Файл(ПолныйПутьКФайлу);
		Если НЕ ФайлНовойВерсии.Существует() Тогда
			
			Если ПрименитьКоВсем = Ложь Тогда
			
				СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				    НСтр("ru = 'Не удалось загрузить файл ""%1"" в информационную базу, т.к. он не найден на локальном компьютере'"),
				    Строка(ДанныеФайла.Ссылка));
					
				Если НЕ ПустаяСтрока(ПолныйПутьКФайлу) Тогда
					СтрокаПредупреждения = СтрокаПредупреждения + " (" + ПолныйПутьКФайлу + ").";	
				Иначе
					СтрокаПредупреждения = СтрокаПредупреждения + ".";	
				КонецЕсли;
				
				СтрокаПредупреждения = СтрокаПредупреждения + Символы.ПС + "Освободить файл?";
				
				КодВозврата = Вопрос(СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
				Если КодВозврата = КодВозвратаДиалога.Да Тогда
					ОсвобождатьФайлы = Истина;
				Иначе
					ОсвобождатьФайлы = Ложь; 
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОсвобождатьФайлы Тогда
				ОсвободитьФайлБезВопроса(ДанныеФайла, ИдентификаторФормы);
				Возврат Истина;
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
	
		Попытка
			ТолькоЧтение = ФайлНовойВерсии.ПолучитьТолькоЧтение();
			ФайлНовойВерсии.УстановитьТолькоЧтение(НЕ ТолькоЧтение);
			ФайлНовойВерсии.УстановитьТолькоЧтение(ТолькоЧтение);
		Исключение
			
			Предупреждение(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вернуть файл ""%1"" в информационную базу, т.к. он заблокирован другой программой'"),
					Строка(ДанныеФайла.Ссылка)));

		КонецПопытки;
			
		// Запрашиваем комментарий и признак хранения версии
		Если СоздатьНовуюВерсию = Неопределено Тогда
			
			ФормаВозврата = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ДанныеФайла.ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии - не текущий пользователь - то галочку «Не создавать новую версию» делаем недоступной
				Если ДанныеФайла.АвторТекущейВерсии <> ДанныеФайла.Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;			
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;	

			СтруктураПараметров = Новый Структура("ФайлСсылка, КомментарийКВерсии, СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность", 
				ДанныеФайла.Ссылка, "", СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность);
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
				
		Иначе //  СоздатьНовуюВерсию и КомментарийКВерсии переданы извне
			
			Если ДанныеФайла.ХранитьВерсии Тогда
				
				// Если автор текущей версии - не текущий пользователь - то галочку «Не создавать новую версию» делаем недоступной
				Если ДанныеФайла.АвторТекущейВерсии <> ДанныеФайла.Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;			
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;	
			
		КонецЕсли;
		
		СтараяВерсия = ДанныеФайла.ТекущаяВерсия;
		Интерактивно = Ложь;
		
		РазмерВМб = ФайлНовойВерсии.Размер() / (1024 * 1024);
		ВремяИзменения = ФайлНовойВерсии.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = ФайлНовойВерсии.ПолучитьУниверсальноеВремяИзменения();
		Размер = ФайлНовойВерсии.Размер();
		
		// Файл с признаком шифрован - при окончании редактирования снова шифруем для тех же сертификатов
		Если ДанныеФайла.Зашифрован Тогда
			
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			
			МассивСертификатов = Новый Массив;
			
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Сертификат = Неопределено;
				Если СтруктураСертификата.Сертификат <> Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(СтруктураСертификата.Сертификат);
				Иначе
					Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(СтруктураСертификата.Отпечаток);
				КонецЕсли;	
				МассивСертификатов.Добавить(Сертификат);
				
			КонецЦикла;	
			
            Если МассивСертификатов.Количество() = 0 Тогда 
                СтруктураВозврата = ВыбратьСертификатыДляШифрования(ДанныеФайла);
                Если ТипЗнч(СтруктураВозврата) = Тип("Массив") Тогда
                    МассивСертификатов = СтруктураВозврата;    
                    ЗаписатьСертификатыВТабличнуюЧасть(ДанныеФайла.Ссылка, МассивСертификатов, ИдентификаторФормы);
                Иначе
                    Возврат Ложь;
                КонецЕсли;
            КонецЕсли;
			
			ИмяФайлаСПутемШифрованное = ПолныйПутьКФайлу + ".crp";
			МенеджерКриптографии.Зашифровать(ПолныйПутьКФайлу, ИмяФайлаСПутемШифрованное, МассивСертификатов);
			УдалитьФайл(ПолныйПутьКФайлу);
			ПереместитьФайл(ИмяФайлаСПутемШифрованное, ПолныйПутьКФайлу);
			
		КонецЕсли;
		
		Пока Истина Цикл
			Попытка
				АдресВременногоХранилища = "";
				ВыбранныйПутьКФайлу = "";
				
				ИмяФайла = ФайлНовойВерсии.Имя;
				
				ТекстПояснения =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				    НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
					|Пожалуйста, подождите.'"),
				    ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
				Состояние(ТекстПояснения);
				
				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьКФайлу, "");
				ПомещаемыеФайлы.Добавить(Описание);
				
				ПомещенныеФайлы = Новый Массив;
				
				Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Интерактивно, ИдентификаторФормы) Тогда
					Состояние();
					
					Если ПомещенныеФайлы.Количество() = 1 Тогда
						АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
					КонецЕсли;
					
					ЭтоВебКлиент = Ложь;
					
					ТекстНеИзвлеченНаКлиенте = Ложь;
					#Если ВебКлиент Тогда
						ТекстНеИзвлеченНаКлиенте = Истина;
					#КонецЕсли
					
					ИмяБезРасширения = ФайлНовойВерсии.ИмяБезРасширения;
					Расширение = ФайлНовойВерсии.Расширение;

					Отказ = Ложь;
					Если НЕ ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
						АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
							ПолныйПутьКФайлу, ИдентификаторФормы, Отказ, Кодировка);
					Иначе
						АдресВременногоХранилищаТекста = "";
					КонецЕсли;
					
					ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";	

					НеМенятьЗаписьВРабочемКаталоге = Ложь;
					Если ПереданныйПолныйПутьКФайлу <> "" Тогда
						НеМенятьЗаписьВРабочемКаталоге = Истина;
					КонецЕсли;
					
					ВерсияОбновлена = РаботаСФайламиВызовСервера.ОпубликоватьИОсвободитьФайл(
						ДанныеФайла, 
						СоздатьНовуюВерсию,
						АдресВременногоХранилища,
						КомментарийКВерсии,
						ВремяИзменения,
						ВремяИзмененияУниверсальное,
						Размер,
						ИмяБезРасширения,
						Расширение,
						ПолныйПутьКФайлу,
						АдресВременногоХранилищаТекста,
						ЭтоВебКлиент,
						ТекстНеИзвлеченНаКлиенте,
						ВРабочемКаталогеВладельца,
						НеМенятьЗаписьВРабочемКаталоге,
						ИдентификаторФормы,
						,
						ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя());
					
					НоваяВерсия = ДанныеФайла.ТекущаяВерсия;
					
					Если ПереданныйПолныйПутьКФайлу = "" Тогда
						УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования;
						Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Неопределено Тогда
							УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
						КонецЕсли;
						
						Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
							УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
						КонецЕсли;
						
						Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования Тогда
							УдалитьФайлИзРабочегоКаталога(НоваяВерсия);
						Иначе
							Файл = Новый Файл(ПолныйПутьКФайлу);
							Файл.УстановитьТолькоЧтение(Истина);	
						КонецЕсли;
					КонецЕсли;
					
					Если ПоказыватьОповещение Тогда
						
						Если Не ВерсияОбновлена Тогда
							ПоказатьИнформациюФайлНеБылИзменен();
						КонецЕсли;
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Редактирование закончено'"),
							ДанныеФайла.НавигационнаяСсылка,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Файл %1 обновлен и освобожден.'"),
									Строка(ДанныеФайла.Ссылка)),
								БиблиотекаКартинок.Информация32);
					КонецЕсли;		
					
					// удаляем зашифрованный файл из кеша
					Если ДанныеФайла.Зашифрован Тогда
						УдалитьФайл(ПолныйПутьКФайлу);	
					КонецЕсли;	
					
					Возврат Истина;
				Иначе
					Состояние();
					Возврат Ложь;
				КонецЕсли;

			Исключение

				ОшибкаИнфо = ИнформацияОбОшибке();
				
				Если ОшибкаИнфо.Причина = Неопределено Тогда
					СообщениеОбОшибке =ОшибкаИнфо.Описание;
				Иначе
					СообщениеОбОшибке = ОшибкаИнфо.Причина.Описание;
				КонецЕсли;

				ТекстВопроса = "";
							 
				ТекстВопроса =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось вернуть файл ""%1"" в информационную базу по причине: ""%2""
							 |Повторить операцию?'"),
							 Строка(ДанныеФайла.Ссылка), СообщениеОбОшибке);
				
				КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
				
				Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецПопытки;
		КонецЦикла;

	Иначе  // веб клиент и нет расширения работы с файлами
		
		Если ХранитьВерсии = Неопределено Тогда
			ДанныеФайла 				= РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ОбъектСсылка);
			ХранитьВерсии 					= ДанныеФайла.ХранитьВерсии;
			РедактируетТекущийПользователь 	= ДанныеФайла.РедактируетТекущийПользователь;
			Редактирует 					= ДанныеФайла.Редактирует;
			АвторТекущейВерсии				= ДанныеФайла.АвторТекущейВерсии;
			Кодировка 						= ДанныеФайла.КодировкаТекущейВерсии;
		КонецЕсли;

		// Проверяем возможность освобождения
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ОбъектСсылка, РедактируетТекущийПользователь, Редактирует, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = "";

		Если СоздатьНовуюВерсию = Неопределено Тогда
			ФормаВозврата = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии - не текущий пользователь - то галочку «Не создавать новую версию» делаем недоступной
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;			
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;	

			СтруктураПараметров = Новый Структура("ФайлСсылка, КомментарийКВерсии, СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность", 
				ОбъектСсылка, "", СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность);
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
			
		Иначе //  СоздатьНовуюВерсию и КомментарийКВерсии переданы извне
			
			Если ХранитьВерсии Тогда
				
				// Если автор текущей версии - не текущий пользователь - то галочку «Не создавать новую версию» делаем недоступной
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;			
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;	
			
		КонецЕсли;
		
		Интерактивно = Истина;
		
		Пока Истина Цикл
			Попытка
				АдресВременногоХранилища = "";	
				ВыбранныйПутьКФайлу = "";
				ПоказатьНапоминаниеПередПоместитьФайл();
				Если ПоместитьФайл(АдресВременногоХранилища, ПолныйПутьКФайлу, ВыбранныйПутьКФайлу, Интерактивно, ИдентификаторФормы) Тогда
					
					АдресВременногоХранилищаТекста = "";
					ИмяБезРасширения = "";
					Расширение = "";
					
					ЭтоВебКлиент = Истина;
					
					ТекстНеИзвлеченНаКлиенте = Ложь;
					#Если ВебКлиент Тогда
						ТекстНеИзвлеченНаКлиенте = Истина;
					#КонецЕсли	
					
					ВремяИзменения = Дата('00010101'); // Т.к. не можем получить дату модификации файла на диске
					ВремяИзмененияУниверсальное = Дата('00010101');
					Размер = 0;						// Т.к. не можем получить размер файла на диске
					
					СтрокиПути = ФайловыеФункцииСлужебныйКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранныйПутьКФайлу);
					Если СтрокиПути.Количество() >= 2 Тогда
						Расширение = СтрокиПути[СтрокиПути.Количество()-1];
						ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
					КонецЕсли;

					ВерсияОбновлена = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИОпубликоватьИОсвободитьФайл(
						ОбъектСсылка,
						ДанныеФайла,
						СоздатьНовуюВерсию,
						АдресВременногоХранилища,
						КомментарийКВерсии,
						ВремяИзменения,
						ВремяИзмененияУниверсальное,
						Размер,
						ИмяБезРасширения,
						Расширение,
						ПолныйПутьКФайлу,
						АдресВременногоХранилищаТекста,
						ЭтоВебКлиент,
						ТекстНеИзвлеченНаКлиенте,
						ИдентификаторФормы,
						ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя());
					
					НоваяВерсия = ДанныеФайла.ТекущаяВерсия;
					
					Если ПоказыватьОповещение Тогда
						
						Если Не ВерсияОбновлена Тогда
							ПоказатьИнформациюФайлНеБылИзменен();
						КонецЕсли;
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Редактирование закончено'"),
							ДанныеФайла.НавигационнаяСсылка,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							    НСтр("ru = 'Файл %1 обновлен и освобожден.'"), Строка(ДанныеФайла.Ссылка)),
							БиблиотекаКартинок.Информация32);
					КонецЕсли;	
						
					Возврат Истина;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			Исключение
				
				ОшибкаИнфо = ИнформацияОбОшибке();
				
				Если ОшибкаИнфо.Причина = Неопределено Тогда
					СообщениеОбОшибке =ОшибкаИнфо.Описание;
				Иначе
					СообщениеОбОшибке = ОшибкаИнфо.Причина.Описание;
				КонецЕсли;

				ТекстВопроса =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вернуть файл ""%1"" в информационную базу по причине: ""%2""
							 |Повторить операцию?'"),
				Строка(ОбъектСсылка), СообщениеОбОшибке);
				КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
				
				Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура предназначена для освобождения файла. При этом не происходит
// обновления файла, а просто очищается его текущий держатель. Выполняется по массиву ссылок
// Параметры
//  МассивФайлов - Массив - массив файлов
Процедура ОсвободитьФайлыПоСсылкам(Знач МассивФайлов) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Результат = Вопрос(
	  НСтр("ru = 'Отмена редактирования файлов может привести к потере Ваших изменений.
				   |Продолжить?'"),
	РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	// Занять файлы
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		НеЗадаватьВопрос = Истина;
		
		ОсвободитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.ХранитьВерсии,
			ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует,
			Неопределено, НеЗадаватьВопрос);
	
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(  
		НСтр("ru = 'Отменить редактирование файлов'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отменено редактирование файлов (%1 из %2).'"), 
			ДанныеФайлов.Количество(), МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры //ОсвободитьФайлыПоСсылкам

// Процедура предназначена для освобождения файла. При этом не происходит
// обновления файла, а просто очищается его текущий держатель.
// Параметры
//  ОбъектСсылка  - СправочникСсылка.Файлы - файл
//  ХранитьВерсии -  Булево - Хранить версии
//  РедактируетТекущийПользователь -  Булево - файл редактирует текущи пользователь
//  Редактирует - СправочникСсылка.Пользователи - кто занял файл
//  УникальныйИдентификатор - уникальный идентификатор формы
//  НеЗадаватьВопрос - Булево - Не задавать вопрос "Отмена редактирования файла может привести к потере Ваших изменений"
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ОсвободитьФайл(ОбъектСсылка, Знач ХранитьВерсии = Неопределено,
	Знач РедактируетТекущийПользователь = Неопределено, Знач Редактирует = Неопределено,
	УникальныйИдентификатор = Неопределено,
	НеЗадаватьВопрос = Ложь) Экспорт
	
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();	
	
	Если ХранитьВерсии = Неопределено Тогда
		ДанныеФайла                 = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ОбъектСсылка);
		ХранитьВерсии                   = ДанныеФайла.ХранитьВерсии;
		РедактируетТекущийПользователь  = ДанныеФайла.РедактируетТекущийПользователь;
		Редактирует                     = ДанныеФайла.Редактирует;
	КонецЕсли;

	СтрокаОшибки = "";
	Если НЕ ВозможностьОсвободитьФайл(ОбъектСсылка, РедактируетТекущийПользователь, Редактирует, СтрокаОшибки) Тогда
		Предупреждение(СтрокаОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПродолжитьРаботу = Истина;
	
	Если НеЗадаватьВопрос = Ложь Тогда
		
		Результат = Вопрос(
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		    НСтр("ru = 'Отмена редактирования файла ""%1"" может привести к потере Ваших изменений.
		               |Продолжить?'"), Строка(ОбъектСсылка)),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Если Результат <> КодВозвратаДиалога.Да Тогда
			ПродолжитьРаботу = Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ПродолжитьРаботу Тогда
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		
		РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИОсвободитьФайл(ОбъектСсылка, ДанныеФайла, УникальныйИдентификатор);
		
		Если РасширениеПодключено Тогда
			НаЧтение = Истина;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		Если Не НеЗадаватьВопрос Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файл освобожден'"),
				ДанныеФайла.НавигационнаяСсылка,
				ДанныеФайла.ПолноеНаименованиеВерсии,
				БиблиотекаКартинок.Информация32);
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОсвободитьФайл()

// Процедура предназначена для освобождения файла. При этом не происходит
// обновления файла, а просто очищается его текущий держатель.
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
Процедура ОсвободитьФайлБезВопроса(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиВызовСервера.ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		НаЧтение = Истина;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Файл освобожден'"),
		ДанныеФайла.НавигационнаяСсылка,
		ДанныеФайла.ПолноеНаименованиеВерсии,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры // ОсвободитьФайл()

// Процедура освобождает файлы по массиву ссылок
//
// Параметры
//  ОбъектыСсылка - Массив - массив файлов
Процедура ОсвободитьФайлы(ОбъектыСсылка) Экспорт
	
	СписокНевозможноОсвободить = Новый СписокЗначений;

	// Получение массива данных Файлов
	ДанныеФайлов = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ОбъектыСсылка);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();	
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(
				ДанныеФайла.Ссылка, 
				ДанныеФайла.РедактируетТекущийПользователь, 
				ДанныеФайла.Редактирует, 
				СтрокаОшибки) Тогда // освободить невозможно
			
			СписокНевозможноОсвободить.Добавить(ДанныеФайла.Ссылка, СтрокаОшибки);
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
	КонецЦикла;
	
	// Если освободить нельзя, то выдаем диалог
	Если СписокНевозможноОсвободить.Количество() > 0 Тогда 
		Если НЕ ДиалогВопросаСоСписком(
				СписокНевозможноОсвободить, 
				НСтр("ru = 'Освободить остальные файлы?'"),
				НСтр("ru = 'При попытке освободить файлы возникли следующие ошибки:'"),
				НСтр("ru = 'Освободить файлы'")) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Ответ = Вопрос(
		НСтр("ru = 'Освобождение файлов может привести к потере Ваших изменений.
		           |Освободить файлы?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	// Освободить файлы
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		РаботаСФайламиВызовСервера.ОсвободитьФайл(ДанныеФайла);
		
		Если РасширениеПодключено Тогда
			НаЧтение = Истина;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Файл освобожден'"),
			ДанныеФайла.НавигационнаяСсылка,
			ДанныеФайла.ПолноеНаименованиеВерсии,
			БиблиотекаКартинок.Информация32);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет перенос файлов в другую папку - по массиву ссылок
//
// Параметры
//  ОбъектыСсылка - Массив - массив файлов
//  Папка - СправочникСсылка.ПапкиФайлов - папка, куда надо перенести
Процедура ПеренестиФайлыВПапку(ОбъектыСсылка, Папка) Экспорт
	
	ДанныеФайлов = РаботаСФайламиВызовСервера.ПеренестиФайлы(ОбъектыСсылка, Папка);
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Перенос файла'"),
			ДанныеФайла.НавигационнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Файл ""%1"" перенесен в папку %2.'"), Строка(ДанныеФайла.Ссылка), Строка(Папка)),
			БиблиотекаКартинок.Информация32);

	КонецЦикла;	
		
КонецПроцедуры	

// Опубликовать - по массиву ссылок
//
// Параметры
//  МассивФайлов - Массив - массив файлов
//  ИдентификаторФормы - уникальный идентификатор формы
Процедура ОпубликоватьФайлыПоСсылкам(Знач МассивФайлов, ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		// Проверяем возможность освобождения
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	
	ФормаВозврата = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
	
	СоздатьНовуюВерсию = Истина;
	СоздатьНовуюВерсиюДоступность = Истина;

	СтруктураПараметров = Новый Структура("ФайлСсылка, КомментарийКВерсии, СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность", 
		Неопределено, "", СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность);
	ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
	
	Результат = ФормаВозврата.ОткрытьМодально();
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	КодВозврата = Результат.КодВозврата;
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	Для Каждого Данные Из ДанныеФайлов Цикл
		
		ПоказыватьОповещение = Ложь;
		
		ОпубликоватьФайл(
					Данные.Ссылка, 
					ИдентификаторФормы, 
					Данные.ХранитьВерсии,
					Данные.РедактируетТекущийПользователь, 
					Данные.Редактирует,
					Данные.АвторТекущейВерсии,
					"",
					СоздатьНовуюВерсию,
					КомментарийКВерсии,
					ПоказыватьОповещение);
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(  
		НСтр("ru = 'Сохранить изменения файлов'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сохранены изменения файлов (%1 из %2).'"), 
			ДанныеФайлов.Количество(), МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры //ОпубликоватьФайлыПоСсылкам

// Процедура предназначена для опубликования файла без его освобождения.
//
// Параметры:
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//  ХранитьВерсии           - Булево.
//
//  РедактируетТекущийПользователь - Булево - файл редактирует
//                            текущий пользователь.
//
//  Редактирует             - СправочникСсылка.Пользователи - кто занял файл.
//  АвторТекущейВерсии      - СправочникСсылка.Пользователи - Автор текущей версии
//
//  ПереданныйПолныйПутьКФайлу - Строка - полный путь к файлу (вместо взятия пути
//                            из рабочего каталога).
//
//  СоздатьНовуюВерсию      - Булево - Создать новую версию.
//  КомментарийКВерсии      - Строка - Комментарий к версии.
//  ПоказыватьОповещение    - Булево - Показывать оповещение.
//
Функция ОпубликоватьФайл(
			ОбъектСсылка,
			ИдентификаторФормы,
			Знач ХранитьВерсии = Неопределено,
			Знач РедактируетТекущийПользователь = Неопределено,
			Знач Редактирует = Неопределено,
			Знач АвторТекущейВерсии = Неопределено,
			ПереданныйПолныйПутьКФайлу = "",
			СоздатьНовуюВерсию = Неопределено,
			КомментарийКВерсии = Неопределено,
			ПоказыватьОповещение = Истина) Экспорт
			
	Перем ДанныеФайла;
	Перем АдресВременногоХранилища;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();	

	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Код для тонкого клиента, толстого клиента и веб-клиента с подключенным расширением.
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ОбъектСсылка);
		
		ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
		
		// Проверка возможности освобождения.
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		Если ПолныйПутьКФайлу = "" Тогда
			
			ПолныйПутьКФайлу = ФайловыеФункцииСлужебныйКлиент
				.ПолучитьПолныйПутьКФайлуВРабочемКаталоге(ДанныеФайла);
		КонецЕсли;
		
		НеМенятьЗаписьВРабочемКаталоге = Ложь;
		Если ПереданныйПолныйПутьКФайлу <> "" Тогда
			НеМенятьЗаписьВРабочемКаталоге = Истина;
		КонецЕсли;
		
		// Проверка наличия файла на диске.
		ФайлНовойВерсии = Новый Файл(ПолныйПутьКФайлу);
		Если НЕ ФайлНовойВерсии.Существует() Тогда
			
			СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Не удалось загрузить файл ""%1""
			               |в информационную базу, т.к. он не найден на локальном компьютере.'"),
			    Строка(ДанныеФайла.Ссылка));
			
			Если НЕ ПустаяСтрока(ПолныйПутьКФайлу) Тогда
				СтрокаПредупреждения = СтрокаПредупреждения + " (" + ПолныйПутьКФайлу + ").";
			Иначе
				СтрокаПредупреждения = СтрокаПредупреждения + ".";
			КонецЕсли;
			
			СтрокаПредупреждения = СтрокаПредупреждения + Символы.ПС + "Освободить файл?";
			
			КодВозврата = Вопрос(СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
			
			Если КодВозврата = КодВозвратаДиалога.Да Тогда
				ОсвободитьФайлБезВопроса(ДанныеФайла, ИдентификаторФормы);
			КонецЕсли;
				
			Возврат Ложь;
			
		КонецЕсли;
		
		// Запрос комментария и признака хранения версии.
		Если СоздатьНовуюВерсию = Неопределено Тогда
			
			ФормаВозврата = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ДанныеФайла.ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии - не текущий пользователь,
				// то флажок "Не создавать новую версию" недоступен.
				Если ДанныеФайла.АвторТекущейВерсии <> ДанныеФайла.Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ФайлСсылка", ДанныеФайла.Ссылка);
			СтруктураПараметров.Вставить("КомментарийКВерсии", "");
			СтруктураПараметров.Вставить("СоздатьНовуюВерсию", СоздатьНовуюВерсию);
			СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность",
				СоздатьНовуюВерсиюДоступность);
			
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
			
		Иначе //  СоздатьНовуюВерсию и КомментарийКВерсии переданы извне
			
			Если ХранитьВерсии Тогда
				
				// Если автор текущей версии - не текущий пользователь,
				// то флажок "Не создавать новую версию" недоступен.
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;
			
		КонецЕсли;
			
		Интерактивно = Ложь;
		ВыбранныйПутьКФайлу = "";
		
		ИмяФайлаСПутемВременное = "";
		
		РазмерВМб = ФайлНовойВерсии.Размер() / (1024 * 1024);
		ВремяИзменения = ФайлНовойВерсии.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = ФайлНовойВерсии.ПолучитьУниверсальноеВремяИзменения();
		РазмерФайла = ФайлНовойВерсии.Размер();
		
		// Если файл с признаком шифрован, тогда при публикации
		// файл снова шифруется для тех же сертификатов.
		Если ДанныеФайла.Зашифрован Тогда
			
			МассивСертификатов = Новый Массив;
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Сертификат = Неопределено;
				Если СтруктураСертификата.Сертификат <> Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(СтруктураСертификата.Сертификат);
				Иначе
					Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(
						СтруктураСертификата.Отпечаток);
				КонецЕсли;
				МассивСертификатов.Добавить(Сертификат);
				
			КонецЦикла;
			
			Если МассивСертификатов.Количество() = 0 Тогда 
				СтруктураВозврата = ВыбратьСертификатыДляШифрования(ДанныеФайла);
				Если ТипЗнч(СтруктураВозврата) = Тип("Массив") Тогда
					МассивСертификатов = СтруктураВозврата;
					ЗаписатьСертификатыВТабличнуюЧасть(ДанныеФайла.Ссылка, МассивСертификатов, ИдентификаторФормы);
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ИмяФайлаСПутемШифрованное = ПолныйПутьКФайлу + ".crp";
			МенеджерКриптографии.Зашифровать(ПолныйПутьКФайлу, ИмяФайлаСПутемШифрованное, МассивСертификатов);
			ИмяФайлаСПутемВременное = ПолныйПутьКФайлу + ".bak";
			ПереместитьФайл(ПолныйПутьКФайлу, ИмяФайлаСПутемВременное);
			ПереместитьФайл(ИмяФайлаСПутемШифрованное, ПолныйПутьКФайлу);
			
		КонецЕсли;
		
		ИмяФайла = ФайлНовойВерсии.Имя;
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
			           |Пожалуйста, подождите.'"),
			ИмяФайла,
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
		Состояние(ТекстПояснения);

		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьКФайлу, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Интерактивно, ИдентификаторФормы) Тогда
			Состояние();
			
			Если ПомещенныеФайлы.Количество() = 1 Тогда
				АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
			КонецЕсли;
			
			ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
			ИмяКаталога           = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
			
			ОтносительныйПутьКФайлу = "";
			
			ИмяБезРасширения = ФайлНовойВерсии.ИмяБезРасширения;
			Расширение = ФайлНовойВерсии.Расширение;
			
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			
			Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда // Есть рабочий каталог.
				ОтносительныйПутьКФайлу = ПолныйПутьКФайлу;
			Иначе
				Позиция = Найти(ПолныйПутьКФайлу, ИмяКаталога);
				Если Позиция <> 0 Тогда
					ОтносительныйПутьКФайлу = Сред(ПолныйПутьКФайлу, СтрДлина(ИмяКаталога) + 1);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПерсональныеНастройки.ИзвлекатьТекстыФайловНаСервере Тогда
				
				АдресВременногоХранилищаТекста =
					ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
						ПолныйПутьКФайлу, ИдентификаторФормы);
			Иначе
				АдресВременногоХранилищаТекста = "";
			КонецЕсли;
			
			ЭтоВебКлиент = Ложь;
			
			ТекстНеИзвлеченНаКлиенте = Ложь;
			#Если ВебКлиент Тогда
				ТекстНеИзвлеченНаКлиенте = Истина;
			#КонецЕсли	
			
			ВерсияОбновлена = РаботаСФайламиВызовСервера.ОпубликоватьФайл(
				ДанныеФайла.Ссылка, 
				СоздатьНовуюВерсию,
				АдресВременногоХранилища,
				КомментарийКВерсии,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				РазмерФайла,
				ИмяБезРасширения,
				Расширение,
				ОтносительныйПутьКФайлу,
				ПолныйПутьКФайлу,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				ТекстНеИзвлеченНаКлиенте,
				ВРабочемКаталогеВладельца,
				НеМенятьЗаписьВРабочемКаталоге,
				ИдентификаторФормы);
				
			Если ПоказыватьОповещение Тогда
					
				Если Не ВерсияОбновлена Тогда
					ПоказатьИнформациюФайлНеБылИзменен();
				КонецЕсли;
					
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Новая версия сохранена'"),
					ДанныеФайла.НавигационнаяСсылка,
					ДанныеФайла.ПолноеНаименованиеВерсии,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;	
				
			// удаляем зашифрованный файл из кеша
			Если ДанныеФайла.Зашифрован Тогда
				ПереместитьФайл(ИмяФайлаСПутемВременное, ПолныйПутьКФайлу);
			КонецЕсли;	
				
		Иначе
			Состояние();
		КонецЕсли;
		
	Иначе // веб клиент и нет расширения работы с файлами

		Если ХранитьВерсии = Неопределено Тогда
			ДанныеФайла 				= РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ОбъектСсылка);
			ХранитьВерсии 					= ДанныеФайла.ХранитьВерсии;
			РедактируетТекущийПользователь 	= ДанныеФайла.РедактируетТекущийПользователь;
			Редактирует 					= ДанныеФайла.Редактирует;
			АвторТекущейВерсии				= ДанныеФайла.АвторТекущейВерсии;
		КонецЕсли;

		// Проверяем возможность освобождения
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ОбъектСсылка, РедактируетТекущийПользователь, Редактирует, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = "";

		Если СоздатьНовуюВерсию = Неопределено Тогда
			
			// Запрашиваем комментарий и признак хранения версии
			ФормаВозврата = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии - не текущий пользователь - то галочку «Не создавать новую версию» делаем недоступной
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;			
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;	

			СтруктураПараметров = Новый Структура("ФайлСсылка, КомментарийКВерсии, СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность", 
				ОбъектСсылка, "", СоздатьНовуюВерсию, СоздатьНовуюВерсиюДоступность);
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
			
		Иначе // СоздатьНовуюВерсию и КомментарийКВерсии переданы извне
			
			Если ХранитьВерсии Тогда
				
				// Если автор текущей версии - не текущий пользователь - то галочку «Не создавать новую версию» делаем недоступной
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;			
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;	
			
		КонецЕсли;
		
		Интерактивно = Истина;
		
		ВыбранныйПутьКФайлу = "";
		ПоказатьНапоминаниеПередПоместитьФайл();
		Если ПоместитьФайл(АдресВременногоХранилища, ПолныйПутьКФайлу, ВыбранныйПутьКФайлу, Интерактивно, ИдентификаторФормы) Тогда
			
			ИмяБезРасширения = "";
			Расширение = "";
			ВремяИзменения = Дата('00010101'); // Т.к. не можем получить дату модификации файла на диске
			ВремяИзмененияУниверсальное = Дата('00010101');
			РазмерФайла = 0;				// Т.к. не можем получить размер файла на диске
			
			ОтносительныйПутьКФайлу = "";
			АдресВременногоХранилищаТекста = "";

			СтрокиПути = ФайловыеФункцииСлужебныйКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранныйПутьКФайлу);
			Если СтрокиПути.Количество() >= 2 Тогда
				Расширение = СтрокиПути[СтрокиПути.Количество()-1];
				ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
			КонецЕсли;

			ЭтоВебКлиент = Истина;
			
			ТекстНеИзвлеченНаКлиенте = Ложь;
			#Если ВебКлиент Тогда
				ТекстНеИзвлеченНаКлиенте = Истина;
			#КонецЕсли	
			
			ВРабочемКаталогеВладельца = Ложь;
			
			РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИОпубликоватьФайл(
				ОбъектСсылка, 
				ДанныеФайла,
				СоздатьНовуюВерсию,
				АдресВременногоХранилища,
				КомментарийКВерсии,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				РазмерФайла,
				ИмяБезРасширения,
				Расширение,
				ОтносительныйПутьКФайлу,
				ПолныйПутьКФайлу,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				ТекстНеИзвлеченНаКлиенте,
				ВРабочемКаталогеВладельца,
				ИдентификаторФормы);
				
			Если ПоказыватьОповещение Тогда
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Новая версия сохранена'"),
					ДанныеФайла.НавигационнаяСсылка,
					ДанныеФайла.ПолноеНаименованиеВерсии,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура предназначена для интерактивного создания нового Файла
// В частности, происходит вызов диалога выбора режима создания Файла
// Параметры:
//	ВладелецФайла - определяет группу, в которой создается Элемент, если
//		группа неизвестна в момент вызова этого метода - там будет Неопределено
//  ФормаВладелец - Форма - форма, откуда вызвано создание файла
//	РежимСоздания - как создавать новый Файл
//		1 - создать из шаблона
//		2 - создать из файла
//		3 - создать пустую карточку
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - не открывает карточку файла после создания, если Истина
Процедура СозданиеНовогоФайла(ВладелецФайла, ФормаВладелец, РежимСоздания = 1, НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	Форма = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуВыбораВариантаСозданияНовогоФайла();
	Форма.УстановитьПараметрыИспользования(РежимСоздания);
	РежимСозданияРезультат = Форма.ОткрытьМодально();
	
	Если ТипЗнч(РежимСозданияРезультат) = Тип("Число") Тогда
		СоздатьФайл(РежимСозданияРезультат, ВладелецФайла, ФормаВладелец, НеОткрыватьКарточкуПослеСозданияИзФайла);
	КонецЕсли;
	
КонецПроцедуры // СозданиеНовогоФайла()

// Процедура предназначена для копирования существующего Файла
// Параметры:
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//	ФайлОснование - откуда копируется Файл (тип - СправочникСсылка)
Процедура СкопироватьФайл(ВладелецФайла, ФайлОснование) Экспорт
	
	Параметры = Новый Структура("ФайлОснование, ВладелецФайла", ФайлОснование, ВладелецФайла);
	Форма = ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры);
	
КонецПроцедуры // СкопироватьФайл()

// При переименовании Файл и ВерсияФайла обновляет информацию в рабочем каталоге (имя файла на диске и в регистре)
// Параметры:
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла
//  НовоеИмя - Строка - Новое имя файла
Процедура ОбновитьИнформациюВРабочемКаталоге(ТекущаяВерсия, НовоеИмя) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(Неопределено, ТекущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Файл = Новый Файл(ПолноеИмяФайла);
		ТолькоИмя = Файл.Имя;
		РазмерФайла = Файл.Размер();
		ПутьБезИмени = Лев(ПолноеИмяФайла, СтрДлина(ПолноеИмяФайла) - СтрДлина(ТолькоИмя));
		НовоеПолноеИмя = ПутьБезИмени + НовоеИмя + Файл.Расширение;
		ПереместитьФайл(ПолноеИмяФайла, НовоеПолноеИмя);
		
		РаботаСФайламиВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
		РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ТекущаяВерсия, НовоеПолноеИмя, ИмяКаталога, ВРабочемКаталогеНаЧтение, РазмерФайла, ВРабочемКаталогеВладельца);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение - если там вообще есть такой Файл
// Параметры
//  ДанныеФайла  - структура с данными файла
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца)
	// Если Файл без файла - ничего не делаем в рабочем каталоге
	Если ДанныеФайла.Версия.Пустая() Тогда 
		Возврат;
	КонецЕсли;

	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.ТекущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.ТекущаяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(НаЧтение);	
КонецПроцедуры

// Удаление файла со снятием атрибута readonly
// Параметры
//  ПолноеИмяФайла - Строка -  Полное имя файла
//  ЗадаватьВопрос - Булево- Задавать вопрос об удалении
//  ШапкаВопроса - Строка - Шапка вопроса - добавляет текст к вопросу об удалении
Процедура УдалитьФайл(ПолноеИмяФайла, ЗадаватьВопрос = Неопределено, ШапкаВопроса = Неопределено) Экспорт
	
	ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов;
	Если ЗадаватьВопрос <> Неопределено Тогда
		ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = ЗадаватьВопрос;
	КонецЕсли;		
	
	Если ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Истина Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалить файл ""%1"" из основного рабочего каталога?'"), ПолноеИмяФайла);
		
		Если ШапкаВопроса <> Неопределено Тогда
			ТекстВопроса = ШапкаВопроса + Символы.ПС + Символы.ПС + ТекстВопроса;
		КонецЕсли;	
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;	
	
КонецПроцедуры

// Получает Файл из информационной базы на чтение на локальный диск - в локальный кэш
// и возвращает путь к этому файлу в параметре
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьФайлВерсииВЛокальныйКэшФайловНаЧтение(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено)
	
	ПолноеИмяФайла = "";
	НаЧтение = Истина;
	
	ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
	ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.Версия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если НЕ ФайлВРабочемКаталоге Тогда
		Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
			НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
	КонецЕсли;
	
	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность
	ИмяФайлаСПутем = ПолноеИмяФайла;
	Если ИмяФайлаСПутем = "" Тогда
		Предупреждение(НСтр("ru = 'Ошибка помещения файла в локальный кэш файлов.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Ниже - уже известно, что Файл в рабочем каталоге есть. 
	// Надо проверить его дату модификации и принять решение что делать дальше
	// - перезаписать, спросить пользователя и т.д.
	
	ФайлВерсии = Новый Файл(ПолноеИмяФайла);
	ДатаФайлаНаДиске = ФайлВерсии.ПолучитьВремяИзменения();
	РазмерФайлаНаДиске = ФайлВерсии.Размер();
	РазмерФайлаВБазе = ДанныеФайла.Размер;
	
	РазницаДат = ДатаФайлаНаДиске - ДатаФайлаВБазе;
	Если РазницаДат < 0 Тогда
		РазницаДат = -РазницаДат;
	КонецЕсли;
	
	Если РазницаДат <= 1 Тогда // 1 секунда - допустимая разница (на Win95 может быть такое)
		// Дата одинаковая, но размер отличается - странно, но возможно	
		Если РазмерФайлаВБазе <> 0 И РазмерФайлаНаДиске <> РазмерФайлаВБазе Тогда
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
			ПараметрыОткрытияФормы.Вставить("РазмерФайлаНаСервере",     	РазмерФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("РазмерВРабочемКаталоге",      РазмерФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Сообщение",            		НСтр("ru = 'Размер файла в рабочем каталоге и на сервере отличается. Перезаписать файл в рабочем каталоге?'"));
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииФайлаДругогоРазмера", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда // Перезаписать
				УдалитьФайл(ПолноеИмяФайла);
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда // Открыть существующий
				Возврат Истина;
			Иначе  // Выйти ничего не делая
				ПолноеИмяФайла = "";
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина; // Все совпадает - и дата, и размер
	ИначеЕсли ДатаФайлаНаДиске < ДатаФайлаВБазе Тогда // В рабочем каталоге более старый
		Если ВРабочемКаталогеНаЧтение = Ложь Тогда // В рабочем каталоге на редактирование
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
			ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более старый файл");
			
			Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более раннюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять из информационной базы и перезаписать?'");
			ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
				Возврат Истина;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
				ПолноеИмяФайла = "";
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
				УдалитьФайл(ПолноеИмяФайла);
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			КонецЕсли;
		Иначе // В рабочем каталоге на чтение
			// Перезапишем ни о чем не спросив
			УдалитьФайл(ПолноеИмяФайла);
			Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
				НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		КонецЕсли;
	ИначеЕсли ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
		ЗанятМной = (ДанныеФайла.Редактирует = ПользователиКлиентСервер.ТекущийПользователь());
		Если (ВРабочемКаталогеНаЧтение = Ложь) И ЗанятМной Тогда // В рабочем каталоге на редактирование и занят текущим пользователем
			Возврат Истина; // Ничего делать не надо
		Иначе // В рабочем каталоге на чтение
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
			ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более новый файл");
			
			Сообщение = НСтр("ru = 'Файл на локальном компьютере имеет более позднюю дату, возможно, он был изменен. Открыть существующий или взять с сервера и перезаписать?'");
			ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
			
			Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
			
			Если Результат = КодВозвратаДиалога.Да Тогда  // Открыть существующий
				Возврат Истина;
			ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
				ПолноеИмяФайла = "";
				Возврат Ложь;
			ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда  // Перезаписать
				УдалитьФайл(ПолноеИмяФайла);
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции // ПолучитьФайлВерсииВРабочийКаталог()

// Получает Файл из информационной базы на редактирование на локальный диск - в локальный кэш
// и возвращает путь к этому файлу в параметре
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьФайлВерсииВЛокальныйКэшФайловНаРедактирование(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено)
	ПолноеИмяФайла = "";
	НаЧтение = Ложь;
	
	ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
	ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
	РазмерФайлаВБазе = ДанныеФайла.Размер;
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.Версия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
			НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
	КонецЕсли;

	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность
	ИмяФайлаСПутем = ПолноеИмяФайла;
	Если ИмяФайлаСПутем = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка помещения файла в локальный кэш файлов.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Ниже - уже известно, что Файл в рабочем каталоге есть. 
	// Надо проверить его дату модификации и принять решение что делать дальше
	// - перезаписать, спросить пользователя и т.д.
	
	ФайлВерсии = Новый Файл(ПолноеИмяФайла);
	ДатаФайлаНаДиске = ФайлВерсии.ПолучитьВремяИзменения();
	РазмерФайлаНаДиске = ФайлВерсии.Размер();
	
	РазницаДат = ДатаФайлаНаДиске - ДатаФайлаВБазе;
	Если РазницаДат < 0 Тогда
		РазницаДат = -РазницаДат;
	КонецЕсли;
	
	Если РазницаДат <= 1 Тогда // 1 секунда - допустимая разница (на Win95 может быть такое)
		// Дата одинаковая, но размер отличается - странно, но возможно	
		Если РазмерФайлаВБазе <> 0 И РазмерФайлаНаДиске <> РазмерФайлаВБазе Тогда
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
			ПараметрыОткрытияФормы.Вставить("РазмерФайлаНаСервере",     	РазмерФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("РазмерВРабочемКаталоге",      РазмерФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Сообщение",            		НСтр("ru = 'Размер файла в рабочем каталоге и на сервере отличается. Перезаписать файл в рабочем каталоге?'"));
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииФайлаДругогоРазмера", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда // Перезаписать
				УдалитьФайл(ПолноеИмяФайла);
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда // Открыть существующий
				Возврат Истина;
			Иначе // Выйти ничего не делая
				ПолноеИмяФайла = "";
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Все совпадает - и дата, и размер
		Если ВРабочемКаталогеНаЧтение = НаЧтение Тогда
			Возврат Истина;
		Иначе
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьВРабочемКаталоге(ДанныеФайла.Версия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца);
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ДатаФайлаНаДиске < ДатаФайлаВБазе Тогда // В рабочем каталоге более старый
		Если ВРабочемКаталогеНаЧтение = Ложь Тогда // В рабочем каталоге на редактирование
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
			ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более старый файл");
			
			Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более раннюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять с сервера и перезаписать?'");
			ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
				Возврат Истина;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
				ПолноеИмяФайла = "";
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
				УдалитьФайл(ПолноеИмяФайла);
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			КонецЕсли;
		Иначе // В рабочем каталоге на чтение
			// Перезапишем ни о чем не спросив
			УдалитьФайл(ПолноеИмяФайла);
			Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
				НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		КонецЕсли;
	ИначеЕсли ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
		
		Если ВРабочемКаталогеНаЧтение = Ложь Тогда // В рабочем каталоге на редактирование
			Возврат Истина; // Ничего делать не надо
		Иначе // В рабочем каталоге на чтение
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
			ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более новый файл");
			
			Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более позднюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять с сервера и перезаписать?'");
			ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
				Возврат Истина;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
				ПолноеИмяФайла = "";
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
				УдалитьФайл(ПолноеИмяФайла);
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;	
КонецФункции // ПолучитьФайлВерсииВРабочийКаталог()

// Проверяет максимальную длину, если нужно - меняет рабочий каталог и переносит файлы
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИмяФайлаСПутем - Строка - полное имя файла
//  ИмяФайла - Строка - имя файла (без пути)
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция - т.е. длина полного имени файла не превышает 260
Функция ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(ДанныеФайла, ИмяФайлаСПутем, ИмяФайла)
#Если Не ВебКлиент Тогда
		
	ИмяКаталогаПрежнееЗначение = ДанныеФайла.РабочийКаталогВладельца;
	
	МаксимальнаяДлинаПолногоПути = 260;
	Если НРег(ДанныеФайла.Расширение) = "xls" ИЛИ НРег(ДанныеФайла.Расширение) = "xlsx" Тогда
		МаксимальнаяДлинаПолногоПути = 218; // Excel Длина имени файла вместе с путем не должна превышать 218 знака
	КонецЕсли;	
	
	МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
	
	Если СтрДлина(ИмяФайлаСПутем) > МаксимальнаяДлинаПолногоПути Тогда
		
		ТекстСообщения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Длина полного пути к файлу (путь рабочего каталога плюс имя файла) превышает %1 символов
			|%2'"),
			МаксимальнаяДлинаПолногоПути, ИмяФайлаСПутем);
	
		Оболочка = Новый COMОбъект("WScript.Shell");
		ПутьКаталогаПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
		ПутьКаталогаПользователя = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталогаПользователя, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
		
		// если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
		Если СтрДлина(ИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
			ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК + НСтр("ru = 'Измените имя файла на более короткое.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;	
		
		// Если структура папок (путь к рабочему каталогу текущей папки) превышает 260-5 (1.txt), пишем "Измените имена папок или перенесите текущую папку в другую папку"
		Если СтрДлина(ДанныеФайла.РабочийКаталогВладельца) > МаксимальнаяДлинаПолногоПути - 5 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК + НСтр("ru = 'Измените имена папок или перенесите текущую папку в другую папку.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;	
		
		Пока Истина Цикл
			
			ТекстСообщения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Длина полного пути к файлу (путь рабочего каталога плюс имя файла) превышает %1 символов
				|%2'"),
				МаксимальнаяДлинаПолногоПути, ИмяФайлаСПутем);
			
			ТекстВопроса = ТекстСообщения + Символы.ВК + Символы.ВК 
			+ НСтр("ru = 'Выбрать другой путь к основному рабочему каталогу? 
			|(Содержимое рабочего каталога будет перенесено в выбранный каталог)'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			// выбираем другой путь к рабочему каталогу
			Заголовок = НСтр("ru = 'Выберите другой путь к рабочему каталогу'");
			Если Не ВыбратьПутьКРабочемуКаталогу(ДанныеФайла.РабочийКаталогВладельца, Заголовок, Истина) Тогда
				Возврат Ложь;
			КонецЕсли;	
			
			ИмяФайлаСПутем = ДанныеФайла.РабочийКаталогВладельца + ИмяФайла;
			
			Если СтрДлина(ИмяФайлаСПутем) <= МаксимальнаяДлинаПолногоПути Тогда // уложились в 260 символов
				
				Если ПеренестиСодержимоеРабочегоКаталога(ИмяКаталогаПрежнееЗначение, ДанныеФайла.РабочийКаталогВладельца) Тогда
					// регистр сведений ФайлыВРабочемКаталоге - сейчас там полный путь к файлу - надо его менять - выделять общую часть и replace. -просто SQL запросом - для текущего пользователя
					РаботаСФайламиВызовСервера.СохранитьРабочийКаталогИЗаменитьПутиВРегистре(ДанныеФайла.Владелец, 
						ДанныеФайла.РабочийКаталогВладельца, ИмяКаталогаПрежнееЗначение);
				Иначе	
					Возврат Ложь;
				КонецЕсли;
				
				Прервать; 
			КонецЕсли;					
			
		КонецЦикла;
	
	КонецЕсли;
	
#КонецЕсли
	Возврат Истина;
КонецФункции	

// Получает Файл из информационной базы на чтение на локальный диск - в рабочий каталог папки
// и возвращает путь к этому файлу в параметре
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьФайлВерсииВРабочийКаталогНаЧтение(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено)
	
	Перем Версия;
	Перем ДатаПомещения;	
	
	НаЧтение = Истина;
	ВРабочемКаталогеВладельца = Истина;
	
	ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
	ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
	
	// Формирование имени файла с расширением
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	Если НЕ ПустаяСтрока(ДанныеФайла.Расширение) Тогда 
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ИмяФайла, ДанныеФайла.Расширение);
	КонецЕсли;
	
	Если ПолноеИмяФайла = "" Тогда
		
		ПолноеИмяФайла = ДанныеФайла.РабочийКаталогВладельца + ИмяФайла;
		
		Если НЕ ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	// находим в рабочем каталоге по пути, а не по ВерсииФайла
	Владелец = Неопределено;
	НомерВерсии = Неопределено;
	ВРегистреНаЧтение = Неопределено;
	ВРегистреКодФайла = Неопределено;
	ВРегистреПапка = Неопределено;
	ФайлЕстьВРегистре = РаботаСФайламиВызовСервера.НайтиВРегистреПоПути(ПолноеИмяФайла, Версия, ДатаПомещения, Владелец, НомерВерсии, 
		ВРегистреНаЧтение, ВРегистреКодФайла, ВРегистреПапка);
		
	Если ФайлЕстьВРегистре Тогда
		// проверить что уже есть Файл по этому пути
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		Если НЕ ФайлНаДиске.Существует() Тогда
			РаботаСФайламиВызовСервера.УдалитьИзРегистра(Версия);
			ФайлЕстьВРегистре = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ФайлЕстьВРегистре Тогда // на Файл нет ссылки в регистре
		
		// проверить что уже есть Файл по этому пути
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		Если ФайлНаДиске.Существует() Тогда
			
			ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
			ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
			РазмерФайлаВБазе = ДанныеФайла.Размер;

			ДатаФайлаНаДиске = ФайлНаДиске.ПолучитьВремяИзменения();
			РазмерФайлаНаДиске = ФайлНаДиске.Размер();
			
			РазницаДат = ДатаФайлаНаДиске - ДатаФайлаВБазе;
			Если РазницаДат < 0 Тогда
				РазницаДат = -РазницаДат;
			КонецЕсли;
			
			// размер и дата модификации одинаковы - используем его - зарегистрируем в кеше
			Если РазницаДат <= 1 И РазмерФайлаВБазе = РазмерФайлаНаДиске Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(НаЧтение);
				ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
				РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.Версия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, РазмерФайлаВБазе, ВРабочемКаталогеВладельца);
				Возврат Истина;	// используем находящийся на диске Файл
			КонецЕсли;
			
			Если РазницаДат > 1 Тогда
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ПолноеИмяФайла);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				
				Если ДатаФайлаНаДиске < ДатаФайлаВБазе Тогда
					ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более старый файл");
				Иначе	
					ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более новый файл");
				КонецЕсли;	
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл ""%1"" в рабочем каталоге на локальном компьютере уже есть, но его дата изменения отличается от даты в информационной базе. Открыть файл из локального каталога или взять из информационной базы и перезаписать?'"),
					Строка(ДанныеФайла.Ссылка));
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					ФайлНаДиске.УстановитьТолькоЧтение(НаЧтение);
					ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
					РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.Версия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, РазмерФайлаВБазе, ВРабочемКаталогеВладельца);
					Возврат Истина;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена ИЛИ Ответ = Неопределено Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла);
					Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				КонецЕсли;
									  
    		Иначе
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                      НСтр("ru = 'Файл ""%3"" в рабочем каталоге уже есть, но его размер отличается от даты на сервере. 
									  | Размер файла в рабочем каталоге: %1
									  | Размер файла на сервере: %2
									  |Переименуйте его или переместите в другой каталог. '"),
				                      РазмерФайлаНаДиске, РазмерФайлаВБазе, ПолноеИмяФайла);			
									  
				Предупреждение(СтрокаСообщения);
				Возврат Ложь; // отмена операции
								  
			КонецЕсли;					  
		КонецЕсли;	
		
		// на Файл нет ссылки в регистре и файла на диске тоже нет
		Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
			НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
	КонецЕсли; // на Файл нет ссылки в регистре	 
	
	
	// Файл по пути в рабочем каталоге имеет ссылку в регистре сведений
	Если Версия <> ДанныеФайла.ТекущаяВерсия Тогда // в раб каталоге лежит Файл не той ВерсииФайла (или вообще другой объект Файл)
		
		Если Владелец = ДанныеФайла.Ссылка И ВРегистреНаЧтение = Истина Тогда // на диске тот же Файл, но другой ВерсииФайла - и при этом на чтение
			Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
				НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		КонецЕсли;
		
		СтрокаСообщения = "";
			
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							  НСтр("ru = 'В рабочем каталоге уже есть файл ""%1"", связанный с другим файлом информационной базы. 
							  | Код файла на сервере: %2
							  | Код файла на локальном компьютере: %3 '"),
							  ПолноеИмяФайла,
							  ДанныеФайла.КодФайла, 
							  ВРегистреКодФайла);			
							  
		Если ДанныеФайла.Владелец = ВРегистреПапка Тогда // одна и та же папка
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + НСтр("ru = 'Переименуйте один из файлов в информационной базе.'");
		Иначе
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + НСтр("ru = 'Измените рабочий каталог одной из папок в информационной базе
				| (У двух папок не должно быть одинакового рабочего каталога).'");
		КонецЕсли;	
								  
		Предупреждение(СтрокаСообщения);
		Возврат Ложь;
		
	Иначе // Файл по пути в рабочем каталоге - нужной нам версии и на него есть ссылка в регистре
		
		// Ниже - уже известно, что Файл в рабочем каталоге есть. 
		// Надо проверить его дату модификации и принять решение что делать дальше
		// - перезаписать, спросить пользователя и т.д.
		
		ИмяФайлаСПутем = ПолноеИмяФайла;
		ВРабочемКаталогеНаЧтение = ВРегистреНаЧтение;
	
		ФайлВерсии = Новый Файл(ПолноеИмяФайла);
		ДатаФайлаНаДиске = ФайлВерсии.ПолучитьВремяИзменения();
		РазмерФайлаНаДиске = ФайлВерсии.Размер();
		РазмерФайлаВБазе = ДанныеФайла.Размер;
		
		РазницаДат = ДатаФайлаНаДиске - ДатаФайлаВБазе;
		Если РазницаДат < 0 Тогда
			РазницаДат = -РазницаДат;
		КонецЕсли;
		
		Если РазницаДат <= 1 Тогда // 1 секунда - допустимая разница (на Win95 может быть такое)
			// Дата одинаковая, но размер отличается - странно, но возможно	
			Если РазмерФайлаВБазе <> 0 И РазмерФайлаНаДиске <> РазмерФайлаВБазе Тогда
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("РазмерФайлаНаСервере",     	РазмерФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("РазмерВРабочемКаталоге",      РазмерФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Сообщение",            		НСтр("ru = 'Размер файла в рабочем каталоге и на сервере отличается. Перезаписать файл в рабочем каталоге?'"));
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииФайлаДругогоРазмера", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
					Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда // Открыть существующий
					Возврат Истина;
				Иначе  // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Истина; // Все совпадает - и дата, и размер
		ИначеЕсли ДатаФайлаНаДиске < ДатаФайлаВБазе Тогда // В рабочем каталоге более старый
			Если ВРабочемКаталогеНаЧтение = Ложь Тогда // В рабочем каталоге на редактирование
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более старый файл");
				
				Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более раннюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять с сервера и перезаписать?'");
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					Возврат Истина;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
					Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				КонецЕсли;
			Иначе // В рабочем каталоге на чтение
				// Перезапишем ни о чем не спросив
				УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			КонецЕсли;
		ИначеЕсли ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
			ЗанятМной = (ДанныеФайла.Редактирует = ПользователиКлиентСервер.ТекущийПользователь());
			Если (ВРабочемКаталогеНаЧтение = Ложь) И ЗанятМной Тогда // В рабочем каталоге на редактирование и занят текущим пользователем
				Возврат Истина; // Ничего делать не надо
			Иначе // В рабочем каталоге на чтение
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более новый файл");
				
				Сообщение = НСтр("ru = 'Файл на локальном компьютере имеет более позднюю дату, возможно, он был изменен. Открыть существующий или взять с сервера и перезаписать?'");
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Результат = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					Возврат Истина;
				ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
					Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;		
	
	
	Возврат Ложь;
КонецФункции // ПолучитьФайлВерсииВРабочийКаталог()

// Получает Файл из информационной базы на редактирование на локальный диск - в рабочий каталог папки
// и возвращает путь к этому файлу в параметре
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьФайлВерсииВРабочийКаталогНаРедактирование(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено)
	
	Перем Версия;
	Перем ДатаПомещения;	
	
	НаЧтение = Ложь;
	ВРабочемКаталогеВладельца = Истина;
	
	ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
	ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
	
	// Формирование имени файла с расширением
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	Если НЕ ПустаяСтрока(ДанныеФайла.Расширение) Тогда 
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ИмяФайла, ДанныеФайла.Расширение);
	КонецЕсли;
	
	Если ПолноеИмяФайла = "" Тогда
		
		ПолноеИмяФайла = ДанныеФайла.РабочийКаталогВладельца + ИмяФайла;
		
		Если НЕ ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	// находим в рабочем каталоге по пути, а не по ВерсииФайла
	Владелец = Неопределено;
	НомерВерсии = Неопределено;
	ВРегистреНаЧтение = Неопределено;
	ВРегистреКодФайла = Неопределено;
	ВРегистреПапка = Неопределено;
	ФайлЕстьВРегистре = РаботаСФайламиВызовСервера.НайтиВРегистреПоПути(ПолноеИмяФайла, Версия, ДатаПомещения, Владелец, НомерВерсии, 
		ВРегистреНаЧтение, ВРегистреКодФайла, ВРегистреПапка);
	
	Если ФайлЕстьВРегистре Тогда
		// проверить что уже есть Файл по этому пути
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		Если НЕ ФайлНаДиске.Существует() Тогда
			РаботаСФайламиВызовСервера.УдалитьИзРегистра(Версия);
			ФайлЕстьВРегистре = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ФайлЕстьВРегистре Тогда // на Файл нет ссылки в регистре
		
		// проверить что уже есть Файл по этому пути
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		Если ФайлНаДиске.Существует() Тогда
			
			ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
			ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
			РазмерФайлаВБазе = ДанныеФайла.Размер;

			ДатаФайлаНаДиске = ФайлНаДиске.ПолучитьВремяИзменения();
			РазмерФайлаНаДиске = ФайлНаДиске.Размер();
			
			РазницаДат = ДатаФайлаНаДиске - ДатаФайлаВБазе;
			Если РазницаДат < 0 Тогда
				РазницаДат = -РазницаДат;
			КонецЕсли;
			
			// размер и дата модификации одинаковы - используем его - зарегистрируем в кеше
			Если РазницаДат <= 1 И РазмерФайлаВБазе = РазмерФайлаНаДиске Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(НаЧтение);
				ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
				
				РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.Версия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, РазмерФайлаВБазе, ВРабочемКаталогеВладельца);
				Возврат Истина;	// используем находящийся на диске Файл
			КонецЕсли;
			
			Если РазницаДат > 1 Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                      НСтр("ru = 'Файл ""%3"" в рабочем каталоге уже есть, но его дата изменения отличается от даты на сервере. 
									  | Дата изменения файла в рабочем каталоге: %1
									  | Дата изменения файла на сервере: %2
									  |Переименуйте его или переместите в другой каталог. '"),
				                      ДатаФайлаНаДиске, ДатаФайлаВБазе, ПолноеИмяФайла);
									  
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ПолноеИмяФайла);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				
				Если ДатаФайлаНаДиске < ДатаФайлаВБазе Тогда
					ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более старый файл");
				Иначе	
					ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более новый файл");
				КонецЕсли;	
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл ""%1"" в рабочем каталоге на локальном компьютере уже есть, но его дата изменения отличается от даты на сервере. Открыть файл из локального каталога или взять с сервера и перезаписать?'"),
					Строка(ДанныеФайла.Ссылка));
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					ФайлНаДиске.УстановитьТолькоЧтение(НаЧтение);
					ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
					
					РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.Версия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, РазмерФайлаВБазе, ВРабочемКаталогеВладельца);
					Возврат Истина;	// используем находящийся на диске Файл
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена ИЛИ Ответ = Неопределено Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла);
					Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				КонецЕсли;
									  
    		Иначе
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                      НСтр("ru = 'Файл ""%3"" в рабочем каталоге уже есть, но его размер отличается от даты на сервере. 
									  | Размер файла в рабочем каталоге: %1
									  | Размер файла на сервере: %2
									  |Переименуйте его или переместите в другой каталог. '"),
				                      РазмерФайлаНаДиске, РазмерФайлаВБазе, ПолноеИмяФайла);			
									  
				Предупреждение(СтрокаСообщения);
				Возврат Ложь; // отмена операции
									  
			КонецЕсли;					  
		КонецЕсли;	
		
		// на Файл нет ссылки в регистре и файла на диске тоже нет
		Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
			НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
	КонецЕсли; // на Файл нет ссылки в регистре	 
	
	
	// Файл по пути в рабочем каталоге имеет ссылку в регистре сведений
	Если Версия <> ДанныеФайла.ТекущаяВерсия Тогда // в раб каталоге лежит Файл не той ВерсииФайла (или вообще другой объект Файл)
		
		Если Владелец = ДанныеФайла.Ссылка И ВРегистреНаЧтение = Истина Тогда // на диске тот же Файл, но другой ВерсииФайла - и при этом на чтение
			Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
				НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		КонецЕсли;
		
		СтрокаСообщения = "";
			
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							  НСтр("ru = 'В рабочем каталоге уже есть файл ""%1"", связанный с другим файлом информационной базы. 
							  | Код файла на сервере: %2
							  | Код файла на локальном компьютере: %3 '"),
							  ПолноеИмяФайла,
							  ДанныеФайла.КодФайла, 
							  ВРегистреКодФайла);			
							  
		Если ДанныеФайла.Владелец = ВРегистреПапка Тогда // одна и та же папка
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + НСтр("ru = 'Переименуйте один из файлов в информационной базе.'");
		Иначе
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + НСтр("ru = 'Измените рабочий каталог одной из папок в информационной базе
				| (У двух папок не должно быть одинакового рабочего каталога).'");
		КонецЕсли;	
								  
		Предупреждение(СтрокаСообщения);
		Возврат Ложь;
		
	Иначе // Файл по пути в рабочем каталоге - нужной нам версии и на него есть ссылка в регистре
		
		// Ниже - уже известно, что Файл в рабочем каталоге есть. 
		// Надо проверить его дату модификации и принять решение что делать дальше
		// - перезаписать, спросить пользователя и т.д.
		
		ИмяФайлаСПутем = ПолноеИмяФайла;
		ВРабочемКаталогеНаЧтение = ВРегистреНаЧтение;
	
		ФайлВерсии = Новый Файл(ПолноеИмяФайла);
		ДатаФайлаНаДиске = ФайлВерсии.ПолучитьВремяИзменения();
		РазмерФайлаНаДиске = ФайлВерсии.Размер();
		РазмерФайлаВБазе = ДанныеФайла.Размер;
		
		РазницаДат = ДатаФайлаНаДиске - ДатаФайлаВБазе;
		Если РазницаДат < 0 Тогда
			РазницаДат = -РазницаДат;
		КонецЕсли;
		
		Если РазницаДат <= 1 Тогда // 1 секунда - допустимая разница (на Win95 может быть такое)
			// Дата одинаковая, но размер отличается - странно, но возможно	
			Если РазмерФайлаВБазе <> 0 И РазмерФайлаНаДиске <> РазмерФайлаВБазе Тогда
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("РазмерФайлаНаСервере",     	РазмерФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("РазмерВРабочемКаталоге",      РазмерФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Сообщение",            		НСтр("ru = 'Размер файла в рабочем каталоге и на сервере отличается. Перезаписать файл в рабочем каталоге?'"));
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииФайлаДругогоРазмера", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
					Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда // Открыть существующий
					Возврат Истина;
				Иначе // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Все совпадает - и дата, и размер
			Если ВРабочемКаталогеНаЧтение = НаЧтение Тогда
				Возврат Истина;
			Иначе
				ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
				ПеререгистрироватьВРабочемКаталоге(ДанныеФайла.Версия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца);
				Возврат Истина;
			КонецЕсли;
		ИначеЕсли ДатаФайлаНаДиске < ДатаФайлаВБазе Тогда // В рабочем каталоге более старый
			Если ВРабочемКаталогеНаЧтение = Ложь Тогда // В рабочем каталоге на редактирование
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более старый файл");
				
				Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более раннюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять с сервера и перезаписать?'");
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					Возврат Истина;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
					Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				КонецЕсли;
			Иначе // В рабочем каталоге на чтение
				// Перезапишем ни о чем не спросив
				УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
				Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
					НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
			КонецЕсли;
		ИначеЕсли ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
			
			Если ВРабочемКаталогеНаЧтение = Ложь Тогда // В рабочем каталоге на редактирование
				Возврат Истина; // Ничего делать не надо
			Иначе // В рабочем каталоге на чтение
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более новый файл");
				
				Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более позднюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять с сервера и перезаписать?'");
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					Возврат Истина;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
					Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайла, ДатаФайлаВБазе, 
						НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;		
	
	
	Возврат Ложь;
КонецФункции // ПолучитьФайлВерсииВРабочийКаталог()

// Получить Файл из информационной базы на локальный диск и возвращает путь
//к этому файлу в параметре
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	Если ИмяКаталога = Неопределено ИЛИ ПустаяСтрока(ИмяКаталога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РабочийКаталогВладельца = ДанныеФайла.РабочийКаталогВладельца;
	
	НаЧтение = ДанныеФайла.НаЧтение;
	Если (НаЧтение И РабочийКаталогВладельца = "") Или ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда 
		Возврат ПолучитьФайлВерсииВЛокальныйКэшФайловНаЧтение(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы, ДополнительныеПараметры);
	ИначеЕсли РабочийКаталогВладельца = "" Тогда
		Возврат ПолучитьФайлВерсииВЛокальныйКэшФайловНаРедактирование(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы, ДополнительныеПараметры);
	ИначеЕсли НаЧтение И РабочийКаталогВладельца <> "" Тогда 
		Возврат ПолучитьФайлВерсииВРабочийКаталогНаЧтение(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы, ДополнительныеПараметры);
	ИначеЕсли НаЧтение = Ложь И РабочийКаталогВладельца <> "" Тогда
		Возврат ПолучитьФайлВерсииВРабочийКаталогНаРедактирование(ДанныеФайла, ПолноеИмяФайла, ИдентификаторФормы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции // ПолучитьФайлВерсииВРабочийКаталог()

// Получить Файл с сервера и зарегистрировать в рабочем каталоге
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла
//  ДатаФайлаВБазе - Дата - дата файла в базе
//  НаЧтение - Булево - файл помещен на чтение
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьССервераИЗарегистрироватьВРабочемКаталоге(ДанныеФайла, ПолноеИмяФайлаВРабочемКаталоге, ДатаФайлаВБазе, 
		НаЧтение, ИдентификаторФормы, ДополнительныеПараметры = Неопределено)
	
	ПолноеИмяФайла = "";
	
	ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
	ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.Версия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге Тогда
		// Получаем путь файла в рабочем каталоге - с проверкой на уникальность
		ИмяФайлаСПутем = ПолноеИмяФайла;
		Если ИмяФайлаСПутем = "" Тогда
			Предупреждение(НСтр("ru = 'Ошибка помещения файла в рабочий каталог.'"));
			Возврат Ложь;
		КонецЕсли;
		
		// Ниже - уже известно, что Файл в рабочем каталоге есть. 
		// Надо проверить его дату модификации и принять решение что делать дальше
		// - перезаписать, спросить пользователя и т.д.
		
		ФайлВерсии = Новый Файл(ПолноеИмяФайла);
		ДатаФайлаНаДиске = ФайлВерсии.ПолучитьВремяИзменения();
		РазмерФайлаНаДиске = ФайлВерсии.Размер();
		РазмерФайлаВБазе = ДанныеФайла.Размер;
		
		РазницаДат = ДатаФайлаНаДиске - ДатаФайлаВБазе;
		Если РазницаДат < 0 Тогда
			РазницаДат = -РазницаДат;
		КонецЕсли;
		
		Если РазницаДат <= 1 Тогда // 1 секунда - допустимая разница (на Win95 может быть такое)
			// Дата одинаковая, но размер отличается - странно, но возможно	
			Если РазмерФайлаВБазе <> 0 И РазмерФайлаНаДиске <> РазмерФайлаВБазе Тогда
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("РазмерФайлаНаСервере",     	РазмерФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("РазмерВРабочемКаталоге",      РазмерФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Сообщение",            		НСтр("ru = 'Размер файла в рабочем каталоге и на сервере отличается. Перезаписать файл в рабочем каталоге?'"));
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииФайлаДругогоРазмера", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда // Открыть существующий
					Возврат Истина;
				Иначе  // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Все совпадает - и дата, и размер - удаляем и потом получаем в рабочий каталог папки
			УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
			
		ИначеЕсли ДатаФайлаНаДиске < ДатаФайлаВБазе Тогда // В рабочем каталоге более старый
			Если ВРабочемКаталогеНаЧтение = Ложь Тогда // В рабочем каталоге на редактирование
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более старый файл");
				
				Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более раннюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять с сервера и перезаписать?'");
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					Возврат Истина;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
				КонецЕсли;
			Иначе // В рабочем каталоге на чтение
				// Перезапишем ни о чем не спросив
				УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
			КонецЕсли;
		ИначеЕсли ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
			ЗанятМной = (ДанныеФайла.Редактирует = ПользователиКлиентСервер.ТекущийПользователь());
			Если (ВРабочемКаталогеНаЧтение = Ложь) И ЗанятМной Тогда // В рабочем каталоге на редактирование и занят текущим пользователем
				Возврат Истина; // Ничего делать не надо - т.е. не надо удалять из локального кеша и класть в рабочий каталог - т.к. пропадут изменения
			Иначе // В рабочем каталоге на чтение
				
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Файл",                		ИмяФайлаСПутем);
				ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",     ДатаФайлаВБазе);
				ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",            ДатаФайлаНаДиске);
				ПараметрыОткрытияФормы.Вставить("Заголовок",            		"В рабочем каталоге более новый файл");
				
				Сообщение = НСтр("ru = 'Файл на локальном компьютере имеет более позднюю дату, возможно, он был изменен. Открыть существующий или взять с сервера и перезаписать?'");
				ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
				
				Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
				
				Если Результат = КодВозвратаДиалога.Да Тогда  // Открыть существующий
					Возврат Истина;
				ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
					ПолноеИмяФайла = "";
					Возврат Ложь;
				ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда  // Перезаписать
					УдалитьФайл(ПолноеИмяФайла, Ложь); // в рабочем каталоге настройка подтверждения при удалении не используется
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ПолноеИмяФайлаВРабочемКаталоге, ДатаФайлаВБазе, 
		НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		
КонецФункции

// Функция предназначена для открытия файла соответствующим приложением
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИмяОткрываемогоФайла - Строка - полное имя файла
Процедура ОткрытьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла)
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		
		ПерсональныеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
		
		ТекстовыеФайлыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
		Если ТекстовыеФайлыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
			
			ТекстовыеФайлыРасширение = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
			Если ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(ТекстовыеФайлыРасширение, ДанныеФайла.Расширение) Тогда
				
				ПараметрыФормы = Новый Структура("Файл, ДанныеФайла, ИмяОткрываемогоФайла", 
					ДанныеФайла.Ссылка, ДанныеФайла, ИмяОткрываемогоФайла);
					
				ОткрытьФорму("Справочник.Файлы.Форма.РедактированиеТекстовогоФайла", 
					ПараметрыФормы, , ДанныеФайла.КодФайла);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("grs") Тогда
			
			Схема = Новый ГрафическаяСхема; 
			Схема.Прочитать(ИмяОткрываемогоФайла);
			ЗаголовокСтрока = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			Схема.Показать(ЗаголовокСтрока, ИмяОткрываемогоФайла);
			Возврат;
			
		КонецЕсли;
		
		// Открыть Файл
		Попытка
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                      НСтр("ru = 'Описание=""%1""'"),
			                      Инфо.Описание));
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ОткрытьФайл()

// Сохранение на диск Файла
// 
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла
Функция СохранитьКак(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда

		// проверим - если файл уже есть в кеше, и он новее чем в базе - дадим диалог с выбором
		ПутьКФайлуВКеше = "";
		Если ДанныеФайла.РедактируетТекущийПользователь Тогда
			ВРабочемКаталогеНаЧтение = Истина;
			ВРабочемКаталогеВладельца = Ложь;
			ПолноеИмяФайла = "";
			ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.Версия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
			
			Если ФайлВРабочемКаталоге = Истина Тогда
				
				ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
				ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);

				ФайлВерсии = Новый Файл(ПолноеИмяФайла);
				ДатаФайлаНаДиске = ФайлВерсии.ПолучитьВремяИзменения();
				
				Если ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
				
					ПараметрыОткрытияФормы = Новый Структура;
					ПараметрыОткрытияФормы.Вставить("Файл",       ПолноеИмяФайла);
					
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Дата изменения файла ""%1"" на локальном компьютере более поздняя, чем в информационной базе. Возможно, он был изменен.'"), 
						Строка(ДанныеФайла.Ссылка));
					ПараметрыОткрытияФормы.Вставить("Сообщение",  Сообщение);
					
					Ответ = ОткрытьФормуМодально("Справочник.Файлы.Форма.РежимСозданияФайлаДляСохранитьКак", ПараметрыОткрытияФормы);
					
					Если Ответ = КодВозвратаДиалога.Отмена ИЛИ Ответ = Неопределено Тогда
						Возврат "";
					КонецЕсли;	
					
					Если Ответ = 1 Тогда // На основе файла на локальном компьютере
						ПутьКФайлуВКеше = ПолноеИмяФайла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
		
		ПутьВыбора = ДанныеФайла.ПапкаДляСохранитьКак;
		Если ПутьВыбора = Неопределено ИЛИ ПутьВыбора = "" Тогда
			
			ПутьВыбора = "";
		#Если НЕ ВебКлиент Тогда	

			Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная операция не поддерживается в базовой версии.'"));
				Возврат "";
			КонецЕсли;
			
			Оболочка = Новый COMОбъект("MSScriptControl.ScriptControl");
			Оболочка.Language = "vbscript";
			Оболочка.AddCode("
				|Function SpecialFoldersName(Name)
				|set Shell=CreateObject(""WScript.Shell"")
				|SpecialFoldersName=Shell.SpecialFolders(Name)
				|End Function");
			ПутьВыбора = Оболочка.Run("SpecialFoldersName", "MyDocuments");
		#КонецЕсли	
		
		КонецЕсли;

		Пароль = "";
		СохранятьСРасшифровкой = Ложь;
		РасширениеДляЗашифрованныхФайлов = "";
		Если ДанныеФайла.Зашифрован Тогда
			
			ПредставленияСертификатов = "";
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Отпечаток = СтруктураСертификата.Отпечаток;
				
				ТолькоВЛичномХранилище = Истина;
				Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище);
				Если Сертификат <> Неопределено Тогда // тут собираем только личные сертификаты - с закрытым ключом
					Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
						ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
					КонецЕсли;
					ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
				КонецЕсли;
				
			КонецЦикла;	
			
			Заголовок = НСтр("ru = 'Выбор режима сохранения'");
			ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов", 
				Заголовок, ПредставленияСертификатов);
			КодВозврата = ОткрытьФормуМодально("Справочник.Файлы.Форма.ВыборСохраненияШифрованногоФайла", ПараметрыФормы);
			Если ТипЗнч(КодВозврата) = Тип("Структура") Тогда
				
				Пароль = КодВозврата.Пароль;
				РасширениеДляЗашифрованныхФайлов = КодВозврата.РасширениеДляЗашифрованныхФайлов;
				
				Если КодВозврата.СохранятьСРасшифровкой = 1 Тогда
					СохранятьСРасшифровкой = Истина;
				Иначе
					СохранятьСРасшифровкой = Ложь;
				КонецЕсли;	
				
			Иначе
				Возврат "";
			КонецЕсли;
			
		КонецЕсли;	
		
		ИмяСРасширением = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		Расширение = ДанныеФайла.Расширение;
		
		Если НЕ СохранятьСРасшифровкой Тогда
			Если НЕ ПустаяСтрока(РасширениеДляЗашифрованныхФайлов) Тогда
				ИмяСРасширением = ИмяСРасширением + "." + РасширениеДляЗашифрованныхФайлов;
				Расширение = РасширениеДляЗашифрованныхФайлов;
			КонецЕсли;	
		КонецЕсли;	
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение, Расширение);
		ВыборФайла.Фильтр = Фильтр;
		ВыборФайла.Каталог = ПутьВыбора;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
			
			Если ДанныеФайла.ТекущаяВерсия <> ДанныеФайла.Версия Тогда
				АдресФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ДанныеФайла.Версия, УникальныйИдентификатор);
			КонецЕсли;	
			
			ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
					|Пожалуйста, подождите.'"),
				ИмяФайла, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
			Состояние(ТекстПояснения);	
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Если ПутьКФайлуВКеше <> ВыборФайла.ПолноеИмяФайла Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
				КонецЕсли;
			КонецЕсли;
			
			Если ПутьКФайлуВКеше = "" Тогда
				
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
				
				// Сохраним Файл из БД на диск
				Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
					
					// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
					Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
						УдалитьИзВременногоХранилища(АдресФайла);
					КонецЕсли;
					
					Если СохранятьСРасшифровкой Тогда
						ИмяФайлаСПутем = ВыборФайла.ПолноеИмяФайла;
						
						Попытка
							МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
							МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
							
							ИмяФайлаСПутемРасшифрованное = ИмяФайлаСПутем + ".dec";
							МенеджерКриптографии.Расшифровать(ИмяФайлаСПутем, ИмяФайлаСПутемРасшифрованное);
							
							УдалитьФайлы(ИмяФайлаСПутем);
							ПереместитьФайл(ИмяФайлаСПутемРасшифрованное, ИмяФайлаСПутем);
						Исключение
							УдалитьФайлы(ИмяФайлаСПутем);
							ВызватьИсключение;
						КонецПопытки;
					КонецЕсли;
					
					
					НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
					
					ДатаСоздаваемогоФайлаНаДиске = ДанныеФайла.ДатаМодификацииУниверсальная;
					ДатаСоздаваемогоФайлаНаДиске = МестноеВремя(ДатаСоздаваемогоФайлаНаДиске);
					
					НовыйФайл.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);

					Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
				КонецЕсли;
			Иначе
				Если ПутьКФайлуВКеше <> ВыборФайла.ПолноеИмяФайла Тогда
					КопироватьФайл(ПутьКФайлуВКеше, ВыборФайла.ПолноеИмяФайла);
				КонецЕсли;
				Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПутьВыбораПрежний = ПутьВыбора;
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			ПутьВыбора = Файл.Путь;
			Если ПутьВыбораПрежний <> ПутьВыбора Тогда
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  ПутьВыбора);
			КонецЕсли;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
				|Пожалуйста, подождите.'"),
			ИмяФайла, 
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
			
		Состояние(ТекстПояснения);	
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат "";
КонецФункции

// Процедура открывает проводник Windows, позиционируясь на Файл
// 
// Параметры
//  ДанныеФайла  - структура с данными файла
Процедура КаталогФайла(ДанныеФайла) Экспорт
	
	// Если Файл без файла  - эта операция не имеет смысла
	Если ДанныеФайла.Версия.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
#Если НЕ ВебКлиент Тогда
	ПолноеИмяФайла = ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла);
	Если ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолноеИмяФайла) = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
	
	КодВозврата = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Файл ""%1"" отсутствует в рабочем каталоге. Получить файл с сервера?'"), ИмяФайла),
	РежимДиалогаВопрос.ДаНет);
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла);
		ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолноеИмяФайла);
	КонецЕсли;
	
	// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
	Если ЭтоАдресВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
		УдалитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
	КонецЕсли;
#Иначе
	Предупреждение(НСтр("ru = 'В Веб-клиенте данная функция не поддерживается.'"));
#КонецЕсли
КонецПроцедуры

// Открывает диалог вопроса со списком Файлов или информации о Файлах
//
// Параметры
//  Список - СписокЗначений - список файлов
//  СообщениеВопрос - Строка - текст вопроса
//  СообщениеЗаголовок - Строка - текст заголовка вопроса
//  Заголовок - Строка - заголовок формы
Функция ДиалогВопросаСоСписком(Список, СообщениеВопрос, СообщениеЗаголовок, Заголовок)
	Параметры = Новый Структура;	
	Параметры.Вставить("СообщениеВопрос", СообщениеВопрос);
	Параметры.Вставить("СообщениеЗаголовок", СообщениеЗаголовок);
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("Файлы", Список);
	
	Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВопроса", Параметры);
	Возврат (Результат = КодВозвратаДиалога.Да);

КонецФункции

// Обработчик события Перетаскивание в формах объектов - владельцев Файл (кроме формы ХранилищеФайлов)
//
// Параметры
//  ПараметрыПеретаскивания  - Параметры перетаскивания
//  ВладелецФайлаСписка   - ЛюбаяСсылка - владелец файла
//  ЭтаФорма - Форма - форма, в которую делается перетаскивание
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - не открывает карточку файла после создания, если Истина
Процедура ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма,
	НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		СоздатьДокументНаОсновеФайла(ПараметрыПеретаскивания.Значение.ПолноеИмя, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		Предупреждение(Нстр("ru = 'Выберите для импорта только файлы, но не каталоги.'"));
		Возврат;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Файлы") Тогда	
		
		ПеренестиФайлВПриложенныеФайлы(ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка);	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если Не ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					Предупреждение(Нстр("ru = 'Выберите для импорта только файлы, но не каталоги.'"));
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
				СоздатьДокументНаОсновеФайла(ФайлПринятый.ПолноеИмя, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
			ПеренестиФайлыВПриложенныеФайлы(ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// переносит файл из одного списка приложенных файлов в другой
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
Процедура ПеренестиФайлВПриложенныеФайлы(ФайлСсылка, ВладелецФайла)

	Результат = РаботаСФайламиВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(ФайлСсылка, ВладелецФайла).Получить(ФайлСсылка);
	
	Если Результат = "Скопировать" Тогда
		
		СозданФайл = РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(ФайлСсылка, ВладелецФайла);
		Оповестить("Запись_Файл", Новый Структура("Владелец, Файл, Событие", ВладелецФайла, СозданФайл, "СозданФайл"));
		
		ПоказатьОповещениеПользователя(
				"Создание:", 
				ПолучитьНавигационнуюСсылку(СозданФайл),
				Строка(СозданФайл),
				БиблиотекаКартинок.Информация32);
		
	ИначеЕсли Результат = "Обновить" Тогда	
		
		ОбновленФайл = РаботаСФайламиВызовСервера.ОбновитьФайлВПриложенных(ФайлСсылка, ВладелецФайла);
			
		ПоказатьОповещениеПользователя(
				"Изменение:", 
				ПолучитьНавигационнуюСсылку(ОбновленФайл),
				Строка(ОбновленФайл),
				БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры	

// переносит файлы из одного списка приложенных файлов в другой
// Параметры
//  МассивФайлов - Массив - массив файлов
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
Процедура ПеренестиФайлыВПриложенныеФайлы(МассивФайлов, ВладелецФайла)
	
	Если МассивФайлов.Количество() = 1 Тогда 
		ПеренестиФайлВПриложенныеФайлы(МассивФайлов[0], ВладелецФайла);
	Иначе
		
		Результат = РаботаСФайламиВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(МассивФайлов, ВладелецФайла);
		
		МассивОбновить = Новый Массив;
		МассивСкопировать = Новый Массив;
		Для Каждого ФайлСсылка Из МассивФайлов Цикл
			Если Результат.Получить(ФайлСсылка) = "Скопировать" Тогда
				МассивСкопировать.Добавить(ФайлСсылка);
			ИначеЕсли Результат.Получить(ФайлСсылка) = "Обновить" Тогда
				МассивОбновить.Добавить(ФайлСсылка);
			КонецЕсли;
		КонецЦикла;	
		
		Если МассивСкопировать.Количество() > 0 Тогда 
			РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(МассивСкопировать, ВладелецФайла);
		КонецЕсли;	
		
		Если МассивОбновить.Количество() > 0 Тогда 
			РаботаСФайламиВызовСервера.ОбновитьФайлВПриложенных(МассивОбновить, ВладелецФайла);
		КонецЕсли;	
		
		ОбщееКоличество = МассивСкопировать.Количество() + МассивОбновить.Количество();
		Если ОбщееКоличество > 0 Тогда 
			
			ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файлы (%1 шт) перенесены в %2'"),
				ОбщееКоличество,
				ВладелецФайла);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файлы перенесены'"), 
				,
				ПолноеОписание,
				БиблиотекаКартинок.Информация32);
				
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

// Выбирает на  диске файл и создает из него новую версию - реализация низкоуровневая
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  ДиалогПолноеИмяФайла - Строка - полное имя файла, выбранное в диалоге
//  СоздатьНовуюВерсию -  Булево - Создать новую версию
//  КомментарийКВерсии - Строка - Комментарий к версии
Процедура ОбновитьИзФайлаНаДискеРеализация(ДанныеФайла, ИдентификаторФормы, ДиалогПолноеИмяФайла, 
	СоздатьНовуюВерсию = Неопределено, КомментарийКВерсии = Неопределено) Экспорт
	
	ФайлНаДиске = Новый Файл(ДиалогПолноеИмяФайла);
	ИмяИРасширениеФайлаНаДиске = ФайлНаДиске.Имя;
	ВремяИзмененияВыбранное = ФайлНаДиске.ПолучитьВремяИзменения();
	РасширениеФайлаНаДиске = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(ФайлНаДиске.Расширение);
	ИмяФайла = ФайлНаДиске.ИмяБезРасширения;
	
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СписокЗапрещенныхРасширений;
	
	РасширениеДляЗашифрованныхФайлов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().РасширениеДляЗашифрованныхФайлов;
	
	ФайлЗашифрован = Ложь;
	Если НРег(РасширениеФайлаНаДиске) = НРег(РасширениеДляЗашифрованныхФайлов) Тогда
		
		ФайлЗашифрован = Истина;
		
		// отрезаем .p7m в конце
		Позиция = Найти(ИмяИРасширениеФайлаНаДиске, РасширениеФайлаНаДиске);
		ИмяИРасширениеФайлаНаДиске = Лев(ИмяИРасширениеФайлаНаДиске, Позиция - 2);
		
		// отрезаем .p7m в конце
		ДиалогПолноеИмяФайлаПрежнее = ДиалогПолноеИмяФайла;
		Позиция = Найти(ДиалогПолноеИмяФайла, РасширениеФайлаНаДиске);
		ДиалогПолноеИмяФайла = Лев(ДиалогПолноеИмяФайла, Позиция - 2);
		
		ВрФайлНешифрованный = Новый Файл(ДиалогПолноеИмяФайла);
		РасширениеФайлаНаДиске = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(ВрФайлНешифрованный.Расширение);
		
		Если Не ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайлаНаДиске) Тогда
			ВызватьИсключение
				   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
					 РасширениеФайлаНаДиске);
		КонецЕсли;	
		
		// тут расшифровать и поставить ту же дату изменения, что и ДиалогПолноеИмяФайлаПрежнее
				
		Пароль = "";
		Заголовок = НСтр("ru = 'Введите пароль для расшифровки'");
		ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов, Файл", 
			Заголовок, "", ДанныеФайла.Ссылка);
		КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
		Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
			Пароль = КодВозврата;
		Иначе
			Возврат;
		КонецЕсли;
		
		УдалитьФайл(ДиалогПолноеИмяФайла, Ложь); // на случай если есть файл с таким именем

		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;		
		МенеджерКриптографии.Расшифровать(ДиалогПолноеИмяФайлаПрежнее, ДиалогПолноеИмяФайла);
		
		ВрФайлНешифрованный = Новый Файл(ДиалогПолноеИмяФайла);
		РасширениеФайлаНаДиске = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(ВрФайлНешифрованный.Расширение);
		ВрФайлНешифрованный.УстановитьВремяИзменения(ВремяИзмененияВыбранное);
		
	КонецЕсли;	
	
	// данные файла могли измениться - обновим
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ДанныеФайла.Ссылка);

	ПредыдущаяВерсия = ДанныеФайла.Версия;
	
	ИмяИРасширениеФайлаВБазе = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
	
	РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
	
	ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
	ДатаФайлаВБазе = МестноеВремя(ДатаФайлаВБазе);
	
	Если ВремяИзмененияВыбранное < ДатаФайлаВБазе Тогда // в кеше более новый
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					   НСтр("ru = 'Файл ""%1"" на сервере имеет более позднюю дату изменения (%2), чем выбранный файл (%3). 
					   |Операция прервана.'"), 
					   Строка(ДанныеФайла.Ссылка), ДатаФайлаВБазе, ВремяИзмененияВыбранное);
		Предупреждение(СтрокаОшибки);
		Возврат;
	КонецЕсли;
	
	
	// проверим  - есть ли файл в локальном кеше
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ПолноеИмяФайла = "";
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(Неопределено, ПредыдущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	
	Если РедактируетТекущийПользователь Тогда // файл уже был занят
		
		Если ФайлВРабочемКаталоге = Истина Тогда
			ФайлВКеше = Новый Файл(ПолноеИмяФайла);
			ВремяИзмененияВКеше = ФайлВКеше.ПолучитьВремяИзменения();
			
			Если ВремяИзмененияВыбранное < ВремяИзмененияВКеше Тогда // в кеше более новый
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							   НСтр("ru = 'Файл ""%1"" в рабочем каталоге имеет более позднюю дату изменения (%2), чем выбранный файл (%3). 
							   |Операция прервана.'"), 
							   Строка(ДанныеФайла.Ссылка), ВремяИзмененияВКеше, ВремяИзмененияВыбранное);
				Предупреждение(СтрокаОшибки);
				Возврат;
			КонецЕсли;
			
			#Если НЕ ВебКлиент Тогда
				Попытка
					// проверяем что файл занят приложением
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
				Исключение
					СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								   НСтр("ru = 'Файл в основном рабочем каталоге
								   |""%1"" 
								   |открыт для редактирования. 
								   |Закончите редактирование перед выполнением обновления из файла на диске.'"), 
								   ПолноеИмяФайла);
					Предупреждение(СтрокаОшибки);
					Возврат;
				КонецПопытки;
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФайлВРабочемКаталоге И ИмяИРасширениеФайлаНаДиске <> ИмяИРасширениеФайлаВБазе Тогда
		Попытка
			УдалитьФайлИзРабочегоКаталога(ДанныеФайла.ТекущаяВерсия, Истина);
			ФайлВРабочемКаталоге = Ложь;
		Исключение
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								  НСтр("ru = 'Описание=""%1""'"), Инфо.Описание));
			
			Возврат;
		КонецПопытки;
	КонецЕсли;	

	Если Не РедактируетТекущийПользователь Тогда
		
		СтрокаОшибки = "";
		Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат;
		КонецЕсли;
		
		СтрокаОшибки = "";
		Если Не РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, СтрокаОшибки, ИдентификаторФормы) Тогда 
			Предупреждение(СтрокаОшибки);
			Возврат;
		КонецЕсли;
		
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		
	КонецЕсли;
	
    ПереданныйПолныйПутьКФайлу = "";
    
    НовоеПолноеИмяФайла = "";
    ДанныеФайла.Вставить("ПутьОбновленияИзФайлаНаДиске", ДиалогПолноеИмяФайла);
    ДанныеФайла.Расширение = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(РасширениеФайлаНаДиске);
    
    // помещаем в рабочий каталог - берем не из базы, а из выбранного файла на диске
    ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, НовоеПолноеИмяФайла, ИдентификаторФормы);
	
	Если ФайлЗашифрован Тогда
		РаботаСФайламиВызовСервера.УстановитьПризнакЗашифрован(ДанныеФайла.Ссылка, ФайлЗашифрован);
	КонецЕсли;
	
	Если РедактируетТекущийПользователь Тогда // файл уже был занят
		
		ОпубликоватьФайл(ДанныеФайла.Ссылка, 
			ИдентификаторФормы,
			Неопределено,
			Неопределено, 
			Неопределено,
			Неопределено,
			ПереданныйПолныйПутьКФайлу,
			СоздатьНовуюВерсию, 
			КомментарийКВерсии);
			
	Иначе
		
		ЗакончитьРедактирование(
			ДанныеФайла.Ссылка, 
			ИдентификаторФормы,
			ДанныеФайла.ХранитьВерсии,
			ДанныеФайла.РедактируетТекущийПользователь,
			ДанныеФайла.Редактирует,
			ДанныеФайла.АвторТекущейВерсии,
			ПереданныйПолныйПутьКФайлу,
			СоздатьНовуюВерсию, 
			КомментарийКВерсии); 
			
	КонецЕсли;	
	
	Если ФайлЗашифрован Тогда
		УдалитьФайл(ДиалогПолноеИмяФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Выбирает на  диске файл и создает из него новую версию
// 
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИдентификаторФормы - уникальный идентификатор формы
Функция ОбновитьИзФайлаНаДиске(ДанныеФайла, ИдентификаторФормы) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
	
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Если НЕ ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
			ПутьВыбора = ДанныеФайла.РабочийКаталогВладельца;
		Иначе	
			ПутьВыбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла");
		КонецЕсли;	
		
		Если ПутьВыбора = Неопределено ИЛИ ПутьВыбора = "" Тогда
			
			#Если НЕ ВебКлиент Тогда
				
				Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная операция не поддерживается в базовой версии.'"));
					Возврат Ложь;
				КонецЕсли;
				
				Оболочка = Новый COMОбъект("MSScriptControl.ScriptControl");
				Оболочка.Language = "vbscript";
				Оболочка.AddCode("
					|Function SpecialFoldersName(Name)
					|set Shell=CreateObject(""WScript.Shell"")
					|SpecialFoldersName=Shell.SpecialFolders(Name)
					|End Function");
				ПутьВыбора = Оболочка.Run("SpecialFoldersName", "MyDocuments");
			#Иначе	
				ПутьВыбора = "";
			#КонецЕсли
		КонецЕсли;
		
		Диалог.Заголовок                   = НСтр("ru = 'Выбор файла'");
		Диалог.ПредварительныйПросмотр     = Ложь;
		Диалог.ПроверятьСуществованиеФайла = Ложь;
		Диалог.МножественныйВыбор          = Ложь;
		Диалог.Каталог					   = ПутьВыбора;
		Диалог.ПолноеИмяФайла			   = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение); 
		Диалог.Фильтр                      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл (*.%1)|*.%1|Все файлы (*.*)|*.*'"), ДанныеФайла.Расширение, ДанныеФайла.Расширение);
				
		Если Диалог.Выбрать() Тогда
					
			ПутьВыбораПрежний = ПутьВыбора;
			ФайлНаДиске = Новый Файл(Диалог.ПолноеИмяФайла);
			ПутьВыбора = ФайлНаДиске.Путь;
			
			Если ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
				Если ПутьВыбораПрежний <> ПутьВыбора Тогда
					ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла",  ПутьВыбора);
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьИзФайлаНаДискеРеализация(ДанныеФайла, ИдентификаторФормы, Диалог.ПолноеИмяФайла);
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Показывает занятые файлы при завершении работы
//  
Функция ПоказатьЗанятыеФайлыПриЗавершенииРаботы() Экспорт
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПоказыватьЗанятыеФайлыПриЗавершенииРаботы;
	Если НЕ ПоказыватьЗанятыеФайлыПриЗавершенииРаботы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(, ТекущийПользователь);
	Если КоличествоЗанятыхФайлов > 0 Тогда 
		
		ПараметрыФормы = Новый Структура;	
		ПараметрыФормы.Вставить("СообщениеВопрос", 		НСтр("ru = 'Завершить работу с программой?'"));
		ПараметрыФормы.Вставить("СообщениеЗаголовок", 	НСтр("ru = 'Следующие файлы заняты вами для редактирования:'"));
		ПараметрыФормы.Вставить("Заголовок", 			НСтр("ru = 'Завершение работы'"));
		ПараметрыФормы.Вставить("Редактирует", 			ТекущийПользователь);
		
		Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.СписокЗанятыхСВопросом", ПараметрыФормы);
		Если Результат <> КодВозвратаДиалога.Да Тогда 
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает параметры для работы с занятыми файлами.
// Возвращает:
//	Неопределено - если нет редактируемых файлов или работать с ними не надо.
//	Структуру - структура с передаваемыми параметрами.
// 
Функция ПроверитьЗанятыеФайлыПриЗавершенииРаботы()
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПоказыватьЗанятыеФайлыПриЗавершенииРаботы;
	Если НЕ ПоказыватьЗанятыеФайлыПриЗавершенииРаботы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(, ТекущийПользователь);
	Если КоличествоЗанятыхФайлов = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПрикладнойФормыПредупреждения = Новый Структура;	
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеВопрос", 		НСтр("ru = 'Завершить работу с программой?'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеЗаголовок", 	НСтр("ru = 'Следующие файлы заняты вами для редактирования:'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Заголовок", 			НСтр("ru = 'Завершение работы'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Редактирует", 			ТекущийПользователь);
	
	ПрикладнаяФормаПредупреждения 	= "Справочник.Файлы.Форма.СписокЗанятыхСВопросом";
	Форма				 			= "Справочник.Файлы.Форма.РедактируемыеФайлы";
	
	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	ВозвращаемыеПараметры.Вставить("Форма", Форма);
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Возврат ВозвращаемыеПараметры;
КонецФункции


// Шифрует Файл
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  МассивСертификатов - Массив - массив сертификатов ЭЦП
//  УникальныйИдентификаторФормы - уникальный идентификатор формы
//  ДанныеФайла  - структура с данными файла
//  МассивДанныхДляЗанесенияВБазу - массив структур
//  МассивОтпечатков  - Массив - массив отпечатков сертификатов, использованных для шифрования
Функция Зашифровать(ФайлСсылка,
					МассивСертификатов,
					УникальныйИдентификаторФормы,
					ДанныеФайла,
					МассивДанныхДляЗанесенияВБазу,
					МассивОтпечатков) Экспорт
	
	// не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные
	
	МассивОтпечатков = Новый Массив;
	Для Каждого Сертификат Из МассивСертификатов Цикл
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		Представление = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
		МассивОтпечатков.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	МассивОбъектовШифрования = Новый Массив;
	
	КоличествоВерсий = ДанныеФайла.КоличествоВерсий;
	
	Если КоличествоВерсий > 1 Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сейчас будет выполнено шифрование всех %1 версий файла. Это может занять продолжительное время. Продолжить шифрование файла?'"),
			КоличествоВерсий);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивВерсий = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВсехВерсийФайла(ФайлСсылка, УникальныйИдентификаторФормы);
	
	Если МассивВерсий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется получение всех версий файла ""%1""'"), ФайлСсылка);
	Состояние(ТекстСообщения, 0);
	
	Счетчик = 0;
	Для Каждого СтруктураВерсии Из МассивВерсий Цикл
		
		Прогресс = Счетчик / МассивВерсий.Количество() * 100;
		Состояние(ТекстСообщения, Прогресс);
		
		ДанныеФайла = СтруктураВерсии.ДанныеФайла;
		АдресФайла = СтруктураВерсии.НавигационнаяСсылкаВерсии;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
		
		СтруктураДляШифрования = Новый Структура("ДвоичныеДанные, ВерсияСсылка, АдресФайла", 
													ДвоичныеДанные,
													СтруктураВерсии.ВерсияСсылка,
													АдресФайла);
			
		МассивОбъектовШифрования.Добавить(СтруктураДляШифрования);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется шифрование всех версий файла ""%1""'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого СтруктураДляШифрования Из МассивОбъектовШифрования Цикл
		
		ДвоичныеДанные = СтруктураДляШифрования.ДвоичныеДанные;
		ВерсияСсылка = СтруктураДляШифрования.ВерсияСсылка;
		
		ШифрованныйФайлДвоичныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанные, МассивСертификатов);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШифрованныйФайлДвоичныеДанные, УникальныйИдентификаторФормы);
		
		ДанныеДляЗаписиНаСервере = Новый Структура("АдресВременногоХранилища, ВерсияСсылка, АдресФайла, АдресВременногоХранилищаТекста", 
			АдресВременногоХранилища, ВерсияСсылка, СтруктураДляШифрования.АдресФайла, "");
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗаписиНаСервере);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Расшифрует объект - Файл, Версия
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  УникальныйИдентификаторФормы - уникальный идентификатор формы
//  ДанныеФайла  - структура с данными файла
//  МассивДанныхДляЗанесенияВБазу - массив структур
Функция Расшифровать(ФайлСсылка, УникальныйИдентификаторФормы, ДанныеФайла,
	МассивДанныхДляЗанесенияВБазу) Экспорт
	
	КоличествоВерсий = ДанныеФайла.КоличествоВерсий;
	
	// не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные
	
	ПредставленияСертификатов = "";
	Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
		
		Отпечаток = СтруктураСертификата.Отпечаток;
		
		ТолькоВЛичномХранилище = Истина; // тут собираем только личные сертификаты - с закрытым ключом
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище);
		Если Сертификат <> Неопределено Тогда 
			Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
				ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
			КонецЕсли;
			ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
		КонецЕсли;
		
	КонецЦикла;	
	
	Пароль = "";
	Заголовок = НСтр("ru = 'Введите пароль для расшифровки'");
	ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов, Файл", 
		Заголовок, ПредставленияСертификатов, ФайлСсылка);
	КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
	Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
		Пароль = КодВозврата;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	МассивОбъектовШифрования = Новый Массив;
	
	Если КоличествоВерсий > 1 Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сейчас будет выполнена расшифровка всех %1 версий файла. Это может занять продолжительное время. Продолжить расшифровку файла?'"),
			КоличествоВерсий);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется получение всех версий файла ""%1""'"),
		ФайлСсылка);
		
	Состояние(ТекстСообщения, 0);
	МассивВерсий = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВсехВерсийФайла(ФайлСсылка, УникальныйИдентификаторФормы);
	
	Счетчик = 0;
	Для Каждого СтруктураВерсии Из МассивВерсий Цикл
		
		Прогресс = Счетчик / МассивВерсий.Количество() * 100;
		Состояние(ТекстСообщения, Прогресс);
		
		ДанныеФайла = СтруктураВерсии.ДанныеФайла;
		АдресФайла = СтруктураВерсии.НавигационнаяСсылкаВерсии;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
		
		СтруктураДляШифрования = Новый Структура("ДвоичныеДанные, ВерсияСсылка, АдресФайла, Расширение", 
			ДвоичныеДанные, СтруктураВерсии.ВерсияСсылка, АдресФайла, ДанныеФайла.Расширение);
			
		МассивОбъектовШифрования.Добавить(СтруктураДляШифрования);
		Счетчик = Счетчик + 1;
		
	КонецЦикла;	
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется расшифровка всех версий файла ""%1""'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	ИзвлекатьТекстыФайловНаСервере = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
	
	Для Каждого СтруктураДляШифрования Из МассивОбъектовШифрования Цикл
		
		ДвоичныеДанные = СтруктураДляШифрования.ДвоичныеДанные;
		ВерсияСсылка = СтруктураДляШифрования.ВерсияСсылка;
		
		ДвоичныеДанныеРасшифрованные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеРасшифрованные, УникальныйИдентификаторФормы);
		
		АдресВременногоХранилищаТекста = "";
		#Если НЕ ВебКлиент Тогда
			Если НЕ ИзвлекатьТекстыФайловНаСервере Тогда
				ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(СтруктураДляШифрования.Расширение);
				ДвоичныеДанныеРасшифрованные.Записать(ПолныйПутьКФайлу);
				
				АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
					ПолныйПутьКФайлу, УникальныйИдентификаторФормы);
					
				УдалитьФайлы(ПолныйПутьКФайлу);	
			Иначе
				АдресВременногоХранилищаТекста = "";
			КонецЕсли;
		#КонецЕсли
		
		ДанныеДляЗаписиНаСервере = Новый Структура("АдресВременногоХранилища, ВерсияСсылка, АдресФайла, АдресВременногоХранилищаТекста", 
			АдресВременногоХранилища, ВерсияСсылка, СтруктураДляШифрования.АдресФайла, АдресВременногоХранилищаТекста);
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗаписиНаСервере);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	

// По окончании Зашифровать нотифицирует
// Параметры
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - массив строк - путей к файлам
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
Процедура ИнформироватьОШифровании(МассивФайловВРабочемКаталогеДляУдаления, ВладелецФайла, 
	ФайлСсылка) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлЗашифрован"), ВладелецФайла);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	
	// удаляем из рабочего каталога все версии файла
	Для Каждого ПутьФайла Из МассивФайловВРабочемКаталогеДляУдаления Цикл
		УдалитьФайл(ПутьФайла, Ложь); // не задавать вопрос
	КонецЦикла;	
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1"" зашифрован'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры	

// По окончании Расшифровать нотифицирует
// Параметры
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
Процедура ИнформироватьОРасшифровке(ВладелецФайла, ФайлСсылка) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлЗашифрован"), ВладелецФайла);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1"" расшифрован'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры	

// Заносит информацию о подписях
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  Владелец  - ЛюбаяСсылка - владелец файла
//  МассивДанныхДляЗанесенияВБазу - массив структур
//  УникальныйИдентификаторФормы - уникальный идентификатор формы
Процедура ЗанестиИнформациюОПодписях(ФайлСсылка, Владелец, МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор);
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ОбъектПодписан"), ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлПодписан"), Владелец);
	
	Если МассивДанныхДляЗанесенияВБазу.Количество() = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1""'"),
			ФайлСсылка);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для ""%1""'"),
			ФайлСсылка);
	КонецЕсли;	
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Очистка рабочего каталога - для освобождения места - в первую очередь удаляет файлы 
// наиболее давно помещенные в рабочий каталог
// Параметры
//  РазмерФайловВРабочемКаталоге  - Число - размер файлов в рабочем каталоге
//  РазмерДобавляемогоФайла - Число - Размер давляемого файла
//  ОчищатьВсе - Булево - Удалять все файлы в каталоге (а не только до освобождения нужного объема места на диске)
Процедура ОчиститьРабочийКаталог(РазмерФайловВРабочемКаталоге, РазмерДобавляемогоФайла, ОчищатьВсе) Экспорт
	
#Если Не ВебКлиент Тогда
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ТаблицаФайлов = Новый Массив;
	
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*.*");
	
	ОбходФайловТаблица(ИмяКаталога, МассивФайлов, ТаблицаФайлов);
	
	// Вызов сервера - для сортировки
	//  сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
	РаботаСФайламиВызовСервера.СортироватьМассивСтруктур(ТаблицаФайлов);
	
	МаксРазмер = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	СреднийРазмерФайла = 1000;
	Если ТаблицаФайлов.Количество() <> 0 Тогда
		СреднийРазмерФайла = РазмерФайловВРабочемКаталоге / ТаблицаФайлов.Количество();
	КонецЕсли;
	
	СколькоНадоОсвободитьМеста = МаксРазмер / 10;
	Если СреднийРазмерФайла * 3 / 2 > СколькоНадоОсвободитьМеста Тогда
		СколькоНадоОсвободитьМеста = СреднийРазмерФайла * 3 / 2;
	КонецЕсли;
	
	СколькоОсталось = РазмерФайловВРабочемКаталоге + РазмерДобавляемогоФайла;	
	
	КодВозврата = "";
	
	Для Каждого Строка из ТаблицаФайлов Цикл
		
		Если Строка.Версия.Пустая() Тогда
			
			Если КодВозврата <> "Да для всех" И КодВозврата <> "Нет для всех" Тогда
			
				ТекстВопроса =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1%2"" не найден на сервере.
							   |Удалить его из рабочего каталога?'"),
					ИмяКаталога, Строка.Путь);
					
					
				Если ОчищатьВсе	= Ложь Тогда
					ТекстВопроса = Нстр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.'") + Символы.ПС + Символы.ПС + ТекстВопроса;
				КонецЕсли;	
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("Да");
				Кнопки.Добавить("Да для всех");
				Кнопки.Добавить("Нет");
				Кнопки.Добавить("Нет для всех");
				
				КодВозврата = Вопрос(ТекстВопроса, Кнопки);

			КонецЕсли;
			
			Если КодВозврата = "Нет" ИЛИ КодВозврата = "Нет для всех" Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;

		ПолныйПуть = ИмяКаталога + Строка.Путь;
		ФайлНаДиске = Новый Файл(ПолныйПуть);
		ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		ШапкаВопроса = Нстр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.'");
		УдалитьФайл(ПолныйПуть, Неопределено, ШапкаВопроса);
		
		ПутьСПодкаталогом = ИмяКаталога;
		Позиция = Найти(Строка.Путь, ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента()));
		Если Позиция <> 0 Тогда
			ПутьСПодкаталогом = ИмяКаталога + Лев(Строка.Путь, Позиция);
		КонецЕсли;
		
		// Если каталог стал пуст - удалить его
		МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
		Если МассивФайловВКаталоге.Количество() = 0 Тогда
			Если ПутьСПодкаталогом <> ИмяКаталога Тогда
				УдалитьФайлы(ПутьСПодкаталогом);
			КонецЕсли;
		КонецЕсли;
	
		// Удалим из регистра сведений
		РаботаСФайламиВызовСервера.УдалитьИзРегистра(Строка.Версия);
		
		СколькоОсталось = СколькоОсталось - Строка.Размер;
		Если СколькоОсталось < МаксРазмер - СколькоНадоОсвободитьМеста Тогда
			Если НЕ ОчищатьВсе Тогда
				Прервать; // Освободили достаточно - выходим
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОчищатьВсе Тогда
		РаботаСФайламиВызовСервера.ОчиститьВсеСвоиКромеЗанятых();
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

// Рекурсивный обход файлов в рабочем каталоге и сбор информации о них
// Параметры
//  Путь - Строка - путь рабочего каталога
//  МассивФайлов - Массив - массив объектов "Файл"
//  ТаблицаФайлов - Массив - массив структур файлов
Процедура ОбходФайловТаблица(Путь, МассивФайлов, ТаблицаФайлов)
	
#Если Не ВебКлиент Тогда
	Перем Версия;
	Перем ДатаПомещения;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			НовыйПуть = Строка(Путь);
			НовыйПуть = НовыйПуть + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
			МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
			
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ОбходФайловТаблица(НовыйПуть, МассивФайловВКаталоге, ТаблицаФайлов);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		// временные файлы Word не удаляем из рабочего каталога
		Если Лев(ВыбранныйФайл.Имя, 1) = "~" И ВыбранныйФайл.ПолучитьНевидимость() = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ОтносительныйПуть = Сред(ВыбранныйФайл.ПолноеИмя, СтрДлина(ИмяКаталога) + 1);
		
		// Если не найдем на диске - то минимальная дата 
		//  будет самой старой - и удалится при очистке из рабочего каталога самых старых файлов
		ДатаПомещения = Дата('00010101');
		
		Владелец = Неопределено;
		НомерВерсии = Неопределено;
		ВРегистреНаЧтение = Неопределено;
		ВРегистреКодФайла = Неопределено;
		ВРегистреПапка = Неопределено;
		ФайлЕстьВРегистре = РаботаСФайламиВызовСервера.НайтиВРегистреПоПути(ОтносительныйПуть, Версия, ДатаПомещения, Владелец, НомерВерсии, 
			ВРегистреНаЧтение, ВРегистреКодФайла, ВРегистреПапка);

		Если ФайлЕстьВРегистре Тогда
			РедактируетТекущийПользователь = РаботаСФайламиВызовСервера.ПолучитьРедактируетТекущийПользователь(Версия);

			// Если не занят текущим пользователем, можно удалить
			Если Не РедактируетТекущийПользователь Тогда
				Запись = Новый Структура;
				Запись.Вставить("Путь", ОтносительныйПуть);
				Запись.Вставить("Размер", ВыбранныйФайл.Размер());
				Запись.Вставить("Версия", Версия);
				Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
				ТаблицаФайлов.Добавить(Запись);
			КонецЕсли;
		Иначе
			Запись = Новый Структура;
			Запись.Вставить("Путь", ОтносительныйПуть);
			Запись.Вставить("Размер", ВыбранныйФайл.Размер());
			Запись.Вставить("Версия", Версия);
			Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
			ТаблицаФайлов.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
#КонецЕсли
	
КонецПроцедуры

// Удалить с диска и из регистра сведений
//
// Параметры
//  Ссылка  - СправочникСсылка.Файлы - файл
//  УдалитьДажеВРабочемКаталоге - Булево - Удалить даже в рабочем каталоге
Процедура УдалитьФайлИзРабочегоКаталога(Ссылка, УдалитьДажеВРабочемКаталоге = Неопределено) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ВРабочемКаталогеНаЧтение = Ложь;
	ВРабочемКаталогеВладельца = Ложь;
	ПутьВРегистре = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемИзРегистра(Ссылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);	
	
	// Получить путь из регистра
	ИмяФайлаСПутем = ПутьВРегистре;
	Если ИмяФайлаСПутем <> "" Тогда
		
		// обычно в рабочем каталоге не удаляем - только если передан УдалитьДажеВРабочемКаталоге
		Если Не ВРабочемКаталогеВладельца ИЛИ УдалитьДажеВРабочемКаталоге = Истина Тогда
		
			ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
			Если ФайлНаДиске.Существует() Тогда
				файл = Новый Файл(ИмяФайлаСПутем);
				файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайл(ИмяФайлаСПутем);
				
				ПутьСПодкаталогом = ИмяКаталога;
				Позиция = Найти(ПутьВРегистре, ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента()));
				Если Позиция <> 0 Тогда
					ПутьСПодкаталогом = ИмяКаталога + Лев(ПутьВРегистре, Позиция);
				КонецЕсли;
				
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					Если ПутьСПодкаталогом <> ИмяКаталога Тогда
						УдалитьФайлы(ПутьСПодкаталогом);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	РаботаСФайламиВызовСервера.УдалитьИзРегистра(Ссылка);
	
КонецПроцедуры

// Получает относительный путь к файлу в рабочем каталоге - если есть в регистре сведений - оттуда,
// если нет - сгенерируем - и запишем в регистр сведений
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//
// Возвращаемое значение:
//   Строка  - путь файла
Функция ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла)
	
	ПутьДляВозврата = "";
	ИмяФайлаСПутем = "";
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	// Сперва пытаемся найти такую запись в регистре сведений
	ИмяФайлаСПутем = ДанныеФайла.ИмяФайлаСПутемВРабочемКаталоге;
	ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	
	Если ИмяФайлаСПутем <> "" Тогда
		// Тут надо еще на наличие на диске проверять
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
		Если ФайлНаДиске.Существует() Тогда
			Возврат ИмяФайлаСПутем;	
		КонецЕсли;
	КонецЕсли;
	
	// Формирование имени файла с расширением
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	Расширение = ДанныеФайла.Расширение;
	Если Не ПустаяСтрока(Расширение) Тогда 
		ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ИмяФайла, Расширение);
	КонецЕсли;
	
	ИмяФайлаСПутем = "";
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Если НЕ ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
			ИмяФайлаСПутем = ДанныеФайла.РабочийКаталогВладельца + ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение;
		Иначе
			ИмяФайлаСПутем = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		КонецЕсли;		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	// Запишем в регистр имя файла
	НаЧтение = Истина;
	ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
	РаботаСФайламиВызовСервера.ЗаписатьИмяФайлаСПутемВРегистр(ДанныеФайла.Версия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца = "" Тогда
		ПутьДляВозврата = ИмяКаталога + ИмяФайлаСПутем;
	Иначе
		ПутьДляВозврата = ИмяФайлаСПутем;
	КонецЕсли;
	
	Возврат ПутьДляВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные функции модуля

// Пометка файла как занятого для редактирования
// Параметры
//  ДанныеФайла  - структура с данными файла
Процедура ЗанятьФайл(ДанныеФайла)
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
		СтрокаОшибки = "";
		Если Не РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда 
			Предупреждение(СтрокаОшибки);
			Возврат;
		КонецЕсли;	
		
		Если РасширениеПодключено Тогда
			НаЧтение = Ложь;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование файла'"),
			ДанныеФайла.НавигационнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			  НСтр("ru = 'Файл ""%1"" занят для редактирования.'"), Строка(ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		Предупреждение(СтрокаОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Покажет напоминание - если стоит настройка
Процедура ПоказатьНапоминаниеПередПоместитьФайл()
	Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПоказыватьПодсказкиПриРедактированииФайлов = Истина Тогда
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если НЕ РасширениеПодключено Тогда
			// Кешируем форму на клиенте
			Форма = РаботаСФайламиКлиентПовтИсп.ПолучитьФормуНапоминанияПередПоместитьФайл();
			БольшеНеПоказывать = Форма.ОткрытьМодально();
			
			Если БольшеНеПоказывать = Истина Тогда
				ПоказыватьПодсказкиПриРедактированииФайлов = Ложь;
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры // ПоказатьНапоминаниеПередПоместитьФайл()

// Находится ли в рабочем каталоге Файл для данной версии
// Параметры
//  ДанныеФайла  - структура с данными файла
//
// Возвращаемое значение:
//  Булево  - файл находится в рабочем каталоге
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИмяФайлаСПутем - Строка - имя файла с путем
//  ВРабочемКаталогеНаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Функция ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ТекущаяВерсия, ИмяФайлаСПутем, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца)
	ИмяФайлаСПутем = "";
	
	// Если это активная версия - берем из ДанныеФайла
	Если ДанныеФайла <> Неопределено И ДанныеФайла.ТекущаяВерсия = ТекущаяВерсия Тогда
		ИмяФайлаСПутем = ДанныеФайла.ИмяФайлаСПутемВРабочемКаталоге;
		ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	Иначе
		ВРабочемКаталогеНаЧтение = Истина;
		ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		// Пытаемся найти такую запись в регистре сведений
		ИмяФайлаСПутем = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемИзРегистра(ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	Если ИмяФайлаСПутем <> "" Тогда
		// Тут надо еще на наличие на диске проверять 
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
	    Если ФайлНаДиске.Существует() Тогда
			Возврат Истина;	
		Иначе
			ИмяФайлаСПутем = "";
			// Тут же удалим из регистра - т.к. в регистре есть, а на диске нет
			РаботаСФайламиВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
	    КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Освободить место для помещения файла - если место есть, ничего не делает
// Параметры
//  РеквизитыВерсии  - структура с реквизитами версии
Процедура ОсвободитьМестоВРабочемКаталоге(РеквизитыВерсии)

#Если НЕ ВебКлиент Тогда
	
	МаксРазмер = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	// Если размер РабочийКаталог установлен равным 0,
	// то считается, что никакого ограничения нет и умолчание в 10 Мб не используется.
	Если МаксРазмер = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*.*");
	
	РазмерФайловВРабочемКаталоге = 0;
	КоличествоСуммарное = 0;
	// Вычисление полного размера файлов в рабочем каталоге.
	ФайловыеФункцииСлужебныйКлиент.ОбходФайловРазмер(ИмяКаталога, МассивФайлов, РазмерФайловВРабочемКаталоге, КоличествоСуммарное);
	
	Размер = РеквизитыВерсии.Размер;
	Если РазмерФайловВРабочемКаталоге + Размер > МаксРазмер Тогда
		ОчиститьРабочийКаталог(РазмерФайловВРабочемКаталоге, Размер, Ложь); // ОчищатьВсе = Ложь.
	КонецЕсли;
	
#КонецЕсли

КонецПроцедуры

// Выбрать путь к рабочему каталогу
// Параметры
//  ИмяКаталога  - Строка - прежнее имя каталога
//  Заголовок  - Строка - заголовок формы выбора пути каталога
//  РабочийКаталогВладельца - Строка-  Рабочий каталог владельца
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ВыбратьПутьКРабочемуКаталогу(ИмяКаталога, Заголовок, РабочийКаталогВладельца) Экспорт
	
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Каталог = ИмяКаталога;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = Заголовок;
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			
			ИмяКаталога = ДиалогОткрытияФайла.Каталог;
			ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Создать каталог для файлов
			Попытка
				СоздатьКаталог(ИмяКаталога);
				ИмяКаталогаТестовое = ИмяКаталога + "ПроверкаДоступа\";
				СоздатьКаталог(ИмяКаталогаТестовое);
				УдалитьФайлы(ИмяКаталогаТестовое);
			Исключение
				// нет прав на создание каталога, или такой путь отсутствует
				
				ТекстОшибки 
					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный путь или отсутствуют права на запись в каталог ""%1""'"),
					ИмяКаталога);
				Предупреждение(ТекстОшибки);
				Возврат Ложь;
			КонецПопытки;
			
			Если РабочийКаталогВладельца = Ложь Тогда
#Если Не ВебКлиент Тогда
				МассивФайловВКаталоге = НайтиФайлы(ИмяКаталога, "*.*");
				Если МассивФайловВКаталоге.Количество() <> 0 Тогда
					ТекстОшибки 
						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В выбранном рабочем каталоге (""%1"") уже есть файлы. Выберите другой каталог.'"),
						ИмяКаталога);
					Предупреждение(ТекстОшибки);
					Возврат Ложь;
				КонецЕсли;
#КонецЕсли
			КонецЕсли;
			
			Возврат Истина;
		КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	


// Копирует все файлы в указанном каталоге в другой каталог
// Параметры
//  ИмяКаталогаПрежнееЗначение  - Строка - прежнее имя каталога
//  ИмяКаталога  - Строка - новое имя каталога
//  СкопированныеФайлыИПапки - Массив - массив строк - файлов и папок
//  ОригинальныеФайлыИПапки - Массив - массив строк - файлов и папок
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция СкопироватьСодержимоеКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога, 
	СкопированныеФайлыИПапки, ОригинальныеФайлыИПапки)
	
	ТекущийПутьНазначения = ИмяКаталога;
	ТекущийПутьНазначения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ТекущийПутьНазначения, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
	ТекущийПутьИсточника = ИмяКаталогаПрежнееЗначение;
	ТекущийПутьИсточника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ТекущийПутьИсточника, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
	
	МассивФайловВКаталоге = НайтиФайлы(ТекущийПутьИсточника, "*.*");
	
	Для Каждого ВыбранныйФайл Из МассивФайловВКаталоге Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			
			НовыйПутьНазначения = ТекущийПутьНазначения + Строка(ВыбранныйФайл.Имя);
			НовыйПутьИсточника = ТекущийПутьИсточника + Строка(ВыбранныйФайл.Имя);
			
			СоздатьКаталог(НовыйПутьНазначения);
			СкопированныеФайлыИПапки.Добавить(НовыйПутьНазначения);
			ОригинальныеФайлыИПапки.Добавить(ВыбранныйФайл.ПолноеИмя);
			
			Если НЕ СкопироватьСодержимоеКаталога(НовыйПутьИсточника, НовыйПутьНазначения, СкопированныеФайлыИПапки, ОригинальныеФайлыИПапки) Тогда
				Возврат Ложь;
			КонецЕсли;	
			
		Иначе // это файл
			
			ПолноеИмяФайлаНазначения = ТекущийПутьНазначения + Строка(ВыбранныйФайл.Имя);  			
			ОригинальныеФайлыИПапки.Добавить(ВыбранныйФайл.ПолноеИмя);
			
			ФайлНазначения = Новый Файл(ПолноеИмяФайлаНазначения);
			Если ФайлНазначения.Существует() Тогда  // это нужно для обратного копирования - в этом случае файлы могут уже быть
				СкопированныеФайлыИПапки.Добавить(ПолноеИмяФайлаНазначения);
				Продолжить;
			КонецЕсли;	
			
			Пока Истина Цикл
				
				Попытка
					КопироватьФайл(ВыбранныйФайл.ПолноеИмя, ПолноеИмяФайлаНазначения);
					СкопированныеФайлыИПапки.Добавить(ПолноеИмяФайлаНазначения);
					Прервать;
				Исключение
					// тут даем Вопрос - повторить или нет
					
					ТекстВопроса =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось скопировать файл ""%1"". Возможно он занят другим приложением.
						|Повторить операцию?'"),
						ВыбранныйФайл.ПолноеИмя);
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат Ложь;
					КонецЕсли;	
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Удаляет все файлы и папки из переданного массива - идем с конца
// Параметры
//  СкопированныеФайлыИПапки - Массив - массив строк - файлов и папок
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция УдалитьСодержимоеКаталога(СкопированныеФайлыИПапки)
	
	Количество = СкопированныеФайлыИПапки.Количество();
	Для Индекс = 0 По Количество - 1 Цикл
		
		Путь = СкопированныеФайлыИПапки[Количество - 1 - Индекс];
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			Продолжить; // например временный файл Word ~aaa.doc мог быть удален при закрытии Word
		КонецЕсли;	
		
		Пока Истина Цикл
			
			Попытка
				
				Если Файл.ЭтоФайл() И Файл.ПолучитьТолькоЧтение() Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
				КонецЕсли;	
				
				УдалитьФайлы(Путь);
				
				Прервать;
				
			Исключение
				// тут даем Вопрос - повторить или нет
				
				ТекстВопроса =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось удалить файл ""%1"". Возможно он занят другим приложением.
					|Повторить операцию?'"),
					Путь);
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Ложь;
				КонецЕсли;	
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Переносит все файлы в рабочем каталоге в другой каталог (в том числе и взятые на редактирование)
// Параметры
//  ИмяКаталогаПрежнееЗначение  - Строка - прежнее имя каталога
//  ИмяКаталога  - Строка - новое имя каталога
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПеренестиСодержимоеРабочегоКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога) Экспорт
	
	// новый путь является подмножеством старого - это запрещено - приведет к зацикливанию
	Если Найти(ИмяКаталога, ИмяКаталогаПрежнееЗначение) <> 0 Тогда
		ТекстСообщения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выбранный путь к рабочему каталогу (%1) входит в старый путь (%2).'"),
			ИмяКаталога, ИмяКаталогаПрежнееЗначение);
		Предупреждение(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	
	
	// рекурсивно обходим файлы и подкаталоги
	// сперва копируем в новый путь
	
	// 1.  фаза копирования
	СкопированныеФайлыИПапки = Новый Массив; // массив строк - путей
	ОригинальныеФайлыИПапки = Новый Массив; // массив строк - путей в старом пути рабочего каталога
	Если НЕ СкопироватьСодержимоеКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога, СкопированныеФайлыИПапки, ОригинальныеФайлыИПапки) Тогда
		// очищаем  то, что успели скопировать
		УдалитьСодержимоеКаталога(СкопированныеФайлыИПапки);
		Возврат Ложь;
	КонецЕсли;	
	
	// 2. Если  все удачно скопировали, то удаляем  исходный каталог. 
	Если НЕ УдалитьСодержимоеКаталога(ОригинальныеФайлыИПапки) Тогда
		// возвращаем обратно в исходный каталог  все, что накопировали
		
		СкопированныеФайлыИПапкиВторойПроход = Новый Массив; // массив строк - путей
		ОригинальныеФайлыИПапкиВторойПроход = Новый Массив; // массив строк - путей в старом пути рабочего каталога
		Если НЕ СкопироватьСодержимоеКаталога(ИмяКаталога, ИмяКаталогаПрежнееЗначение, СкопированныеФайлыИПапкиВторойПроход, ОригинальныеФайлыИПапкиВторойПроход) Тогда
			
			// Если  и  тут  произошла  ошибка,  то  выдаем  предупреждение
			ТекстСообщения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось скопировать обратно содержимое каталога ""%1"" в каталог ""%2"".'"),
				ИмяКаталога, ИмяКаталогаПрежнееЗначение);
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции	

// Получить Файл с сервера и зарегистрировать в локальном кеше
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла
//  ДатаФайлаВБазе - Дата - дата файла в базе
//  НаЧтение - Булево - файл помещен на чтение
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(ДанныеФайла, ИмяФайлаСПутем, ДатаФайлаВБазе, 
	НаЧтение, ИдентификаторФормы = Неопределено, ДополнительныеПараметры = Неопределено)
	
	ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
	
	Если ИмяФайлаСПутем = "" Тогда
		ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ИмяКаталогаПрежнееЗначение = ИмяКаталога;
		
		// Формирование имени файла с расширением
		ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
		Если НЕ ПустаяСтрока(ДанныеФайла.Расширение) Тогда 
			ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ИмяФайла, ДанныеФайла.Расширение);
		КонецЕсли;
		
		ИмяФайлаСПутем = "";
		Если НЕ ПустаяСтрока(ИмяФайла) Тогда
			ИмяФайлаСПутем = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			ИмяФайлаСПутем = ИмяКаталога + ИмяФайлаСПутем;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МаксимальнаяДлинаПолногоПути = 260;
		Если НРег(ДанныеФайла.Расширение) = "xls" ИЛИ НРег(ДанныеФайла.Расширение) = "xlsx" Тогда
			МаксимальнаяДлинаПолногоПути = 218; // Excel Длина имени файла вместе с путем не должна превышать 218 знака
		КонецЕсли;	
		
		МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
		
		Если ВРабочемКаталогеВладельца = Ложь Тогда
#Если Не ВебКлиент Тогда
			
			Если СтрДлина(ИмяФайлаСПутем) > МаксимальнаяДлинаПолногоПути Тогда
				
				ТекстСообщения =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина полного пути к файлу (путь рабочего каталога плюс имя файла) превышает %1 символов
					|%2'"),
					МаксимальнаяДлинаПолногоПути, ИмяФайлаСПутем);
			
				Оболочка = Новый COMОбъект("WScript.Shell");
				ПутьКаталогаПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
				ПутьКаталогаПользователя = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталогаПользователя, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
				МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
				
				// если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
				Если СтрДлина(ИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
					ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК + НСтр("ru = 'Измените имя файла на более короткое.'");
					Предупреждение(ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;	
				
				Пока Истина Цикл
					
					ТекстСообщения =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Длина полного пути к файлу (путь рабочего каталога плюс имя файла) превышает %1 символов
						|%2'"),
						МаксимальнаяДлинаПолногоПути, ИмяФайлаСПутем);
					
					ТекстВопроса = ТекстСообщения + Символы.ВК + Символы.ВК 
					+ НСтр("ru = 'Выбрать другой путь  к основному рабочему каталогу?'");
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат Ложь;
					КонецЕсли;	
					
					// выбираем другой путь к рабочему каталогу
					Заголовок = НСтр("ru = 'Выберите другой путь к основному рабочему каталогу'");
					Если Не ВыбратьПутьКРабочемуКаталогу(ИмяКаталога, Заголовок, Ложь) Тогда
						Возврат Ложь;
					КонецЕсли;
					
					ИмяФайлаСПутем = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
					ИмяФайлаСПутем = ИмяКаталога + ИмяФайлаСПутем;
					
					Если СтрДлина(ИмяФайлаСПутем) <= МаксимальнаяДлинаПолногоПути Тогда // уложились в 260 символов
						
						Если ПеренестиСодержимоеРабочегоКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога) Тогда
							ФайловыеФункцииСлужебныйКлиент.УстановитьРабочийКаталогПользователя(ИмяКаталога);
						Иначе
							Возврат Ложь;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
			
#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		#Если Не ВебКлиент Тогда // в веб клиенте нельзя определить количество свободного места на диске
			ОсвободитьМестоВРабочемКаталоге(ДанныеФайла);
		#КонецЕсли
	КонецЕсли;		

	РазмерФайла = 0;
	
	
	// Запись Файл в каталог
	Попытка
		
        АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
        
        ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
        РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
        
        ФайлНаДискеПоИмени = Новый Файл(ИмяФайлаСПутем);
        ИмяИРасширениеВПути = ФайлНаДискеПоИмени.Имя;
        Позиция = Найти(ИмяФайлаСПутем, ИмяИРасширениеВПути);
		ПутьКФайлу = "";
        Если Позиция <> 0 Тогда
            ПутьКФайлу = Лев(ИмяФайлаСПутем, Позиция - 1); // -1 - вычет слеша
        КонецЕсли;    
        
        //ПутьКФайлу = ФайлНаДискеПоИмени.Путь;
        ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
        ИмяФайлаСПутем = ПутьКФайлу + ИмяФайла; // могло смениться расширение
        
        ТекстПояснения =
        СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
                |Пожалуйста, подождите.'"),
            ИмяФайла, ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
        
        Состояние(ТекстПояснения);
		
        Если ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
            
            КопироватьФайл(ДанныеФайла.ПутьОбновленияИзФайлаНаДиске, ИмяФайлаСПутем);
            
        Иначе    
            
            Если ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда 
                АдресФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ДанныеФайла.Версия, ИдентификаторФормы);
            КонецЕсли;
            
            ПередаваемыеФайлы = Новый Массив;
            Описание = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла);
            ПередаваемыеФайлы.Добавить(Описание);
			
			#Если ВебКлиент Тогда
				Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ОткрытьФайл") Тогда
					
				МассивОпераций = Новый Массив;
				
				ОписаниеВызова = Новый Массив;
				ОписаниеВызова.Добавить("ПолучитьФайлы");
				ОписаниеВызова.Добавить(ПередаваемыеФайлы);
				ОписаниеВызова.Добавить(Неопределено);  // не используется
				ОписаниеВызова.Добавить(ПутьКФайлу);
				ОписаниеВызова.Добавить(Ложь); 			// Интерактивно = Ложь
				МассивОпераций.Добавить(ОписаниеВызова);
				
				ОписаниеВызова = Новый Массив;
				ОписаниеВызова.Добавить("ЗапуститьПриложение");
				ОписаниеВызова.Добавить(ИмяФайлаСПутем);
				МассивОпераций.Добавить(ОписаниеВызова);
				
				Если НЕ ЗапроситьРазрешениеПользователя(МассивОпераций) Тогда
					// пользователь не дал разрешения
					ИмяФайлаСПутем = "";
					Возврат Ложь;
				КонецЕсли;	
					
		        КонецЕсли;
			#КонецЕсли
			
            Если НЕ ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
                Возврат Ложь;
            КонецЕсли;
            
            // для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
            Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
                УдалитьИзВременногоХранилища(АдресФайла);
            КонецЕсли;
            
        КонецЕсли;
		
		Состояние();
		
		Если ДанныеФайла.Зашифрован Тогда
			
			ПредставленияСертификатов = "";
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Отпечаток = СтруктураСертификата.Отпечаток;
				
				ТолькоВЛичномХранилище = Истина;
				Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище);
				Если Сертификат <> Неопределено Тогда // тут собираем только личные сертификаты - с закрытым ключом - для расшифровки
					Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
						ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
					КонецЕсли;
					ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
				КонецЕсли;
				
			КонецЦикла;	
			
			Пароль = "";
			Заголовок = НСтр("ru = 'Введите пароль для расшифровки'");
			ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов, Файл", 
				Заголовок, ПредставленияСертификатов, ДанныеФайла.Ссылка);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				Пароль = КодВозврата;
			Иначе
				УдалитьФайлы(ИмяФайлаСПутем);
				ИмяФайлаСПутем = "";
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
				
				ИмяФайлаСПутемРасшифрованное = ИмяФайлаСПутем + ".dec";
				МенеджерКриптографии.Расшифровать(ИмяФайлаСПутем, ИмяФайлаСПутемРасшифрованное);
				
				УдалитьФайлы(ИмяФайлаСПутем);
				ПереместитьФайл(ИмяФайлаСПутемРасшифрованное, ИмяФайлаСПутем);
			Исключение
				УдалитьФайлы(ИмяФайлаСПутем);
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;	
		
		// Установим время изменения файла таким, как оно стоит в текущей версии
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
		ФайлНаДиске.УстановитьВремяИзменения(ДатаФайлаВБазе);
		
		РазмерФайла = ФайлНаДиске.Размер(); // Т.к. размер на диске может отличаться от размера в базе (при добавлении из веб клиента)
		
		ФайлНаДиске.УстановитьТолькоЧтение(НаЧтение);
		
	Исключение
		Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.Версия, ИмяФайлаСПутем, ИмяКаталога, НаЧтение, РазмерФайла, ВРабочемКаталогеВладельца);	
	
    Если ДанныеФайла.Размер <> РазмерФайла Тогда
        Если НЕ ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда // при обновлении из файла на диске коррекция не нужна.
            РаботаСФайламиВызовСервера.ОбновитьРазмерФайлаИВерсии(ДанныеФайла, РазмерФайла, ИдентификаторФормы);
            ОповеститьОбИзменении(ДанныеФайла.Ссылка);
            ОповеститьОбИзменении(ДанныеФайла.Версия);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ДанныеФайла.Ссылка);
        КонецЕсли;        
    КонецЕсли;    
	
	Возврат Истина;
КонецФункции

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение
// Параметры
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИмяФайлаСПутем - Строка - полное имя файла
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура ПеререгистрироватьВРабочемКаталоге(ТекущаяВерсия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца)
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюФайлаВРегистр(ТекущаяВерсия, ИмяФайлаСПутем, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);	
	Файл = Новый Файл(ИмяФайлаСПутем);
	Файл.УстановитьТолькоЧтение(НаЧтение);
	
КонецПроцедуры

// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов)
// - если файл, просто добавляет его,   если каталог - создает группу и рекурсивно вызывает саму себя
//
// Параметры
//  Владелец   - ЛюбаяСсылка - владелец файла
//  ФайлыАргумент - Массив - массив объектов "Файл"
//  Индикатор  - Число - число от 0 до 100 - прогресс выполнения
//  МассивИменФайловСОшибками - Массив - Массив имен файлов с ошибками
//  МассивСтруктурВсехФайлов - Массив - Массив структур всех файлов
//  Комментарий - Строка - Комментарий
//  ХранитьВерсии - Булево - Хранить версии
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов
//  Счетчик - Число - Счетчик обработанных файлов (не обязательно файл будет загружен)
//  ИдентификаторФормы - уникальный идентификатор формы
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
//  ДобавленныеФайлы - Массив - Добавленные файлы
//  МассивВсехПапок - Массив - Массив всех папок
//  РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов)
Процедура ИмпортФайлов(
	Владелец, 
	ФайлыАргумент, 
	Индикатор, 
	МассивИменФайловСОшибками, 
	МассивСтруктурВсехФайлов, 
	Комментарий, 
	ХранитьВерсии, 
	Рекурсивно, 
	КоличествоСуммарное, 
	Счетчик,
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	МассивВсехПапок,
	РежимЗагрузки = Ложь,
	Кодировка = Неопределено) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ДокГруппаСсылка;
	
	МаксРазмерФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СписокЗапрещенныхРасширений;
	
	Для Каждого ВыбранныйФайл Из ФайлыАргумент Цикл
		Попытка

			Если ВыбранныйФайл.Существует() Тогда

				Если ВыбранныйФайл.Расширение = ".lnk" Тогда
					ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
				КонецЕсли;
				
				Если ВыбранныйФайл.ЭтоКаталог() Тогда
					
					Если Рекурсивно = Истина Тогда
						НовыйПуть = Строка(ВыбранныйФайл.Путь);
						НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
						НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
						МассивФайлов = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
						
						// Создаем группу в справочнике - эквивалент папки на диске
						Если МассивФайлов.Количество() <> 0 Тогда
							ИмяФайла = ВыбранныйФайл.Имя;
							
							ПапкаУжеНайдена = Ложь;
							
							Если РаботаСФайламиВызовСервера.ЕстьПапкаСТакимИменем(ИмяФайла, Владелец, ПерваяПапкаСТакимЖеИменем) Тогда
								
								Если РежимЗагрузки Тогда
									ПапкаУжеНайдена = Истина;
									ДокГруппаСсылка = ПерваяПапкаСТакимЖеИменем;
								Иначе	
								
									ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Папка ""%1"" уже существует. Продолжить импорт папки?'"),
													ИмяФайла);
										
									КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

									Если КодВозврата = КодВозвратаДиалога.Нет Тогда
										Продолжить;
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
							Если Не ПапкаУжеНайдена Тогда							
								ДокГруппаСсылка = РаботаСФайламиВызовСервера.СправочникиПапкиСоздатьЭлемент(ИмяФайла, Владелец);
							КонецЕсли;
							
							ИмпортФайлов(
								ДокГруппаСсылка, 
								МассивФайлов, 
								Индикатор, 
								МассивИменФайловСОшибками, 
								МассивСтруктурВсехФайлов, 
								Комментарий, 
								ХранитьВерсии, 
								Рекурсивно, 
								КоличествоСуммарное, 
								Счетчик,
								ИдентификаторФормы,
								ПсевдоФайловаяСистема,
								ДобавленныеФайлы,
								МассивВсехПапок,
								РежимЗагрузки,
								Кодировка);
								
							МассивВсехПапок.Добавить(НовыйПуть);	
						КонецЕсли;
					КонецЕсли;
				
					Продолжить;
				КонецЕсли;
				
				Если Не ФайловыеФункцииСлужебныйКлиентСервер.ФайлМожноЗагружать(ВыбранныйФайл, МаксРазмерФайла, ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, МассивИменФайловСОшибками) Тогда
					Продолжить;
				КонецЕсли;	
					
				// Обновим индикатор прогресса
				Счетчик = Счетчик + 1;
				Индикатор = Счетчик * 100 / КоличествоСуммарное; // Считаем проценты
				РазмерВМб = ВыбранныйФайл.Размер() / (1024 * 1024);
				НадписьПодробнее =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 НСтр("ru = 'Обрабатывается файл ""%1"" (%2 Мб)...'"),
					 ВыбранныйФайл.Имя, 
					 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
					 
				ТекстСостояния = НСтр("ru = 'Импорт файлов с диска...'");	 
				Если РежимЗагрузки Тогда
					ТекстСостояния = НСтр("ru = 'Загрузка файлов с диска...'");	 
				КонецЕсли;
				
				Состояние(
					ТекстСостояния, 
					Индикатор, 
					НадписьПодробнее, 
					БиблиотекаКартинок.Информация32);
				
				// Создаем Элемент справочника Файлы
				ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
				Расширение = ВыбранныйФайл.Расширение;
				
				Если РежимЗагрузки Тогда
					Если РаботаСФайламиВызовСервера.ЕстьФайлСТакимИменем(ИмяБезРасширения, Владелец) Тогда
						Запись = Новый Структура;
						Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
						Запись.Вставить("Ошибка", НСтр("ru = 'Файл с таким именем уже есть в информационной базе'"));
						МассивИменФайловСОшибками.Добавить(Запись);
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				АдресВременногоХранилищаФайла = "";

				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ВыбранныйФайл.ПолноеИмя, "");
				ПомещаемыеФайлы.Добавить(Описание);
				
				ПомещенныеФайлы = Новый Массив;
				
				Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
					ВызватьИсключение
					  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка помещения файла в хранилище: %1'"), ВыбранныйФайл.ПолноеИмя);
				КонецЕсли;

				Если ПомещенныеФайлы.Количество() = 1 Тогда
					АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
				КонецЕсли;
				
				Если НЕ ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
					АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
						ВыбранныйФайл.ПолноеИмя,
						ИдентификаторФормы,
						Ложь,
						Кодировка);
				Иначе
					АдресВременногоХранилищаТекста = "";
				КонецЕсли;

				// Создаем элемент справочника Файлы
				РаботаСФайламиКлиентСервер.СоздатьЭлементСправочникаФайлы(ВыбранныйФайл, МассивСтруктурВсехФайлов,
					Владелец, ИдентификаторФормы, Комментарий, ХранитьВерсии, ДобавленныеФайлы,
					АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста,
					Неопределено,
					Кодировка);
				
			Иначе
				Запись = Новый Структура;
				Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
				Запись.Вставить("Ошибка", НСтр("ru = 'Файл отсутствует на диске'"));
				МассивИменФайловСОшибками.Добавить(Запись);
			КонецЕсли;

		Исключение
			ОшибкаИнфо = ИнформацияОбОшибке();
			СообщениеОбОшибке = "";
			Если ОшибкаИнфо.Причина = Неопределено Тогда
				СообщениеОбОшибке =ОшибкаИнфо.Описание;
			Иначе
				СообщениеОбОшибке = ОшибкаИнфо.Причина.Описание;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", СообщениеОбОшибке);
			МассивИменФайловСОшибками.Добавить(Запись);
		
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Импорт - с вспомогательными операциями типа проверки предельного размера и впоследствии удаления файлов и показа ошибок
//   при импорте только одной папки - вернет на нее ссылку
//
// Параметры
//  ПапкаДляДобавления - СправочникСсылка.ПапкиФайлов - Папка для добавления
//  ВыбранныеФайлы - Массив - массив объектов "Файл"
//  Комментарий - Строка - Комментарий
//  ХранитьВерсии - Булево - Хранить версии
//  УдалятьФайлыПослеДобавления - Булево - Удалять файлы после добавления
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  ИдентификаторФормы - уникальный идентификатор формы
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
//  ДобавленныеФайлы - Массив - Добавленные файлы
//  РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов)
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов - Папка для добавления
Функция ИмпортФайловВыполнить(
	ПапкаДляДобавления, 
	ВыбранныеФайлы, 
	Комментарий, 
	ХранитьВерсии, 
	УдалятьФайлыПослеДобавления, 
	Рекурсивно, 
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	РежимЗагрузки = Ложь,
	Кодировка = Неопределено) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ПапкаДляДобавленияТекущая;

	ВыбранКаталог = Ложь;
	Путь = "";
	
	КоличествоСуммарное = 0;
	Если ПроверитьПредельныйРазмерФайлов(ВыбранныеФайлы, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема, РежимЗагрузки) = Ложь Тогда
		Состояние();
		Возврат Неопределено;
	КонецЕсли;

	Состояние();
	
	Если КоличествоСуммарное = 0 Тогда
		
		Если Не РежимЗагрузки Тогда
			Предупреждение(НСтр("ru = 'Нет файлов для добавления'"));
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Индикатор = 0;
	
	МассивФайлов = Новый Массив;
	Счетчик = 0;
	МассивИменФайловСОшибками = Новый Массив;
	МассивСтруктурВсехФайлов = Новый Массив;
	МассивВсехПапок = Новый Массив;
	
	ПапкаДляДобавленияТекущая = Неопределено;
	
	Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
		Попытка
			ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
			
			ВыбранКаталог = Ложь;
			Если ВыбранныйФайл.Существует() Тогда
				ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
			КонецЕсли;
			
			Если ВыбранКаталог Тогда
				Путь = ИмяФайла.Значение;
				МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, Путь);
				
				ИмяПапки = ВыбранныйФайл.Имя;
				
				ПапкаУжеНайдена = Ложь;
				
				Если РаботаСФайламиВызовСервера.ЕстьПапкаСТакимИменем(ИмяПапки, ПапкаДляДобавления, ПерваяПапкаСТакимЖеИменем) Тогда
					
					Если РежимЗагрузки Тогда
						ПапкаУжеНайдена = Истина;
						ПапкаДляДобавленияТекущая = ПерваяПапкаСТакимЖеИменем;
					Иначе	
					
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Папка ""%1"" уже существует. Продолжить импорт папки?'"),
										ИмяПапки);
							
						КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

						Если КодВозврата = КодВозвратаДиалога.Нет Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПапкаУжеНайдена Тогда
					ПапкаДляДобавленияТекущая = РаботаСФайламиВызовСервера.СправочникиПапкиСоздатьЭлемент(ИмяПапки, ПапкаДляДобавления);
				КонецЕсли;
				
				// Собственно импорт 
				ИмпортФайлов(
					ПапкаДляДобавленияТекущая, 
					МассивФайловЭтогоКаталога, 
					Индикатор, 
					МассивИменФайловСОшибками, 
					МассивСтруктурВсехФайлов, 
					Комментарий, 
					ХранитьВерсии, 
					Рекурсивно, 
					КоличествоСуммарное, 
					Счетчик,
					ИдентификаторФормы,
					ПсевдоФайловаяСистема,
					ДобавленныеФайлы,
					МассивВсехПапок,
					РежимЗагрузки,
					Кодировка);
				МассивВсехПапок.Добавить(Путь);	
					
			Иначе
				МассивФайлов.Добавить(ВыбранныйФайл);
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					   НСтр("ru = 'Описание=""%1""'"), Инфо.Описание ));
		КонецПопытки;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		// Собственно импорт 
		ИмпортФайлов(
			ПапкаДляДобавления, 
			МассивФайлов, 
			Индикатор, 
			МассивИменФайловСОшибками, 
			МассивСтруктурВсехФайлов, 
			Комментарий, 
			ХранитьВерсии, 
			Рекурсивно, 
			КоличествоСуммарное, 
			Счетчик,
			ИдентификаторФормы,
			ПсевдоФайловаяСистема,
			ДобавленныеФайлы,
			МассивВсехПапок,
			РежимЗагрузки,
			Кодировка);
	КонецЕсли;
	
	Если МассивСтруктурВсехФайлов.Количество() > 1 Тогда
		
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Импорт файлов завершен. Импортировано %1 файлов'"), Строка(МассивСтруктурВсехФайлов.Количество()) );
			
		Если РежимЗагрузки Тогда
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов завершена. Загружено %1 файлов'"), Строка(МассивСтруктурВсехФайлов.Количество()) );
		КонецЕсли;
		
		Состояние(ТекстСостояния);
	Иначе
		Состояние();
	КонецЕсли;
	
	Если УдалятьФайлыПослеДобавления = Истина Тогда
		ФайловыеФункцииСлужебныйКлиентСервер.УдалитьФайлыПослеДобавления(МассивСтруктурВсехФайлов, МассивВсехПапок, РежимЗагрузки);
	КонецЕсли;
	
	Если МассивСтруктурВсехФайлов.Количество() = 1 Тогда
		Элемент0 = МассивСтруктурВсехФайлов[0];
		Ссылка = ПолучитьНавигационнуюСсылку(элемент0.Файл);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ссылка,
			Элемент0.Файл,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	// Вывод сообщений об ошибках
	Если МассивИменФайловСОшибками.Количество() <> 0 Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("МассивИменФайловСОшибками", МассивИменФайловСОшибками);
		Если РежимЗагрузки Тогда
			Параметры.Вставить("Заголовок", "Отчет о загрузке файлов");
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаОтчета", Параметры);
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() <> 1 Тогда
		ПапкаДляДобавленияТекущая = Неопределено;
	КонецЕсли;	
	
	Возврат ПапкаДляДобавленияТекущая;
КонецФункции

// Проверить Предельный Размер Файлов - вернет Ложь, если есть файлы, превышающие предельный размер,
//   и пользователь в диалоге предупреждения о наличии таких файлов выбрал "Отмена"
// Параметры
//  ВыбранныеФайлы - Массив - массив объектов "Файл"
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
//  РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов)
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПроверитьПредельныйРазмерФайлов(ВыбранныеФайлы, Рекурсивно, КоличествоСуммарное, 
	Знач ПсевдоФайловаяСистема, РежимЗагрузки = Ложь) Экспорт
	
	МассивСлишкомБольшихФайлов = Новый Массив;
	
	Путь = "";
	
	МассивФайлов = Новый Массив;
	КоличествоСуммарное = 0;
	
	Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
		
		Путь = ИмяФайла.Значение;
		ВыбранныйФайл = Новый Файл(Путь);

		Попытка
			ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
			ВыбранКаталог = Ложь;
			
			Если ВыбранныйФайл.Существует() Тогда
				ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
			КонецЕсли;
			
			Если ВыбранКаталог Тогда
				Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					   НСтр("ru = 'Идет сбор информации о каталоге ""%1"". 
					   |Пожалуйста, подождите.'"), Путь ));
				
				МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, Путь);
				ОбходФайловДляПроверкиПредельногоРазмера(МассивФайловЭтогоКаталога, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
			Иначе
				МассивФайлов.Добавить(ВыбранныйФайл);
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						  НСтр("ru = 'Описание=""%1""'"), Инфо.Описание ));
		КонецПопытки;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		ОбходФайловДляПроверкиПредельногоРазмера(МассивФайлов, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
	КонецЕсли;
	
	// Был хоть один слишком большой файл
	Если МассивСлишкомБольшихФайлов.Количество() <> 0 Тогда 
		
		ФайлыБольшие = Новый СписокЗначений;
		Параметры = Новый Структура;
		
		Для Каждого Файл Из МассивСлишкомБольшихФайлов Цикл
			БольшойФайл = Новый Файл(Файл);
			РазмерФайлаВМб = Цел(БольшойФайл.Размер() / (1024 * 1024));
			ТекстСтроки = Строка(Файл) + " (" + Строка(РазмерФайлаВМб) + " " + НСтр("ru = 'МБ)'");
			ФайлыБольшие.Добавить(ТекстСтроки);
		КонецЦикла;
		
		Параметры.Вставить("ФайлыБольшие", ФайлыБольшие);
		Параметры.Вставить("РежимЗагрузки", РежимЗагрузки);
		Параметры.Вставить("Заголовок", "Предупреждение при загрузке файлов");
		
		Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ВопросПриИмпортеФайлов", Параметры);
		
		Возврат Результат = КодВозвратаДиалога.ОК;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обход Файлов рекурсивный - для определения размера файлов
// Параметры
//  МассивФайлов - Массив - массив объектов "Файл"
//  МассивСлишкомБольшихФайлов - Массив - массив файлов
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
Процедура ОбходФайловДляПроверкиПредельногоРазмера(
				МассивФайлов,
				МассивСлишкомБольшихФайлов,
				Рекурсивно,
				КоличествоСуммарное,
				Знач ПсевдоФайловаяСистема) Экспорт
	
	МаксРазмерФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Попытка
			Если ВыбранныйФайл.Существует() Тогда
				
				Если ВыбранныйФайл.Расширение = ".lnk" Тогда
					ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
				КонецЕсли;
				
				Если ВыбранныйФайл.ЭтоКаталог() Тогда
					
					Если Рекурсивно Тогда
						НовыйПуть = Строка(ВыбранныйФайл.Путь);
						НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
						НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
						МассивФайловВКаталоге = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
						
						// Рекурсия
						Если МассивФайловВКаталоге.Количество() <> 0 Тогда
							ОбходФайловДляПроверкиПредельногоРазмера(МассивФайловВКаталоге, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
						КонецЕсли;
					КонецЕсли;
				
					Продолжить;
				КонецЕсли;
				
				КоличествоСуммарное = КоличествоСуммарное + 1;
				
				// Размер файла слишком большой
				Если ВыбранныйФайл.Размер() > МаксРазмерФайла Тогда
					МассивСлишкомБольшихФайлов.Добавить(ВыбранныйФайл.ПолноеИмя);
					Продолжить;
				КонецЕсли;
			
			КонецЕсли;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						  НСтр("ru = 'Описание=""%1""'"), Инфо.Описание ));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Разыменовать lnk файл
// Параметры
//  ВыбранныйФайл - Файл - объект типа Файл
//
// Возвращаемое значение:
//   Строка - на что сылается lnk  файл
Функция РазыменоватьLnkФайл(ВыбранныйФайл)
	
#Если Не ВебКлиент Тогда
	Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		ShellApp = Новый COMОбъект("shell.application");
		FolderObj = ShellApp.NameSpace(ВыбранныйФайл.Путь);			// полный (только) путь на lnk-файл
		FolderObjItem = FolderObj.items().item(ВыбранныйФайл.Имя); 	// только имя lnk-файла
		Link = FolderObjItem.GetLink();
		Возврат Новый Файл(Link.path);
	КонецЕсли;
#КонецЕсли
	
	Возврат ВыбранныйФайл;
	
КонецФункции

// Вернет Истина, если можно закрыть форму. 
// Параметры
//  ОбъектСсылка  - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Булево  - Истина, если можно закрыть форму. 
Функция МожноЗакрытьФормуСФайлами(ОбъектСсылка) Экспорт
	
	МожноЗакрыть = Истина;
	
	Количество = РаботаСФайламиВызовСервера.КоличествоФайловЗанятыхТекущимПользователем(ОбъектСсылка);
	
	Если Количество <> 0 Тогда
		
		Результат = Вопрос(
			НСтр("ru = 'Один или несколько файлов заняты Вами для редактирования. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Если Результат = КодВозвратаДиалога.Нет Тогда
			МожноЗакрыть = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МожноЗакрыть;
	
КонецФункции

// Покажет напоминание - если стоит настройка
Процедура ПоказатьИнформациюФайлНеБылИзменен()
	
	Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ПоказыватьИнформациюЧтоФайлНеБылИзменен = Истина Тогда
		
		БольшеНеПоказывать = ОткрытьФормуМодально("Справочник.Файлы.Форма.ИнформацияФайлНеБылИзменен");
		
		Если БольшеНеПоказывать = Истина Тогда
			ПоказыватьИнформациюЧтоФайлНеБылИзменен = Ложь;
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения("НастройкиПрограммы", "ПоказыватьИнформациюЧтоФайлНеБылИзменен", ПоказыватьИнформациюЧтоФайлНеБылИзменен);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьНапоминаниеПередПоместитьФайл()

// Открыть диалог выбора сертификатов с отмеченным своим сертификатом
Функция ВыбратьСертификатыДляШифрования(ДанныеФайла) Экспорт
    
    МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Ложь);
    
    ОтпечатокЛичногоСертификатаДляШифрования = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ОтпечатокЛичногоСертификатаДляШифрования;
    
    // отпечаток сохраненный в ХранилищеНастроек мог устареть - сертификат могли уже удалить
    Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
        Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
        Если Сертификат = Неопределено Тогда        
            ОтпечатокЛичногоСертификатаДляШифрования = "";
        КонецЕсли;
    КонецЕсли;
    
    Если ОтпечатокЛичногоСертификатаДляШифрования = Неопределено ИЛИ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
        
        МассивСтруктурЛичныхСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
        
        ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);        
        СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификата", ПараметрыФормы);
        Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
            ОтпечатокЛичногоСертификатаДляШифрования = СтруктураВозврата.Отпечаток;
            ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭЦП", "ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
            ОбновитьПовторноИспользуемыеЗначения();
        Иначе
            Предупреждение(НСтр("ru = 'Не выбран персональный сертификат для шифрования.'"));
            Возврат Ложь;
        КонецЕсли;    
    КонецЕсли;    
    
    ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ФайлСсылка, ОтпечатокЛичногоСертификатаДляШифрования",
                            МассивСтруктурСертификатов,
                            ДанныеФайла.Ссылка,
                            ОтпечатокЛичногоСертификатаДляШифрования);
    СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификатовШифрования", ПараметрыФормы);
    
    Возврат СтруктураВозврата;
    
КонецФункции    

// Записывает сертификаты шифрования в табличную часть Файла
Процедура ЗаписатьСертификатыВТабличнуюЧасть(ФайлСсылка, МассивСертификатов, УникальныйИдентификатор)
    
    МассивОтпечатков = Новый Массив;
    Для Каждого Сертификат Из МассивСертификатов Цикл
        Отпечаток = Base64Строка(Сертификат.Отпечаток);
        Представление = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
        ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
        
        ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
        МассивОтпечатков.Добавить(ОтпечатокСтруктура);
    КонецЦикла;
    
    РаботаСФайламиВызовСервера.ЗанестиИнформациюОСертификатахШифрования(ФайлСсылка, МассивОтпечатков, УникальныйИдентификатор);
    
    Оповестить("Запись_Файл", Новый Структура("Событие", "ОбновленаИнформацияОСертификатахШифрования"), ФайлСсылка);
    
КонецПроцедуры    

Процедура ПриЗавершенииРаботыСистемы(Предупреждения) Экспорт
	Ответ = ПроверитьЗанятыеФайлыПриЗавершенииРаботы();
	Если Ответ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ответ) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	// Инициализация формы индивидуального открытия и ее параметров.
	ПрикладнаяФормаПредупреждения = Неопределено;
	Ответ.Свойство("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ПараметрыПрикладнойФормыПредупреждения = Неопределено;
	Ответ.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	
	// Инициализация формы открытия из списка и её параметров.
	Форма = Неопределено;
	Ответ.Свойство("Форма", Форма);
	ПараметрыФормы = Неопределено;
	Ответ.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	КоличествоЗанятыхФайлов = Ответ.КоличествоЗанятыхФайлов;
	
	ТекстГиперСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Открыть список редактируемых файлов (%1)'"), 
		КоличествоЗанятыхФайлов);
	
	ДействиеПриНажатииГипперссылки = Новый Структура;
	Если ПрикладнаяФормаПредупреждения <> Неопределено Тогда 
		ДействиеПриНажатииГипперссылки.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
		ДействиеПриНажатииГипперссылки.Вставить("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	КонецЕсли;
	Если Форма <> Неопределено Тогда 
		ДействиеПриНажатииГипперссылки.Вставить("Форма", 			Форма);
		ДействиеПриНажатииГипперссылки.Вставить("ПараметрыФормы", 	ПараметрыФормы);
	КонецЕсли;
	
	ПредупреждениеПользователю = Новый Структура;
	ПредупреждениеПользователю.Вставить("ТекстГиперСсылки", 				ТекстГиперСсылки);
	ПредупреждениеПользователю.Вставить("ДействиеПриНажатииГипперссылки", 	ДействиеПриНажатииГипперссылки);
	
	Предупреждения.Добавить(ПредупреждениеПользователю);
КонецПроцедуры	

// Выбрать режим открытия файла и начать редактирование
Функция ВыбратьРежимИРедактироватьФайл(ДанныеФайла, ДоступностьКомандыРедактировать) Экспорт
	
	РедактированиеВоВстроенномРедакторе = Ложь;
	ПерсональныеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
	ТекстовыеФайлыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
	Если ТекстовыеФайлыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		ТекстовыеФайлыРасширение = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
		Если ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(ТекстовыеФайлыРасширение, ДанныеФайла.Расширение) Тогда
			РедактированиеВоВстроенномРедакторе = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ГрафическиеСхемыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ГрафическиеСхемыСпособОткрытия;
	Если ГрафическиеСхемыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		ГрафическиеСхемыРасширение = ПерсональныеНастройкиРаботыСФайлами.ГрафическиеСхемыРасширение;
		Если ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(ГрафическиеСхемыРасширение, ДанныеФайла.Расширение) Тогда
			РедактированиеВоВстроенномРедакторе = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РедактированиеВоВстроенномРедакторе Тогда
		Возврат "Открыть";
	КонецЕсли;
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = ПерсональныеНастройкиРаботыСФайлами.СпрашиватьРежимРедактированияПриОткрытииФайла;
		Если СпрашиватьРежимРедактированияПриОткрытииФайла = Истина Тогда
			
			КакОткрывать = Неопределено;
			
			Если Не ДоступностьКомандыРедактировать Тогда
				КакОткрывать = 0; // Просмотр
			Иначе
				
				Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия");
				Если ТипЗнч(Результат) <> Тип("Структура") Тогда
					Возврат "Отмена";
				КонецЕсли;
				
				БольшеНеСпрашивать = Результат.БольшеНеСпрашивать;
				Если БольшеНеСпрашивать = Истина Тогда
					ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Ложь);
					ОбновитьПовторноИспользуемыеЗначения();
				КонецЕсли;
				
				КакОткрывать = Результат.КакОткрывать;
			КонецЕсли;
			
			Если КакОткрывать = 1 Тогда
				РедактироватьФайл(ДанныеФайла);
				ОповеститьОбИзменении(ДанныеФайла.Ссылка);
				Возврат "Редактировать";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат "Открыть";
	
КонецФункции

// Функция предназначена для открытия файла соответствующим приложением
//
// Параметры
//  ИмяОткрываемогоФайла - Строка - полное имя файла
Процедура ВыполнитьЗапускПриложения(ИмяОткрываемогоФайла) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"),
				Инфо.Описание));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗапускПриложения()

// Сравнивает 2 файла (txt doc doc odt) с помощью MS Office или OpenOffice
Процедура СравнитьФайлы(ПутьКФайлу1, ПутьКФайлу2, СпособСравненияВерсийФайлов) Экспорт
	
	Попытка
		
		Если СпособСравненияВерсийФайлов = "MicrosoftOfficeWord" Тогда
			ОбъектWord = Новый COMОбъект("Word.Application");
			ОбъектWord.Visible = 0;

			Документ = ОбъектWord.Documents.Open(ПутьКФайлу1);
			
			Документ.Merge(ПутьКФайлу2, 0, 0, 0); // MergeTarget:=wdMergeTargetSelected, DetectFormatChanges:=False, UseFormattingFrom:=wdFormattingFromCurrent
			
			ОбъектWord.Visible = 1;
			ОбъектWord.Activate(); 	
			
			Документ.Close();
		ИначеЕсли СпособСравненияВерсийФайлов = "OpenOfficeOrgWriter" Тогда 
			
			// снимем readonly - иначе не сработает
			Файл1 = Новый Файл(ПутьКФайлу1);
			Файл1.УстановитьТолькоЧтение(Ложь);
			
			Файл2 = Новый Файл(ПутьКФайлу2);
			Файл2.УстановитьТолькоЧтение(Ложь);
			
			// Открыть OpenOffice
			ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			Reflection = ServiceManager.createInstance("com.sun.star.reflection.CoreReflection");
			Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
			Dispatcher = ServiceManager.createInstance("com.sun.star.frame.DispatchHelper");
			
			// Открыть документ OpenOffice
			Args = Новый COMSafeArray("VT_DISPATCH", 1);
			OOДокумент = Desktop.loadComponentFromURL(ПреобразоватьВURL(ПутьКФайлу2), "_blank", 0, Args);
			
			frame = Desktop.getCurrentFrame();
			
			// установить показ изменений
			ПараметрыСравнения = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыСравнения.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "ShowTrackedChanges", Истина));
			dispatcher.executeDispatch(frame, ".uno:ShowTrackedChanges", "", 0, ПараметрыСравнения);

			// сравнить с документом
			ПараметрыВызова = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыВызова.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "URL", ПреобразоватьВURL(ПутьКФайлу1)));
			dispatcher.executeDispatch(frame, ".uno:CompareDocuments", "", 0, ПараметрыВызова);
			
			OOДокумент = Неопределено;
		КонецЕсли;
		
	Исключение
		Информация = ИнформацияОбОшибке();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Информация.Описание);
	КонецПопытки;
	
КонецПроцедуры	

// Функция преобразует Windows имя файла в URL OpenOffice
Функция ПреобразоватьВURL(ИмяФайла)
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
КонецФункции

// создание структуры для параметров OpenOffice
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
    Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
    Свойства.Name = ИмяСвойства;
    Свойства.Value = ЗначениеСвойства;
    
    Возврат Свойства;
КонецФункции

