Процедура ФормаЭлементаПриОткрытии(ЭтаФорма) Экспорт
			
	ОбновитьПредставлениеЭлемента("Гражданство", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("СемейноеПоложение", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("УдостоверениеЛичности", ЭтаФорма);
	ОбновитьПредставлениеЭлемента("ФИО", ЭтаФорма);
	
	ЭтаФорма.Модифицированность = Ложь;
			
	ЭтаФорма.Заголовок = "Личные данные физического лица: " + ?(Не ЗначениеЗаполнено(ЭтаФорма.Объект.Ссылка),"Новый",ЭтаФорма.Объект.Наименование);

КонецПроцедуры	

Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр = Неопределено) Экспорт
	
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
		
		мНаборЗаписейГражданство	= ЭтаФорма.мНаборЗаписейГражданство;
		
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			ЭтаФорма.Гражданство = "" + мНаборЗаписейГражданство[0].Страна + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,", не ",", " ) + "имеет право на пенсию, медицинское и социальное страхование"+  ?(мНаборЗаписейГражданство[0].НеЯвляетсяНалоговымРезидентомРФ,", не ",", " ) + "является налоговым резидентом РФ";
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			ЭтаФорма.Гражданство = "Ввести данные о гражданстве";
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "СемейноеПоложение" Тогда
		
		мНаборЗаписейСемейноеПоложение 	= ЭтаФорма.мНаборЗаписейСемейноеПоложение;
		
		Если мНаборЗаписейСемейноеПоложение.Количество() > 0 Тогда
			ЭтаФорма.СемейноеПоложение = мНаборЗаписейСемейноеПоложение[0].СемейноеПоложение;
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			ЭтаФорма.СемейноеПоложение = "Ввести данные о семейном положении";
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "УдостоверениеЛичности" Тогда
		
		мНаборЗаписейДокументаУдостоверяющегоЛичность = ЭтаФорма.мНаборЗаписейДокументаУдостоверяющегоЛичность;
		
		Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 Тогда
			Паспорт = мНаборЗаписейДокументаУдостоверяющегоЛичность[0];
			УдостоверениеЛичности = "" + Паспорт.ВидДокумента + ", серия: " + Паспорт.Серия + ", № " + Паспорт.Номер 
									+ ", выдан: " + Формат(Паспорт.ДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
									+ Паспорт.КемВыдан + ", № подр. " + Паспорт.КодПодразделения 
									+ Символы.Таб + "Дата регистрации по месту жительства: " + Формат(Паспорт.ДатаРегистрацииПоМестуЖительства,"ДФ='дд ММММ гггг'; ДП='Не указано'");
			
			ЭтаФорма.УдостоверениеЛичности = СтрЗаменить(УдостоверениеЛичности,"Не указано","...");
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			ЭтаФорма.УдостоверениеЛичности = "Ввести данные об удостоверении личности";
			
		КонецЕсли;
			
	ИначеЕсли ИмяОбновляемогоЭлемента = "ФИО" Тогда
		
		мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;

		Если мНаборЗаписейФИО.Количество() > 0 Тогда
			ФИОСрез = мНаборЗаписейФИО[0];
			
			ЭтаФорма.Фамилия  = ФИОСрез.Фамилия;
			ЭтаФорма.Имя      = ФИОСрез.Имя;
			ЭтаФорма.Отчество = ФИОСрез.Отчество;
			
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Считываем последнее состояние регистра сведений о физлице и заполняем переданный набор записей.
//
// Параметры
//  Физлицо - 
//  НаборЗаписей  - 
//
Процедура ПолучитьСвязанныеДанныеФизлица(Физлицо, НаборЗаписей,ТипЗначения) Экспорт

	НаборЗаписейНовый = ДанныеФормыВЗначение(НаборЗаписей, ТипЗначения);
	ИмяТаблицы=НаборЗаписейНовый.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарамФизЛицо",Физлицо);
	Запрос.УстановитьПараметр("парамДатаСреза", ТекущаяДата());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязанныеДанные.*
	|ИЗ
	|	РегистрСведений." + ИмяТаблицы + ".СрезПоследних(&парамДатаСреза, ФизЛицо = &ПарамФизЛицо) КАК СвязанныеДанные";
	
	НаборЗаписейНовый.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(НаборЗаписейНовый.Добавить(), Выборка);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(НаборЗаписейНовый,НаборЗаписей);
	
КонецПроцедуры // ПолучитьСвязанныеДанныеФизлица()

// Процедура проверяет соответсвие ИНН требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  ИНН  - ИНН Организации
//  ПолеВвода  - поле ввода в котором вводится ИНН
//  ЮрФИзЛицо - значение перечисления ЮрФИзЛицо
//
Процедура ПроверитьИННОформитьПолеВвода(ИНН, ПолеВвода, ЮрФИзЛицо=истина) Экспорт
	
	Если ЗначениеЗаполнено(ИНН) и Не ИННСоответствуетТребованиям(ИНН, ЮрФИзЛицо) Тогда
		ПолеВвода.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в ИНН";
	Иначе
		ПолеВвода.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьИННОформитьПолеВвода()

// Проверяет соответствие ИНН требованиям
// Параметры:
//		ИНН - строка - проверяемый индивидуальный номер налогоплательщика,
//		ВладелецИНН - ПеречислениеСсылка.ЮрФизЛицо - тип владельца ИНН: физлицо или юрлицо
Функция ИННСоответствуетТребованиям(Знач ИНН, Знач ТипЛица) Экспорт

	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяетсяИННФизЛица = ТипЛица;
		
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда

		КонтрольнаяСумма = 0;

		Для Н = 1 По 9 Цикл

			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Функция СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомер) Экспорт
	
	Результат = Истина;
	
	СтрокаЦифр=СтрЗаменить(Лев(СтраховойНомер,11),"-","");
	
	Если ПустаяСтрока(СтрокаЦифр) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		П1 = Число(СтрокаЦифр);	
		КонтрольноеЧисло=Число(Прав(СтраховойНомер,2));
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
	Если Число(Лев(СтрокаЦифр,9)) > 1001998 Тогда
		Всего=0;
		Для Сч = 1 По 9 Цикл
			Всего=Всего+Число(Сред(СтрокаЦифр,10-Сч,1))*Сч
		КонецЦикла;
		Остаток=Всего%101;
		Остаток=?(Остаток=100,0,Остаток);
		Если Остаток<>КонтрольноеЧисло Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура проверяет соответсвие страхового номера ПФР требованиям, устанавливает цвет.
// Текста в поле ввода и подсказку.
//
// Параметры
//  СтраховойНомерПФР  - страховой номер физлица для проверки.
//  ПолеВвода  - поле ввода в котором вводится ИНН.
//
Процедура ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(СтраховойНомерПФР, ПолеВвода) Экспорт
	
	Если ЗначениеЗаполнено(СтрЗаменить(Лев(СтраховойНомерПФР,11),"-","")) и Не СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) Тогда
		ПолеВвода.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в страховом номере";
	Иначе
		ПолеВвода.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода()

// Функция раскладывает Наименование в массив из трех элементов
//
// Параметры
//  ФИО  - строка - наименование
//
// Возвращаемое значение:
//   Массив   - массив из трех элементов, Фамилия, Имя, Отчество
//
Функция ПолучитьМассивФИО(ФИО) Экспорт

	МассивФИО = Новый Массив;
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	
	МассивПодсток = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	Для Индекс = 0 По МассивПодсток.ВГраница() Цикл
		Если Индекс < 3 Тогда
			МассивФИО[Индекс] = МассивПодсток[Индекс];
		Иначе
			МассивФИО[2] = МассивФИО[2] + " " + МассивПодсток[Индекс];
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФИО;
	
КонецФункции // ПолучитьМассивФИО()

// Функция определяет пол физлица по его отчеству
//
Функция ПолучитьПол(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическогоЛица.Мужской;
	
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическогоЛица.Женский;
	
	КонецЕсли;
	
	Возврат Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	
КонецФункции // ПолучитьПол()

// Процедура производит синхронирзацию наименований сотрудников
Процедура СинхронизироватьНаименованияСотрудников(Физлицо, Сотрудник = Неопределено) Экспорт
	
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.удуСотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли; 

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Наименование,
	|	СотрудникиОрганизаций.ПостфиксНаименования,
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &парамФизлицо";	
	
	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Сотрудник Тогда
			// не обрабатываем сотрудника, из которого вызвана синхронизация
			Продолжить;
		КонецЕсли; 
		
		НовоеНаименование = Физлицо.Наименование + ?(ЗначениеЗаполнено(Выборка.ПостфиксНаименования), " " + Выборка.ПостфиксНаименования, "");
		Если Выборка.Наименование <> НовоеНаименование Тогда
			СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка	
				СотрудникОбъект.Заблокировать();
			Исключение
				Продолжить;
			КонецПопытки;
			СотрудникОбъект.Наименование = НовоеНаименование;
			СотрудникОбъект.ОбменДанными = Истина;
			СотрудникОбъект.Записать();
			СотрудникОбъект.Разблокировать();
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

// Функция осуществляет проверку дублей в справочнике ФизическиеЛица
// Проверка происходит по паспортным данным, ИНН, ПФР и ФИО
//
// Возвращаемое значение
//		Список значений с сообщениями
//
Функция ПроверитьДублиФизлиц(Ссылка, ЗаписьПаспортныхДанных = Неопределено, ИНН, ПФР, ФИО, ДатаРождения) Экспорт
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ТекстСообщения");
	ТаблицаСообщений.Колонки.Добавить("Физлицо");
	
	ЕстьДублиПаспортныхДанных	= Ложь;
	ЕстьДублиИНН				= Ложь;
	ЕстьДублиПФР				= Ложь;
	ЕстьДублиФИО				= Ложь;
	ЕстьДублиДатыРождения				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И (
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ВидДокумента) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.Серия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.Номер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДатаВыдачи) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.КодПодразделения)) Тогда
		
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",						Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид",				ЗаписьПаспортныхДанных.ВидДокумента);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",				ЗаписьПаспортныхДанных.Серия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер",				ЗаписьПаспортныхДанных.Номер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи",			ЗаписьПаспортныхДанных.ДатаВыдачи);
		ЗапросПоДублям.УстановитьПараметр("ДокументКодПодразделения",	ЗаписьПаспортныхДанных.КодПодразделения);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		|ГДЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка
		|	И ПаспортныеДанныеФизЛиц.ВидДокумента = &ДокументВид
		|	И ПаспортныеДанныеФизЛиц.Серия = &ДокументСерия
		|	И ПаспортныеДанныеФизЛиц.Номер = &ДокументНомер
		|	И ПаспортныеДанныеФизЛиц.ДатаВыдачи = &ДокументДатаВыдачи
		|	И ПаспортныеДанныеФизЛиц.КодПодразделения = &ДокументКодПодразделения";
		
		Результат=ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса =Результат.Выбрать();
		ТЗДублейФизЛицУдЛ=Результат.Выгрузить();
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ТекстСообщения = "Физлицо: имеет такие же паспортные данные как и у "+Строка(ВыборкаЗапроса.Физлицо);
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = ТекстСообщения;
			НоваяСтрока.Физлицо = ВыборкаЗапроса.Физлицо;
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Число("0"+СтрЗаменить(СтрЗаменить(ПФР, "-", ""), " ", ""))) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ПФР",	ПФР);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.СтраховойНомерПФР = &ПФР";
		
		Результат=ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса = Результат.Выбрать();
		ТЗДублейФизЛицПФР=Результат.Выгрузить();
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ТекстСообщения = "Физлицо: имеет такой же страховой номер ПФР как и у "+Строка(ВыборкаЗапроса.Физлицо);
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = ТекстСообщения;
			НоваяСтрока.Физлицо = ВыборкаЗапроса.Физлицо;
			ЕстьДублиПФР = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИО)
	
		 Тогда
		 
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО",	СтрЗаменить(ФИО, " ", ""));
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФИОФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.удуФИОФизЛиц КАК ФИОФизЛиц
		|ГДЕ
		|	ФИОФизЛиц.ФизЛицо <> &Ссылка
		|	И ФИОФизЛиц.Фамилия + ФИОФизЛиц.Имя + ФИОФизЛиц.Отчество = &ФИО";
		
		Результат=ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса= Результат.Выбрать();
		ТЗДублейФизЛицФИО=Результат.Выгрузить();
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ТекстСообщения = "Физлицо с таким ФИО уже есть в справочнике "+Строка(ВыборкаЗапроса.Физлицо);
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = ТекстСообщения;
			НоваяСтрока.Физлицо = ВыборкаЗапроса.Физлицо;
			ЕстьДублиФИО = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаРождения)
		//И НЕ ЕстьДублиИНН И
		// НЕ ЕстьДублиПаспортныхДанных И
		// НЕ ЕстьДублиПФР 
		 Тогда
		 
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДатаРождения",	ДатаРождения);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка  ФизЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.ДатаРождения = &ДатаРождения";
		
		Результат=ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса= Результат.Выбрать();
		ТЗДублейФизЛицДатаРождения=Результат.Выгрузить();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = "Физлицо с таким ФИО уже есть в справочнике "+Строка(ВыборкаЗапроса.Физлицо);
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = ТекстСообщения;
			НоваяСтрока.Физлицо = ВыборкаЗапроса.Физлицо;
			ЕстьДублиДатыРождения = Истина;
		КонецЦикла;
		
	КонецЕсли;


	Возврат ТаблицаСообщений;
	
КонецФункции

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ИнициалыФизЛицаФамилия(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Строка") и Фамилия = "" Тогда
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") ИЛИ
			  ТипОбъекта = Тип("СправочникСсылка.удуСотрудникиОрганизаций") или ТипОбъекта = Тип("СправочникОбъект.удуСотрудникиОрганизаций") Тогда
	
		Если ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или 
			ТипОбъекта = Тип("СправочникСсылка.удуСотрудникиОрганизаций") Тогда
			Наименование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект, "Наименование");
		Иначе
			Наименование = Объект.Наименование;
		КонецЕсли;
	
		// Избавление от возможных выражений в скобках, например (осн.), (вн. совм.).
		НачальнаяПозиция	= Найти(Наименование,"(");
		КонечнаяПозиция		= Найти(Наименование,")");
		ДлинаСтроки			= СтрДлина(Наименование);
		Если НачальнаяПозиция > 0 Тогда
			СтрокаДляОбработки = Лев(Наименование, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(Наименование, ДлинаСтроки - КонечнаяПозиция),"")
		Иначе
			СтрокаДляОбработки = Наименование;
		КонецЕсли; 
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(СтрокаДляОбработки)," ");
		
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				"" + ?(НЕ ПустаяСтрока(Имя),Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), "") + " " + Фамилия ,
				"")
	КонецЕсли;
			
	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				"" + ?(НЕ ПустаяСтрока(Имя),Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+". ", ""), "") + " " + Фамилия,
				"");

КонецФункции




// Справочник "Сотрудники"

// Функция формирует наименовние элемента справочника СотрудникиОрганизаций
//
// Параметры
//  <Физлицо>  – <СправочникСсылка.ФизическиеЛица> – физлицо 
//  <Постфикс>  – <Строка> – постфикс наименования сотрудника
//
// Возвращаемое значение:
//   <Строка>   – наименование сотрудника
//
Функция УстановитьНаименованиеСотрудника(Наименование, Постфикс) Экспорт

	Возврат  Наименование + ?(ЗначениеЗаполнено(Постфикс), " " + Постфикс, "");

КонецФункции // УстановитьНаименованиеСотрудника()


// Процедура получает ФИО физлица
Процедура ПрочитатьФИО(ЭтаФорма) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ЭтаФорма.объект.Физлицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Период,
	|	ФИОФизЛицСрезПоследних.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.удуФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	мНаборЗаписейФИО = РегистрыСведений.удуФИОФизЛиц.СоздатьНаборЗаписей();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейФИО.Добавить(), Выборка);
		ФИОСрез  = мНаборЗаписейФИО[0];
		ЭтаФорма.Фамилия  = ФИОСрез.Фамилия;
		ЭтаФорма.Имя      = ФИОСрез.Имя;
		ЭтаФорма.Отчество = ФИОСрез.Отчество;
	Иначе
		ЭтаФорма.Фамилия  = "";
		ЭтаФорма.Имя      = "";
		ЭтаФорма.Отчество = "";
	КонецЕсли;
	
	ЗначениеВДанныеФормы(мНаборЗаписейФИО,ЭтаФорма.мНаборЗаписейФИО);

КонецПроцедуры // ПрочитатьФИО()

// Процедура проверяет какой вид занятости установить по умолчанию
Процедура ПроверитьИУстановитьВидЗанятости(НеЗадаватьВопрос = Истина, ЭтаФорма, ТаблицаСообщений=Неопределено) Экспорт

	ВидЗанятости	= ЭтаФорма.Объект.ВидЗанятости;
	Организация 	= ЭтаФорма.Объект.Организация;
	Физлицо		 	= ЭтаФорма.Объект.Физлицо;
	ДатаНачала	 	= ЭтаФорма.Объект.ДатаНачала;
	Ссылка		 	= ЭтаФорма.Объект.Ссылка;
	
	НадоПроверятьВидЗанятости = ПроверитьНеобходимостьУстановкиВидаЗанятости(ЭтаФорма);
	
	Если НадоПроверятьВидЗанятости Тогда
		// Проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости.
		// Основное место работы или совместитель.
		// И если есть установим вид занятости - Внутреннее совместительство.
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.удуСотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
		|				&парамДатаСреза,
		|				Организация = &парамОрганизация
		|					И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.удуВидыЗанятостиВОрганизации.Совместительство))";
		
		ДатаСреза = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ТекущаяДата());
		
		Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
		Запрос.УстановитьПараметр("парамДатаСреза",   ДатаСреза);
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если НеЗадаватьВопрос Тогда
				ЭтаФорма.объект.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
			ИначеЕсли не ТаблицаСообщений=Неопределено тогда 
				// Спросим у пользователя, заменить вид занятости или нет.
				СтрокаТЗ=ТаблицаСообщений.Добавить();
				ТекстВопроса = "В организации " + Организация + " уже есть сотрудник """ + Выборка.ФизлицоНаименование + """ с видом занятости """ + Выборка.ВидЗанятости + """,
				|поменять вид занятости на ""Внутреннее совместительство""?";
				СтрокаТЗ.ТипСообщения="ВидЗанятости";
				СтрокаТЗ.ТекстСообщения=ТекстВопроса;
				СтрокаТЗ.ЗначениеСообщения=Перечисления.удуВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
					
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьИУстановитьВидЗанятости()

// Функция проверяет необходимость проверки и установки вида занятости.
Функция ПроверитьНеобходимостьУстановкиВидаЗанятости(ЭтаФорма) Экспорт

	НадоПроверятьВидЗанятости = (ЭтаФорма.Объект.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
		или ЭтаФорма.Объект.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.Совместительство) и ЗначениеЗаполнено(ЭтаФорма.Объект.Организация)
		и ЗначениеЗаполнено(ЭтаФорма.Объект.Физлицо);
		
	Возврат НадоПроверятьВидЗанятости;	

КонецФункции // ПроверитьНеобходимостьУстановкиВидаЗанятости()

 // Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер, Знач ДлинаНомера = 0) Экспорт
	
	Если ДлинаНомера = 0 Тогда
		ДлинаНомера = СтрДлина(ПоследнийНомер);
	КонецЕсли;
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если Не ПустаяСтрока(Сред(ПоследнийНомер, СчетчикСимв, 1)) и СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()

Процедура ЗаполнитьНаборыПоФизлицу(ЭтаФорма) Экспорт
	
	ЭтаФорма.мНаборЗаписейГражданство.Очистить();
	ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Очистить();
	
	Если ЭтаФорма.Объект.Физлицо.Пустая() Тогда
		Возврат;	
	КонецЕсли;	
	
	Параметр = ЭтаФорма.Объект.Физлицо;
	ПолучитьСвязанныеДанныеФизлица(Параметр, ЭтаФорма.мНаборЗаписейГражданство,Тип("РегистрСведенийНаборЗаписей.удуГражданствоФизЛиц"));
	Если ЭтаФорма.мНаборЗаписейГражданство.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Добавить(), ЭтаФорма.мНаборЗаписейГражданство[0]);
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьПараметрыВидовДоговоров(парамВидДоговора, ВидДоговора, Префикс) Экспорт
	
	Если ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		парамВидДоговора.Добавить(Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор);
	Иначе
		Префикс = "д";
		парамВидДоговора.Добавить(Перечисления.удуВидыДоговоровСФизЛицами.Подряда);
	КонецЕсли;

КонецПроцедуры

// Функция проверяется прием на работу сотрудника или наличие начислений
 //
 // Параметры  Нет
 //
 // Возвращаемое значение:
 //   Булево
 //
Функция ЕстьНачисленияИлиПриемНаРаботу(ВидДоговора, Ссылка) Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	ВидыДоговоров.Добавить(Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	Если ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.Подряда Тогда
		
		// Договор ГПХ, проверим регистрацию договоров документом.
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		 |ИЗ
		 |	Документ.удуДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		 |ГДЕ
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = &парамСотрудник
		 |	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли;
		
	ИначеЕсли ВидыДоговоров.Найти(ВидДоговора) <> Неопределено  Тогда	
		
		// Проверим по наличию записей в регистре РаботникиОрганизаций.
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	РаботникиОрганизаций.Сотрудник
		 |ИЗ
		 |	РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
		 |ГДЕ
		 |	РаботникиОрганизаций.Сотрудник = &ПарамСотрудник";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли;
		
	КонецЕсли;
 
	Возврат Ложь;
	
КонецФункции // ЕстьНачисленияИлиПриемНаРаботу()

// Процедура подбирает постфикс наименования для нового сотрудника
Процедура ПодобратьПостфиксНаименования(ЭтаФорма) Экспорт
	
	// Запросом выбираем Актуальных не уволенных сотрудников.
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
	|		,
	|		Организация = &парамОрганизация
	|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL
	|	И Сотрудники.Актуальность";
	
	Запрос.УстановитьПараметр("парамФизлицо",     ЭтаФорма.Объект.Физлицо);
	Запрос.УстановитьПараметр("парамОрганизация", ЭтаФорма.Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", ЭтаФорма.Объект.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Количество()>0 Тогда
		// Есть сотрудники по этому физлицу, необходимо подобрать постфикс.
		// Проверим, есть сотрудник с пустым постфиксом.
		Если ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ЭтаФорма.Объект.ПостфиксНаименования),"Постфикс")Тогда
			// Есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику.
			ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговора(ЭтаФорма.Объект.ВидДоговора, ЭтаФорма.Объект.ВидЗанятости), ВыборкаИзЗапроса);
			Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
				ЭтаФорма.Объект.Наименование = СОКРЛП(ЭтаФорма.ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
			КонецЕсли;
		ИначеЕсли Не ПустаяСтрока(ПостфиксНаименования) Тогда	
			// Проверим, может у сотрудника остался постфикс, который не соответствует виду договора.
			ПостфиксПоВидуДоговра = ПолучитьПостфиксПоВидуДоговора(ЭтаФорма.Объект.ВидДоговора, ЭтаФорма.Объект.ВидЗанятости);
			Если Лев(ПостфиксНаименования,СтрДлина(ПостфиксПоВидуДоговра)-1) <> Лев(ПостфиксПоВидуДоговра,СтрДлина(ПостфиксПоВидуДоговра)-1)Тогда
				// Скорее всего текущий постфикс наименования не соответствует виду договора.
				ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПостфиксПоВидуДоговра, ВыборкаИзЗапроса);
				Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
					ЭтаФорма.Объект.Наименование = СОКРЛП(ЭтаФорма.ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьПостфиксНаименования()

// Функция проверяет наличие в выборке из запроса постфикса, переданного
// в качестве параметра и если есть такой, пытается подобрать другой постфикс
// Параметры
//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
//                 <продолжение описания параметра>
//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
//
// Возвращаемое значение:
//   Строка   – подобранный постфикс наименования
//
Функция ПроверитьИПодобратьПостфикс(ПостфиксДляПроверки, ВыборкаИзЗапроса)

	НомПопытки = 1;
	НовыйПостфикс = ПостфиксДляПроверки;
	Пока Истина Цикл
		
		Если НомПопытки > 9 Тогда
			// Выходи из цикла, не удалось автоматически подобрать постфикс.
			НовыйПостфикс = "";
			Прервать;
		КонецЕсли;
		
		ВыборкаИзЗапроса.Сбросить();
		Если ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")Тогда
			НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";
			НомПопытки=НомПопытки + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйПостфикс;

КонецФункции // ПроверитьИПодобратьПостфикс()

// Функция возвращает постфикс наименования, который соответствует виду договора.
// Возвращаемое значение:
//   <Строка>   – постфикс наименования
//
Функция ПолучитьПостфиксПоВидуДоговора(ВидДоговора, ВидЗанятости)

	НовыйПостфикс = "";
	
	Если ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			НовыйПостфикс ="(вн. совм.)"; 
		ИначеЕсли ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			НовыйПостфикс = "(осн.)";
		Иначе
			НовыйПостфикс = "(совм.)";
		КонецЕсли; 
	ИначеЕсли ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.Подряда Тогда
		НовыйПостфикс = "(дог. подр.)";
	КонецЕсли;
	
	Возврат НовыйПостфикс;

КонецФункции // ПолучитьПостфиксПоВидуДоговра()

// Процедура очищает не используемые реквизиты перед записью объекта
Процедура ОчиститьНеИспользуемыеРеквизиты(ЭтаФорма) Экспорт
		
	Если не ЭтаФорма.Объект.ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		ЭтаФорма.Объект.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ПустаяСсылка();
		ЭтаФорма.Объект.НомерДоговора ="";
		ЭтаФорма.Объект.ДатаДоговора = Дата('00010101');
		ЭтаФорма.Объект.ПодразделениеОрганизации  = Справочники.УдуПодразделенияУчереждения.ПустаяСсылка();
		ЭтаФорма.Объект.Должность		 = Справочники.Должности.ПустаяСсылка();
		ЭтаФорма.Объект.ГрафикРаботы	 = Справочники.удуГрафикиРаботы.ПустаяСсылка();
		ЭтаФорма.Объект.ЗанимаемыхСтавок = 0;
		ЭтаФорма.Объект.ДатаНачала 	  = Дата('00010101');
		ЭтаФорма.Объект.ДатаОкончания = Дата('00010101');
		ЭтаФорма.Объект.ИспытательныйСрок = 0;
		ЭтаФорма.Объект.ТарифнаяСтавка = 0;
		ЭтаФорма.Объект.ВидРасчета = ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка();
			
	КонецЕсли; 
	
КонецПроцедуры

// Процедура управляет отображением кнопок выбора из списка
Процедура ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма) Экспорт
	
	ЭлементыФормы 		= ЭтаФорма.Элементы;
	ОрганизацияДляШР 	= ЭтаФорма.Объект.Организация;
	
	ДатаАктуальности = ?(Не ЗначениеЗаполнено(ЭтаФорма.Объект.ДатаНачала), Неопределено, ЭтаФорма.Объект.ДатаНачала);
	
	СписокПодразделений = удуПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", ОрганизацияДляШР, ЭтаФорма.Объект.Должность, ДатаАктуальности);
	КоличествоЗначений = СписокПодразделений.Количество();
	ЭлементыФормы.ПодразделениеОрганизации.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	ДополнительныйЭУ = ЭлементыФормы.Найти("ПодразделениеОрганизацииС");
	Если ДополнительныйЭУ <> Неопределено Тогда
		ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	КонецЕсли; 
	СписокДолжностей = удуПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", ОрганизацияДляШР, ЭтаФорма.Объект.ПодразделениеОрганизации, ДатаАктуальности);
	КоличествоЗначений = СписокДолжностей.Количество();
	ЭлементыФормы.Должность.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	ДополнительныйЭУ = ЭлементыФормы.Найти("ДолжностьС");
	Если ДополнительныйЭУ <> Неопределено Тогда
		ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()

Процедура ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма, ЭтотОбъект) Экспорт
	
	ДанныеШР = удуПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ЭтаФорма.Объект.ДатаДоговора, ЭтаФорма.Объект.ПодразделениеОрганизации, ЭтаФорма.Объект.Должность);
	Если ДанныеШР.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.ВидРасчета) Тогда
			ЭтаФорма.Объект.ВидРасчета = ДанныеШР[0].ВидРасчета;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
