////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает таблицу свойств видов доступа, созданную на основе данных,
// заполняемых в процедуре, подготовленной прикладным разработчиком:
// УправлениеДоступомПереопределяемый.ЗаполнитьСвойстваВидаДоступа(ВидДоступа).
// 
// Возвращаемое значение:
//  ТаблицаЗначений с полями:
//    ВидДоступа                                    - ПланВидовХарактеристикСсылка.ВидыДоступа,
//    ВидДоступаИспользуется                        - Булево (начальное значение Истина),
//    Таблицы                                       - Массив имен таблиц значений доступа (в формате функции ПолноеИмя() объекта метаданных),
//    ВидДоступаЧерезПраваПоЗначениямДоступа        - Булево (начальное значение Ложь),
//    ВидДоступаЕдинственныйДляТипаЗначенияДоступа  - Булево (начальное значение Истина),
//    ВидДоступаБезГруппЗначенияДоступа             - Булево (начальное значение Истина),
//    ВидДоступаСОднойГруппойЗначенияДоступа        - Булево (начальное значение Истина).
//
Функция СвойстваВидовДоступа() Экспорт
	
	СвойстваВидовДоступа = Новый ТаблицаЗначений;
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступа",                                   Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаИспользуется",                       Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("Таблицы",                                      Новый ОписаниеТипов("Массив"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаЧерезПраваПоЗначениямДоступа",       Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаЕдинственныйДляТипаЗначенияДоступа", Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаБезГруппЗначенияДоступа",            Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаСОднойГруппойЗначенияДоступа",       Новый ОписаниеТипов("Булево"));
	// Свойство для управления интерфейсом и отказом записи профиля групп доступа.
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаИспользуетсяВсегда",                 Новый ОписаниеТипов("Булево"));

	НачальныеЗначенияСвойств = Новый Структура;
	НачальныеЗначенияСвойств.Вставить("Таблицы", Новый Массив);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаИспользуется",                       Истина);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаЧерезПраваПоЗначениямДоступа",       Ложь);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаЕдинственныйДляТипаЗначенияДоступа", Истина);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаБезГруппЗначенияДоступа",            Истина);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаСОднойГруппойЗначенияДоступа",       Истина);
	
	// Подготовка свойств всех видов доступа.
	ЗапросВидовДоступа = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка КАК ВидДоступа
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный");
	Выборка = ЗапросВидовДоступа.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Свойства = СвойстваВидовДоступа.Добавить();
		ЗаполнитьЗначенияСвойств(Свойства, НачальныеЗначенияСвойств);
		Свойства.ВидДоступа = Выборка.ВидДоступа;
		Свойства.Таблицы    = Новый Массив;
		
		Если Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения ИЛИ
		     Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления ИЛИ
		     Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения Тогда
			
			Свойства.ВидДоступаИспользуетсяВсегда = Истина;
		Иначе
			УправлениеДоступомПереопределяемый.ЗаполнитьСвойстваВидаДоступа(Свойства);
			
			// Неизменяемые свойства вида доступа Пользователи и вида доступа ВнешниеПользователи
			Если Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Пользователи Тогда
				Если Свойства.Таблицы.Найти("Справочник.Пользователи") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.Пользователи");
				КонецЕсли;
				Если Свойства.Таблицы.Найти("Справочник.ГруппыПользователей") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.ГруппыПользователей");
				КонецЕсли;
				Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = Истина;
				Свойства.ВидДоступаБезГруппЗначенияДоступа            = Ложь;
				Свойства.ВидДоступаСОднойГруппойЗначенияДоступа       = Ложь;
				
			ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи Тогда
				Если Свойства.Таблицы.Найти("Справочник.ВнешниеПользователи") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.ВнешниеПользователи");
				КонецЕсли;
				Если Свойства.Таблицы.Найти("Справочник.ГруппыВнешнихПользователей") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.ГруппыВнешнихПользователей");
				КонецЕсли;
				Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = Истина;
				Свойства.ВидДоступаБезГруппЗначенияДоступа            = Ложь;
				Свойства.ВидДоступаСОднойГруппойЗначенияДоступа       = Ложь;
			КонецЕсли;
			
			Свойства.ВидДоступаИспользуетсяВсегда = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвойстваВидовДоступа;
	
КонецФункции

// Возвращает таблицу описаний возможных прав значений доступа,
// созданную с использованием процедуры, подготовленной прикладным разработчиком:
// УправлениеДоступомПереопределяемый.ЗаполнитьВозможныеПраваПоЗначениямДоступа().
//
// Описание возможных прав - это описание связей:
// <владелец прав> - <право> - <таблица прав> - <ограничиваемые права таблицы>,
// где
//   владелец прав - это таблица, по элементам которой записываются назначенные права,
//           например, Справочник.ПапкиФайлов;
//   право - это набор из ограничиваемых, интерактивных, дополнительных прав,
//           например, ДобавлениеИзменениеПапокИФайлов, ЭлектроннаяПодписьФайлов;
//   таблица прав - это таблица, для которой предназначены ограничиваемые права,
//           например Справочник.ПапкиФайлов, Справочник.Файлы;
//   ограничиваемые права - это права чтение, добавление, изменение, удаление к объектам метаданных.
//
//  <Таблиц прав> и <ограничиваемых прав> может не быть, например, в случае дополнительных прав ПометкаУдаления.
// Эти связи требуются при заполнения данных для стандартных шаблонов ограничения доступа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//   ВладелецПрав - Строка - полное имя таблицы значения доступа,
//   Имя         - Строка - идентификатор права, например, ЧтениеПапокИФайлов,
//                 право с имененем "УправлениеПравами" должно быть обязательно определено для общей формы настройки прав
//                 "Права доступа", "Управление правами" - это право на изменение прав по владельцу прав,
//                 которое проверяется при открытии РегистрСведений.ПраваПоЗначениямДоступа.Форма.ПраваПоЗначениямДоступа;
//   Синоним     - Строка - полное наименование права, например, "Чтение папок и файлов";
//   Сокращение  - Строка - краткое наименование права среди прав одного владельца, например "Чтение";
//   Заголовок   - Строка - заголовок права в форме "Права по значениям доступа", например "Чт";
//   НачальноеЗначение - Булево - начальное значение флажка права при добавлении новой строки в форме "Права по значениям доступа";
//   ТребуемыеПрава - Массив строк - имена прав, требуемых для от этого права,
//                 например, право "ДобавлениеПапокИФайлов" требует право "ЧтениеПапокИФайлов" и
//                 право "ИзменениеПапокИФайлов"
//   ТребуемаяРоль - Массив строк - содержащий роли, хотя бы одна из которых, обязательна для работы права,
//                 используется в функции УправлениеДоступом.ЕстьПраво();
//   ЧтениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право чтения
//                 (требуется для работы шаблонов ограничения доступа);
//   ДобавлениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право добавления
//                 (требуется для работы шаблонов ограничения доступа);
//   ИзменениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право изменения
//                 (требуется для работы шаблонов ограничения доступа);
//   УдалениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право удаления
//                 (требуется для работы шаблонов ограничения доступа);
//
Функция ВозможныеПраваПоЗначениямДоступа() Экспорт
	
	ВозможныеПрава = Новый ТаблицаЗначений();
	ВозможныеПрава.Колонки.Добавить("ВладелецПрав",        Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВозможныеПрава.Колонки.Добавить("Имя",                 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(60)));
	ВозможныеПрава.Колонки.Добавить("Синоним",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВозможныеПрава.Колонки.Добавить("Сокращение",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВозможныеПрава.Колонки.Добавить("Заголовок",           Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ВозможныеПрава.Колонки.Добавить("НачальноеЗначение",   Новый ОписаниеТипов("Булево"));
	ВозможныеПрава.Колонки.Добавить("ТребуемыеПрава",      Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ТребуемаяРоль",       Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ЧтениеВТаблицах",     Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ДобавлениеВТаблицах", Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ИзменениеВТаблицах",  Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("УдалениеВТаблицах",   Новый ОписаниеТипов("Массив"));
	
	УправлениеДоступомПереопределяемый.ЗаполнитьВозможныеПраваПоЗначениямДоступа(ВозможныеПрава);
	
	Возврат ВозможныеПрава;
	
КонецФункции

// Возвращает таблицу, содержащую права доступа Чтение, Добавление, Изменение, Удаление,
// заданные в ролях по все объектам метаданных. Только эти права могут ограничиваться.
//  Таблица применяется при обновлении таблиц ролей в профилях групп доступа
// и при получении списка профилей групп доступа, в которых требуется
// выполнить обновление этих таблиц.
//  Также таблица используется в отчете ПраваДоступа, для этого
// подготавливаются права:
//  - ЧтениеБезОграничения,
//  - ДобавлениеБезОграничения,
//  - ИзменениеБезОграничения,
//  - Просмотр,
//  - ИнтерактивноеДобавление,
//  - Редактирование.
//
// Параметры:
//  РасширенныйСписокПрав - Булево, если Истина, тогда список прав как для отчета.
//
Функция ОграничиваемыеПраваОбъектовМетаданныхРолей(РасширенныйСписокПрав = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка структуры имен коллекций метаданных, которые нужно проанализировать
	// на доступность ролям группы доступа.
	ИменаКоллекцийОбъектовМетаданных = Новый Структура;
	ИменаКоллекцийОбъектовМетаданных.Вставить("Справочники",             "Справочник");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Документы",               "Документ");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ЖурналыДокументов",       "ЖурналДокументов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыСчетов",             "ПланСчетов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовРасчета",       "ПланВидовРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыСведений",        "РегистрСведений");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыНакопления",      "РегистрНакопления");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыБухгалтерии",     "РегистрБухгалтерии");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыРасчета",         "РегистрРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("БизнесПроцессы",          "БизнесПроцесс");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Задачи",                  "Задача");
	
	// Подготовка структуры наличия права добавления у коллекций метаданных.
	ПравоДобавления = Новый Структура;
	ПравоДобавления.Вставить("Справочники",             Истина);
	ПравоДобавления.Вставить("Документы",               Истина);
	ПравоДобавления.Вставить("ЖурналыДокументов",       Ложь);
	ПравоДобавления.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоДобавления.Вставить("ПланыСчетов",             Истина);
	ПравоДобавления.Вставить("ПланыВидовРасчета",       Истина);
	ПравоДобавления.Вставить("РегистрыСведений",        Ложь);
	ПравоДобавления.Вставить("РегистрыНакопления",      Ложь);
	ПравоДобавления.Вставить("РегистрыБухгалтерии",     Ложь);
	ПравоДобавления.Вставить("РегистрыРасчета",         Ложь);
	ПравоДобавления.Вставить("БизнесПроцессы",          Истина);
	ПравоДобавления.Вставить("Задачи",                  Истина);
	
	// Подготовка структуры наличия права изменения у коллекций метаданных.
	ПравоИзменения = Новый Структура;
	ПравоИзменения.Вставить("Справочники",             Истина);
	ПравоИзменения.Вставить("Документы",               Истина);
	ПравоИзменения.Вставить("ЖурналыДокументов",       Ложь);
	ПравоИзменения.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоИзменения.Вставить("ПланыСчетов",             Истина);
	ПравоИзменения.Вставить("ПланыВидовРасчета",       Истина);
	ПравоИзменения.Вставить("РегистрыСведений",        Истина);
	ПравоИзменения.Вставить("РегистрыНакопления",      Истина);
	ПравоИзменения.Вставить("РегистрыБухгалтерии",     Истина);
	ПравоИзменения.Вставить("РегистрыРасчета",         Истина);
	ПравоИзменения.Вставить("БизнесПроцессы",          Истина);
	ПравоИзменения.Вставить("Задачи",                  Истина);
	
	// Подготовка структуры наличия права удаления у коллекций метаданных.
	ПравоУдаления = Новый Структура;
	ПравоУдаления.Вставить("Справочники",             Истина);
	ПравоУдаления.Вставить("Документы",               Истина);
	ПравоУдаления.Вставить("ЖурналыДокументов",       Ложь);
	ПравоУдаления.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоУдаления.Вставить("ПланыСчетов",             Истина);
	ПравоУдаления.Вставить("ПланыВидовРасчета",       Истина);
	ПравоУдаления.Вставить("РегистрыСведений",        Ложь);
	ПравоУдаления.Вставить("РегистрыНакопления",      Ложь);
	ПравоУдаления.Вставить("РегистрыБухгалтерии",     Ложь);
	ПравоУдаления.Вставить("РегистрыРасчета",         Ложь);
	ПравоУдаления.Вставить("БизнесПроцессы",          Истина);
	ПравоУдаления.Вставить("Задачи",                  Истина);
	
	ПраваОМДРолей = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент().ТаблицыРолей.Выгрузить();
	Если РасширенныйСписокПрав Тогда
		ПраваОМДРолей.Колонки.Добавить("ЧтениеБезОграничения",     Новый ОписаниеТипов("Булево"));
		ПраваОМДРолей.Колонки.Добавить("ДобавлениеБезОграничения", Новый ОписаниеТипов("Булево"));
		ПраваОМДРолей.Колонки.Добавить("ИзменениеБезОграничения",  Новый ОписаниеТипов("Булево"));
		ПраваОМДРолей.Колонки.Добавить("Просмотр",                 Новый ОписаниеТипов("Булево"));
		ПраваОМДРолей.Колонки.Добавить("Редактирование",           Новый ОписаниеТипов("Булево"));
		ПраваОМДРолей.Колонки.Добавить("ИнтерактивноеДобавление",  Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ИменаКоллекцийОбъектовМетаданных Цикл
		
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			
			Таблица = КлючИЗначение.Значение + "." + ОбъектМетаданных.Имя;
			
			// Подготовка пустой ссылки, как идентификатора типа для таблиц объектов.
			Если ПравоДобавления[КлючИЗначение.Ключ] Тогда
				ОписаниеТипаТаблицы = Новый ОписаниеТипов(КлючИЗначение.Значение + "Ссылка." + ОбъектМетаданных.Имя);
				ТипТаблицы = ОписаниеТипаТаблицы.ПривестиЗначение(Неопределено);
			Иначе
				ТипТаблицы = Неопределено;
			КонецЕсли;
			
			Если РасширенныйСписокПрав Тогда
				Поля = ВсеПоляОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных);
			КонецЕсли;
			
			Для каждого Роль Из Метаданные.Роли Цикл
				
				Если ПравоДоступа("Чтение", ОбъектМетаданных, Роль) Тогда
					
					НоваяСтрока = ПраваОМДРолей.Добавить();
					НоваяСтрока.Роль                    = Роль.Имя;
					НоваяСтрока.Таблица                 = Таблица;
					НоваяСтрока.Добавление              = ПравоДобавления[КлючИЗначение.Ключ] И ПравоДоступа("Добавление",              ОбъектМетаданных, Роль);
					НоваяСтрока.Изменение               = ПравоИзменения [КлючИЗначение.Ключ] И ПравоДоступа("Изменение",               ОбъектМетаданных, Роль);
					НоваяСтрока.Удаление                = ПравоУдаления  [КлючИЗначение.Ключ] И ПравоДоступа("Удаление",                ОбъектМетаданных, Роль);
					Если РасширенныйСписокПрав Тогда
						НоваяСтрока.ЧтениеБезОграничения     =                                       НЕ ПараметрыДоступа("Чтение",                  ОбъектМетаданных, Поля, Роль).ОграничениеУсловием;
						НоваяСтрока.ДобавлениеБезОграничения = НоваяСтрока.Добавление              И НЕ ПараметрыДоступа("Добавление",              ОбъектМетаданных, Поля, Роль).ОграничениеУсловием;
						НоваяСтрока.ИзменениеБезОграничения  = НоваяСтрока.Изменение               И НЕ ПараметрыДоступа("Изменение",               ОбъектМетаданных, Поля, Роль).ОграничениеУсловием;
						НоваяСтрока.Просмотр                 =                                          ПравоДоступа(    "Просмотр",                ОбъектМетаданных, Роль);
						НоваяСтрока.Редактирование           = ПравоИзменения [КлючИЗначение.Ключ] И    ПравоДоступа(    "Редактирование",          ОбъектМетаданных, Роль);
						НоваяСтрока.ИнтерактивноеДобавление  = ПравоДобавления[КлючИЗначение.Ключ] И    ПравоДоступа(    "ИнтерактивноеДобавление", ОбъектМетаданных, Роль);
					КонецЕсли;
					// Установка пустой ссылки, как идентификатора типа для таблиц объектов.
					НоваяСтрока.ТипТаблицы = ТипТаблицы;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПраваОМДРолей;
	
КонецФункции

// Возвращает поля объекта метаданных по которым может ограничиваться доступ.
//
// Параметры:
//  ОбъектМетаданных   - ОбъектМетаданных
//  ОбъектИБ           - Неопределено, COMОбъект
//  ПолучитьМассивИмен - Булево
//
// Возвращаемое значение:
//  Строка (имен через запятую)
//  Если ПолучитьМассивИмен = Истина, тогда Массив строк.
//
Функция ВсеПоляОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, ОбъектИБ = Неопределено, ПолучитьМассивИмен = Ложь) Экспорт
	
	ИменаКоллекций = Новый Массив;
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	ИмяТипа = Лев(ПолноеИмя, Найти(ПолноеИмя, ".") - 1);
	Если      ИмяТипа = "Справочник" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "Документ" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "ЖурналДокументов" Тогда
		ИменаКоллекций.Добавить("Графы");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "ПланВидовХарактеристик" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "ПланСчетов" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("ПризнакиУчета");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
		ИменаКоллекций.Добавить("СтандартныеТабличныеЧасти");
	ИначеЕсли ИмяТипа = "ПланВидовРасчета" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
		ИменаКоллекций.Добавить("СтандартныеТабличныеЧасти");
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда
		ИменаКоллекций.Добавить("Измерения");
		ИменаКоллекций.Добавить("Ресурсы");
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "РегистрНакопления" Тогда
		ИменаКоллекций.Добавить("Измерения");
		ИменаКоллекций.Добавить("Ресурсы");
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "РегистрБухгалтерии" Тогда
		ИменаКоллекций.Добавить("Измерения");
		ИменаКоллекций.Добавить("Ресурсы");
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "РегистрРасчета" Тогда
		ИменаКоллекций.Добавить("Измерения");
		ИменаКоллекций.Добавить("Ресурсы");
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "БизнесПроцесс" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	ИначеЕсли ИмяТипа = "Задача" Тогда
		ИменаКоллекций.Добавить("РеквизитыАдресации");
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
	КонецЕсли;
	
	ИменаПолей = Новый Массив;
	Если ОбъектИБ = Неопределено Тогда
		ТипХранилищеЗначения = Тип("ХранилищеЗначения");
	Иначе
		ТипХранилищеЗначения = ОбъектИБ.NewObject("ОписаниеТипов", "ХранилищеЗначения").Типы().Получить(0);
	КонецЕсли;

	Для каждого ИмяКоллекции Из ИменаКоллекций Цикл
		Если ИмяКоллекции = "ТабличныеЧасти"
		 ИЛИ ИмяКоллекции = "СтандартныеТабличныеЧасти" Тогда
			Для каждого ТабличнаяЧасть Из ОбъектМетаданных[ИмяКоллекции] Цикл
				ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, ТабличнаяЧасть.Имя, ИменаПолей, ОбъектИБ);
				Реквизиты = ?(ИмяКоллекции = "ТабличныеЧасти", ТабличнаяЧасть.Реквизиты, ТабличнаяЧасть.СтандартныеРеквизиты);
				Для каждого Поле Из Реквизиты Цикл
					Если Поле.Тип.СодержитТип(ТипХранилищеЗначения) Тогда
						Продолжить;
					КонецЕсли;
					ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, ТабличнаяЧасть.Имя + "." + Поле.Имя, ИменаПолей, ОбъектИБ);
				КонецЦикла;
				Если ИмяКоллекции = "СтандартныеТабличныеЧасти" И ТабличнаяЧасть.Имя = "ВидыСубконто" Тогда
					Для каждого Поле Из ОбъектМетаданных.ПризнакиУчетаСубконто Цикл
						ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, "ВидыСубконто." + Поле.Имя, ИменаПолей, ОбъектИБ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого Поле Из ОбъектМетаданных[ИмяКоллекции] Цикл
	 			Если ИмяТипа = "ЖурналДокументов"       И Поле.Имя = "Тип"
	 			 ИЛИ ИмяТипа = "ПланВидовХарактеристик" И Поле.Имя = "ТипЗначения"
	 			 ИЛИ ИмяТипа = "ПланСчетов"             И Поле.Имя = "Вид"
	 			 ИЛИ ИмяТипа = "РегистрНакопления"      И Поле.Имя = "ВидДвижения"
	 			 ИЛИ ИмяТипа = "РегистрБухгалтерии"     И ИмяКоллекции = "СтандартныеРеквизиты" И Найти(Поле.Имя, "Субконто") > 0 Тогда
	 				Продолжить;
	 			КонецЕсли;
				Если ИмяКоллекции = "Графы" ИЛИ
					 Поле.Тип.СодержитТип(ТипХранилищеЗначения) Тогда
					Продолжить;
				КонецЕсли;
				Если (ИмяКоллекции = "Измерения" ИЛИ ИмяКоллекции = "Ресурсы")
				   И ?(ОбъектИБ = Неопределено, Метаданные, ОбъектИБ.Метаданные).РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
				   И НЕ Поле.Балансовый Тогда
					// Дт
					ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, Поле.Имя + "Дт", ИменаПолей, ОбъектИБ);
					// Кт
					ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, Поле.Имя + "Кт", ИменаПолей, ОбъектИБ);
				Иначе
					ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, Поле.Имя, ИменаПолей, ОбъектИБ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьМассивИмен Тогда
		Возврат ИменаПолей;
	КонецЕсли;
	
	СписокПолей = "";
	Для каждого ИмяПоля Из ИменаПолей Цикл
		СписокПолей = СписокПолей + ", " + ИмяПоля;
	КонецЦикла;
	
	Возврат Сред(СписокПолей, 3);
	
КонецФункции

// Возвращает таблицу, содержащую имена таблиц объектов метаданных и
// пустую ссылку, как "тип" этой таблицы.
//  Результат применяется для обновления табличной части
// ТипыСсылок профиля групп доступа Администратор.
//
Функция ТипыСсылок() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыСсылок = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент().ТипыСсылок.Выгрузить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить();
	Для каждого Тип Из ТипыСсылок.Колонки["ТипТаблицы"].ТипЗначения.Типы() Цикл
		МассивТипов[0] = Тип;
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Строка = ТипыСсылок.Добавить();
		Строка.ТипТаблицы = ОписаниеТипа.ПривестиЗначение(Неопределено);
		// Метаданные.НайтиПоТипу() нельзя заменить на ТипТаблицы.Метаданные(), так как
		// не для любой ссылки существует метод Метаданные() (например, точка маршрута бизнес-процесса).
		Строка.Таблица    = Метаданные.НайтиПоТипу(ТипЗнч(Строка.ТипТаблицы)).ПолноеИмя();
	КонецЦикла;
	
	ТипыСсылок.Свернуть("ТипТаблицы, Таблица");
	
	Возврат ТипыСсылок;
	
КонецФункции

// Возвращает таблицу представлений коллекций и объектов метаданных, а также их таблиц.
//  Сформированная таблица используется для различных целей интерфейсов пользователя.
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//    - Коллекция                - Строка(150)  - "Справочники", "Документы" ...
//    - КоллекцияСиноним         - Строка(1000) - НСтр("ru = 'Справочники'"), ...
//    - КоллекцияПорядок         - Число        - порядок, как в дереве объектов метаданных конфигуратора
//    - ОбъектМетаданных         - Строка(150)  - "ФизическиеЛица", ...
//    - ОбъектМетаданныхСиноним  - Строка(1000) - синоним объекта метаданных Метаданные.Справочники.ФизическиеЛица.Синоним
//    - Таблица                  - Строка(150)  - "Справочник.ФизическиеЛица", ...
//    - ТаблицаСиноним           - Строка(1000) - НСтр("ru = 'Справочники'") + "." + ОбъектМетаданныхСиноним
//
Функция СинонимыТаблиц() Экспорт
	
	// Подготовка структуры имен коллекций метаданных, которые нужно проанализировать
	// на доступность ролям группы доступа.
	ИменаКоллекцийОбъектовМетаданных = Новый Структура;
	ИменаКоллекцийОбъектовМетаданных.Вставить("Справочники",             "Справочник");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Документы",               "Документ");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ЖурналыДокументов",       "ЖурналДокументов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыСчетов",             "ПланСчетов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовРасчета",       "ПланВидовРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыСведений",        "РегистрСведений");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыНакопления",      "РегистрНакопления");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыБухгалтерии",     "РегистрБухгалтерии");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыРасчета",         "РегистрРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("БизнесПроцессы",          "БизнесПроцесс");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Задачи",                  "Задача");
	
	// Подготовка синонимов коллекций таблиц
	СинонимыКоллекцийТаблиц = Новый Структура;
	СинонимыКоллекцийТаблиц.Вставить("Справочники",             НСтр("ru = 'Справочник'"));
	СинонимыКоллекцийТаблиц.Вставить("Документы",               НСтр("ru = 'Документ'"));
	СинонимыКоллекцийТаблиц.Вставить("ЖурналыДокументов",       НСтр("ru = 'Журнал документов'"));
	СинонимыКоллекцийТаблиц.Вставить("ПланыВидовХарактеристик", НСтр("ru = 'План видов характеристик'"));
	СинонимыКоллекцийТаблиц.Вставить("ПланыСчетов",             НСтр("ru = 'План счетов'"));
	СинонимыКоллекцийТаблиц.Вставить("ПланыВидовРасчета",       НСтр("ru = 'План видов расчета'"));
	СинонимыКоллекцийТаблиц.Вставить("РегистрыСведений",        НСтр("ru = 'Регистр сведений'"));
	СинонимыКоллекцийТаблиц.Вставить("РегистрыНакопления",      НСтр("ru = 'Регистр накопления'"));
	СинонимыКоллекцийТаблиц.Вставить("РегистрыБухгалтерии",     НСтр("ru = 'Регистр бухгалтерии'"));
	СинонимыКоллекцийТаблиц.Вставить("РегистрыРасчета",         НСтр("ru = 'Регистр расчета'"));
	СинонимыКоллекцийТаблиц.Вставить("БизнесПроцессы",          НСтр("ru = 'Бизнес-процесс'"));
	СинонимыКоллекцийТаблиц.Вставить("Задачи",                  НСтр("ru = 'Задача'"));
	
	// Подготовка порядка коллекций
	ПорядокКоллекций = Новый Структура;
	ПорядокКоллекций.Вставить("Справочники",             1);
	ПорядокКоллекций.Вставить("Документы",               2);
	ПорядокКоллекций.Вставить("ЖурналыДокументов",       3);
	ПорядокКоллекций.Вставить("ПланыВидовХарактеристик", 4);
	ПорядокКоллекций.Вставить("ПланыСчетов",             5);
	ПорядокКоллекций.Вставить("ПланыВидовРасчета",       6);
	ПорядокКоллекций.Вставить("РегистрыСведений",        7);
	ПорядокКоллекций.Вставить("РегистрыНакопления",      8);
	ПорядокКоллекций.Вставить("РегистрыБухгалтерии",     9);
	ПорядокКоллекций.Вставить("РегистрыРасчета",         10);
	ПорядокКоллекций.Вставить("БизнесПроцессы",          11);
	ПорядокКоллекций.Вставить("Задачи",                  12);

	// Подготовка синонимов коллекций объектов метаданных
	СинонимыКоллекцийОбъектовМетаданных = Новый Структура;
	СинонимыКоллекцийОбъектовМетаданных.Вставить("Справочники",             НСтр("ru = 'Справочники'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("Документы",               НСтр("ru = 'Документы'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("ЖурналыДокументов",       НСтр("ru = 'Журналы документов'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("ПланыСчетов",             НСтр("ru = 'Планы счетов'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("РегистрыСведений",        НСтр("ru = 'Регистры сведений'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("РегистрыНакопления",      НСтр("ru = 'Регистры накопления'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("РегистрыБухгалтерии",     НСтр("ru = 'Регистры бухгалтерии'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("РегистрыРасчета",         НСтр("ru = 'Регистры расчета'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("БизнесПроцессы",          НСтр("ru = 'Бизнес-процессы'"));
	СинонимыКоллекцийОбъектовМетаданных.Вставить("Задачи",                  НСтр("ru = 'Задачи'"));
	
	СинонимыТаблиц = Новый ТаблицаЗначений;
	СинонимыТаблиц.Колонки.Добавить("Коллекция",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СинонимыТаблиц.Колонки.Добавить("КоллекцияСиноним",        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	СинонимыТаблиц.Колонки.Добавить("КоллекцияПорядок",        Новый ОписаниеТипов("Число"));
	СинонимыТаблиц.Колонки.Добавить("ОбъектМетаданных",        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СинонимыТаблиц.Колонки.Добавить("ОбъектМетаданныхСиноним", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	СинонимыТаблиц.Колонки.Добавить("Таблица",                 Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СинонимыТаблиц.Колонки.Добавить("ТаблицаСиноним",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	
	Для каждого КлючИЗначение Из ИменаКоллекцийОбъектовМетаданных Цикл
		
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			
			Таблица = КлючИЗначение.Значение + "." + ОбъектМетаданных.Имя;
			
			НоваяСтрока = СинонимыТаблиц.Добавить();
			НоваяСтрока.Коллекция               = КлючИЗначение.Ключ;
			НоваяСтрока.КоллекцияСиноним        = СинонимыКоллекцийОбъектовМетаданных[КлючИЗначение.Ключ];
			НоваяСтрока.КоллекцияПорядок        = ПорядокКоллекций[КлючИЗначение.Ключ];
			НоваяСтрока.ОбъектМетаданных        = ОбъектМетаданных.Имя;
			НоваяСтрока.ОбъектМетаданныхСиноним = ОбъектМетаданных.Синоним;
			НоваяСтрока.Таблица                 = КлючИЗначение.Значение + "." + ОбъектМетаданных.Имя;
			НоваяСтрока.ТаблицаСиноним          = СинонимыКоллекцийТаблиц[КлючИЗначение.Ключ] + "." + ОбъектМетаданных.Синоним;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СинонимыТаблиц;
	
КонецФункции

// Возвращает таблицу значений, содержащую вид ограничений доступа по каждому праву
// объектов метаданных.
//  Если записи по праву нет, значит ограничений по праву нет.
//  Таблица содержит только виды доступа, заданные разработчиком,
// исходя из их применения в текстах ограничений.
//  Для получения всех видов доступа, включая используемые в наборах
// значений доступа может быть использовано
// текущее состояние регистра сведений НаборыЗначенийДоступа.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//    Таблица    - Строка - имя таблицы объекта метаданных, например, Справочник.Файлы
//    Право      - Строка: "Чтение", "Добавление", "Изменение", "Удаление"
//    ВидДоступа - ПланВидовХарактеристикСсылка.ВидыДоступа
//    ТаблицаОбъекта - Строка - имя таблицы объекта метаданных, через который ограничивается
//                 доступ, используя наборы значений доступа, например, Справочник.ПапкиФайлов
//                 Непустая строка, если ВидДоступа пустая ссылка, что
//                 в данном случае соответствует виду доступа Объект.
//
Функция ПостоянныеВидыОграниченийПравОбъектовМетаданных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДоступаПрав = Новый ТаблицаЗначений;
	ВидыДоступаПрав.Колонки.Добавить("Таблица",        Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВидыДоступаПрав.Колонки.Добавить("Право",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ВидыДоступаПрав.Колонки.Добавить("ВидДоступа",     Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	ВидыДоступаПрав.Колонки.Добавить("ТаблицаОбъекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	
	ПредопределенныеВидыДоступа = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредопределенныеВидыДоступа.Вставить(ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(Выборка.Ссылка), Выборка.Ссылка);
	КонецЦикла;
	
	ОграниченияПрав = "";
	УправлениеДоступомПереопределяемый.ЗаполнитьВидыОграниченийПравОбъектовМетаданных(ОграниченияПрав);
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ОграниченияПрав) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(ОграниченияПрав, НомерСтроки);
		Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ПояснениеОшибки = "";
			Если СтрЧислоВхождений(ТекущаяСтрока, ".") <> 3 И СтрЧислоВхождений(ТекущаяСтрока, ".") <> 5 Тогда
				ПояснениеОшибки = НСтр("ru = 'Строка должна быть в формате ""<Полное имя таблицы>.<Имя права>.<Имя вида доступа>[.Таблица объекта]"".'");
			Иначе
				ПозицияПрава = Найти(ТекущаяСтрока, ".");
				ПозицияПрава = Найти(Сред(ТекущаяСтрока, ПозицияПрава + 1), ".") + ПозицияПрава;
				Таблица = Лев(ТекущаяСтрока, ПозицияПрава - 1);
				ПозицияВидаДоступа = Найти(Сред(ТекущаяСтрока, ПозицияПрава + 1), ".") + ПозицияПрава;
				Право = Сред(ТекущаяСтрока, ПозицияПрава + 1, ПозицияВидаДоступа - ПозицияПрава - 1);
				Если СтрЧислоВхождений(ТекущаяСтрока, ".") = 3 Тогда
					ВидДоступа = Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1);
					ТаблицаОбъекта = "";
				Иначе
					ПозицияТаблицыОбъекта = Найти(Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1), ".") + ПозицияВидаДоступа;
					ВидДоступа = Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1, ПозицияТаблицыОбъекта - ПозицияВидаДоступа - 1);
					ТаблицаОбъекта = Сред(ТекущаяСтрока, ПозицияТаблицыОбъекта + 1);
				КонецЕсли;
				Если Метаданные.НайтиПоПолномуИмени(Таблица) = Неопределено Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найдена таблица ""%1"".'"),
						Таблица);
				ИначеЕсли Право <> "Чтение"
				        И Право <> "Добавление"
				        И Право <> "Изменение"
				        И Право <> "Удаление" Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найдено право ""%1"".'"),
						Право);
				ИначеЕсли ВРег(ВидДоступа) = ВРег("Объект") Тогда
					Если Метаданные.НайтиПоПолномуИмени(ТаблицаОбъекта) = Неопределено Тогда
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не найдена таблица объекта ""%1"".'"),
							ТаблицаОбъекта);
					КонецЕсли;
				ИначеЕсли ПредопределенныеВидыДоступа.Получить(ВидДоступа) = Неопределено Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найден вид доступа ""%1"".'"),
						ВидДоступа);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПояснениеОшибки) Тогда
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в строке описания вида ограничений права объекта метаданных:
						           |""%1"".
						           |
						           |'"), ТекущаяСтрока) + ПояснениеОшибки);
			Иначе
				НовоеОписание = ВидыДоступаПрав.Добавить();
				НовоеОписание.Таблица        = Таблица;
				НовоеОписание.Право          = Право;
				НовоеОписание.ВидДоступа     = ПредопределенныеВидыДоступа.Получить(ВидДоступа);
				НовоеОписание.ТаблицаОбъекта = ТаблицаОбъекта;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДоступаПрав;
	
КонецФункции

// Только для внутреннего использования.
Функция ОписанияНачальногоЗаполненияПрофилейГруппДоступа() Экспорт
	
	ОписанияПрофилей = УправлениеДоступомПереопределяемый.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Удаление из описаний профилей роли, содержащие права, недоступные разделенным пользователям
		НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРолиПоТипуПользователя(
			Перечисления.ТипыПользователей.ПользовательОбластиДанных);
			
		Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
			
			КоличествоРолей = ОписаниеПрофиля.Роли.Количество();
			Для Счетчик = 0 По КоличествоРолей - 1 Цикл
				Индекс = КоличествоРолей - Счетчик - 1;
				Роль = Метаданные.Роли[ОписаниеПрофиля.Роли[Индекс]];
				
				Если НедоступныеРоли.Получить(Роль) <> Неопределено Тогда
					ОписаниеПрофиля.Роли.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Описание для заполнения предопределенного профиля "Администратор".
	ОписаниеПрофиляАдминистратор = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиляАдминистратор.Идентификатор = Строка(Справочники.ПрофилиГруппДоступа.Администратор.УникальныйИдентификатор());
	ОписаниеПрофиляАдминистратор.Наименование  = "Администратор";
	ОписаниеПрофиляАдминистратор.Роли.Добавить("ПолныеПрава");
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ИмяРолиАдминистратораСистемы = Пользователи.РольАдминистратораСистемы().Имя;
		Если ОписаниеПрофиляАдминистратор.Роли.Найти(ИмяРолиАдминистратораСистемы) = Неопределено Тогда
			ОписаниеПрофиляАдминистратор.Роли.Добавить(ИмяРолиАдминистратораСистемы);
		КонецЕсли;
	КонецЕсли;
	ОписаниеПрофиляАдминистратор.Описание = НСтр(
	"ru = 'Предназначен для
	      |- настройки параметров работы и обслуживания информационной системы,
	      |- настройки прав доступа других пользователей,
	      |- удаления помеченных объектов,
	      |- в редких случаях для внесения изменений в конфигурацию.
	      |
	      |Рекомендуется не использовать для ""обычной"" работы в информационной системе.
	      |'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиляАдминистратор);
	
	Возврат ОписанияПрофилей;
	
КонецФункции

// Возвращает строковый ключ сеанса.
Функция КлючСеанса() Экспорт
	
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	НачалоСеанса = Неопределено;
	Для каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если Сеанс.НомерСеанса = НомерСеансаИнформационнойБазы() Тогда
			НачалоСеанса = Сеанс.НачалоСеанса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НачалоСеанса = Неопределено Тогда
		ВызватьИсключение(НСтр("ru = 'Не найден текущий сеанс информационной базы'"));
	КонецЕсли;
	
	Возврат Формат(НачалоСеанса, "ДФ='yyyy.MM.dd ЧЧ:мм:сс'; ДП=") + " (" + Формат(НомерСеанса, "ЧГ=") + ")";
	
КонецФункции

// Возвращает массив пустых ссылок всех типов конфигурации.
Функция ВсеПустыеСсылки() Экспорт
	
	ВсеПустыеСсылки = Новый Массив;
	Для каждого ТипЗначения Из Метаданные.Справочники.ПрофилиГруппДоступа.ТабличныеЧасти.ТипыСсылок.Реквизиты.ТипТаблицы.Тип.Типы() Цикл
		ВсеПустыеСсылки.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя()).ПустаяСсылка());
	КонецЦикла;
	
	Возврат ВсеПустыеСсылки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, ИмяПоля, ИменаПолей, ОбъектИБ)

	Попытка
		Если ОбъектИБ = Неопределено Тогда
			ПараметрыДоступа("Чтение", ОбъектМетаданных, ИмяПоля, Метаданные.Роли.ПолныеПрава);
		Иначе
			ОбъектИБ.ПараметрыДоступа("Чтение", ОбъектМетаданных, ИмяПоля, ОбъектИБ.Метаданные.Роли.ПолныеПрава);
		КонецЕсли;
		ИменаПолей.Добавить(ИмяПоля);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
