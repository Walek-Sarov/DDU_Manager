////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Переопределяемые процедуры и функции для интеграции между собой подсистем библиотеки БСП.
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

/////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	// СтандартныеПодсистемы.ОбменДанными
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиВключен",                           "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Обработчики.Вставить("ОграничиватьДоступПоВиду*",               "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ВидыДоступа*",                            "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ДобавлятьРуководителямДоступПодчиненных", "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Пользователи
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Обработчики.Вставить("ТекущийЗамерВремени", "ОценкаПроизводительностиВызовСервера.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки.
//
// Здесь в алфавитном порядке размещаются только процедуры-обработчики обновления 
// библиотечных подсистем, которые используются в данной конфигурации. 
// Процедуры-обработчики обновления самой конфигурации следует размещать в функции 
// ОбработчикиОбновления общего модуля ОбновлениеИнформационнойБазыПереопределяемый.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
//
Функция ОбработчикиОбновленияСтандартныхПодсистем() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныйКлассификатор.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	СтандартныеПодсистемыСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	БизнесПроцессыИЗадачиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ВариантыОтчетов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.Валюты
	РаботаСКурсамиВалют.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзмененияСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	КалендарныеГрафики.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	ОбменСообщениямиВнутренний.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурации.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	ОбновлениеИнформационнойБазыВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.ПолнотекстовыйПоиск
	ПолнотекстовыйПоискСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ПолучениеФайловИзИнтернета.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	ЭлектроннаяПочта.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ФайловыеФункции
	ФайловыеФункцииСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РегламентныеЗаданияСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОчередьЗаданий.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступомВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
	// СтандартныеПодсистемы.ФизическиеЛица
	ФизическиеЛица.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
	// СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	ЭлектроннаяЦифроваяПодпись.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	КурсыВалютВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Массив.Добавить(Метаданные.РегистрыСведений.ИсполнителиЗадач.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ДанныеБизнесПроцессов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Валюты
	Массив.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	Массив.Добавить(Метаданные.РегистрыСведений.ИсточникиВнешнихЗадач.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Пользователи
	Массив.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Массив.Добавить(Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Массив.Добавить(Метаданные.РегистрыСведений.СвязиПоставляемыхДанных.ПолноеИмя());
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталоге.ПолноеИмя());
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	Массив.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Массив.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗависимостиПравДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗначенияГруппДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ПодчиненныеПользователи.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ТаблицыГруппДоступа.ПолноеИмя());
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ФизическиеЛица
	Массив.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
	Возврат Массив;
	
КонецФункции

// Возвращает флаг доступности подсистемы ПолучениеФайловИзИнтернета.
//
// ВозвращаемоеЗначение - Булево - 
//  Истина - подсистема доступна, любое другое значение - подсистемв
//  не доступна
//
Процедура ДоступноПолучениеФайловИзИнтернета(ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = Истина;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//   ВозвращаемоеЗначение - (выходной параметр)
//     Структура, со свойствами
//       Статус - Булево - ключ присутствует в структуре всегда, значения
//                         Истина - вызов функции успешно завершен
//                         Ложь   - вызов функции завершен неудачно
//       Путь   - Строка - путь к файлу на сервере, ключ используется только
//                         если статус Истина
//       СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Процедура СкачатьФайлНаСервере(Знач Адрес, Знач ПараметрыПолучения, ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	// СтандартныеПодсистемы.АнализЖурналаРегистрации
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.0.1",
		"Подсистема.СтандартныеПодсистемы.Подсистема.КонтрольЖурналаРегистрации",
		"Подсистема.СтандартныеПодсистемы.Подсистема.АнализЖурналаРегистрации",
		Библиотека);
	// Конец СтандартныеПодсистемы.АнализЖурналаРегистрации
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.0.1.2",
		"Роль.ДобавлениеИзменениеОбщихПоставляемыхДанных",
		"Роль.ДобавлениеИзменениеОбщейБазовойНСИ",
		Библиотека);
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.0.2", "Роль.ЧтениеВариантовОтчетов", "Роль.ИспользованиеВариантовОтчетов", Библиотека);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", СсылкаНаПредмет.Наименование, ПредставлениеОбъекта);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.Встреча") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
		
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", СсылкаНаПредмет.Тема, ПредставлениеОбъекта);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
КонецПроцедуры

// Функция создает таблицу соответствия разделенных типов данных общим данным
//
// Возвращаемое значение:
// ТаблицаЗначений - соответствия типов данных
//
Функция ТаблицаСоответствияРазделенныхДанныхОбщим() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("ВидПоставляемыхДанных");
	ТаблицаЗначений.Колонки.Добавить("ТипОбщихДанных");
	ТаблицаЗначений.Колонки.Добавить("ТипРазделенныхДанных");
	ТаблицаЗначений.Колонки.Добавить("КопироватьВоВсеОбластиДанных");
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим(ТаблицаЗначений);
	ПоставляемыеДанныеПереопределяемый.ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим(ТаблицаЗначений);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Блокирует текущую область, начиная транзакцию и накладывая исключительную блокировку
// на все разделяемые объекты метаданных области.
//
// Параметры:
// ПроверитьОтсутствиеДругихСеансов - Булево - проверить отсутствие других
// пользовательских сеансов со значением разделителя равным текущему.
// В случае обнаружения других сеансов будет выдано исключение.
//
Процедура ЗаблокироватьТекущуюОбластьДанных(Знач ПроверитьОтсутствиеДругихСеансов = Истина) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	НачатьТранзакцию();
	РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных(ПроверитьОтсутствиеДругихСеансов);
	
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Снимает блокировки с текущей области, фиксируя (или, в случае ошибки, откатывая) транзакцию.
//
Процедура РазблокироватьТекущуюОбластьДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	// Если ИнформацияОбОшибке().Описание заполнено - код выполняется
	// из Исключение ...
	Если ПустаяСтрока(ИнформацияОбОшибке().Описание) Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОчередьЗаданий.ОбновитьРазделенныеРегламентныеЗадания();
	
	Если Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Получить() = 0 Тогда
		Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Установить(600);
	КонецЕсли;
	
	Если Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить() = 0 Тогда
		Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Установить(1);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.УдалитьЭлементыСправочникаСтраныМира();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервисаПереопределяемый.ПриВключенииРазделенияПоОбластямДанных();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Обмен данными РИБ

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	// Вставка кода от подсистемы обмена данными должна быть первой.
	ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриОтправкеПользователя(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	// Вставка кода от подсистемы обмена данными в модели сервиса должна быть последней.
	ОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	// При отправке данных главному обработчик не вызываем, 
	// т.к. ограничение миграции "снизу-вверх" в РИБ по умолчанию не предусмотрено.
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриОтправкеПользователя(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриПолученииПользователя(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриПолученииПользователя(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Разделение данных

// Устанавливает разделение сеанса.
//
// Параметры:
// Использование - Булево - Использование разделителя ОбластьДанных в сеансе
// ОбластьДанных - Число - Значение разделителя ОбластьДанных
//
Процедура УстановитьРазделениеСеанса(Знач Использование, Знач ОбластьДанных = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Использование, ОбластьДанных);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Возвращает значение разделителя текущей области данных.
// В случае если значение не установлено выдается ошибка.
// 
// Возвращаемое значение: 
// Тип значения разделителя.
// Значение разделителя текущей области данных. 
// 
Функция ЗначениеРазделителяСеанса() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Возврат РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

// Возвращает флаг использования разделителя ОбластьДанных для текущего сеанса.
// 
// Возвращаемое значение: 
// Булево - Истина разделение используется, иначе нет.
// 
Функция ИспользованиеРазделителяСеанса() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Возврат РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Поставляемые данные

// Процедура копирует список элементов общего справочника в новую область данных
//
// Параметры:
// СписокКодовСправочника - массив - массив кодов справочника
// ТипИсточника           - тип - тип общего справочника,
//                                откуда будут скопированы элементы
//
Процедура СкопироватьЭлементыСправочникаПоставляемыхДанных(СписокКодовСправочника, ТипИсточника) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.СкопироватьЭлементыСправочника(СписокКодовСправочника, ТипИсточника);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Считывает текущее состояние разделенного объекта и приводит форму
// в соответстие с ним
//
Процедура СчитатьФлагРучногоИзмененияПоставляемыхДанных(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.СчитатьФлагРучногоИзменения(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Записывает состояние разделенного объекта
//
Процедура ЗаписатьФлагРучногоИзменениеПоставляемыхДанных(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ЗаписатьФлагРучногоИзменение(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Копирует данные общего объекта в разделенный и изменяет
// состояние разделенного объекта
//
Процедура ВосстановитьЭлементИзОбщихДанных(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ВосстановитьЭлементИзОбщихДанных(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Версионирование программных интерфейсов

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПолучитьПоддерживаемыеВерсииПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДанными", МассивВерсий);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДаннымиВМоделиСервиса", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменСообщениями", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");	
	СтруктураПоддерживаемыхВерсий.Вставить("РезервноеКопированиеОбластейДанных", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
КонецПроцедуры

// СтандартныеПодсистемы.БизнесПроцессыИЗадачи

/////////////////////////////////////////////////////////////////////////////////
// Бизнес-процессы и задачи

// Возвращает адрес электронной почты пользователя Получатель для рассылки уведомлений о задачах.
//
// Параметры
//  Получатель  – СправочникСсылка.Пользователи
//  Адрес       - Строка – возвращаемый адрес электронной почты.
//
//
Процедура ПолучитьАдресЭлектроннойПочты(Знач Получатель, Адрес) Экспорт

	// СтандартныеПодсистемы.КонтактнаяИнформация
	Адрес = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(
		Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры 

// Возвращает Истина, если используется подсистема ВнешниеЗадачиИБизнесПроцессы
Функция ИспользоватьВнешниеЗадачиИБизнесПроцессы() Экспорт
	
	// СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	Возврат Истина;
	// Конец СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	Возврат Ложь;
	
КонецФункции

// Возвращает содержание переданного объекта для передачи в другую информационную систему.
//
// Параметры
//  ПредметЗадачи - объект, представление которого надо сформировать
//  Представление - Строка - содержание в виде HTML или MXL документа
//
Процедура ПолучитьПредставлениеПредметаВнешнейЗадачи(ПредметЗадачи, Представление) Экспорт
	
	// СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	Представление = ВнешниеЗадачиВызовСервера.ПолучитьПредставлениеПредметаВнешнейЗадачи(ПредметЗадачи);
	// Конец СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	
КонецПроцедуры

// Возвращает массив объектов типа ОписаниеПередаваемогоФайла или Неопределено.
//
// Параметры
//  ПредметЗадачи - объект, список файлов которого надо вернуть
//  СписокФайлов - Массив - список файлов предмета
//
Процедура ПолучитьСписокФайлов(ПредметЗадачи, СписокФайлов) Экспорт
	
	// СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	СписокФайлов = ВнешниеЗадачиВызовСервера.ПолучитьСписокФайлов(ПредметЗадачи);
	// Конец СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	
КонецПроцедуры

// Возвращает Истина, если задача является внешней. 
//
// Параметры
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция ЭтоВнешняяЗадача(ЗадачаСсылка) Экспорт
	
	// СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	Возврат ВнешниеЗадачиВызовСервера.ЭтоВнешняяЗадача(ЗадачаСсылка);
	// Конец СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	Возврат Ложь;
	
КонецФункции

// Помечает задачу-источник бизнес-процесса БизнесПроцесс как выполненную.
//
// Параметры
//  БизнесПроцесс - БизнесПроцессОбъект.Задание
//
Процедура ВыполнитьЗадачуИсточник(БизнесПроцесс) Экспорт
	
	// СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	ВнешниеЗадачиВызовСервера.ВыполнитьЗадачуИсточник(БизнесПроцесс);
	// Конец СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи


// СтандартныеПодсистемы.ВариантыОтчетов

/////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов

// Заменяет тип и ссылку внешнего отчета для дополнительных отчетов, подключенных
//   к хранилищу подсистемы.
//
// Параметры:
//   Результат (Структура) см. ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени()
//
Процедура ЗаменитьТипИСсылкуЕслиОтчетДополнительный(Результат) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДопОтчет.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчет
	|ГДЕ
	|	ДопОтчет.ИмяОбъекта = &ИмяОбъекта
	|	И ДопОтчет.ПометкаУдаления = ЛОЖЬ
	|	И ДопОтчет.ИспользуетХранилищеВариантов = ИСТИНА
	|	И ДопОтчет.Публикация = &Публикация";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбъекта", Результат.ОтчетИмя);
	Если ВариантыОтчетов.ПодключеныВсеОтчеты() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ДопОтчет.ИспользуетХранилищеВариантов = ИСТИНА", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	// Привелегированный режим необходим для целостности формируемых данных.
	// Права доступа будут применяться на этапе их использования.
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетНайден = Истина;
	
	Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			
			Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
				
				ОтчетНайден = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетНайден Тогда
		Результат.Отчет = Выборка.Ссылка;
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Дополнительный;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры // ЗаменитьТипИСсылкуЕслиОтчетДополнительный

// Дополняет массив ссылкам дополнительных отчетов, доступных текущему пользователю.
//
// Параметры:
//   Результат (Массив) из (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       Ссылки отчетов, доступных текущему пользователю.
//
Процедура ДобавитьДополнительныеОтчетыДоступныеТекущемуПользователю(Результат) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДопОтчеты.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчеты
		|ГДЕ
		|	ДопОтчеты.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет)
		|	И ДопОтчеты.ИспользуетХранилищеВариантов
		|	И НЕ ДопОтчеты.Ссылка В (&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", Результат);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры // ДополнитьОтчетыТекущегоПользователя

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма (УправляемаяФорма)
//   Остальные параметры передаются из параметров обработчика "как есть",
//       см. события для "УправляемаяФорма" в справке.
//
Процедура ФормаОтчетаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РассылкаОтчетов
	РассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.РассылкаОтчетов
	
КонецПроцедуры

// Обновляет переименовывает роли в данных конфигурации.
//
Процедура ОбновитьПереименованныеРоли(ТаблицаПереименований) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ОбновитьПереименованныеРоли(ТаблицаПереименований)
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ДатыЗапретаИзменения

/////////////////////////////////////////////////////////////////////////////////
// Даты запрета изменения

// Позволяет пропустить проверку запретов по произвольному условию.
// Подробнее см. ДатыЗапретаИзмененияПереопределяемый.ПередПроверкойЗапретаИзменения.
//
Процедура ПередПроверкойЗапретаИзменения(Объект, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСобытия.ПередПроверкойЗапретаИзменения(Объект, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

// СтандартныеПодсистемы.Валюты

/////////////////////////////////////////////////////////////////////////////////
// Валюты

// Обновляет связи между справочником валют и файлом поставляемых курсов
// в зависимости от флажка ЗагружаетсяИзИнтернета
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты
//
Функция ОбновитьКурсыВалютВМоделиСервиса(Валюта) Экспорт

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	КурсыВалютВМоделиСервиса.ЗапланироватьКопированиеКурсовВалюты(Валюта);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса

КонецФункции

// Конец СтандартныеПодсистемы.Валюты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

/////////////////////////////////////////////////////////////////////////////////
// Дополнительные отчеты и обработки

// Обновляет варианты дополнительного отчета при его записи.
//
// Параметры:
//   ТекущийОбъект (*) См. Источник подписки ОбработкаВариантовДополнительногоОтчета.
//   Отказ (Булево)
//
Процедура ОбработкаВариантовДополнительногоОтчета(ТекущийОбъект, Отказ) Экспорт
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	
	Если Отказ ИЛИ ТекущийОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийОбъект.Вид <> Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		И ТекущийОбъект.Вид <> Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Возврат;
	КонецЕслИ;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ВариантыОтчетов) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав доступа для записи вариантов дополнительного отчета ""%1"".'"),
			ТекущийОбъект.Наименование
		);
		ВариантыОтчетов.ОшибкаПоВарианту(ТекущийОбъект.Ссылка, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ВнешнийОбъект = ВнешниеОтчеты.Создать(ТекущийОбъект.ИмяОбъекта);
	Иначе
		ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ПометкаУдаления = ТекущийОбъект.ПометкаУдаления;
	Если НЕ ТекущийОбъект.ИспользуетХранилищеВариантов
		ИЛИ ТекущийОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена
		ИЛИ ТекущийОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки Тогда
		ПометкаУдаления = Истина;
	КонецЕсли;
	
	ПредопределенныеВарианты = Новый СписокЗначений;
	Если ТекущийОбъект.ИспользуетХранилищеВариантов Тогда
		ОтчетМетаданные = ВнешнийОбъект.Метаданные();
		СхемаКДМетаданные = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
		Если СхемаКДМетаданные <> Неопределено Тогда
			СхемаКД = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
			Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
				ПредопределенныеВарианты.Добавить(ВариантНастроекКД.Имя, ВариантНастроекКД.Представление);
			КонецЦикла;
		Иначе
			ПредопределенныеВарианты.Добавить("", ОтчетМетаданные.Представление());
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Пользовательский,
	|	ВариантыОтчетов.ПометкаУдаления,
	|	ВариантыОтчетов.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет",           ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.Текст = ТекстЗапроса;
	
	// Установить пометки удаления существующих
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометкаУдаленияВарианта = ПометкаУдаления;
		ЭлементСписка = ПредопределенныеВарианты.НайтиПоЗначению(Выборка.КлючВарианта);
		Если НЕ ПометкаУдаленияВарианта И НЕ Выборка.Пользовательский И ЭлементСписка = Неопределено Тогда
			// Предопределенный вариант, который не найден в списке предопределенных для данного отчета
			ПометкаУдаленияВарианта = Истина;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления <> ПометкаУдаленияВарианта Тогда
			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.УстановитьПометкуУдаления(ПометкаУдаленияВарианта);
		КонецЕсли;
		
		Если ЭлементСписка <> Неопределено Тогда
			ПредопределенныеВарианты.Удалить(ЭлементСписка);
			Если Выборка.Наименование <> ЭлементСписка.Представление Тогда
				ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ВариантОбъект.Наименование = ЭлементСписка.Представление;
				ВариантОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПометкаУдаления Тогда
		// Зарегистрировать новые
		Для Каждого ЭлементСписка Из ПредопределенныеВарианты Цикл
			ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.Отчет                = ТекущийОбъект.Ссылка;
			ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Дополнительный;
			ВариантОбъект.КлючВарианта         = ЭлементСписка.Значение;
			ВариантОбъект.Наименование         = ЭлементСписка.Представление;
			ВариантОбъект.Пользовательский     = Ложь;
			ВариантОбъект.ВидимостьПоУмолчанию = Истина;
			ВариантОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры // ОбработкаВариантовДополнительногоОтчета

// Обработчик, вызываемый при записи регламентного задания по выполнению дополнительной обработки.
//
// Параметры:
// РегламентноеЗадание - РегламентноеЗадание - записываемое регламентное задание.
// Использование - Булево - флаг использования задания.
//
Процедура ПриЗаписиЗаданияДополнительнойОбработки(РегламентноеЗадание, Использование) Экспорт

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	ДополнительныеОтчетыИОбработкиВМоделиСервиса.УточнитьПараметрыЗаданияВОчереди(РегламентноеЗадание, Использование);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	
КонецПроцедуры

// Формирует ссылку варианта дополнительного отчета.
// 
// Параметры:
//   Отчет (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//   КлючВарианта (Строка)
//   Результат (*) См. описание вызываемых процедур и функций.
// 
Процедура СсылкаВариантаДополнительногоОтчета(Отчет, КлючВарианта, Результат) Экспорт
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	Результат = ВариантыОтчетов.ПолучитьСсылку(Отчет, КлючВарианта);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


// СтандартныеПодсистемы.ЗавершениеРаботыПользователей

/////////////////////////////////////////////////////////////////////////////////
// Завершение работы пользователей

// Вызывается при отключении сеанса на стороне сервера 1С:Предприятия.
//
// Параметры
//  НомерСеанса - Число - номер сеанса для отключения.
//  Результат - Булево – результат отключения сеанса.
//  СообщениеОбОшибке - Строка - в этом параметре возвращается текст сообщения об ошибке в случае неудачи.
//  СтандартнаяОбработка - Булево - вернуть Ложь, если необходимо запретить стандартную обработку отключения сеанса.
//
Процедура ПриОтключенииСеанса(НомерСеанса, Результат, СообщениеОбОшибке, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
		Возврат;
	КонецЕсли;	
		
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;	
	
	// Если сервер работает не под управлением ОС Microsoft Windows, то передаем управление Агенту сервиса.
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	Параметры = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
	Попытка
		Результат = РаботаВМоделиСервиса.УдалитьСеансыИРазорватьСоединенияЧерезАгентСервиса(НомерСеанса, Параметры);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей


// СтандартныеПодсистемы.ЗащитаПерсональныхДанных

/////////////////////////////////////////////////////////////////////////////////
// Защита персональных данных

// Процедура обеспечивает сбор сведений о хранении данных, 
// относящихся к персональным
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	
	
КонецПроцедуры

// Процедура обеспечивает составление коллекции областей персональных данных
//
// Параметры:
//		ОбластиПерсональныхДанных - таблица значений с полями:
//			Имя - идентификатор области данных
//			Представление - пользовательское представление области данных
//			Родитель - идентификатор родительской области данных
//
Процедура ЗаполнитьОбластиПерсональныхДанных(ОбластиПерсональныхДанных) Экспорт
	
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных


// СтандартныеПодсистемы.ИнформационныйЦентр

/////////////////////////////////////////////////////////////////////////////////
// Информационный центр

// Определяет заголовок общей формы "ИнформационныйЦентрРабочийСтол".
//
// Параметры:
//	ЗаголовокФормы - Строка - заголовок формы.
//
Процедура ОпределитьЗаголовокОсновнойФормыИнформационныйЦентр(ЗаголовокФормы) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПолученныйЗаголовок = РаботаВМоделиСервиса.ПолучитьИмяПриложения();
	Если Не ПустаяСтрока(ПолученныйЗаголовок) Тогда 
		ЗаголовокФормы = ПолученныйЗаголовок;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры	

// Отпаврляет сообщение пользователя.
//
// Параметры:
//	ПараметрыСообщения - Структура - параметры сообщения.
//	Результат - Булево - Истина, если сообщение отправлено, Ложь - Иначе.
//
Процедура ОтправитьСообщениеПользователяВТехподдержку(ПараметрыСообщения, Результат) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		ОбменСообщениями.ОтправитьСообщение("ИнформационныйЦентр\ОтправкаСообщения\Техподдержка",
						ПараметрыСообщения,
						РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
		ЗафиксироватьТранзакцию();
		Результат = Истина;
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		Возврат;
	КонецПопытки;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры	

// Конец СтандартныеПодсистемы.ИнформационныйЦентр


// СтандартныеПодсистемы.КалендарныеГрафики

/////////////////////////////////////////////////////////////////////////////////
// Календарные графики

// Процедура выполняет необходимые действия перед записью набора записей 
// регистра сведений ДанныеПроизводственногоКалендаря.
// В частности, формирует в переданном объекте Запрос временную таблицу 
// ВТ_СтарыеКлючи, содержащую данные набора записей 
//
// Параметры:
// Запрос - объект запрос, в менеджере временных таблиц которого формируется таблица данных регистра
// НаборЗаписей - набор записей регистра сведений
//
Процедура ДанныеПроизводственногоКалендаряПередЗаписьюНабораЗаписей(Отказ, Замещение, НаборЗаписей, Запрос) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.СформироватьВременнуюТаблицуДанныхНабораЗаписей(Запрос, НаборЗаписей, "ПроизводственныйКалендарь, Дата, Год"); 
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Процедура выполняет необходимые действия при записи набора записей 
// регистра сведений ДанныеПроизводственногоКалендаря.
// В частности, регистрирует изменения данных набора записей регистра сведений 
// в плане обмена "Поставляемые данные".
//
// Параметры:
// Запрос - объект запрос, в менеджере временных таблиц которого сформирована временная таблица данных регистра до изменения
// НаборЗаписей - набор записей регистра сведений
//
Процедура ДанныеПроизводственногоКалендаряПриЗаписиНабораЗаписей(Отказ, Замещение, НаборЗаписей, Запрос) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ЗарегистрироватьИзмененияДанныхНабораЗаписей(Запрос, НаборЗаписей, "ПроизводственныйКалендарь", "ПроизводственныйКалендарь, Дата, Год"); 
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КалендарныеГрафики


// СтандартныеПодсистемы.ОбменДанными

/////////////////////////////////////////////////////////////////////////////////
// Обмен данными

// Обработчик при выгрузке данных.
// Используется для переопределения стандартной обработки выгрузки данных.
// В данном обработчике должна быть реализована логика выгрузки данных:
// выборка данных для выгрузки, сериализация данных в файл сообщения или сериализация данных в поток.
// После выполнения обработчика выгруженные данные будут отправлены получателю подсистемой обмена данными.
// Формат сообщения для выгрузки может быть произвольным.
// В случае ошибок при отправке данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной (системной) обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Получатель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется выгрузка данных.
//
// ИмяФайлаСообщения (только для чтения). Тип: Строка.
// Имя файла, в который необходимо выполнить выгрузку данных. Если этот параметр заполнен, то система ожидает,
// что данные будут выгружены в файл. После выгрузки система выполнит отправку данных из этого файла.
// Если параметр пустой, то система ожидает, что данные будут выгружены в параметр ДанныеСообщения.
//
// ДанныеСообщения. Тип: Произвольный.
// Если параметр ИмяФайлаСообщения пустой, то система ожидает, что данные будут выгружены в этот параметр.
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые помещаются в сообщение в рамках одной транзакции базы данных.
// При необходимости в обработчике следует реализовать логику установки транзакционных блокировок на выгружаемые данные.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации 
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоОтправленныхОбъектов. Тип: Число.
// Счетчик отправленных объектов. Используется для определения количества отправленных объектов
// для последующей фиксации в протоколе обмена.
//
Процедура ПриВыгрузкеДанных(СтандартнаяОбработка,
								Получатель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов
	) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	ОбменСообщениямиВнутренний.ПриВыгрузкеДанных(СтандартнаяОбработка,
								Получатель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов
	);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
КонецПроцедуры

// Обработчик при загрузке данных.
// Используется для переопределения стандартной обработки загрузки данных.
// В данном обработчике должна быть реализована логика загрузки данных:
// необходимые проверки перед загрузкой данных, сериализация данных из файла сообщения или сериализация данных из потока.
// Формат сообщения для загрузки может быть произвольным.
// В случае ошибок при получении данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной (системной) обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
// Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Отправитель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется загрузка данных.
//
// ИмяФайлаСообщения (только для чтения). Тип: Строка.
// Имя файла, из которого требуется выполнить загрузку данных. Если параметр не заполнен, то данные для загрузки
// передаются через параметр ДанныеСообщения.
//
// ДанныеСообщения. Тип: Произвольный.
// Параметр содержит данные, которые необходимо загрузить. Если параметр ИмяФайлаСообщения пустой,
// то данные для загрузки передаются через этот параметр.
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые читаются из сообщения и записываются в базу данных
// в рамках одной транзакции. При необходимости в обработчике следует реализовать логику записи данных в транзакции.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоПолученныхОбъектов. Тип: Число.
// Счетчик полученных объектов. Используется для определения количества загруженных объектов
// для последующей фиксации в протоколе обмена.
//
Процедура ПриЗагрузкеДанных(СтандартнаяОбработка,
								Отправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов
	) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	ОбменСообщениямиВнутренний.ПриЗагрузкеДанных(СтандартнаяОбработка,
								Отправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов
	);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбменДанными


// СтандартныеПодсистемы.ОбновлениеВерсииИБ

/////////////////////////////////////////////////////////////////////////////////
// Обновление версии ИБ

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ПередОбновлениемИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// Подробнее см. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ, 
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ПослеОбновленияИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ


// СтандартныеПодсистемы.ОбновлениеКонфигурации

/////////////////////////////////////////////////////////////////////////////////
// Обновление конфигурации

// Вызывается при выполнении скрипта обновления из процедуры ОбновлениеКонфигурации.ЗавершитьОбновление().
Процедура ПослеЗавершенияОбновления() Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации


// СтандартныеПодсистемы.Печать

/////////////////////////////////////////////////////////////////////////////////
// Печать

// Присоединяет файл печатной формы к объекту.
// Вызывается из общей формы ПечатьДокументов.
//
// Параметры:
//  СсылкаНаОбъект            - ЛюбаяСсылка - объект, к которому надо присоединить файл печатной формы;
//  ИмяФайла                  - Строка      - имя присоединяемого файла с расширением;
//  АдресВоВременномХранилище - Строка      - адрес двоичных данных файла во временном хранилище.
//
Процедура ПриПрисоединенииПечатнойФормыКОбъекту(СсылкаНаОбъект, ИмяФайла, АдресВоВременномХранилище) Экспорт
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаОбъект, ИмяФайла, , , , АдресВоВременномХранилище, , НСтр("ru = 'Печатная форма'"));
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Определяет возможность сохранения печатной формы при объекте.
// Вызывается из общей формы СохранениеПечатнойФормы.
//
// Параметры:
//  СсылкаНаОбъект    - ЛюбаяСсылка - объект, к которому надо присоединить файл печатной формы;
//  МожноПрисоединять - Булево - (возвращаемый) признак возможности присоединения файлов к объекту.
//
Процедура ПриПроверкеВозможностиПрисоединенияФайловКОбъекту(СсылкаНаОбъект, МожноПрисоединять) Экспорт
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	МожноПрисоединять = ПрисоединенныеФайлы.КОбъектуМожноПрисоединятьФайлы(СсылкаНаОбъект);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//  ВнешниеПечатныеФормы - СписокЗначений:
//                                         Значение      - Строка - идентификатор печатной формы;
//                                         Представление - Строка - название печатной формы.
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить список печатных форм.
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать


// СтандартныеПодсистемы.Пользователи

/////////////////////////////////////////////////////////////////////////////////
// Пользователи

// Обработчики записи администратора.

// Переопределяет текст вопроса перед записью первого администратора.
//  Вызывается из обработчика ПередЗаписью формы пользователя.
//  Вызов выполняется если установлен ЗапретРедактированияРолей() и
// количество пользователей информационной базы равно нулю.
// 
Процедура ТекстВопросаПередЗаписьюПервогоАдминистратора(ТекстВопроса) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	ТекстВопроса = НСтр("ru = 'В список пользователей программы добавляется первый пользователь, 
		|поэтому он будет автоматически включен в группу доступа Администраторы. 
		|Продолжить?'")
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Доопределяет действия при записи пользователя, когда он записывается
// совместно с пользователем ИБ, у которого есть роль ПолныеПрава.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи (изменение объекта запрещено).
//
Процедура ПриЗаписиАдминистратора(Пользователь) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	
	// Администраторы автоматически добавляются в группу доступа Администраторы.
	Объект = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
	Если Объект.Пользователи.Найти(Пользователь, "Пользователь") = Неопределено Тогда
		Объект.Пользователи.Добавить().Пользователь = Пользователь;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Переопределяет текст комментария при авторизации пользователя ИБ,
// созданного в конфигураторе с административными правами.
//  Вызывается из Пользователи.АвторизоватьТекущегоПользователя().
//  Комментарий записывается в журнал регистрации.
// 
// Параметры:
//  Комментарий  - Строка - начальное значение задано.
//
Процедура ПослеЗаписиАдминистратораПриАвторизации(Комментарий) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Комментарий = НСтр("ru = 'Обнаружено, что пользователь информационной базы
	                         |с ролью ""Полные права"" был создан в Конфигураторе:
	                         |
	                         |- пользователь не найден в справочнике Пользователи,
	                         |- пользователь зарегистрирован в справочнике Пользователи,
	                         |- пользователь добавлен в группу доступа Администраторы.
	                         |
	                         |Пользователей информационной базы следует создавать в режиме 1С:Предприятия.'");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Переопределяет действие перед авторизацией пользователя,
// выполняемой при начале работы системы (в процессе получения
// параметров работы клиента при запуске).
//
// Можно заполнить состав пользователей и выполнить перезапуск.
// 
// Требуется, например, при настройке автономного рабочего места.
// 
// Параметры:
//  Перезапустить - Булево, начальное значение Ложь. Если указать
//                  Истина, тогда работа системы будет прекращена.
//
//  ДополнительныеПараметрыКомаднойСтроки - Строка, которая может
//                  быть заполнена для передачи во второй параметр
//                  метода ПрекратитьРаботуСистемы.
//
Процедура ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(
		Перезапустить, ДополнительныеПараметрыКомаднойСтроки) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	Если АвтономнаяРаботаСлужебный.НеобходимоВыполнитьНастройкуАвтономногоРабочегоМестаПриПервомЗапуске() Тогда
		АвтономнаяРаботаВызовСервераСлужебный.ВыполнитьНастройкуАвтономногоРабочегоМестаПриПервомЗапуске();
		Перезапустить = Истина;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Для поддержки работы в модели сервиса.

// Обработчик, вызываемый перед записью пользователя.
//
// Параметры:
// ПользовательОбъект - СправочникОбъект.Пользователи - записываемый пользователь
//
Процедура ПередЗаписьюПользователя(ПользовательОбъект) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиВМоделиСервиса.ПередЗаписьюПользователя(ПользовательОбъект);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Обработчик, вызываемый при записи пользователя.
//
// Параметры:
// ПользовательОбъект         - СправочникОбъект.Пользователи - записываемый пользователь
// ОписаниеПользователя       - Объект XDTO: {"http://www.1c.ru/SaaS/1.0/XMLSchema/ManageApplication"}UserInfo -
//                              описание пользователя менеджера сервиса
// ПользовательСуществует     - Булево - пользователь существовал до начала транзакции записи
// ДоступРазрешен             - Булево - после записи пользователя, доступ к ИБ должен быть разрешен
// СоздатьПользователяСервиса - Булево - требуется создать нового пользователя сервиса
//
Процедура ПриЗаписиПользователя(ПользовательОбъект,
                                ОписаниеПользователя,
                                ПользовательСуществует,
                                ДоступРазрешен,
                                СоздатьПользователяСервиса) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиВМоделиСервиса.ПриЗаписиПользователя(
		ПользовательОбъект,
		ОписаниеПользователя,
		ПользовательСуществует, 
		ДоступРазрешен,
		СоздатьПользователяСервиса);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Обработчик, вызываемый при получении формы справочника Пользователи
//
// Параметры:
//  См. параметры платформенного обработчика ОбработкаПолученияФормы
//
Процедура ОбработкаПолученияФормыПользователя(ВидФормы,
                                              Параметры,
                                              ВыбраннаяФорма,
                                              ДополнительнаяИнформация,
                                              СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиВМоделиСервиса.ОбработкаПолученияФормыПользователя(
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Проверяет содержится ли пользователь ИБ с заданным идентификатором
// в списке неразделенных пользователей.
//
// Параметры:
// ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор
// пользователя ИБ принадлежность которого к неразделенным пользователям
// требуется проверить.
//
Функция ЭтоНеразделенныйПользовательИБ(Знач ИдентификаторПользователяИБ) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат ПользователиВМоделиСервиса.ЭтоНеразделенныйПользовательИБ(ИдентификаторПользователяИБ);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
	Возврат Ложь;
	
КонецФункции

// При работе в модели сервиса, заносит текущего пользователя в список неразделенных,
// если у него не установлено использование разделителей.
//
Процедура ЗарегистрироватьНеразделенногоПользователя() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	ПользователиВМоделиСервиса.ЗарегистрироватьНеразделенногоПользователя();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
КонецПроцедуры

// Возвращает флаг доступности действий изменения пользователей.
//
// Возвращаемое значение:
// Булево - Истина, если изменение пользователей доступно, иначе Ложь.
//
Функция ДоступноИзменениеПользователей() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат ПользователиВМоделиСервиса.ДоступноИзменениеПользователей();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
	Возврат Истина;
	
КонецФункции

// Конец СтандартныеПодсистемы.Пользователи


// СтандартныеПодсистемы.РаботаВМоделиСервиса

/////////////////////////////////////////////////////////////////////////////////
// Работа в модели сервиса

// Формирует список имен неразделенных регистров сведений, хранящих разделенные данные.
// 
// Параметры:
// ОбщиеРегистры - Массив - массив строк.
// 
Процедура ПолучитьОбщиеРегистрыСведенийСРазделеннымиДанными(Знач ОбщиеРегистры) Экспорт
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбщиеРегистры.Добавить("ВерсииПодсистем");
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОбщиеРегистры.Добавить("ОчередьЗаданий");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ОбщиеРегистры.Добавить("СвязиПоставляемыхДанных");
	ОбщиеРегистры.Добавить("ОбластиДляОбновленияПоставляемыхДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Формирует список типов данных которые не могут быть скопированы между областями
// 
// Параметры:
// ОбщиеРегистры - Массив - массив типов.
// 
Процедура ПолучитьНезагружаемыеВОбластиДанныхТипы(Знач Типы) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Для каждого СтрокаСоответствия Из ОбщегоНазначения.ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(СтрокаСоответствия.ТипОбщихДанных);
		Если Справочники.ТипВсеСсылки().СодержитТип(СтрокаСоответствия.ТипОбщихДанных) Тогда
			Типы.Добавить(Тип("СправочникОбъект." + МетаданныеТипа.Имя));
		Иначе // Регистр сведений
			Типы.Добавить(Тип("РегистрСведенийНаборЗаписей." + МетаданныеТипа.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.СвязиПоставляемыхДанных"));
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.ОбластиДляОбновленияПоставляемыхДанных"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.Пользователи
	Типы.Добавить(Тип("СправочникОбъект.ВнешниеПользователи"));
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.ОчередьЗаданий"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	Типы.Добавить(Тип("СправочникОбъект.ДополнительныеОтчетыИОбработки"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	
КонецПроцедуры

// Формирует список типов данных которые не должны передаваться между
// информационными базам.
// 
// Параметры:
// ОбщиеРегистры - Массив - массив типов.
// 
Процедура ПолучитьНевыгружаемыеИзИнформационнойБазыТипы(Знач Типы) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.АдресныеСокращения"));
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.АдресныйКлассификатор"));
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.СвязиПоставляемыхДанных"));
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.ОбластиДляОбновленияПоставляемыхДанных"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Вызывается при удалении области данных.
// В процедуре необходимо удалить данные области данных, которые не
// могут быть удалены стандартным механизмом
//
// Параметры:
// ОбластьДанных - Тип значения разделителя - значение разделителя
// удаляемой области данных.
// 
Процедура ПриУдаленииОбластиДанных(Знач ОбластьДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ПриУдаленииОбластиДанных(ОбластьДанных);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПолучитьТаблицуПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьРазделениеПоОбластямДанных");
		
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "РежимИспользованияИнформационнойБазы");
		
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "КопироватьОбластиДанныхИзЭталонной");
	КонецЕсли;
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ВнутреннийАдресМенеджераСервиса");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяМенеджераСервиса");
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.ЗапретЧтения = Истина;
	
	// Для совместимости с предыдущими версиями
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ВнутреннийАдресМенеджераСервиса");
	СтрокаПараметра.Имя = "URLСервиса";
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.Имя = "ИмяСлужебногоПользователяСервиса";
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.Имя = "ПарольСлужебногоПользователяСервиса";
	СтрокаПараметра.ЗапретЧтения = Истина;
	// Конец Для совместимости с предыдущими версиями
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ВерсияКонфигурации";
	СтрокаПараметра.Описание = НСтр("ru = 'Версия конфигурации'");
	СтрокаПараметра.ЗапретЗаписи = Истина;
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресСервисаПоставляемыхДанных");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяСервисаПоставляемыхДанных");
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, 
		"ПарольСлужебногоПользователяСервисаПоставляемыхДанных");
	СтрокаПараметра.ЗапретЧтения = Истина;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "СообщениеБлокировкиПриОбновленииКонфигурации");
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	// (для совместимости с предыдущими версиями)
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресВебСервисаОбменаДанными");
	СтрокаПараметра.Имя = "URLСервисаОбмена";
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается перед попыткой получения значений параметров ИБ из одноименных
// констант.
//
// Параметры:
// ИменаПараметров - Массив строк - имена параметров, значения которых необходимо получить.
// В случае если значение параметра получается в данной процедуре, необходимо удалить
// имя обработанного параметра из массива.
// ЗначенияПараметров - Структура - значения параметров.
//
Процедура ПриПолученииЗначенийПараметровИБ(Знач ИменаПараметров, Знач ЗначенияПараметров) Экспорт
	
	// ВерсияКонфигурации
	Индекс = ИменаПараметров.Найти("ВерсияКонфигурации");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("ВерсияКонфигурации", Метаданные.Версия);
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// URLСервиса
	Индекс = ИменаПараметров.Найти("URLСервиса");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("URLСервиса", Константы.ВнутреннийАдресМенеджераСервиса.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// ИмяСлужебногоПользователяСервиса
	Индекс = ИменаПараметров.Найти("ИмяСлужебногоПользователяСервиса");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("ИмяСлужебногоПользователяСервиса", Константы.ИмяСлужебногоПользователяМенеджераСервиса.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// URLСервисаОбмена
	Индекс = ИменаПараметров.Найти("URLСервисаОбмена");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("URLСервисаОбмена", Константы.АдресВебСервисаОбменаДанными.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается перед попыткой записи значений параметров ИБ в одноименные
// константы.
//
// Параметры:
// ЗначенияПараметров - Структура - значения параметров которые требуется установить.
// В случае если значение параметра устанавливается в данной процедуре из структуры
// необходимо удалить соответствующую пару КлючИЗначение
//
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	Если ЗначенияПараметров.Свойство("URLСервиса") Тогда
		Константы.ВнутреннийАдресМенеджераСервиса.Установить(ЗначенияПараметров.URLСервиса);
		ЗначенияПараметров.Удалить("URLСервиса");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ИмяСлужебногоПользователяСервиса") Тогда
		Константы.ИмяСлужебногоПользователяМенеджераСервиса.Установить(ЗначенияПараметров.ИмяСлужебногоПользователяСервиса);
		ЗначенияПараметров.Удалить("ИмяСлужебногоПользователяСервиса");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ПарольСлужебногоПользователяСервиса") Тогда
		Константы.ПарольСлужебногоПользователяМенеджераСервиса.Установить(ЗначенияПараметров.ПарольСлужебногоПользователяСервиса);
		ЗначенияПараметров.Удалить("ПарольСлужебногоПользователяСервиса");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	Если ЗначенияПараметров.Свойство("URLСервисаОбмена") Тогда
		Константы.АдресВебСервисаОбменаДанными.Установить(ЗначенияПараметров.URLСервисаОбмена);
		ЗначенияПараметров.Удалить("URLСервисаОбмена");
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается после окончания загрузки данных из локальной версии
// в область данных сервиса или наооборот.
//
Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	//Создаем связи между разделенными и неразделенными валютами, копируем курсы
	КурсыВалютВМоделиСервиса.ОбновитьКурсыВалют();
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступом.ОбновитьПоставляемыеПрофилиИГруппыДоступа();
	УправлениеДоступомСлужебный.ОбновитьТаблицыРолейПрофилейГруппДоступа();
	УправлениеДоступомСлужебный.ОбновитьЗависимостиПравДоступа();
	УправлениеДоступомСлужебный.ОбновитьТаблицыПравПоЗначениямДоступа();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
КонецПроцедуры

// Дополнительные действия, выполняемые при изменении разделения сеанса.
//
Процедура ПриИзмененииОбластиДанных() Экспорт
	
	РаботаВМоделиСервиса.ОчиститьВсеПараметрыСеансаКромеРазделителей();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных

/////////////////////////////////////////////////////////////////////////////////
// Выгрузка и загрузка данных

// Обработчик, вызываемый для данных перед их записью в файл при выгрузке областей.
//
// Параметры:
// ЭлементДанных - КонстантаМенеджер.<Имя>; СправочникОбъект.<Имя>; Регистр<Вид>НаборЗаписей.<Имя>.
//
Процедура ПередВыгрузкойДанных(ЭлементДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
	ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Обработчик, вызываемый для считанных из файла данных перед их записью в ИБ при загрузке областей.
//
// Параметры:
// ЭлементДанных - КонстантаМенеджер.<Имя>; СправочникОбъект.<Имя>; Регистр<Вид>НаборЗаписей.<Имя>.
//
Процедура ПередЗагрузкойДанных(ЭлементДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
	ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями

/////////////////////////////////////////////////////////////////////////////////
// Обмен сообщениями

// Получает список обработчиков сообщений, которые обрабатывают подсистемы библиотеки.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений
// 
Процедура ПолучитьОбработчикиКаналовСообщений(Обработчики) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбработчикКаналовСообщенийОбменаДаннымиВРежимеСервиса.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.ИнформационныйЦентр
	ОбработчикКаналовСообщенийИнформационногоЦентра.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	// Конец СтандартныеПодсистемы.ИнформационныйЦентр
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	ОбработчикКаналовСообщенийУдаленногоАдминистрирования.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	ОбработчикКаналовСообщенийУправлениеРезервнымКопированием.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ОбработчикКаналовСообщенийПоставляемыхДанных.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные

КонецПроцедуры

// Обработчик события при отправке сообщения.
// Обработчик данного события вызывается перед помещением сообщения в XML-поток.
// Обработчик вызывается для каждого отправляемого сообщения.
//
//  Параметры:
// КаналСообщений (только чтение) Тип: Строка. Идентификатор канала сообщений, в который отправляется сообщение.
// ТелоСообщения (чтение и запись) Тип: Произвольный. Тело отправляемого сообщения.
// В обработчике события тело сообщения может быть изменено, например, дополнено информацией.
//
Процедура ПриОтправкеСообщения(КаналСообщений, ТелоСообщения) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	СообщенияВМоделиСервиса.ПриОтправкеСообщения(КаналСообщений, ТелоСообщения);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Обработчик события при получении сообщения.
// Обработчик данного события вызывается при получении сообщения из XML-потока.
// Обработчик вызывается для каждого получаемого сообщения.
//
//  Параметры:
// КаналСообщений (только чтение) Тип: Строка. Идентификатор канала сообщений, из которого получено сообщение.
// ТелоСообщения (чтение и запись) Тип: Произвольный. Тело полученного сообщения.
// В обработчике события тело сообщения может быть изменено, например, дополнено информацией.
//
Процедура ПриПолученииСообщения(КаналСообщений, ТелоСообщения) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	СообщенияВМоделиСервиса.ПриПолученииСообщения(КаналСообщений, ТелоСообщения);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

/////////////////////////////////////////////////////////////////////////////////
// Очередь заданий

// Заполняет список имен неразделенных регламентных заданий, которые
// должны выполняться в разделенном режиме.
//
// Параметры:
// СписокРазделенныхРегламентныхЗаданий - Массив - Массив с именами неразделенных 
//                                        регламентных заданий, которые будут 
//                                        выполняться механизмом подсистемы "Регламентные задания"
//                                        в областях данных.
//
Процедура ЗаполнитьСписокРазделенныхРегламентныхЗаданий(СписокРазделенныхРегламентныхЗаданий) Экспорт

	// СтандартныеПодсистемы.УправлениеДоступом
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗаполнениеДанныхДляОграниченияДоступа");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗапускДополнительныхОбработок");
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ФайловыеФункции
	СписокРазделенныхРегламентныхЗаданий.Добавить("ИзвлечениеТекста");
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	СписокРазделенныхРегламентныхЗаданий.Добавить("МониторингЗадач");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УведомлениеИсполнителейОНовыхЗадачах");
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	СписокРазделенныхРегламентныхЗаданий.Добавить("ОбновлениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПерестроениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УстановкаПериодаРассчитанныхИтогов");
	// Конец СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения 
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения");
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Взаимодействия
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПолучениеИОтправкаЭлектронныхПисем");
	// Конец СтандартныеПодсистемы.Взаимодействия
	
КонецПроцедуры

// Процедура формирует таблицу регламентных заданий
// с признаком использования
//
// Параметры:
// ТаблицаИспользования - ТаблицаЗначений - таблица, которую необходимо 
// заполнить регламентными заданиями и признаком использования
//
Процедура ЗаполнитьТаблицуИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт
	
	// СтандартныеПодсистемы.Валюты
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКурсовВалют";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ОбменДанными
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ВыполнениеОбменаДанными";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.Банки
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКлассификатораБанковРФССайтаРБК";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Банки
	
КонецПроцедуры

// Формирует список методов разрешенных к вызову через механизм очереди заданий
//
// Параметры:
//  РазрешенныеМетоды - Массив - имена методов, разрешенных к вызову через
//    механизм очереди заданий
//
Процедура ПолучитьРазрешенныеМетодыОчередиЗаданий(Знач РазрешенныеМетоды) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьОбменДанными");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбновлениеИнформационнойБазыВМоделиСервиса.ВыполнитьОбновлениеТекущейОбластиДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ПодготовитьОбластьДанныхКИспользованию");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ОчиститьОбластьДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РазрешенныеМетоды.Добавить("ПоставляемыеДанные.ОбновитьПоставляемыеДанные");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	РазрешенныеМетоды.Добавить("УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	РазрешенныеМетоды.Добавить("РезервноеКопированиеОбластейДанных.ВыгрузитьОбластьВХранилищеМС");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РазрешенныеМетоды.Добавить("ОбработчикКаналовСообщенийПоставляемыхДанных.ЗагрузитьДанные");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	РазрешенныеМетоды.Добавить("КурсыВалютВМоделиСервиса.КопироватьКурсыВалюты");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса

КонецПроцедуры

// Переопределяет массив реквизитов объекта, относительно которых разрешается устанавливать время напоминания.
// Например, можно скрыть те реквизиты с датами, которые являются служебными или не имеют смысла для 
// установки напоминаний: дата документа или задачи и прочие.
// 
// Параметры
//  Источник	 - Любая ссылка - Ссылка на объект, для которого формируется массив реквизитов с датами
//  МассивРеквизитов - Массив - Массив имён реквизитов (из метаданных), содержащих даты
//
Процедура ПриЗаполненииСпискаРеквизитовИсточникаСДатамиДляНапоминания(Источник, МассивРеквизитов) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить("СрокИсполнения"); 
		МассивРеквизитов.Добавить("ДатаНачала"); 
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
		
	// СтандартныеПодсистемы.ЗаметкиПользователя
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Заметки") Тогда
		МассивРеквизитов.Очистить();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЗаметкиПользователя
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные

/////////////////////////////////////////////////////////////////////////////////
// Поставляемые данные

// Зарегистрировать обработчики поставляемых данных
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированнных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//	      ВидДанных, строка - код вида данных, обрабатываемый обработчиком
//		  КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя
//		  Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//		  	ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//			ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//			ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	КурсыВалютВМоделиСервиса.ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
КонецПроцедуры

// Процедура формирует таблицу соответствия разделенных типов данных 
// общим данным библиотеки
//
// Параметры:
// ТаблицаСоответствия - ТаблицаЗначений - таблица, которую необходимо 
// заполнить соответствиями типов
//
Процедура ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим(ТаблицаСоответствия) Экспорт
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.Справочник_СтраныМира;
	НоваяСтрока.ТипОбщихДанных = Тип("СправочникСсылка.СтраныМира");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Ложь;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.РегистрСведений_АдресныйКлассификатор;
	НоваяСтрока.ТипОбщихДанных = Тип("РегистрСведенийНаборЗаписей.АдресныйКлассификатор");
	
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.РегистрСведений_АдресныеСокращения;
	НоваяСтрока.ТипОбщихДанных = Тип("РегистрСведенийНаборЗаписей.АдресныеСокращения");
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.Справочник_ПроизводственныеКалендари;
	НоваяСтрока.ТипОбщихДанных = Тип("СправочникСсылка.ПроизводственныеКалендари");
	НоваяСтрока.ТипРазделенныхДанных = Тип("СправочникСсылка.Календари");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Ложь;
	
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.РегистрСведений_ДанныеПроизводственногоКалендаря;
	НоваяСтрока.ТипОбщихДанных = Тип("РегистрСведенийКлючЗаписи.ДанныеПроизводственногоКалендаря");
	НоваяСтрока.ТипРазделенныхДанных = Тип("РегистрСведенийКлючЗаписи.КалендарныеГрафики");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Неопределено;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
КонецПроцедуры

// Процедура переопределяет действия при подборе поставляемых данных в область данных
// для библиотечных поставляемых данных
//
// Параметры:
// СсылкаОбщихДанных - Ссылка - ссылка на элемент подбираемый в область данных
//
Процедура ПриПодбореПоставляемыхДанныхВОбласть(СсылкаОбщихДанных, ТипОбщихДанных = "") Экспорт
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	Если ТипЗнч(СсылкаОбщихДанных) = Тип("СправочникСсылка.ПроизводственныеКалендари") Тогда
		ПоставляемыеДанные.ЗарегистрироватьИзмененияДанныхРегистраСведений(СсылкаОбщихДанных, "ДанныеПроизводственногоКалендаря", "ПроизводственныйКалендарь", "ПроизводственныйКалендарь,Дата,Год");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
КонецПроцедуры

// Вызывается при необходимости обновления разделенного набора записей из неразделенного.
//
// Параметры:
// Эталон - РегистрСведенийНаборЗаписей - неразделенный набор записей по которому необходимо
//        обновить разделенный.
// ОбъектМД - ОбъектМетаданных - метаданные неразделенного регистра сведений
// Менеджер - РегистрСведенийМенеджер - менджер разделенного регистра сведений
// ТипИсточника - Тип - тип ключа записи неразделенного регистра
// ТипПриемник - Тип - тип ключа записи разделенного регистра
// ОбъектПриемник - РегистрСведенийНаборЗаписей - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить незаписанный
//        набор записей этому параметру.
// СтандартнаяОбработка - Булево - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить этому 
//        параметру значение Ложь.
//
Процедура ПередКопированиемНабораЗаписейИзЭталона(Эталон, МетаданныеОбъекта, Менеджер, ТипИсточника, 
	ТипПриемника, ОбъектПриемник, СтандартаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	Если МетаданныеОбъекта.Имя = "ДанныеПроизводственногоКалендаря" Тогда
		
		СтандартаяОбработка = Ложь;
		
		СоответствиеИменРеквизитов = Новый Соответствие;
		СоответствиеИменРеквизитов.Вставить("ПроизводственныйКалендарь", "Календарь");
		СоответствиеИменРеквизитов.Вставить("Дата",	"ДатаГрафика");
		
		ВключаемыеВидыДней = Новый Массив;
		ВключаемыеВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		ВключаемыеВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
		
		Результат = Менеджер.СоздатьНаборЗаписей();
		
		Для Каждого ЭлементОтбора Из Эталон.Отбор Цикл
			Если НЕ ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоответствиеИменРеквизитов[ЭлементОтбора.Имя] <> Неопределено Тогда
				Результат.Отбор[СоответствиеИменРеквизитов[ЭлементОтбора.Имя]].Установить(ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(ЭлементОтбора.Значение));	
			Иначе 
				Результат.Отбор[ЭлементОтбора.Имя].Установить(ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(ЭлементОтбора.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Результат.ОбменДанными.Загрузка = Истина;
		
		МетаданныеПриемника = Результат.Метаданные();
		
		Для Каждого СтрокаЭталона Из Эталон Цикл
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.Календарь		= ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(СтрокаЭталона.ПроизводственныйКалендарь);
			СтрокаРезультата.Год			= СтрокаЭталона.Год;
			СтрокаРезультата.ДатаГрафика	= СтрокаЭталона.Дата;
			СтрокаРезультата.ДеньВключенВГрафик	= ВключаемыеВидыДней.Найти(СтрокаЭталона.ВидДня) <> Неопределено;
		КонецЦикла;
			
		ОбъектПриемник = Результат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	Если МетаданныеОбъекта.Имя = "ПоставляемыеКурсыВалют" Тогда
		
		Результат = Менеджер.СоздатьНаборЗаписей();
	
		Для Каждого ЭлементОтбора Из Эталон.Отбор Цикл
			Если НЕ ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Отбор[ЭлементОтбора.Имя].Установить(?(ЭлементОтбора.Имя="Валюта",
				ПоставляемыеДанные.РазделеннаяСсылкаПоОбщей(ЭлементОтбора.Значение, "КодВалюты"),
				ЭлементОтбора.Значение));
		КонецЦикла;
		
		Результат.ОбменДанными.Загрузка = Истина;
		
		Результат.Загрузить(Эталон.Выгрузить());
		
		Для каждого Строка Из Результат Цикл
			Строка.Валюта = Результат.Отбор.Валюта.Значение;
		КонецЦикла;
		
		ОбъектПриемник = Результат;
		СтандартаяОбработка = Ложь;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
КонецПроцедуры

// Вызывается при необходимости обновления разделенного элемента из неразделенного.
//
// Параметры:
// Эталон - СправочникОбъект - неразделенный объект по которому необходимо
//        обновить разделенный.
// ОбъектМД - ОбъектМетаданных - метаданные неразделенного справочника
// Менеджер - СправочникМенеджер - менджер разделенного регистра сведений
// ТипИсточника - Тип - тип ссылки неразделенного справочника
// ТипПриемник - Тип - тип ссылки разделенного справочника
// ОбъектПриемник - СправочникОбъект - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить незаписанный
//        объект этому параметру.
// СтандартнаяОбработка - Булево - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить этому 
//        параметру значение Ложь.
//
Процедура ПередКопированиемОбъектаИзЭталона(Эталон, МетаданныеИсточника, Менеджер, ТипИсточника, 
	ТипПриемника, ОбъектПриемник, СтандартаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	Если МетаданныеИсточника.Имя = "ПроизводственныеКалендари" Тогда
		
		СоответствиеИменРеквизитов = Новый Соответствие;
		СоответствиеИменРеквизитов.Вставить("ПроизводственныйКалендарь", "Ссылка");
		
		СтандартаяОбработка = Ложь;
		
		СсылкаРезультата = ПоставляемыеДанные.РазделеннаяСсылкаПоОбщей(Эталон.Ссылка);
		
		МетаданныеПриемника = СсылкаРезультата.Метаданные();
		
		ИерархическийСправочник = МетаданныеПриемника.Иерархический И МетаданныеИсточника.Иерархический;
		
		Результат = СсылкаРезультата.ПолучитьОбъект();
		Если Результат = Неопределено Тогда
			Результат = Менеджер.СоздатьЭлемент();
			Результат.УстановитьСсылкуНового(СсылкаРезультата);
		КонецЕсли;
		Результат.ОбменДанными.Загрузка = Истина;
		
		Результат.Наименование = Эталон.Наименование;
		
		Если ИерархическийСправочник Тогда
			Результат.Родитель = ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(Эталон.Родитель);
		КонецЕсли;
		
		ИерархияГрупп = МетаданныеПриемника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
		Результат["ПроизводственныйКалендарь"] 	= Эталон["Ссылка"];
		Результат["ВидКалендаря"] 				= Перечисления.ВидыКалендарей.Пятидневка;
		
		ОбъектПриемник = Результат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
КонецПроцедуры

// При необходимости создает узел для области данных с переданным значеним
// разделителя.
//
// Параметры:
//  ОбластьДанных - Число - значение разделеителя области данных для которой
//   требуется создать узел.
//
Процедура СоздатьУзелОбластиДанных(Знач ОбластьДанных) Экспорт
	
	ПоставляемыеДанные.СоздатьУзелОбластиДанных(ОбластьДанных);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные


// СтандартныеПодсистемы.РассылкаОтчетов

/////////////////////////////////////////////////////////////////////////////////
// Рассылка отчетов

// Подключает отчет подсистемы "Дополнительные отчеты и обработки".
//   Обработка исключений производится управляющим кодом.
// 
// Параметры:
//   ДопОтчет        (СправочникСсылка.ДополнительныеОтчетыИОбработки) Отчет, который необходимо инициализировать
//   ПараметрыОтчета (Структура) Набор параметров, получаемый в процессе проверки и подключения отчета
//                               см. описание функции "ИнициализироватьОтчет" модуля "РассылкаОтчетов"
//   Результат       (Булево, Неопределено)
//     |- Истина       - Удалось подключить дополнительный отчет
//     |- Ложь         - Не удалось подключить дополнительный отчет
//     |- Неопределено - По умолчанию. Подсистема доп. отчетов недоступна.
//
Процедура РассылкаОтчетовПодключитьДопОтчет(ДопОтчет, ПараметрыОтчета, Результат) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	Если ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ПараметрыОтчета.Имя = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ДопОтчет);
		ПараметрыОтчета.Объект = ВнешниеОтчеты.Создать(ПараметрыОтчета.Имя);
		ПараметрыОтчета.Метаданные = ПараметрыОтчета.Объект.Метаданные();
		
		Результат = Истина;
		
	Иначе
		
		ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент %1 не является дополнительным отчетом'"), 
			"'"+ Строка(ДопОтчет) +"'"
		);
		
		Результат = Ложь;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Записывает вложения в папку.
// 
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура РассылкаОтчетовДоставитьВПапку(ПараметрыДоставки, Вложения) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	
	// Перенос вложений в таблицу
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("ИмяФайла",              Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("ПолныйПутьКФайлу",      Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("Файл",                  Новый ОписаниеТипов("Файл"));
	ТаблицаВложений.Колонки.Добавить("ФайлСсылка",            Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	ТаблицаВложений.Колонки.Добавить("ИмяФайлаБезРасширения", Метаданные.Справочники.Файлы.Реквизиты.ПолноеНаименование.Тип);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Вложение Из Вложения Цикл
		СтрокаТаблицы = ТаблицаВложений.Добавить();
		СтрокаТаблицы.ИмяФайла              = Вложение.Ключ;
		СтрокаТаблицы.ПолныйПутьКФайлу      = Вложение.Значение;
		СтрокаТаблицы.Файл                  = Новый Файл(СтрокаТаблицы.ПолныйПутьКФайлу);
		СтрокаТаблицы.ИмяФайлаБезРасширения = СтрокаТаблицы.Файл.ИмяБезРасширения;
	КонецЦикла;
	
	// Поиск существующих файлов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка,
	|	Файлы.ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПолноеНаименование В(&МассивИменФайлов)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыДоставки.Папка);
	Запрос.УстановитьПараметр("МассивИменФайлов", ТаблицаВложений.ВыгрузитьКолонку("ИмяФайлаБезРасширения"));
	
	СуществующиеФайлы = Запрос.Выполнить().Выгрузить();
	Для Каждого Файл Из СуществующиеФайлы Цикл
		СтрокаТаблицы = ТаблицаВложений.Найти(Файл.ПолноеНаименование, "ИмяФайлаБезРасширения");
		СтрокаТаблицы.ФайлСсылка = Файл.Ссылка;
	КонецЦикла;
	
	// Постоянные переменные
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассылка отчетов %1 от %2'"),
		"'"+ ПараметрыДоставки.Рассылка +"'",
		Формат(ПараметрыДоставки.ДатаВыполнения, "ДЛФ=DT")
	);
	ХранитьВерсии = Истина;
	ЭтоВебКлиент = Ложь;
	АдресВременногоХранилищаТекста = "";
	Пользователь = Пользователи.ТекущийПользователь();
	ЗаписатьВИсторию = Истина;
	ВладелецФайла = ПараметрыДоставки.Папка;
	
	Для Каждого Вложение Из ТаблицаВложений Цикл
		// Временные переменные
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Вложение.ПолныйПутьКФайлу));
		ВремяИзменения              = Вложение.Файл.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = Вложение.Файл.ПолучитьУниверсальноеВремяИзменения();
		Размер                      = Вложение.Файл.Размер();
		РасширениеБезТочки          = СтрЗаменить(Вложение.Файл.Расширение, ".", "");
		ИмяБезРасширения            = Вложение.ИмяФайлаБезРасширения;
		
		// Запись
		Если ЗначениеЗаполнено(Вложение.ФайлСсылка) Тогда
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Вложение.ФайлСсылка, 
				ИмяБезРасширения, 
				Размер, 
				РасширениеБезТочки, 
				АдресВременногоХранилищаФайла, 
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь
			);
		Иначе
			Вложение.ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
				ВладелецФайла,
				ИмяБезРасширения,
				РасширениеБезТочки,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Размер,
				АдресВременногоХранилищаФайла,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь,
				Комментарий,
				ЗаписатьВИсторию
			);
		КонецЕсли;
		
		// Заполнение ссылки на файл
		Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Вложение.ПолныйПутьКФайлу,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() +"#"+ ПолучитьНавигационнуюСсылку(Вложение.ФайлСсылка)
			);
		КонецЕсли;
		
		// Очистка
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	КонецЦикла;
	
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Проверяет право изменения папки.
//
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура РассылкаОтчетовПравоИзмененияПапкиИФайлов(Папка, Результат) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	// СтандартныеПодсистемы.УправлениеДоступом
	Результат = УправлениеДоступом.ЕстьПравоПоЗначениюДоступа("ИзменениеПапокИФайлов", Папка);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Получает настройки прокси на сервере.
//
Процедура РассылкаОтчетовНастройкиПрокси(Прокси) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		Прокси = Новый ИнтернетПрокси();
		Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		ЗаполнитьЗначенияСвойств(Прокси, НастройкаПроксиСервера);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета 
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РассылкаОтчетов


// СтандартныеПодсистемы.УправлениеДоступом

/////////////////////////////////////////////////////////////////////////////////
// Управление доступом

// Устанавливает использование регламентного задания заполнения данных управления доступом.
//
// Параметры:
// Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьИспользованиеЗаданияЗаполненияДанныхУправленияДоступом(Знач Использование) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступомВМоделиСервиса.УстановитьИспользованиеЗаданияЗаполненияДанных(Использование);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом


// СтандартныеПодсистемы.ФайловыеФункции

/////////////////////////////////////////////////////////////////////////////////
// Файловые функции

// Возвращает структуру, содержащую различные персональные настройки
// по работе с файлами
Процедура ПолучитьПерсональныеНастройкиРаботыСФайлами(Настройки) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьПерсональныеНастройкиФайловыхФункций(Настройки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Добавляет файл на том при "Разместить файлы начального образа"
//
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Удаляет регистрацию изменений после "Разместить файлы начального образа"
//
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.УдалитьРегистрациюИзменений(ПланОбменаСсылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.УдалитьРегистрациюИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает структуру с двоичными данными файла и подписи.
Функция ПолучитьДвоичныеДанныеФайлаИПодписи(ДанныеСтроки) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ДанныеСтроки.Объект) Тогда
		
		Возврат РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(
			, ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ДанныеСтроки.Объект) Тогда
		
		Возврат ПрисоединенныеФайлыСлужебный.ПолучитьДвоичныеДанныеФайлаИПодписи(
			ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст запроса для извлечения текста
//
Процедура ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает число файлов с неизвлеченным текстом
//
Процедура ПолучитьКоличествоВерсийСНеизвлеченнымТекстом(ЧислоВерсий) Экспорт
	
	ЧислоВерсий = 0;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ЧислоВерсий = ЧислоВерсий + РаботаСФайламиВызовСервера.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ЧислоВерсий = ЧислоВерсий + ПрисоединенныеФайлыСлужебный.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

Процедура ПодсчитатьРазмерФайловНаТоме(СсылкаТома, РазмерФайлов) Экспорт
	
	РазмерФайлов = 0;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РазмерФайлов = РазмерФайлов + РаботаСФайламиВызовСервера.ПодсчитатьРазмерФайловНаТоме(СсылкаТома);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Получает полный путь к файлу на диске
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		Возврат РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлСсылка) Тогда
		Возврат ПрисоединенныеФайлыСлужебный.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецФункции

// Записывает извлеченный текст
Процедура ЗаписатьИзвлеченныйТекст(ФайлОбъект) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлОбъект) Тогда
		РаботаСФайламиВызовСервера.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлОбъект) Тогда
		ПрисоединенныеФайлыСлужебный.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает навигационную ссылку на файл (на реквизит или во временное хранилище)
Функция ПолучитьНавигационнуюСсылкуФайла(ФайлСсылка, УникальныйИдентификатор) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		Возврат РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлСсылка) Тогда
		Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлСсылка, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецФункции

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
//
Процедура ПолучитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПолучитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
		
КонецПроцедуры

// Читает кодировку версии файла
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
//
// Возвращаемое значение:
//   Строка кодировки
Процедура ПолучитьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(ВерсияСсылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ФайловыеФункции
