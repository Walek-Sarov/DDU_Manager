////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Используются ли в конфигурации классификаторы
//
// Возвращаемое значение:
//  Булево - Истина, если используются, Ложь - Иначе.
//
Функция ИспользуютсяКлассификаторы() Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Возврат Истина;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	Возврат Ложь;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные функции, вызываемые из формы Ввода адреса

// Найти по индексу записи в адресном классификаторе.
//
// Параметры:
//	Индекс - Строка - индекс, по которому будет производиться поиск 
//
// Возвращаемое значение:
//  Структура - с полями:
//    Количество      - Число - количество найденных вариантов
//    НайденныйРегион - Строка - если найден один регион
//    НайденныйРайон  - Строка - если найден один район
//    ПризнакАктуальности - Число - признак актуальности если найден один вариант
//    АдресВХранилище - Строка - идентификатор сохраненной в хранилище таблицы с найдеными вариантами
//
Функция НайтиЗаписиВАКПоИндексу(Индекс) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Результат = Новый Структура;
	Результат.Вставить("Количество",      0);
	Результат.Вставить("НайденныйРегион", "");
	Результат.Вставить("НайденныйРайон",  "");
	Результат.Вставить("ПризнакАктуальности",  0);
	
	// Проверим правильность ввода индекса
	Если СтрДлина(Индекс) <> 6 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 1.Найдем записи по индексу, а также записи родительских элементов, и сохраним всё во временных таблицах 
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.Код КАК Код,
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
	|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
	|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
	|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
	|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде
	|ПОМЕСТИТЬ Адреса
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.Индекс = &Индекс
	|ИНДЕКСИРОВАТЬ ПО КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде";
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получим списки регионов и районов
	ЗапросРегионов = Новый Запрос;
	ЗапросРегионов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРегионов.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регионы.КодРегиона КАК КодРегиона,
	|	Регионы.Наименование КАК Наименование,
	|	Регионы.ПризнакАктуальности КАК ПризнакАктуальности
	|ИЗ
	|	Регионы КАК Регионы";
	ВыборкаРегионов = ЗапросРегионов.Выполнить().Выбрать();
	
	ЗапросРайонов = Новый Запрос;
	ЗапросРайонов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРайонов.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Районы.КодРайона КАК КодРайона,
	|	Районы.Наименование КАК Наименование,
	|	Районы.ПризнакАктуальности КАК ПризнакАктуальности
	|ИЗ
	|	Районы КАК Районы";
	ВыборкаРайонов = ЗапросРайонов.Выполнить().Выбрать();
	
	// 3.Анализируем количество регионов и районов и на основании этого принимаем решение
	// Если не найдены регионы или районы - значит нет ни одного подходящего адреса - можно завершить поиск
	Если ВыборкаРегионов.Количество() = 0 Тогда
		Возврат Результат;
	// Если найдено несколько регионов, то пользователю нужно будет указывать при выборе также регион и район
	ИначеЕсли ВыборкаРегионов.Количество() > 1 Тогда
		ДетализацияДоУровня = 1;
		Результат.НайденныйРегион = "";
		Результат.НайденныйРайон = "";
	// Если найдено несколько районов, то пользователю нужно будет указывать при выборе также район
	ИначеЕсли ВыборкаРайонов.Количество() <> 1 Тогда // ВыборкаРегионов.Количество() = 1
		ДетализацияДоУровня = 2;
		ВыборкаРегионов.Следующий();
		Результат.НайденныйРегион = ВыборкаРегионов.Наименование;
		Результат.НайденныйРайон = "";
	// Если же найден только один регион и один район - то их выбирать не нужно
	ИначеЕсли ВыборкаРайонов.Количество() = 1 Тогда
		ДетализацияДоУровня = 3;
		ВыборкаРегионов.Следующий();
		Результат.НайденныйРегион = ВыборкаРегионов.Наименование;
		ВыборкаРайонов.Следующий();
		Результат.НайденныйРайон = ВыборкаРайонов.Наименование;
	КонецЕсли;
	
	// 4.Формируем список найденных адресов, с соответствующей детализацией
	ЗапросАдресов = Новый Запрос;
	ЗапросАдресов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросАдресов.Текст =
	"ВЫБРАТЬ
	|	Адреса.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
	|	Адреса.Код КАК Код,
	|	Адреса.ПризнакАктуальности КАК ПризнакАктуальности,
	|	ЕСТЬNULL(Улицы.Наименование, """") КАК Улица,
	|	ЕСТЬNULL(Города.Наименование, """") КАК Город,
	|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(Районы.Наименование, """") КАК Район,
	|	ЕСТЬNULL(Регионы.Наименование, """") КАК Регион,
	|	"""" КАК Описание
	|ИЗ
	|	Адреса КАК Адреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаселенныеПункты КАК НаселенныеПункты
	|		ПО Адреса.Код = НаселенныеПункты.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Города КАК Города
	|		ПО Адреса.Код = Города.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Районы КАК Районы
	|		ПО Адреса.Код = Районы.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Регионы КАК Регионы
	|		ПО Адреса.Код = Регионы.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Улицы КАК Улицы
	|		ПО Адреса.Код = Улицы.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	Улица,
	|	Код";
	ВыборкаАдресов = ЗапросАдресов.Выполнить().Выбрать();
	
	// 5.Если найден один адрес - то в результат сохраняем компоненты адреса
	// Если же найдено несколько адресов то составляем таблицу адресов, 
	// формируя подробное описание адреса в зависимости от уровня детализации
	Количество = ВыборкаАдресов.Количество();
	Результат.Вставить("Количество", Количество);
	Если Количество = 1 Тогда
		
		ВыборкаАдресов.Следующий();
		Результат.Вставить("Регион", ВыборкаАдресов.Регион);
		Результат.Вставить("Район",  ВыборкаАдресов.Район);
		Результат.Вставить("Город",  ВыборкаАдресов.Город);
		Результат.Вставить("НаселенныйПункт", ВыборкаАдресов.НаселенныйПункт);
		Результат.Вставить("Улица",  ВыборкаАдресов.Улица);
		Результат.Вставить("ПризнакАктуальности", ВыборкаАдресов.ПризнакАктуальности);
		
	ИначеЕсли Количество > 1 Тогда
		
		НайденныеЗаписиПоИндексу = Новый ТаблицаЗначений;
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Улица",    Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Код",      Новый ОписаниеТипов("Число"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("ПризнакАктуальности",    Новый ОписаниеТипов("Число"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("ТипАдресногоЭлемента",    Новый ОписаниеТипов("Число"));
	
		Пока ВыборкаАдресов.Следующий() Цикл
			
			// Не добавляем повторы улиц для домов
			Если ВыборкаАдресов.ТипАдресногоЭлемента = 6 
			И НайденныеЗаписиПоИндексу.Найти(ВыборкаАдресов.Улица, "Улица") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НайденныеЗаписиПоИндексу.Добавить();
			НоваяСтрока.Код      = ВыборкаАдресов.Код;
			НоваяСтрока.ПризнакАктуальности = ВыборкаАдресов.ПризнакАктуальности;			
			НоваяСтрока.ТипАдресногоЭлемента = ВыборкаАдресов.ТипАдресногоЭлемента;
			НоваяСтрока.Улица    = ?(ВыборкаАдресов.ТипАдресногоЭлемента > 4, ВыборкаАдресов.Улица, НСтр("ru='< Без улицы >'"));
			НоваяСтрока.Описание = СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня
			, ВыборкаАдресов.Регион, ВыборкаАдресов.Район, ВыборкаАдресов.Город, ВыборкаАдресов.НаселенныйПункт);
			
		КонецЦикла;
			
		АдресВХранилище = ПоместитьВоВременноеХранилище(НайденныеЗаписиПоИндексу, Новый УникальныйИдентификатор);
		Результат.Вставить("АдресВХранилище", АдресВХранилище);
		
	КонецЕсли;
	
	Возврат Результат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	Возврат Новый Структура("Количество,НайденныйРегион,НайденныйРайон,ПризнакАктуальности", 0, "", "", 0);
	
КонецФункции

// Получить компоненты адресного элемента по его коду
//
// Параметры:
//	КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//	Результат - структура с полями(в которую выгружается результат поиска):
//		Регион - Строка - наименование найденого региона
//		Район - Строка - наименование найденого района
//		Город - Строка - наименование найденого города
//		НаселенныйПункт - Строка - наименование найденого населенного пункта
//		Улица - Строка - наименование найденой улицы
//		ПризнакАктуальности - Число - признак актуальности найденого адреса
//
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	
	// 1.Раскладываем адрес и элементы адреса по временным таблицам
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.Код КАК Код,
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
	|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
	|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
	|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
	|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде
	|ПОМЕСТИТЬ Адреса
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.Код = &КодАдресногоЭлемента";
	Запрос.УстановитьПараметр("КодАдресногоЭлемента", КодАдресногоЭлемента);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получаем наименование элементов адреса из временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Адреса.Код КАК Код,
	|	ЕСТЬNULL(Регионы.Наименование, """") КАК Регион,
	|	ЕСТЬNULL(Районы.Наименование, """") КАК Район,
	|	ЕСТЬNULL(Города.Наименование, """") КАК Город,
	|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(Улицы.Наименование, """") КАК Улица,
	|	Адреса.ПризнакАктуальности КАК ПризнакАктуальности
	|ИЗ
	|	Адреса КАК Адреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Регионы КАК Регионы
	|		ПО Адреса.КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
	|		ЛЕВОЕ СОЕДИНЕНИЕ Районы КАК Районы
	|		ПО Адреса.КодРайонаВКоде = Районы.КодРайонаВКоде
	|		ЛЕВОЕ СОЕДИНЕНИЕ Города КАК Города
	|		ПО Адреса.КодГородаВКоде = Города.КодГородаВКоде
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаселенныеПункты КАК НаселенныеПункты
	|		ПО Адреса.КодНаселенногоПунктаВКоде = НаселенныеПункты.КодНаселенногоПунктаВКоде
	|		ЛЕВОЕ СОЕДИНЕНИЕ Улицы КАК Улицы
	|		ПО Адреса.КодУлицыВКоде = Улицы.КодУлицыВКоде";
	РезультатЗапроса = Запрос.Выполнить();
	
	// 3.Выводим полученные данные в результат
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Вставить("Регион", "");
		Результат.Вставить("Район", "");
		Результат.Вставить("Город", "");
		Результат.Вставить("НаселенныйПункт", "");
		Результат.Вставить("Улица", "");
		Результат.Вставить("ПризнакАктуальности", 0);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.Вставить("Регион", Выборка.Регион);
		Результат.Вставить("Район",  Выборка.Район);
		Результат.Вставить("Город",  Выборка.Город);
		Результат.Вставить("НаселенныйПункт", Выборка.НаселенныйПункт);
		Результат.Вставить("Улица",  Выборка.Улица);
		Результат.Вставить("ПризнакАктуальности",  Выборка.ПризнакАктуальности);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

//  Процедура очищает потомков определенного адресного элемента
//
// Параметры:
//  Регион - строка - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//  Улица - строка - строка, куда будет помещено строковое представление "родительской" улицы.
//  Дом - строка - строка, куда будет помещено строковое представление "родительского" номера дома.
//  Корпус - строка - строка, куда будет помещено строковое представление "родительского" номера корпуса дома.
//  Квартира - строка - строка, куда будет помещено строковое представление "родительского" номера квартиры.
//  Уровень - Число - уровень адресного элемента.
//
Процедура ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город, НаселенныйПункт, Улица, 
	Дом, Корпус, Квартира, Уровень) Экспорт
	
	Если Уровень = 1 Тогда
		// очищаем элемент и все что ниже него по иерархии
		Район = "";	
		Город = "";
		НаселенныйПункт = "";
		Улица = "";
		Дом = "";
		Корпус = "";
		Квартира = "";
		Возврат;
	КонецЕсли;
                                                          
	Если Уровень = 2 Тогда
		// очищаем элемент и все что ниже него по иерархии
		Город = "";
		НаселенныйПункт = "";
		Улица = "";
		Дом = "";
		Корпус = "";
		Квартира = "";
		Возврат;	
	КонецЕсли;
	
	Если Уровень = 3 Тогда
		// очищаем элемент и все что ниже него по иерархии		
		НаселенныйПункт = "";
		Улица = "";
		Дом = "";
		Корпус = "";
		Квартира = "";
		Возврат;	
	КонецЕсли;
	
	Если Уровень = 4 Тогда
		// очищаем элемент и все что ниже него по иерархии		
		Улица = "";
		Дом = "";
		Корпус = "";
		Квартира = "";
	КонецЕсли;
	
КонецПроцедуры

// Определить индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  Улица - название улицы ( с сокращением)
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//  РодительИндекса - переменная, в которую сохраняется структура найденого адресного элемента
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, 
	Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса, РодительИндекса = Неопределено) Экспорт

	// СтандартныеПодсистемы.АдресныйКлассификатор
	РодительИндекса = ПолучитьПустуюСтруктуруАдреса();
	Индекс = "";
	Загружен = СтруктураЗагруженныхЭлементовАдреса(НазваниеРегиона, НазваниеРайона
	, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1, РодительИндекса);
	Если Регион.Код > 0 Тогда
		РодительИндекса = Регион;
		Если НЕ ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	// Если регионы загружены, но указанный регион не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли Регион.Код = 0 И Загружен.Регион И Не ПустаяСтрока(НазваниеРегиона) Тогда
		Возврат "";
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительИндекса);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если НЕ ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	// Если районы загружены, но указанный район не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли Район.Код = 0 И Загружен.Район И Не ПустаяСтрока(НазваниеРайона) Тогда
		Возврат "";
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительИндекса);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если НЕ ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	// Если города загружены, но указанный город не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли Город.Код = 0 И Загружен.Город И Не ПустаяСтрока(НазваниеГорода) Тогда
		Возврат "";
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительИндекса);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если НЕ ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	// Если населенные пункты загружены, но указанный населенный пункт не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли НаселенныйПункт.Код = 0 И Загружен.НаселенныйПункт 
	И Не ПустаяСтрока(НазваниеНаселенногоПункта) Тогда
		Возврат "";
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительИндекса);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если НЕ ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	Иначе
		// Если улицы загружены, но указанная улица не найдена, 
		// значит она некорректна, возвращаем пустой индекс
		Если Загружен.Улица И Не ПустаяСтрока(НазваниеУлицы) Тогда
			Возврат "";
		Иначе
			// Если улица не указа - то пытаемся вместо неё подставить что-нибудь
			// из более высокого уровня
			Если НаселенныйПункт.Код > 0 Тогда
				Улица = НаселенныйПункт;
			ИначеЕсли Город.Код > 0 Тогда
				Улица = Город;
			ИначеЕсли Район.Код > 0 Тогда
				Улица = Район;
			КонецЕсли;
			ИндексДомаКорпуса = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
			Если НЕ ПустаяСтрока(ИндексДомаКорпуса) Тогда
				Индекс = ИндексДомаКорпуса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Индекс;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	Возврат "";

КонецФункции

// Обработчик автоподбора в адресном элементе ввода.
//
// Параметры: 
//  Текст  - Строка - введенный пользователем текст в адресном элементе ввода
//  Регион - Строка - ранее введенное название региона
//  Район  - Строка - ранее введенное название района
//  Город  - Строка - ранее введенное название города
//  НаселенныйПункт - Строка - ранее введенное название населенного пункта
//  УровеньЭлемента - Число - идентификатор адресного элемента ввода.
//                            1 - регион, 2 - район, 3 - город, 4 - населенный пункт, 5 - улица, 0 - прочее.
//	ПризнакАктуальности - Число - признак актуальности элемента.
//
// Возвращаемое значение:
//  СписокЗначений; Неопределено
//
Функция АвтоПодборТекстВАдресномЭлементе(Текст, Регион, Район, Город, НаселенныйПункт, УровеньЭлемента,
	ПризнакАктуальности = 0) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(Регион, Район, Город, НаселенныйПункт, "", УровеньЭлемента);
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураОграничений, 51);
	
	Количество = РезультатЗапроса.Количество();
	Если (Количество = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ПолноеНаименование = СокрЛП(СтрокаРезультата.Наименование) + " " + СокрЛП(СтрокаРезультата.Сокращение);
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Значение", ПолноеНаименование);
		СтруктураРезультата.Вставить("ПометкаУдаления", (СтрокаРезультата.ПризнакАктуальности <> 0));
		Если СтруктураРезультата.ПометкаУдаления Тогда
			ТекстПредупреждения = НСтр("ru='""%ПолноеНаименование%"" не актуален.'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПолноеНаименование%", ПолноеНаименование);
			СтруктураРезультата.Вставить("Предупреждение", ТекстПредупреждения);
		КонецЕсли;
		Результат.Добавить(СтруктураРезультата);
	КонецЦикла;              
	
	Возврат Результат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	Возврат Новый СписокЗначений;
	
КонецФункции

// Проверяет соответствие адреса КЛАДРу по переданным индексу, региону, району, городу, населенному пункту,
// улице, дому и корпусу, при этом выводит все поля по каждому найденому элементу адреса
//
// Параметры: 
//  УказанныйИндекс - Строка - индекс
//  НазваниеРегиона - Строка - название региона(с сокращением)
//  НазваниеРайона - Строка - название района(с сокращением)
//  НазваниеГорода - Строка - название города(с сокращением)
//  НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//  НазваниеУлицы - Строка - название улицы(с сокращением)
//  НомерДома - Строка - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - Строка - номер корпуса
//
// Возвращаемое значение:
//  Структура с полями:
//		Регион - Структура - структура полей найденого региона
//		Район - Структура - структура полей найденого района
//		Город - Структура - структура полей найденого города
//		НаселенныйПункт - Структура - структура полей найденого населенного пункта
//		Улица - Структура - структура полей найденой улицы
//		Дом - Структура - структура полей найденого дома
//		ЕстьОшибки - Булево - найдены ли ошибки при проверке
//		СтруктураОшибок - Структура - структура в которой в качестве ключа выступает название элемента
//			а в качестве значения - подробный текст ошибки.
//
Функция ПроверитьСоответствиеАдресаКЛАДРу(Знач УказанныйИндекс = "", Знач НазваниеРегиона = "", Знач НазваниеРайона = "", 
	Знач НазваниеГорода = "", Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Знач НомерДома = "", 
	Знач НомерКорпуса = "") Экспорт

	// СтандартныеПодсистемы.АдресныйКлассификатор
	
	// Проверяем основные адресные элементы
	Родитель = ПолучитьПустуюСтруктуруАдреса();
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1,  Родитель);
	Если Регион.Код > 0 Тогда
		Родитель = Регион;
	КонецЕсли;
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, Родитель);
	Если Район.Код > 0 Тогда
		Родитель = Район;
	КонецЕсли;
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, Родитель);
	Если Город.Код > 0 Тогда
		Родитель = Город;
	КонецЕсли;
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, Родитель);
	Если НаселенныйПункт.Код > 0 Тогда
		Родитель = НаселенныйПункт;
	КонецЕсли;
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, Родитель);
	Если Улица.Код > 0 Тогда
		Родитель = Улица;
	КонецЕсли;
	
	Индекс = ПолучитьПустуюСтруктуруАдреса();
	НомерИндекса = ПолучитьИндекс(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, 
	НазваниеУлицы, НомерДома, НомерКорпуса, Индекс);

	// Восстанавливаем населенный пункт, который мог потеряться
	Если ПустаяСтрока(НазваниеНаселенногоПункта) И НаселенныйПункт.Код = 0 И Улица.Код <> 0 Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код КАК Код,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение,
		|	АдресныйКлассификатор.Индекс КАК Индекс,
		|	АдресныйКлассификатор.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
		|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 4";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Родитель.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Родитель.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Родитель.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Родитель.КодНаселенногоПунктаВКоде);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НаселенныйПункт = Новый Структура;
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				НаселенныйПункт.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем город, который мог потеряться
	Если ПустаяСтрока(НазваниеГорода) И Город.Код = 0 И НаселенныйПункт.Код <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код КАК Код,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение,
		|	АдресныйКлассификатор.Индекс КАК Индекс,
		|	АдресныйКлассификатор.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 3";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Родитель.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Родитель.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Родитель.КодГородаВКоде);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Город = Новый Структура;
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				Город.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем район, который мог потеряться
	Если ПустаяСтрока(НазваниеРайона) И Район.Код = 0 И Город.Код <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код КАК Код,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение,
		|	АдресныйКлассификатор.Индекс КАК Индекс,
		|	АдресныйКлассификатор.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 2";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Родитель.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Родитель.КодРайонаВКоде);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Район = Новый Структура;
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				Район.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохраняем в структуру
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("Регион", Регион);
	СтруктураПроверки.Вставить("Район", Район);
	СтруктураПроверки.Вставить("Город", Город);
	СтруктураПроверки.Вставить("НаселенныйПункт", НаселенныйПункт);
	СтруктураПроверки.Вставить("Улица", Улица);
	СтруктураПроверки.Вставить("Индекс", Индекс);
	
	// А теперь записываем ошибки
	ЕстьОшибки = Ложь;
	СтруктураОшибок = Новый Структура;
	Если Не ПустаяСтрока(НазваниеРегиона) И Регион.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Регион ""%НазваниеРегиона%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеРегиона%", НазваниеРегиона);
		СтруктураОшибок.Вставить("Регион", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеРайона) И Район.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Район ""%НазваниеРайона%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеРайона%", НазваниеРайона);
		СтруктураОшибок.Вставить("Район", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеГорода) И Город.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Город ""%НазваниеГорода%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеГорода%", НазваниеГорода);
		СтруктураОшибок.Вставить("Город", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеНаселенногоПункта) И НаселенныйПункт.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Населенный пункт ""%НазваниеНаселенногоПункта%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеНаселенногоПункта%", НазваниеНаселенногоПункта);
		СтруктураОшибок.Вставить("НаселенныйПункт", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеУлицы) И Улица.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Улица ""%НазваниеУлицы%"" не найдена в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеУлицы%", НазваниеУлицы);
		СтруктураОшибок.Вставить("Улица", СообщениеОбОшибке);
	КонецЕсли;
	
	// Теперь проверяем номер дома и корпуса
	Если Не (ПустаяСтрока(НомерДома) И ПустаяСтрока(НомерКорпуса)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Код КАК Код,
		|	АдресныйКлассификатор.Индекс КАК Индекс
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
		|	И АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Улица.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Улица.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Улица.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Улица.КодНаселенногоПунктаВКоде);
		Запрос.УстановитьПараметр("КодУлицыВКоде", Улица.КодУлицыВКоде);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьДома = (Выборка.Количество() > 0);
		КодДома = 0;
		Пока Выборка.Следующий() Цикл

			Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
				Интервал = Врег(СокрЛП(Выборка.Наименование));
				
				Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал) Тогда
					КодДома = Выборка.Код;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") 
					+ СокрЛП(НомерКорпуса), Интервал)) Тогда
					
					КодДома = Выборка.Код;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") 
					+ СокрЛП(НомерКорпуса), Интервал)) Тогда
					
					КодДома = Выборка.Код;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") 
					+ СокрЛП(НомерКорпуса), Интервал)) Тогда
					
					КодДома = Выборка.Код;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КодДома = 0 Тогда	
			Дом = Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,
			|КодАдресногоОбъектаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде,
			|ПризнакАктульности", 0, "", "", 0, "", 0, 0, 0, 0, 0, 0);
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	АдресныйКлассификатор.Код КАК Код,
			|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
			|	АдресныйКлассификатор.Наименование КАК Наименование,
			|	АдресныйКлассификатор.Сокращение КАК Сокращение,
			|	АдресныйКлассификатор.Индекс КАК Индекс,
			|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
			|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
			|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
			|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
			|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
			|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			|ГДЕ
			|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
			|	И АдресныйКлассификатор.Код = &КодДома";
			Запрос.УстановитьПараметр("КодДома", КодДома);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Дом = ПолучитьПустуюСтруктуруАдреса();
			Иначе
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Дом = Новый Структура;
				Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
					Дом.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЦикла;
			КонецЕсли;
	    	
		КонецЕсли;
		СтруктураПроверки.Вставить("Дом", Дом);
		
		// Если по улице нет домов в КЛАДР - считаем, что ошибки нет
		// Если же по улице есть дома, и код дома не найден - то ошибка.
		Если КодДома = 0 И ЕстьДома Тогда
			ЕстьОшибки = Истина;
			Если ПустаяСтрока(НомерДома) Тогда
				СообщениеОбОшибке = НСтр("ru='Корпус ""%НомерКорпуса%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерКорпуса%", НомерКорпуса);
				СтруктураОшибок.Вставить("Корпус", СообщениеОбОшибке);
			ИначеЕсли ПустаяСтрока(НомерКорпуса) ТОгда
				СообщениеОбОшибке = НСтр("ru='Дом ""%НомерДома%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерДома%", НомерДома);
				СтруктураОшибок.Вставить("Дом", СообщениеОбОшибке);
			Иначе
				СообщениеОбОшибке = НСтр("ru='Дом ""%НомерДома%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерДома%", НомерДома);
				СтруктураОшибок.Вставить("Дом", СообщениеОбОшибке);
				СообщениеОбОшибке = НСтр("ru='Корпус ""%НомерКорпуса%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерКорпуса%", НомерКорпуса);
				СтруктураОшибок.Вставить("Корпус", СообщениеОбОшибке);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	// Проверка индекса
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.Индекс КАК Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.Индекс = &УказанныйИндекс";
	Запрос.УстановитьПараметр("УказанныйИндекс", УказанныйИндекс);
	ИндексНеСуществует = Запрос.Выполнить().Пустой();
	
	Если Не ПустаяСтрока(УказанныйИндекс) Тогда
		Если ИндексНеСуществует Тогда
			ЕстьОшибки = Истина;
			СообщениеОбОшибке = НСтр("ru='Индекс ""%УказанныйИндекс%"" не найден в адресном классификаторе.'");
		ИначеЕсли НомерИндекса <> УказанныйИндекс Тогда
			ЕстьОшибки = Истина;
			СообщениеОбОшибке = НСтр("ru='Индекс ""%УказанныйИндекс%"" не соответствует введенному адресу.'");
		КонецЕсли;
		Если ЕстьОшибки Тогда 
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%УказанныйИндекс%", УказанныйИндекс);
			СтруктураОшибок.Вставить("Индекс", СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	СтруктураПроверки.Вставить("ЕстьОшибки", ЕстьОшибки);
	СтруктураПроверки.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	Возврат СтруктураПроверки;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	Возврат Ложь;
	
КонецФункции

// Проверяет загружен ли адресный элемент в базу.
//
// Параметры: 
//  НазваниеРегиона - Строка - название региона(с сокращением)
//  НазваниеРайона - Строка - название района(с сокращением)
//  НазваниеГорода - Строка - название города(с сокращением)
//  НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//  НазваниеУлицы - Строка - название улицы(с сокращением)
//  Уровень - Число - уровень, который нужно проверить на загруженность
//
// Возвращаемое значение:
//  Булево - Истина, если адресный элемент загружен, Ложь - в противном случае.
//
Функция АдресныйЭлементЗагружен(Знач НазваниеРегиона, Знач НазваниеРайона = "", Знач НазваниеГорода = "", 
	Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Уровень = 1) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Родитель = ПолучитьПустуюСтруктуруАдреса();
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1,  Родитель);
	
	Если Уровень > 1 Тогда
		
		Если Регион.Код > 0 Тогда
			Родитель = Регион;
		КонецЕсли;
		Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, Родитель);
		
		Если Уровень > 2 Тогда
			
			Если Район.Код > 0 Тогда
				Родитель = Район;
			КонецЕсли;
			Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, Родитель);
			
			Если Уровень > 3 Тогда
				
				Если Город.Код > 0 Тогда
					Родитель = Город;
				КонецЕсли;
				НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, Родитель);
				
				Если Уровень > 4 Тогда
					
					Если НаселенныйПункт.Код > 0 Тогда
						Родитель = НаселенныйПункт;
					КонецЕсли;
					Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, Родитель);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Если не указан уровень или указан 1й уровень, то проверяем существование всех уровней
	Если Уровень = 1 Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента <> 1
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 2й уровень, то проверяем существование районов в регионе
	ИначеЕсли Уровень = 2 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 2
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 3й уровень, то проверяем существование городов в районе
	ИначеЕсли Уровень = 3 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 3
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		
	// Если указан 4й уровень, то проверяем существование населенных пунктов в городе
	ИначеЕсли Уровень = 4 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 4
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Город.КодГородаВКоде);
		
	// Если указан 5й уровень, то проверяем существование улиц в населенном пункте
	ИначеЕсли Уровень = 5 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		
	// Если указан 6й уровень, то проверяем существование домов на улице
	ИначеЕсли Уровень = 6 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
		|	И АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		Запрос.УстановитьПараметр("КодУлицыВКоде", Улица.КодУлицыВКоде);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор

	Возврат Ложь;
	
КонецФункции

// По полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
//	СтрокаЭлемента - Строка - строка элемента.
//	АдресноеСокращение - Строка - адресное сокращение.
//
// Возвращаемое значение:
//	Строка - имя и адресное сокращение.
//
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

	// СтандартныеПодсистемы.АдресныйКлассификатор
	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Сокращение КАК Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеСокращения КАК АдресныеСокращения
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
		Возврат СтрокаЭлемента;
	Иначе
		АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
		Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	Возврат СтрокаЭлемента;

КонецФункции

// По переданным элементам адреса указывает, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры: 
//  НазваниеРегиона - Строка - название региона(с сокращением)
//  НазваниеРайона - Строка - название района(с сокращением)
//  НазваниеГорода - Строка - название города(с сокращением)
//  НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//  НазваниеУлицы - Строка - название улицы(с сокращением)
//
// Возвращаемое значение:
//  Структура с полями:
//  Регион - Булево - регион загружен
//  Район - Булево - район загружен
//  Город - Булево - город загружен
//  НаселенныйПункт - населенный пункт загружен
//  Улица - Булево - улица загружена
//
Функция СтруктураЗагруженныхЭлементовАдреса(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода,
	Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт

	// СтандартныеПодсистемы.АдресныйКлассификатор
	СтруктураЗагруженных = Новый Структура("Регион,Район,Город,НаселенныйПункт,Улица,Дом"
	, АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 1)
	, АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 2)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, , , , 3)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, , , 4)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, , 5)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, 6));
	Возврат СтруктураЗагруженных;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	Возврат Новый Структура("Регион,Район,Город,НаселенныйПункт,Улица,Дом", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
		
КонецФункции

// По переданным элементам адреса указывает, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры: 
//	КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//	Дом - Строка - номер дома, если требуется
//	Корпус - Строка - номер корпуса, если требуется
//	Квартира - Строка - номер квартиры, если требуется
//
// Возвращаемое значение:
//  Структура с полями:
//		Индекс - Строка - индекс адреса по переданным параметрам
//		Регион - Строка - регион по переданному коду
//		Район - Строка - район по переданному коду
//		Город - Строка - город по переданному коду
//		НаселенныйПункт - Строка - населенный пункт по переданному коду
//		Улица - Строка - улица по переданному коду
//		Дом - Строка - переданный номер дома
//		Корпус - Строка - переданный номер корпуса
//		Квартира - Строка - переданный номер квартиры
//
Функция ПолучитьСтруктуруАдресаНаСервере(КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	СтруктураАдреса = Новый Структура();
	ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, СтруктураАдреса);
	
	// Получаем индекс по коду
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Индекс КАК Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.Код = &Код";
	Запрос.УстановитьПараметр("Код", КодАдресногоЭлемента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Индекс = ПолучитьИндекс(СтруктураАдреса.Регион, СтруктураАдреса.Район
		, СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.Улица, Дом, Корпус);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Индекс = Выборка.Индекс;
	КонецЕсли;	
	СтруктураАдреса.Вставить("Индекс", Индекс);
	
	СтруктураАдреса.Вставить("Дом", Дом);
	СтруктураАдреса.Вставить("Корпус", Корпус);
	СтруктураАдреса.Вставить("Квартира", Квартира);
	Возврат СтруктураАдреса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.АдресныйКлассификатор

////////////////////////////////////////////////////////////////////////////////
// Экспортные функции, вызываемые из формы выбора адресного классификатора

// Возвращает структуру ограничений по переданным параметрам
// со значениями адресных полей.
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  НазваниеУлицы - название улицы( с сокращением)
//  КодРодителя - Число - код родительского элемента
//  Уровень - Число - текущий уровень элемента
//
// Возвращаемое значение:
//  Структура со следующими полями:
//		КодАдресногоОбъектаВКоде - Строка - код региона для ограничения	
//		КодРайонаВКоде - Строка - код района для ограничения	
//		КодГородаВКоде - Строка - код города для ограничения	
//		КодНаселенногоПунктаВКоде - Строка - код населенного пункта для ограничения	
//		КодУлицыВКод - Строка - код улицы для ограничения
//		ТипАдресногоЭлемента - Число - текущий уровень элемента	
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя, Уровень) Экспорт
	
	СтруктураОграничений = Новый Структура();
	РодительскийЭлемент = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(НазваниеРегиона, НазваниеРайона
	, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	
	КодРодителя = РодительскийЭлемент.Код;
	
	// по коду определяем уровень элемента
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодАдресногоОбъектаВКоде"
	, РодительскийЭлемент.КодАдресногоОбъектаВКоде, РодительскийЭлемент.ТипАдресногоЭлемента, 1);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРайонаВКоде"
	, РодительскийЭлемент.КодРайонаВКоде, РодительскийЭлемент.ТипАдресногоЭлемента, 2);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодГородаВКоде"
	, РодительскийЭлемент.КодГородаВКоде, РодительскийЭлемент.ТипАдресногоЭлемента, 3);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодНаселенногоПунктаВКоде"
	, РодительскийЭлемент.КодНаселенногоПунктаВКоде, РодительскийЭлемент.ТипАдресногоЭлемента, 4);
	
	Если Уровень < 5 Тогда 
		ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде", 0, РодительскийЭлемент.ТипАдресногоЭлемента, 5);
	Иначе
		ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде"
		, РодительскийЭлемент.КодУлицыВКоде, РодительскийЭлемент.ТипАдресногоЭлемента, 5);
	КонецЕсли;
	
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", Уровень);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Возвращает строку(структуру) адресного классификатора по значениям адресных элементов
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  НазваниеУлицы - название улицы( с сокращением)
//
// Возвращаемое значение:
//  Структура полей по найденому адресному элементу
//
Функция ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона,
	Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт
											
	РодительскийЭлемент = ПолучитьПустуюСтруктуруАдреса();

	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1, РодительскийЭлемент);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительскийЭлемент);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительскийЭлемент);
    Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительскийЭлемент);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительскийЭлемент);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
										
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы со строками

// Строит запрос автоподбора для регистра
//
// Параметры:
//	Текст - Строка - строка запроса.
//	СтруктураПараметров - Структура - структура параметров.
//	КоличествоЭлементов - Чтсло - количество первых элементов.
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат выполнения запроса.
//
Функция ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Знач Текст, СтруктураПараметров, КоличествоЭлементов)
	
	Объект = Метаданные.РегистрыСведений.АдресныйКлассификатор;
    	
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, "ТаблицаРегистра");
	
	СтрокаПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
				  	|	ТаблицаРегистра.* ";
	
	Запрос.Текст = СтрокаПолей + "
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК ТаблицаРегистра
		|ГДЕ ";

	
	// формируем ограничения по полям для поиска
	ОграничениеПоПолю = "(ТаблицаРегистра.Наименование ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"") ";
	
	Запрос.Текст = Запрос.Текст +"
		|	(" + ОграничениеПоПолю + ") " + СтрокаОтборовПоСтруктуре;

	Возврат Запрос.Выполнить().Выгрузить();
 	
КонецФункции

// Создает объект запрос, устанавливает у него параметр ТекстАвтоПодбора и
// убирает лишние символы в строке поиска.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска в запросе.
//	СтрокаОтборовПоСтруктуре - Строка - стирка отборов по структуре.
//	СтруктураПараметров - Структура - структура параметров для запроса.
//	ИмяТаблицыОграничений - Строка - имя таблицв ограничений.
//
// Возвращаемое значение:
//	Строка - текст апроса.
//
Функция СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	СтрокаПоиска = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (СтрокаПоиска + "%"));
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
        Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
	
КонецФункции

// Формируется строка описания адреса по переданным элементам адреса
//
// Параметры:
//	ДетализацияДоУровня - Число - детализация уровня адресного объекта.
//	Регион - Строка - регион.
//	Район - Строка - район.
//	Город - Строка - город.
//	НаселенныйПункт - Строка - населенный пункт.
//	Улица - Строка - название улицы.
//
// Возвращаемое значение:
//	Строка - описание.
//
Функция СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня, Регион = "", Район = "", Город = "", 
	НаселенныйПункт = "", Улица = "")
	
	Описание = Улица;
	
	Если ДетализацияДоУровня <= 4 Тогда // Улица, Населенный пункт
			
		Если ПустаяСтрока(Описание) И ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = НаселенныйПункт;
		ИначеЕсли ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + НаселенныйПункт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 3 Тогда // Улица, Населенный пункт, Город
			
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Город) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Город;
		ИначеЕсли ПустаяСтрока(Город) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Город;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 2 Тогда // Улица, Населенный пункт, Город, Район
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Район) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Район;
		ИначеЕсли ПустаяСтрока(Район) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Район;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня = 1 Тогда // Улица, Населенный пункт, Город, Район, Регион
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Регион) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Регион;
		ИначеЕсли ПустаяСтрока(Регион) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Регион;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Раскладывает данные во временные таблицы Регионы, Районы, Города, НаселенныеПункты, Улицы - соответствующие адресам,
// полученным из временной таблицы Адреса. Перед вызовом процедуры нужно поместить данные во временную таблицу Адреса:
//	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	Запрос.Текст = 	
//	"ВЫБРАТЬ
//	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
//	|	АдресныйКлассификатор.Код,
//	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
//	|	АдресныйКлассификатор.ПризнакАктуальности,
//	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК Регион,
//	|	АдресныйКлассификатор.КодРайонаВКоде КАК Район,
//	|	АдресныйКлассификатор.КодГородаВКоде КАК Город,
//	|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК НаселенныйПункт,
//	|	АдресныйКлассификатор.КодУлицыВКоде КАК Улица
//	|ПОМЕСТИТЬ Адреса
//	|ИЗ
//	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
//	|ГДЕ
//	|	АдресныйКлассификатор.Индекс = &Индекс
//	|	И АдресныйКлассификатор.ТипАдресногоЭлемента < 6";
//	Запрос.Выполнить();
// 	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
//
// Параметры:
//	МенеджерВременныхТаблиц - менеджер временных таблиц, в котором уже должна быть временная таблица Адреса
//
Процедура РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Адреса.Код КАК Код,
	|	АдресныйКлассификатор.Код КАК КодРегиона,
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
	|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
	|ПОМЕСТИТЬ Регионы
	|ИЗ
	|	Адреса КАК Адреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = " 	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Адреса.Код КАК Код,
	|	АдресныйКлассификатор.Код КАК КодРайона,
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
	|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
	|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
	|ПОМЕСТИТЬ Районы
	|ИЗ
	|	Адреса КАК Адреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
	|			И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 2
	|";
	Запрос.Выполнить();

	Запрос.Текст = " 	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Адреса.Код КАК Код,
	|	АдресныйКлассификатор.Код КАК КодГорода,
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
	|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
	|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
	|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
	|ПОМЕСТИТЬ Города
	|ИЗ
	|	Адреса КАК Адреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
	|			И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
	|			И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 3
	|";
	Запрос.Выполнить();

	Запрос.Текст = " 	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Адреса.Код КАК Код,
	|	АдресныйКлассификатор.Код КАК КодНаселенногоПункта,
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
	|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
	|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
	|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
	|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
	|ПОМЕСТИТЬ НаселенныеПункты
	|ИЗ
	|	Адреса КАК Адреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
	|			И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
	|			И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
	|			И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 4
	|";
	Запрос.Выполнить();

	Запрос.Текст = " 	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Адреса.Код КАК Код,
	|	АдресныйКлассификатор.Код КАК КодУлицы,
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
	|	Адреса.КодУлицыВКоде КАК КодУлицыВКоде,
	|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
	|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
	|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
	|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
	|ПОМЕСТИТЬ Улицы
	|ИЗ
	|	Адреса КАК Адреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
	|			И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
	|			И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
	|			И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
	|			И Адреса.КодУлицыВКоде = АдресныйКлассификатор.КодУлицыВКоде
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 5
	|";
	Запрос.Выполнить();	
	
КонецПроцедуры

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Возвращаемое значение:
// Структура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса()
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,
	|КодАдресногоОбъектаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде,
	|ПризнакАктульности", 0, "", "", 0, "", 0, 0, 0, 0, 0, 0);
	
КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//  ТочноеСоответствие - (булево) номер дома должен точно соответствовать номеру в интервале
//		или допускается наличие дробей и произвольных букв после номера дома
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал, ТочноеСоответствие)

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		// Проверяем вхождение конкретного номера дома в интервал (отбрасывая букву "К" - означающую "корпус")
		НомерБезЛишнихСимволов = СтрЗаменить(ВРЕГ(СтрЗаменить("" + Номер, " ", "")), "К", "");
		ИнтервалБезЛишнихСимволов = СтрЗаменить(ВРЕГ(СтрЗаменить("" + Интервал, " ", "")), "К", "");
		НомерВходитВИнтервал = (НомерБезЛишнихСимволов = ИнтервалБезЛишнихСимволов);
		Если НомерВходитВИнтервал Тогда
			Возврат Истина;
		// Если номер был числом, но не найден в интервале, то этот номер действительно не входит в интервал
		ИначеЕсли ТипЗнч(Номер) = Тип("Число") Тогда
			Возврат Ложь;
		// Если же строковый номер не найден в интервале, то попробуем отбросить то что следовало 
		// за числовой частью номер и проверить вхождение числовой части номера дома в интервал.
		Иначе
			Если ТочноеСоответствие Тогда
				Возврат Ложь;
			Иначе
				// Обрезаем то, что следует за косой чертой
				Если Найти(Номер, "\") > 0 Тогда
					Номер = Лев(Номер, Найти(Номер, "\") - 1);
				ИначеЕсли Найти(Номер, "/") > 0 Тогда
					Номер = Лев(Номер, Найти(Номер, "/") - 1);
				КонецЕсли;
				Номер = ОставитьТолькоЦифрыВСтроке(Номер, "К");
				Интервал = СтрЗаменить(Интервал, "К", "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ТочноеСоответствие Тогда
			//Обрезаются возможные значения "ДВЛД"(домовладение) и "ВЛД"(владение).
			Если Найти(Интервал, "ДВЛД") <> 0 Тогда
				Интервал = СтрЗаменить(Интервал, "ДВЛД", "");
			ИначеЕсли Найти(Интервал, "ВЛД") <> 0 Тогда
				Интервал = СтрЗаменить(Интервал, "ВЛД", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		ЛеваяЧасть = Лев(Интервал, Позиция - 1);
		ПраваяЧасть = Сред(Интервал, Позиция + 1);
		МинЗначение  = Число(ОставитьТолькоЦифрыВСтроке(ЛеваяЧасть));
		МаксЗначение = Число(ОставитьТолькоЦифрыВСтроке(ПраваяЧасть));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Интервал) Тогда
		// случай когда интервал был равен Ч или Н
		Попали = 1;
		
	Иначе
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(ОставитьТолькоЦифрыВСтроке(Интервал)) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//  ТочноеСоответствие - (булево) номер дома должен точно соответствовать номеру в интервале
//		или допускается наличие дробей и произвольных букв после номера дома
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал, ТочноеСоответствие = Ложь)
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал, ТочноеСоответствие);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1)), ТочноеСоответствие) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//  Улица - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование КАК Наименование,
	|	АдресныйКлассификатор.Индекс КАК Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
	|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
	|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
	|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
	|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
	|	И АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде";
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Улица.КодАдресногоОбъектаВКоде);
	Запрос.УстановитьПараметр("КодРайонаВКоде", Улица.КодРайонаВКоде);
	Запрос.УстановитьПараметр("КодГородаВКоде", Улица.КодГородаВКоде);
	Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Улица.КодНаселенногоПунктаВКоде);
	Запрос.УстановитьПараметр("КодУлицыВКоде", Улица.КодУлицыВКоде);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексДома = "";
	
	// Сначала ищем по точному соответствию
	Пока Выборка.Следующий() Цикл

		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал, Истина) Тогда
				ИндексДома = Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// А если не нашлось, то ищем по неточному соответствию
	Если ПустаяСтрока(ИндексДома) Тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл

			Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
				Интервал = Врег(СокрЛП(Выборка.Наименование));
				
				Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал, Ложь) Тогда
					ИндексДома = Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ИндексДома) Тогда
			Возврат Улица.Индекс;
		Иначе
			Возврат ИндексДома;
		КонецЕсли;
	
	Иначе
		Возврат ИндексДома;
	КонецЕсли;
	
КонецФункции

// Функция по адресу возвращает структуру ограничений
//
// Параметры:
//	ПолеРегиона - Строка - регион.
//	ПолеРайона - Строка - район.
//	ПолеГорода - Строка - город.
//	ПолеНаселенногоПункта - Строка - населенный пункт.
//	ИмяУлицы - Строка - улица.
//	УровеньЭлемента - Число - уровень адресного элемента.
//
// Возвращаемое значение:
//	Стурктура - структура ограничений.
//
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, 
	УровеньЭлемента) 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(ПолеРегиона, ПолеРайона, ПолеГорода
		, ПолеНаселенногоПункта, ИмяУлицы, КодРодителя, УровеньЭлемента);
		
	Иначе
		СтруктураОграничений = Новый Структура();
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	КонецЕсли;
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справочника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(знач НазваниеЭлемента, ТипЭлемента, ЭлементРодитель)

	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если ЭлементРодитель.Код > 0 Тогда // проверка на соответствие подчинению родителю
		
		Если ЭлементРодитель.ТипАдресногоЭлемента <= 5 Тогда
			
			Если ЭлементРодитель.КодАдресногоОбъектаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде)";
				Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", ЭлементРодитель.КодАдресногоОбъектаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодРайонаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", ЭлементРодитель.КодРайонаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодГородаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", ЭлементРодитель.КодГородаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодНаселенногоПунктаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", ЭлементРодитель.КодНаселенногоПунктаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодУлицыВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", ЭлементРодитель.КодУлицыВКоде);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.Код КАК Код,
	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
	|	АдресныйКлассификатор.Наименование КАК Наименование,
	|	АдресныйКлассификатор.Сокращение КАК Сокращение,
	|	АдресныйКлассификатор.Индекс КАК Индекс,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
	|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
	|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
	|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
	|	И АдресныйКлассификатор.Наименование = &Наименование " +
	ОграничениеПоКоду;
	
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РезультирующаяСтруктура = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			РезультирующаяСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		Возврат РезультирующаяСтруктура;
		
	КонецЕсли;
	
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
// 
// Параметры:
//	ДанныеСтруктуры - Структура - структура, в которую необходимо добавить данные.
//	ИмяЭлемента - Строка - имя элемента.
//	КодЭлемента - Число - код элемента.
//	УровеньРодителя - Число - уровень рожителя.
//	УровеньЭлемента - Число - уровень элемента.
//
Процедура ДобавитьКодВСтруктуру(ДанныеСтруктуры, ИмяЭлемента, КодЭлемента, УровеньРодителя, УровеньЭлемента)
	
	Если (КодЭлемента <> 0) ИЛИ (УровеньРодителя >= УровеньЭлемента) Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
    КонецЕсли;
	
КонецПроцедуры

// Функция оставляет в строке только цифры, отбрасывая все следующие за цифрами буквы и другие символы,
// причём если строка начинается с буквы - то считаем, что 
//
// Параметры:
//	РазбираемаяСтрока - Строка - строка, из которой будут отбрасываться все не цифровые символы
//	ПропускаемыеСимволы - Строка - символы, которые при разборе можно пропустить, на любых других разбор прекращается.
//		Например, при разборе "К25СТР1", если пропускаемые символы:
//			"" - то возвратится "0", 
//			"К" - возвратится "25",
//			"КСТР" - возвратится "251"
// 
// Возвращаемое значение:
//	Строка - строка, состоящая только из цифр, полученных из исходной строки
//
Функция ОставитьТолькоЦифрыВСтроке(РазбираемаяСтрока, ПропускаемыеСимволы = "")

	Цифры = "1234567890";
	ЦифроваяЧасть = "";
	Для НомерСимвола = 1 По СтрДлина(РазбираемаяСтрока) Цикл
		ТекущийСимвол = Сред(РазбираемаяСтрока, НомерСимвола, 1);
		Если Найти(Цифры, ТекущийСимвол) Тогда
			ЦифроваяЧасть = ЦифроваяЧасть + ТекущийСимвол;
		Иначе
			Если Найти(ПропускаемыеСимволы, ТекущийСимвол) = Неопределено Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если пустую строку попробовать преобразовать в число - то будет ошибка,
	// поэтому в данном случае вместо пустой стороки возвращаем строку с нулем.
	Если ЦифроваяЧасть = "" Тогда
		ЦифроваяЧасть = "0";
	КонецЕсли;
	
	Возврат ЦифроваяЧасть;
	
КонецФункции

// Конец СтандартныеПодсистемы.АдресныйКлассификатор

