



// Процедура строит список должностей (или подразделений), по штатному расписанию организации.
//  
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "ПодразделениеОрганизации"
//			определяет, что именно будет выбирать пользователь
//  ДолжностьИлиПодразделениеОрганизации - СправочникСсылка.удуПодразделенияУчереждения или   
//          СправочникСсылка.Должности, второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзШтатногоРасписанияОрганизации(Режим, Организация, ДолжностьИлиПодразделениеОрганизации, ДатаАктуальности = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделениеОрганизации) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделениеОрганизации", ДолжностьИлиПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Если Режим = "ПодразделениеОрганизации" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.удуШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности, ПодразделениеОрганизации.Организация = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.удуШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности, ПодразделениеОрганизации.Организация = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	Иначе
		Возврат Новый СписокЗначений
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
    Возврат СписокВыбора
	
КонецФункции // ВыбратьИзШтатногоРасписанияОрганизации

// Функция возвращаект сведения о позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
Функция СведенияОПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МесячнаяСтавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.СевернаяНадбавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.НадбавкаПоРайонномуКоэффициенту,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ВидРасчета
	|ИЗ
	|	РегистрСведений.удуШтатноеРасписаниеОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		ПодразделениеОрганизации = &Подразделение
	|			И Должность = &Должность) КАК ШтатноеРасписаниеОрганизацийСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОПозицииШтатногоРасписания()

// Функция проверяет необходимость задавать размер для расчета по заданному способу.
// Парамерты:
//	СпособРасчета
//
// Возвращаемое значение:
//	булево - признак того, нужен ли размер для расчета таким способом
//
Функция СпособРасчетаТребуетРазмер(СпособРасчета) Экспорт
	Возврат НЕ (
    СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.СдельныйЗаработок 
	    или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.НулеваяСумма 
		или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПроцентом 
		или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
	    или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
	    или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням 
	    или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
	    или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.СевернаяНадбавка
		или СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.ПроизвольнаяФормула
  );
КонецФункции


// Эта функция возвращает информацию о виде расчета 
//
// Параметры:      
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Структура
//
Функция ПреобразоватьСведенияОВидеРасчетаСхемыМотивацииВТаблицуЗначений(СведенияОВидеРасчета,СведенияОРазмере) Экспорт
			
		ТЗСведенияОВидеРасчета=Новый ТаблицаЗначений;
		ТЗСведенияОВидеРасчета.Колонки.Добавить("Показатель");
		ТЗСведенияОВидеРасчета.Колонки.Добавить("Размер");
		
		Для СчПоказателей = 1 По 6 Цикл
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
					СтрокаТЗ=ТЗСведенияОВидеРасчета.Добавить();
					СтрокаТЗ.Показатель=СведенияОВидеРасчета["Показатель" + СчПоказателей+ "Наименование"];
					СтрокаТЗ.Размер=СведенияОРазмере["Размер" + СчПоказателей];
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;
				
	Возврат ТЗСведенияОВидеРасчета;
	
КонецФункции  // ПреобразоватьСведенияОВидеРасчетаСхемыМотивацииВТаблицуЗначений

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.
// в.р., являющегося надбавкой
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьОтборыНадбавокСотрудникаИлиДанныеДляОтбора(НастройкиОтбора=истина,Текст="") Экспорт
	
	СпособыРасчета = Новый Массив;
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
    СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.Процентом);
	СпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПроизвольнаяФормула);

	Если НастройкиОтбора Тогда 
	
	НастройкиКомпоновкиДанных=Новый НастройкиКомпоновкиДанных;
	удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "ВидВремени", Перечисления.удуВидыВремени.ДополнительноОплачиваемоеВПределахНормы,
		ВидСравненияКомпоновкиДанных.Равно,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
    удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "Предопределенный", ложь,
		ВидСравненияКомпоновкиДанных.Равно,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "СпособРасчета", СпособыРасчета,
		ВидСравненияКомпоновкиДанных.ВСписке,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Возврат НастройкиКомпоновкиДанных;
	
	Иначе 	
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	удуОсновныеНачисленияОрганизаций.Ссылка
		             |ИЗ
		             |	ПланВидовРасчета.удуОсновныеНачисленияОрганизаций КАК удуОсновныеНачисленияОрганизаций
		             |ГДЕ
		             |	удуОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
		             |	И удуОсновныеНачисленияОрганизаций.СпособРасчета В(&СпособыРасчета)
		             |	И удуОсновныеНачисленияОрганизаций.Предопределенный = ЛОЖЬ
		             |	И ВЫБОР
		             |			КОГДА &Текст = """"
		             |				ТОГДА ИСТИНА
		             |			ИНАЧЕ удуОсновныеНачисленияОрганизаций.Наименование ПОДОБНО &Текст
		             |		КОНЕЦ";
		Запрос.УстановитьПараметр("СпособыРасчета",СпособыРасчета);
		Запрос.УстановитьПараметр("Текст",Текст);
		СписокРасчетов=Новый СписокЗначений;
		СписокРасчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		Возврат СписокРасчетов;
		
	КонецЕсли;
	
КонецФункции // ПолучитьСтруктуруОтборовНадбавокСотрудника()

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.
// основного начисления сотрудника, регистрирующего отработанное время
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьОтборыОсновногоНачисленияСотрудника(НастройкиОтбора=истина,Текст="") Экспорт
	
	Если НастройкиОтбора Тогда 
	
	НастройкиКомпоновкиДанных=Новый НастройкиКомпоновкиДанных;
	удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "ВидВремени", Перечисления.удуВидыВремени.ОтработанноеВПределахНормы,
		ВидСравненияКомпоновкиДанных.Равно,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Возврат НастройкиКомпоновкиДанных;	
	Иначе 
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	удуОсновныеНачисленияОрганизаций.Ссылка
		             |ИЗ
		             |	ПланВидовРасчета.удуОсновныеНачисленияОрганизаций КАК удуОсновныеНачисленияОрганизаций
		             |ГДЕ
		             |	удуОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыВремени.ОтработанноеВПределахНормы)";
		СписокРасчетов=Новый СписокЗначений;
		СписокРасчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		Возврат СписокРасчетов;

	КонецЕсли;
	
КонецФункции // ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника()

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
//  Объект - объект данных
//  Элемент - элемент формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Функция СинхронизироватьСтроки(Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки,ЭлементПоиска) Экспорт
	
	ТекущиеСтрокиСинхронизации=Новый Структура;
	
	Если ЭлементПоиска = Неопределено Тогда
		Возврат ТекущиеСтрокиСинхронизации;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		Возврат ТекущиеСтрокиСинхронизации;
	КонецЕсли;
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяКолонки, ЭлементПоиска);
	
	
	
	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл
		Если ЭлементСоответствия.Ключ = Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторСтроки = Неопределено;
		Попытка
			Строки = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				ИдентификаторСтроки=Строки[0].ПолучитьИдентификатор();
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если ИдентификаторСтроки <> Неопределено Тогда
			ТекущиеСтрокиСинхронизации.Вставить(ЭлементСоответствия.Ключ,ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТекущиеСтрокиСинхронизации;
	
КонецФункции  //  СинхронизироватьСтроки



// Вычисляет количество временно освобожденных ставок для переданных строк штатного.
// 	расписания на указанные в строках даты
//
// Параметры
//  ТаблицаСтрок - Таблица значений с колонками НомерСтроки, ДатаНачала, ПодразделениеОрганизации, Должность
//  ГоловнаяОрганизация - СправочникСсылка.Организации - головная организация документа
//
// Возвращаемое значение:
//   Таблица значений с колонками НомерСтроки, ОсвобожденныеСтавки 
//
Функция ВременноСвободныеСтавкиСтрокШтатногоРасписания(ТаблицаСтрок, ГоловнаяОрганизация) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДанныеДокумента", ТаблицаСтрок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиДокумента.НомерСтроки КАК НомерСтроки,
	|	РаботникиДокумента.ДатаНачала,
	|	РаботникиДокумента.ПодразделениеОрганизации,
	|	РаботникиДокумента.Должность
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	&ДанныеДокумента КАК РаботникиДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.ДатаНачала,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ДатыПоследнихДвиженийРаботников.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиНаШтатныхЕдиницах
	|ИЗ
	|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период,
	|			Работники.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК Работники
	|				ПО ТЧРаботникиОрганизации.ДатаНачала >= Работники.Период
	|		ГДЕ
	|			Работники.Организация = &ГоловнаяОрганизация
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки,
	|			Работники.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|			ПО ДатыПоследнихДвиженийРаботников.Период = ДанныеПоРаботникуДоНазначения.Период
	|				И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|ГДЕ
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации = ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	|	И ТЧРаботникиОрганизации.Должность = ДанныеПоРаботникуДоНазначения.Должность
	|	И ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихИзмененийСотрудников.НомерСтроки,
	|	ДатыПоследнихИзмененийСотрудников.Сотрудник,
	|	ДатыПоследнихИзмененийСотрудников.ДатаНачала
	|ПОМЕСТИТЬ ВТСотрудникиОсвободившиеСтавку
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СотрудникиОсвободившиеСтавкиВОрганизациях.Период) КАК ПериодПоследнегоДвижения,
	|		СотрудникиОсвободившиеСтавкиВОрганизациях.Сотрудник КАК Сотрудник,
	|		СтрокиДокумента.НомерСтроки КАК НомерСтроки,
	|		СтрокиДокумента.ДатаНачала КАК ДатаНачала
	|	ИЗ
	|		ВТСотрудникиНаШтатныхЕдиницах КАК СтрокиДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСотрудникиОсвободившиеСтавкиВОрганизациях КАК СотрудникиОсвободившиеСтавкиВОрганизациях
	|			ПО СтрокиДокумента.ДатаНачала >= СотрудникиОсвободившиеСтавкиВОрганизациях.Период
	|				И СтрокиДокумента.Сотрудник.Организация = СотрудникиОсвободившиеСтавкиВОрганизациях.Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиДокумента.НомерСтроки,
	|		СотрудникиОсвободившиеСтавкиВОрганизациях.Сотрудник,
	|		СтрокиДокумента.ДатаНачала) КАК ДатыПоследнихИзмененийСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСотрудникиОсвободившиеСтавкиВОрганизациях КАК СотрудникиОсвободившиеСтавкиВОрганизацияхСрезПоследних
	|		ПО ДатыПоследнихИзмененийСотрудников.ПериодПоследнегоДвижения = СотрудникиОсвободившиеСтавкиВОрганизацияхСрезПоследних.Период
	|			И ДатыПоследнихИзмененийСотрудников.Сотрудник = СотрудникиОсвободившиеСтавкиВОрганизацияхСрезПоследних.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОсвободившиеСтавкиВОрганизацияхСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И СотрудникиОсвободившиеСтавкиВОрганизацияхСрезПоследних.ПериодЗавершения <= ДатыПоследнихИзмененийСотрудников.ДатаНачала
	|				ТОГДА СотрудникиОсвободившиеСтавкиВОрганизацияхСрезПоследних.ОсвобождатьСтавкуЗавершения
	|			ИНАЧЕ СотрудникиОсвободившиеСтавкиВОрганизацияхСрезПоследних.ОсвобождатьСтавку
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки,
	|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность КАК Должность,
	|	СУММА(РаботникиОрганизаций.ЗанимаемыхСтавок) КАК Ставка
	|ПОМЕСТИТЬ ОсвободившиесяСтавки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСотрудникиОсвободившиеСтавку.НомерСтроки КАК НомерСтроки,
	|		ВТСотрудникиОсвободившиеСтавку.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ
	|		ВТСотрудникиОсвободившиеСтавку КАК ВТСотрудникиОсвободившиеСтавку
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВТСотрудникиОсвободившиеСтавку.ДатаНачала >= РаботникиОрганизаций.Период
	|				И ВТСотрудникиОсвободившиеСтавку.Сотрудник = РаботникиОрганизаций.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСотрудникиОсвободившиеСтавку.НомерСтроки,
	|		ВТСотрудникиОсвободившиеСтавку.Сотрудник) КАК ПоследниеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ПоследниеДаты.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ПоследниеДаты.Период = РаботникиОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоследниеДаты.НомерСтроки,
	|	РаботникиОрганизаций.ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтрокиДокумента.НомерСтроки,
	|	СУММА(ОсвободившиесяСтавки.Ставка) КАК ОсвобожденныеСтавки
	|ИЗ
	|	ВТСтрокиДокумента КАК ВТСтрокиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОсвободившиесяСтавки КАК ОсвободившиесяСтавки
	|		ПО ВТСтрокиДокумента.НомерСтроки = ОсвободившиесяСтавки.НомерСтроки
	|			И ВТСтрокиДокумента.ПодразделениеОрганизации = ОсвободившиесяСтавки.ПодразделениеОрганизации
	|			И ВТСтрокиДокумента.Должность = ОсвободившиесяСтавки.Должность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСтрокиДокумента.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ВременноСвободныеСтавкиСтрокШтатногоРасписания()
