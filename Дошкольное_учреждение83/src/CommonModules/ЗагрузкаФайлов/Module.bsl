// Извлечь текст из файла и поместить во временное хранилище
Функция ИзвлечьТекстВоВременноеХранилище(ПолноеИмяФайла) Экспорт
	АдресВременногоХранилища = "";
	
	ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	Если Не ИзвлекатьТекстыФайловНаСервере Тогда
		Попытка
			
			ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
			Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
				Извлечение = Новый ИзвлечениеТекста(ПолноеИмяФайла);
				Текст = Извлечение.ПолучитьТекст();
			КонецЕсли;			
		
		Исключение
			Текст = "";
		КонецПопытки;
	КонецЕсли;

	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	 КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	ТекстовыйФайл.Записать(Текст);
	ТекстовыйФайл.Закрыть();

	Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Данные);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат АдресВременногоХранилища;
КонецФункции

// Разыменовать lnk файл
Функция РазыменоватьLnkФайл(ВыбранныйФайл) Экспорт
	
	ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
	
		ShellApp = Новый COMОбъект("shell.application");
		FolderObj = ShellApp.NameSpace(ВыбранныйФайл.Путь);		// полный (только) путь на lnk-файл
		FolderObjItem = FolderObj.items().item(ВыбранныйФайл.Имя); 	// только имя lnk-файла
		Link = FolderObjItem.GetLink();
		Возврат Новый Файл(Link.path);
		
	КонецЕсли;
	
	Возврат ВыбранныйФайл;
КонецФункции

// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов).
// - если файл, просто добавляет его,   если каталог - создает группу и рекурсивно вызывает саму себя.
Процедура ИмпортФайлов(
	Владелец, 
	Путь, 
	ФайлыАргумент, 
	Индикатор, 
	МассивИменФайловСОшибками, 
	МассивСтруктурВсехФайлов, 
	Комментарий, 
	ХранитьВерсии, 
	Рекурсивно, 
	КоличествоСуммарное, 
	Счетчик,
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	МассивВсехПапок,
	РежимЗагрузки,
	Пользователь) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ДокГруппаСсылка;
	
	МаксРазмерФайла = РаботаСФайлами.ПолучитьМаксимальныйРазмерФайла();
	ЗапретЗагрузкиФайловПоРасширению = РаботаСФайлами.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = РаботаСФайлами.ПолучитьСписокЗапрещенныхРасширений();
	
	Для Каждого ВыбранныйФайл Из ФайлыАргумент Цикл
		Попытка

			Если ВыбранныйФайл.Существует() Тогда

				Если ВыбранныйФайл.Расширение = ".lnk" Тогда
					ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
				КонецЕсли;
				
				Если ВыбранныйФайл.ЭтоКаталог() Тогда
					
					Если Рекурсивно = Истина Тогда
						НовыйПуть = Строка(ВыбранныйФайл.Путь);
						ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(НовыйПуть);
						НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
						МассивФайлов = ФайловыеФункцииКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
						
						// Создаем группу в справочнике - эквивалент папки на диске
						Если МассивФайлов.Количество() <> 0 Тогда
							ИмяФайла = ВыбранныйФайл.Имя;
							
							Если РаботаСФайлами.ЕстьПапкаСТакимИменем(ИмяФайла, Владелец, ПерваяПапкаСТакимЖеИменем) Тогда
								ДокГруппаСсылка = ПерваяПапкаСТакимЖеИменем;
							Иначе	
								ДокГруппаСсылка = РаботаСФайлами.СправочникиПапкиСоздатьЭлемент(ИмяФайла, Владелец, Пользователь);
							КонецЕсли;
							
							ИмпортФайлов(
								ДокГруппаСсылка, 
								НовыйПуть, 
								МассивФайлов, 
								Индикатор, 
								МассивИменФайловСОшибками, 
								МассивСтруктурВсехФайлов, 
								Комментарий, 
								ХранитьВерсии, 
								Рекурсивно, 
								КоличествоСуммарное, 
								Счетчик,
								ИдентификаторФормы,
								ПсевдоФайловаяСистема,
								ДобавленныеФайлы,
								МассивВсехПапок,
								РежимЗагрузки,
								Пользователь);
								
							МассивВсехПапок.Добавить(НовыйПуть);	
						КонецЕсли;
					КонецЕсли;
				
					Продолжить;
				КонецЕсли;
				
				Если Не ФайловыеФункцииКлиентСервер.ФайлМожноЗагружать(ВыбранныйФайл, МаксРазмерФайла, ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, МассивИменФайловСОшибками) Тогда
					Продолжить;
				КонецЕсли;	
					
				// Создаем Элемент справочника Файлы
				ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
				Расширение = ВыбранныйФайл.Расширение;
				
				Если РежимЗагрузки Тогда
					Если РаботаСФайлами.ЕстьФайлСТакимИменем(ИмяБезРасширения, Владелец) Тогда
						Запись = Новый Структура;
						Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Файл с таким именем уже есть в информационной базе в папке ""%1""'"),
							Строка(Владелец));			
						Запись.Вставить("Ошибка", ТекстОшибки);
						МассивИменФайловСОшибками.Добавить(Запись);
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				Данные = Новый ДвоичныеДанные(ВыбранныйФайл.ПолноеИмя);
				// Поместим Файл в ВременноеХранилище
				АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Данные);
				
				АдресВременногоХранилищаТекста = ИзвлечьТекстВоВременноеХранилище(
					ВыбранныйФайл.ПолноеИмя);

				// Создаем элемент справочника Файлы
				ФайловыеФункцииКлиентСервер.СоздатьЭлементСправочникаФайлы(ВыбранныйФайл, МассивСтруктурВсехФайлов, 
					Владелец, ИдентификаторФормы, Комментарий, ХранитьВерсии, ДобавленныеФайлы,
					АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста, Пользователь);
				
			Иначе
				Запись = Новый Структура;
				Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
				Запись.Вставить("Ошибка", НСтр("ru = 'Файл отсутствует на диске'"));
				МассивИменФайловСОшибками.Добавить(Запись);
			КонецЕсли;

		Исключение
			ОшибкаИнфо = ИнформацияОбОшибке();
			СообщениеОбОшибке = "";
			Если ОшибкаИнфо.Причина = Неопределено Тогда
				СообщениеОбОшибке =ОшибкаИнфо.Описание;
			Иначе
				СообщениеОбОшибке = ОшибкаИнфо.Причина.Описание;
			КонецЕсли;
			
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", СообщениеОбОшибке);
			МассивИменФайловСОшибками.Добавить(Запись);
		
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Импорт - с вспомогательными операциями типа проверки предельного размера 
// И впоследствии удаления файлов и показа ошибок.
// При импорте только одной папки - вернет на нее ссылку.
Функция ИмпортФайловВыполнить(
	ПапкаДляДобавления, 
	ВыбранныеФайлы, 
	Комментарий, 
	ХранитьВерсии, 
	УдалятьФайлыПослеДобавления, 
	Рекурсивно, 
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	РежимЗагрузки,
	Пользователь,
	МассивИменФайловСОшибками) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ПапкаДляДобавленияТекущая;

	ВыбранКаталог = Ложь;
	Путь = "";
	КоличествоСуммарное = 0;
	
	МассивФайлов = Новый Массив;
	Счетчик = 0;
	Индикатор = 0;
	МассивСтруктурВсехФайлов = Новый Массив;
	МассивВсехПапок = Новый Массив;
	
	ПапкаДляДобавленияТекущая = Неопределено;
	
	Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
		Попытка
			ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
			
			ВыбранКаталог = Ложь;
			Если ВыбранныйФайл.Существует() Тогда
				ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
			КонецЕсли;
			
			Если ВыбранКаталог Тогда
				Путь = ИмяФайла.Значение;
				МассивФайловЭтогоКаталога = ФайловыеФункцииКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, Путь);
				
				ИмяПапки = ВыбранныйФайл.Имя;
				
				Если РаботаСФайлами.ЕстьПапкаСТакимИменем(ИмяПапки, ПапкаДляДобавления, ПерваяПапкаСТакимЖеИменем) Тогда
					ПапкаДляДобавленияТекущая = ПерваяПапкаСТакимЖеИменем;
				Иначе	
					ПапкаДляДобавленияТекущая = РаботаСФайлами.СправочникиПапкиСоздатьЭлемент(ИмяПапки, ПапкаДляДобавления, Пользователь);
				КонецЕсли;
				
				// Собственно импорт 
				ИмпортФайлов(
					ПапкаДляДобавленияТекущая, 
					Путь, 
					МассивФайловЭтогоКаталога, 
					Индикатор, 
					МассивИменФайловСОшибками, 
					МассивСтруктурВсехФайлов, 
					Комментарий, 
					ХранитьВерсии, 
					Рекурсивно, 
					КоличествоСуммарное, 
					Счетчик,
					ИдентификаторФормы,
					ПсевдоФайловаяСистема,
					ДобавленныеФайлы,
					МассивВсехПапок,
					РежимЗагрузки,
					Пользователь);
				МассивВсехПапок.Добавить(Путь);	
					
			Иначе
				МассивФайлов.Добавить(ВыбранныйФайл);
			КонецЕсли;
		Исключение
			// запись в журнал регистрации
			ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ОписаниеОшибки());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка автоматической загрузки файлов: ""%1""'"),
					ОписаниеОшибки);			
			ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		// Собственно импорт 
		ИмпортФайлов(
			ПапкаДляДобавления, 
			Путь, 
			МассивФайлов, 
			Индикатор, 
			МассивИменФайловСОшибками, 
			МассивСтруктурВсехФайлов, 
			Комментарий, 
			ХранитьВерсии, 
			Рекурсивно, 
			КоличествоСуммарное, 
			Счетчик,
			ИдентификаторФормы,
			ПсевдоФайловаяСистема,
			ДобавленныеФайлы,
			МассивВсехПапок,
			РежимЗагрузки,
			Пользователь);
	КонецЕсли;
	
	Если УдалятьФайлыПослеДобавления = Истина Тогда
		ФайловыеФункцииКлиентСервер.УдалитьФайлыПослеДобавления(МассивСтруктурВсехФайлов, МассивВсехПапок, РежимЗагрузки);
	КонецЕсли;
	
	// Вывод сообщений об ошибках
	Для Каждого Выборка Из МассивИменФайловСОшибками Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка автоматической загрузки файла ""%1"": ""%2""'"),
				Выборка.ИмяФайла, Выборка.Ошибка);
		
		ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщения);
	КонецЦикла; 	
	
	Если ВыбранныеФайлы.Количество() <> 1 Тогда
		ПапкаДляДобавленияТекущая = Неопределено;
	КонецЕсли;	
	
	Возврат ПапкаДляДобавленияТекущая;
КонецФункции

Процедура ЗагрузкаФайлов(МассивНастроек) Экспорт
	
	Если ТипЗнч(МассивНастроек) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Настройка Из МассивНастроек Цикл
		
		КаталогНаДиске = "";
		ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			КаталогНаДиске = Настройка.КаталогWindows;
		Иначе	
			КаталогНаДиске = Настройка.КаталогLinux;
		КонецЕсли;	
		
		Папка = Настройка.Папка;
		Пользователь = Настройка.Пользователь;
		
		Если ПустаяСтрока(КаталогНаДиске) Тогда
			ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				НСтр("ru = 'Не указан каталог на диске'"));
			Продолжить;
		КонецЕсли;
		
		ФайлКаталога = Новый Файл(КаталогНаДиске);
		Если Не ФайлКаталога.Существует() Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный путь к каталогу на диске: ""%1""'"),
					КаталогНаДиске);			
					
			ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстОшибки);
				
			Продолжить;
		КонецЕсли;	
		
		Если Папка.Пустая() Тогда
			ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				НСтр("ru = 'Не указана папка'"));
			Продолжить;
		КонецЕсли;	
		
		Если Пользователь.Пустая() Тогда
			ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				НСтр("ru = 'Не указан пользователь'"));
			Продолжить;
		КонецЕсли;	
		
		Попытка
			
			ВыбранныеФайлы = Новый СписокЗначений;
			
			НайденныеФайлы = НайтиФайлы(КаталогНаДиске, "*.*");
			Для Каждого ФайлВложенный Из НайденныеФайлы Цикл
				ВыбранныеФайлы.Добавить(ФайлВложенный.ПолноеИмя);
			КонецЦикла;
			
			ПсевдоФайловаяСистема = Новый Соответствие; // соответствие путь к директории - файлы и папки в ней 
			ДобавленныеФайлы = Новый Массив;
			МассивИменФайловСОшибками = Новый Массив;
			
			Описание = "";
			ХранитьВерсии = Истина;
			УдалятьФайлыПослеДобавления = Истина;
			
			ПапкаДляДобавленияТекущая = ИмпортФайловВыполнить(
				Папка, 
				ВыбранныеФайлы, 
				Описание, 
				ХранитьВерсии, 
				УдалятьФайлыПослеДобавления, 
				Истина,
				Неопределено, //УникальныйИдентификатор,
				ПсевдоФайловаяСистема,
				ДобавленныеФайлы,
				Истина,  // режим загрузки
				Пользователь,
				МассивИменФайловСОшибками);
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Закончена автоматическая загрузка файлов из каталога ""%1"" в папку ""%2"". Загружено файлов: %3. Не удалось загрузить файлов: %4.'"),
					КаталогНаДиске, Папка, ДобавленныеФайлы.Количество(), МассивИменФайловСОшибками.Количество());
			ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
				УровеньЖурналаРегистрации.Информация, , ,
				ТекстСообщения);
				
		Исключение
			// запись в журнал регистрации
			
			ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ОписаниеОшибки());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка автоматической загрузки файлов: ""%1""  из каталога ""%2"" в папку ""%3""'"),
					ОписаниеОшибки, КаталогНаДиске, Папка);
			
			ЗаписьЖурналаРегистрации("Автоматическая загрузка файлов", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
		КонецПопытки;	
	
	КонецЦикла;	
	
КонецПроцедуры
