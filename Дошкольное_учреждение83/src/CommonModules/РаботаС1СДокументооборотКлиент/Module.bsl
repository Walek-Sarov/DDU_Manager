
// Открывает форму выбора значения из списка объектов документооборота и помещает выбранное значение на форме
// Параметры:
//		ТипОбъектаВыбора - имя класса XDTO, соответствующего типу выбираемого объекта
//		Реквизит - имя реквизита формы, в который будет помещено значение, выбранное из документооборота
//		ФормаВладелец - форма, из которой вызывается форма выбора
//		Отбор - условия, накладываемые на список
Функция ВыбратьЗначениеИзСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, Отбор = Неопределено) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Заголовок = "Выбор значения";
	Если 	  ТипОбъектаВыбора = "DMFile" 			  Тогда Заголовок = "Выбор файла"; 
	ИначеЕсли ТипОбъектаВыбора = "DMFileFolder" 	  Тогда Заголовок = "Выбор папки файлов";	
	ИначеЕсли ТипОбъектаВыбора = "DMOrganization" 	  Тогда Заголовок = "Выбор организации";
	ИначеЕсли ТипОбъектаВыбора = "DMUser" 			  Тогда Заголовок = "Выбор пользователя";
	ИначеЕсли ТипОбъектаВыбора = "DMActivityMatter"   Тогда Заголовок = "Выбор вопроса деятельности";
	ИначеЕсли ТипОбъектаВыбора = "DMCurrency" 		  Тогда Заголовок = "Выбор валюты";	
	ИначеЕсли ТипОбъектаВыбора = "DMInternalDocument" Тогда Заголовок = "Выбор внутреннего документа";
	ИначеЕсли ТипОбъектаВыбора = "DMIncomingDocument" Тогда Заголовок = "Выбор входящего документа";
	ИначеЕсли ТипОбъектаВыбора = "DMOutgoingDocument" Тогда Заголовок = "Выбор исходящего документа";
	ИначеЕсли ТипОбъектаВыбора = "DMCorrespondent" 	  Тогда Заголовок = "Выбор корреспондента";	
	ИначеЕсли ТипОбъектаВыбора = "DMContactPerson"    Тогда Заголовок = "Выбор контактного лица";
	ИначеЕсли ТипОбъектаВыбора = "DMSubdivision" 	  Тогда Заголовок = "Выбор подразделения";
	ИначеЕсли ТипОбъектаВыбора = "DMAccessLevel" 	  Тогда Заголовок = "Выбор грифа доступа";	
	ИначеЕсли ТипОбъектаВыбора = "DMDeliveryMethod"   Тогда Заголовок = "Выбор способа доставки";
	ИначеЕсли ТипОбъектаВыбора = "DMIncomingDocumentType"   Тогда Заголовок = "Выбор вида входящего документа";	
	ИначеЕсли ТипОбъектаВыбора = "DMOutgoingDocumentType"   Тогда Заголовок = "Выбор вида исходящего документа";
	ИначеЕсли ТипОбъектаВыбора = "DMInternalDocumentType"   Тогда Заголовок = "Выбор вида внутреннего документа";	
	ИначеЕсли ТипОбъектаВыбора = "DMInternalDocumentFolder" Тогда Заголовок = "Выбор папки внутреннего документа";
	ИначеЕсли ТипОбъектаВыбора = "DMRelationType" 	  		Тогда Заголовок = "Выбор типа связи";	
	ИначеЕсли ТипОбъектаВыбора = "DMPrivatePerson"    		Тогда Заголовок = "Выбор физического лица";
	ИначеЕсли ТипОбъектаВыбора = "DMProlongationProcedure" 	Тогда Заголовок = "Выбор способа продления";
	ИначеЕсли ТипОбъектаВыбора = "DMDocumentStatus" 		Тогда Заголовок = "Выбор состояния документа";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessOrderTemplate" 			Тогда Заголовок = "Выбор шаблона поручения";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessConsiderationTemplate" 	Тогда Заголовок = "Выбор шаблона рассмотрения";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessRegistrationTemplate" 	Тогда Заголовок = "Выбор шаблона регистрации";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessApprovalTemplate" 		Тогда Заголовок = "Выбор шаблона согласования";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessConfirmationTemplate" 	Тогда Заголовок = "Выбор шаблона утверждения";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessPerformanceTemplate" 	Тогда Заголовок = "Выбор шаблона исполнения";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessAcquaintanceTemplate" 	Тогда Заголовок = "Выбор шаблона ознакомления";
	ИначеЕсли ТипОбъектаВыбора = "DMComplexBusinessProcessTemplate" 		Тогда Заголовок = "Выбор шаблона составного бизнес-процесса";
	ИначеЕсли ТипОбъектаВыбора = "DMBusinessProcessImportance"				Тогда Заголовок = "Выбор варианта важности";
	КонецЕсли;	
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	
	ПараметрыФормы.Вставить("ВыбранныйЭлемент", ФормаВладелец[Реквизит + "ID"]);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборИзСписка", ПараметрыФормы, ФормаВладелец);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "ID"] 	= Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		ФормаВладелец.Модифицированность = Истина;
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму выбора пользователей в разрезе подразделений и помещает выбранного пользователя в реквизит формы
//		Параметры:
//			Реквизит - имя реквизита формы, в который будет помещен выбранный пользователь
//			ФормаВладелец - форма, из которой вызывается форма выбора пользователя
Процедура ВыбратьПользователяИзДереваПодразделений(Реквизит, ФормаВладелец) Экспорт
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборПользователяСПодразделениями", , ФормаВладелец);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "id"] 	= Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Открывает форму для указания значения дополнительного реквизита
//		Параметры:
//			Форма - форма, на которой осуществляется работа с дополнительным реквизитом 
//				и из которой вызывается форма заполнения
//			Элемент - элемент формы, в который будет помещено указанной значение
//			СтандартнаяОбработка - параметр обработки, используемый в обработчике на форме, 
//				из которой вызывается заполнение значения доп. реквизита
Процедура ВыбратьЗначениеДополнительногоРеквизита(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = Элемент.Родитель.ТекущиеДанные.СписокДоступныхТипов;
	
	Если СписокДоступныхТипов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхТипов.Количество() > 1 Тогда
		ЗаголовокФормы = НСтр("ru = 'Тип реквизита """ + Элемент.Родитель.ТекущиеДанные.Свойство + """'");
		ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТипов, ЗаголовокФормы);
		ИмяТипа = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборОдногоТипаИзСоставногоТипа", ПараметрыФормы, Форма);
		Если ИмяТипа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяТипа = СписокДоступныхТипов[0].Значение.XDTOClassName;
	КонецЕсли;
	
	Если ИмяТипа = "integer" 
		ИЛИ ИмяТипа = "boolean" 
		ИЛИ ИмяТипа = "string" 
		ИЛИ ИмяТипа = "date" Тогда
		
		Если ИмяТипа = "integer" Тогда
			ТипЗначения = Тип("Число");
		ИначеЕсли ИмяТипа = "boolean" Тогда
			ТипЗначения = Тип("Булево");
		ИначеЕсли ИмяТипа = "string" Тогда
			ТипЗначения = Тип("Строка");
		ИначеЕсли ИмяТипа = "date" Тогда
			ТипЗначения = Тип("Дата");
		КонецЕсли;
		//ввод значения примитивного типа - строка, число и т.п.
		Форма.Модифицированность = ВвестиЗначение(Элемент.Родитель.ТекущиеДанные.Значение, Элемент.Родитель.ТекущиеДанные.Свойство, ТипЗначения);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		
		Владелец = Новый Структура;
		Владелец.Вставить("id", Элемент.Родитель.ТекущиеДанные.СвойствоID);
		Владелец.Вставить("type", Элемент.Родитель.ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура;
		Отбор.Вставить("additionalProperty", Владелец);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ИмяТипа);
		
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборИзСписка", ПараметрыФормы, Форма);
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Элемент.Родитель.ТекущиеДанные.ЗначениеID = Результат.РеквизитID;
			Элемент.Родитель.ТекущиеДанные.ЗначениеТип = Результат.РеквизитТип;
			Элемент.Родитель.ТекущиеДанные.Значение = Результат.РеквизитПредставление;
			Форма.Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

// Очищает id и Тип при очистке реквизита
Процедура ОчиститьСсылочныйРеквизит(Реквизит, ФормаВладелец) Экспорт 
	
	ФормаВладелец[Реквизит + "id"] 	= "";
	ФормаВладелец[Реквизит + "Тип"] = "";
	ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры	

Процедура ОбработкаВыбораДанныхДляАвтоПодбора(Реквизит, ВыбранноеЗначение, СтандартнаяОбработка, ФормаВладелец) Экспорт 
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ФормаВладелец[Реквизит] = ВыбранноеЗначение.Name;
		ФормаВладелец[Реквизит + "id"] = ВыбранноеЗначение.id;
		ФормаВладелец[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПрименитьВыборЗначенияРеквизитаВСписке(ЭлементСписок, ВыбранноеЗначение, СтандартнаяОбработка, ФормаВладелец) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЭлементСписок.ТекущиеДанные["Значение"] = ВыбранноеЗначение.Name;
		ЭлементСписок.ТекущиеДанные["ЗначениеID"] = ВыбранноеЗначение.id;
		ЭлементСписок.ТекущиеДанные["ЗначениеТип"] = ВыбранноеЗначение.type;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
	
/////////////////////////////////////////////////////////////////
//// РАБОТА С ФАЙЛАМИ

// Открывать файл для просмотра
Процедура ОткрытьФайл(ИдентификаторФайла, Расширение, Имя, Размер, ДатаМодификацииУниверсальная, КаталогДляСохраненияДанных, УникальныйИдентификаторФормы) Экспорт
	
	АдресВременногоХранилища = РаботаС1СДокументооборотВызовСервера.ПолучитьАдресФайла(ИдентификаторФайла, УникальныйИдентификаторФормы);
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если НЕ РасширениеПодключено Тогда
		
		ИмяФайла = ПолучитьИмяСРасширением(Имя, Расширение);
		ПолучитьФайл(АдресВременногоХранилища, ИмяФайла, Истина);
		
	Иначе
		ИмяВременногоФайла = "";
		#Если НЕ ВебКлиент Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		#Иначе
			Если ПустаяСтрока(КаталогДляСохраненияДанных) Тогда
				Предупреждение(НСтр("ru='Выберите рабочий каталог для интеграции.'"));
				Возврат;
			КонецЕсли;	
			
			ИмяВременногоФайла = КаталогДляСохраненияДанных;
			ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// ТекущаяДата() используется только для генерации случайного числа (т.к. ГенераторСлучайныхЧисел  не доступен на веб клиенте)
			//  поэтому приведение к ТекущаяДатаСеанса не нужно
			СлучайноеИмяФайла = Имя + " (" +  Секунда(ТекущаяДата()) + ")";
			
			ИмяВременногоФайла = ИмяВременногоФайла + СлучайноеИмяФайла + "." + Расширение;
			
		#КонецЕсли	
		
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ИмяВременногоФайла, АдресВременногоХранилища);
		ПередаваемыеФайлы.Добавить(Описание);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
		ИмяФайла = ПолучитьИмяСРасширением(Имя, Расширение);
		РазмерВМб = Размер / (1024 * 1024);
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		    НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
				|Пожалуйста, подождите.'"),
		    ИмяФайла, 
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
			
			Состояние();
			
			ДатаСоздаваемогоФайлаНаДиске = ДатаМодификацииУниверсальная;
			ДатаСоздаваемогоФайлаНаДиске = МестноеВремя(ДатаСоздаваемогоФайлаНаДиске);
			Файл.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);
			
			ОткрытьФайлПриложением(ИмяВременногоФайла);
		Иначе
			Состояние();
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецПроцедуры

Процедура ОткрытьФайлПриложением(ИмяОткрываемогоФайла)
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								  НСтр("ru = 'Описание=""%1""'"),
								  Инфо.Описание));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя с расширением- если расширение пусто - только имя
//
Функция ПолучитьИмяСРасширением(ПолноеНаименование, Расширение) Экспорт
	
	ИмяСРасширением = ПолноеНаименование;
	
	Если Расширение <> "" Тогда
		ИмяСРасширением = ИмяСРасширением + "." + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
	
КонецФункции

// Сохранение на диск Файла
// 
Функция СохранитьКак(ИдентификаторФайла, Расширение, Имя, Размер, ДатаМодификацииУниверсальная, УникальныйИдентификаторФормы) Экспорт
	
	АдресВременногоХранилища = РаботаС1СДокументооборотВызовСервера.ПолучитьАдресФайла(ИдентификаторФайла, УникальныйИдентификаторФормы);
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда

		ПутьВыбора = "";
		#Если НЕ ВебКлиент Тогда	

		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная операция не поддерживается в базовой версии.'"));
			Возврат "";
		КонецЕсли;
		
		Оболочка = Новый COMОбъект("MSScriptControl.ScriptControl");
		Оболочка.Language = "vbscript";
		Оболочка.AddCode("
			|Function SpecialFoldersName(Name)
			|set Shell=CreateObject(""WScript.Shell"")
			|SpecialFoldersName=Shell.SpecialFolders(Name)
			|End Function");
		ПутьВыбора = Оболочка.Run("SpecialFoldersName", "MyDocuments");
		#КонецЕсли	
		
		ИмяСРасширением = ПолучитьИмяСРасширением(Имя, Расширение);
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение, Расширение);
		ВыборФайла.Фильтр = Фильтр;
		ВыборФайла.Каталог = ПутьВыбора;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = АдресВременногоХранилища;
			
			ИмяФайла = ИмяСРасширением;
			РазмерВМб = Размер / (1024 * 1024);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
					|Пожалуйста, подождите.'"),
				ИмяФайла, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
			Состояние(ТекстПояснения);	
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Сохраним Файл из БД на диск
			Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
				
				// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
				Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
					УдалитьИзВременногоХранилища(АдресФайла);
				КонецЕсли;
				
				НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				
				ДатаСоздаваемогоФайлаНаДиске = ДатаМодификацииУниверсальная;
				ДатаСоздаваемогоФайлаНаДиске = МестноеВремя(ДатаСоздаваемогоФайлаНаДиске);
				
				НовыйФайл.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);

				Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = АдресВременногоХранилища;
		
		ИмяФайла = ИмяСРасширением;
		РазмерВМб = Размер / (1024 * 1024);
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
				|Пожалуйста, подождите.'"),
			ИмяФайла, 
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
			
		Состояние(ТекстПояснения);	
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат "";
КонецФункции

// обновить из файла на диске
Функция ОбновитьИзФайлаНаДиске(ИдентификаторФайла, УникальныйИдентификатор) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	ИдентификаторСозданногоФайла = Неопределено;
	
	Если РасширениеПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Результат = ВыборФайла.Выбрать();
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
		Если НЕ Результат Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОбновитьИзФайлаНаДискеТонкийКлиент(ПолноеИмяФайла, ИдентификаторФайла, УникальныйИдентификатор);
		
	Иначе
		
		// Если веб-клиент без расширения
		
		ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент, ИдентификаторФайла");

		ВремяИзменения = '00000000'; // Т.к. не можем получить дату модификации файла на диске
		ВремяИзмененияУниверсальное = '00000000';
		Размер = 0;						// Т.к. не можем получить размер файла на диске
		ИмяБезРасширения = "";
		Расширение = "";
		Текст = "";

		// Поместим Файл в ВременноеХранилище
		АдресВременногоХранилищаФайла = "";
		ИмяФайла = "";
		Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, УникальныйИдентификатор) Тогда
			Возврат Ложь;
		КонецЕсли;

		СтрокиПути = ФайловыеФункцииСлужебныйКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
		Если СтрокиПути.Количество() >= 2 Тогда
			Расширение = СтрокиПути[СтрокиПути.Количество()-1];
			ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
		Иначе
			ВызватьИсключение
			  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"),ИмяФайла);
		КонецЕсли;
		
		ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		ПараметрыСоздания.Расширение = Расширение;
		ПараметрыСоздания.ВремяИзменения = ВремяИзменения;
		ПараметрыСоздания.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		ПараметрыСоздания.Имя = ИмяБезРасширения;
		ПараметрыСоздания.Размер = Размер;
		ПараметрыСоздания.Текст = "";
		ПараметрыСоздания.ВебКлиент = Истина;
		ПараметрыСоздания.ИдентификаторФайла = ИдентификаторФайла;
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"".
			|Пожалуйста, подождите...'"),
			ИмяФайла);
		
		Состояние(ТекстПояснения);
		
		ИдентификаторСозданногоФайла = РаботаС1СДокументооборотВызовСервера.ОбновитьИзФайлаНаДиске(ПараметрыСоздания);
		Состояние();
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, ИдентификаторФайла);
	
	Возврат Истина;
	
КонецФункции

// Обновить файл из файла на диске - реализация для тонкого клиента
Функция ОбновитьИзФайлаНаДискеТонкийКлиент(ПолноеИмяФайла, ИдентификаторФайла, УникальныйИдентификатор) Экспорт
	
	ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент, ИдентификаторФайла");
	
	НастройкиДокументооборот = РаботаС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	НужноИзвлечьТекст = НастройкиДокументооборот.НужноИзвлечьТекст;
		
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.ИмяБезРасширения + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда		
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Расширение = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(Файл.Расширение);
	ПараметрыСоздания.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ПараметрыСоздания.ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ПараметрыСоздания.Имя = Файл.ИмяБезРасширения;
	ПараметрыСоздания.Размер = Файл.Размер();
	ПараметрыСоздания.ВебКлиент = Ложь;
	ПараметрыСоздания.ИдентификаторФайла = ИдентификаторФайла;
	
	Текст = "";
	
	Если НужноИзвлечьТекст Тогда
		Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(Файл.ПолноеИмя);
	КонецЕсли;	
	
	ПараметрыСоздания.Текст = Текст;
	
	РаботаС1СДокументооборотВызовСервера.ОбновитьИзФайлаНаДиске(ПараметрыСоздания);
	
	Состояние();
	
	Возврат Истина;
	
КонецФункции


// Функции - текстовые сообщения

// Возвращает Строку сообщения о недопустимости подписания занятого файла
//
Функция СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ФайлСсылка = Неопределено) Экспорт
	
	Если ФайлСсылка = Неопределено Тогда
		Возврат НСтр("ru = 'Нельзя подписать занятый файл.'");
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Нельзя подписать занятый файл: %1.'"),
						Строка(ФайлСсылка) );
	КонецЕсли;
	
КонецФункции

// Возвращает Строку сообщения о недопустимости подписания зашифрованного файла
//
Функция СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ФайлСсылка = Неопределено) Экспорт
	
	Если ФайлСсылка = Неопределено Тогда
		Возврат НСтр("ru = 'Нельзя подписать зашифрованный файл.'");
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Нельзя подписать зашифрованный файл: %1.'"),
						Строка(ФайлСсылка) );
	КонецЕсли;
	
КонецФункции


// Подписать файл
Процедура ПодписатьФайл(ИдентификаторФайла, ИмяФайла, Редактируется, Зашифрован, ОписаниеФайла, 
	МассивСуществующихПодписейФайла) Экспорт
	
	Если Редактируется Тогда
		Предупреждение(ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла());
		Возврат;
	КонецЕсли;
	
	Если Зашифрован Тогда
		Предупреждение(ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла());
		Возврат;
	КонецЕсли;
	
	ТолькоЛичные = Истина;
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ТолькоЛичные);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ИмяФайла);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) = Тип("Структура") Тогда
		
		ДвоичныеДанные = РаботаС1СДокументооборотВызовСервера.ПолучитьДвоичныеДанныеФайла(ИдентификаторФайла);
		
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
		
		ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
			МенеджерКриптографии, ИдентификаторФайла, 
			ДвоичныеДанные, СтруктураПараметровПодписи);
		ДанныеПодписи.Вставить("ОбъектТип", "DMFile");	
			
		МассивДанныхПодписей = Новый Массив;
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
		РаботаС1СДокументооборотВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
			ИдентификаторФайла, ИмяФайла, ОписаниеФайла, "DMFile", МассивДанныхПодписей, МассивСуществующихПодписейФайла);
		
		ИнформироватьОПодписанииОбъекта(ИмяФайла, ИдентификаторФайла);
			
	КонецЕсли;
	
КонецПроцедуры

// По окончании подписания нотифицирует о подписании
//
// Параметры
//  ОбъектСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭЦП
Процедура ИнформироватьОПодписанииОбъекта(ИмяФайла, ИдентификаторФайла) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, ИдентификаторФайла);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		ИмяФайла);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Добавляет ЭЦП из файла
Функция ДобавитьЭЦПИзФайла(ИдентификаторФайла, ИмяФайла, УникальныйИдентификатор,
	ОписаниеФайла, МассивСуществующихПодписейФайла) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
	
		МассивФайловПодписей = ОткрытьФормуМодально("ОбщаяФорма.ДобавлениеПодписиИзФайла");
		
		Если ТипЗнч(МассивФайловПодписей) <> Тип("Массив") ИЛИ МассивФайловПодписей.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивДанныхДляЗанесенияВБазу = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьПодписиДляЗанесениюВБазу(ИдентификаторФайла, МассивФайловПодписей, УникальныйИдентификатор);
		
		Если МассивДанныхДляЗанесенияВБазу.Количество() > 0 Тогда
			
			Для Каждого ДанныеПодписи Из МассивДанныхДляЗанесенияВБазу Цикл
				ДанныеПодписи.Вставить("ОбъектТип", "DMFile");	
			КонецЦикла;
			
			РаботаС1СДокументооборотВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
				ИдентификаторФайла, ИмяФайла, ОписаниеФайла, "DMFile", 
				МассивДанныхДляЗанесенияВБазу, МассивСуществующихПодписейФайла);
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
			Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, ИдентификаторФайла);
			
			Если МассивДанныхДляЗанесенияВБазу.Количество() = 1 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Добавлена подпись из файла для ""%1""'"),
					ИмяФайла);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Добавлены подписи из файлов для ""%1""'"),
					ИмяФайла);
			КонецЕсли;	
			
			Состояние(ТекстСообщения);
			
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Сохранение на диск Файла
// 
Процедура СохранитьВместеСЭЦП(ИдентификаторФайла, Расширение, Имя, Размер, ДатаМодификацииУниверсальная, 
	УникальныйИдентификатор, Подписи = Неопределено) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		
		ПолноеИмяФайла = СохранитьКак(ИдентификаторФайла, Расширение, Имя, Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
		
		Если ПолноеИмяФайла = "" Тогда
			Возврат; // пользователь нажал Отмена или это веб клиент без расширения
		КонецЕсли;
		
		Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
		МассивСтруктурПодписей = Неопределено;
		
		Если Подписи = Неопределено Тогда
			ОписаниеФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьКарточкуФайла(ИдентификаторФайла);
			Подписи = ОписаниеФайла.Подписи;
		КонецЕсли;
		
		Если Настройка = "Спрашивать" Тогда
			
			ПараметрыФормы = Новый Структура("УникальныйИдентификатор, Подписи", 
				УникальныйИдентификатор, Подписи);
			МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
			
		ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
			
			МассивСтруктурПодписей = Новый Массив;
			
			Для Каждого Строка Из Подписи Цикл
				
				АдресПодписи = ПоместитьВоВременноеХранилище(Строка.Подпись, УникальныйИдентификатор);
				
				СтруктураВозврата = Новый Структура("АдресПодписи, КомуВыданСертификат, ИмяФайлаПодписи", 
													АдресПодписи,
													Строка.КомуВыданСертификат,
													Строка.ИмяФайлаПодписи);
				МассивСтруктурПодписей.Добавить(СтруктураВозврата);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			ЭлектроннаяЦифроваяПодписьКлиент.СохранитьПодписи(Имя, ПолноеИмяФайла, Неопределено, МассивСтруктурПодписей);
		КонецЕсли;
	
	Иначе
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
	КонецЕсли;
	
КонецПроцедуры

// создать Файл из файла на диске
Функция СоздатьИзФайлаНаДискеКлиент(ПолноеИмяФайла, УникальныйИдентификатор, id, Тип, Представление) Экспорт
	
	ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");
	ИдентификаторСозданногоФайла = Неопределено;
	
	НастройкиДокументооборот = РаботаС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	НужноИзвлечьТекст = НастройкиДокументооборот.НужноИзвлечьТекст;
		
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.ИмяБезРасширения + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	МаксРазмерФайла = РаботаС1СДокументооборотКлиентПовтИсп.ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
				 Файл.Имя, 
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),           
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(ОписаниеПередаваемогоФайла);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда		
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Расширение = ФайловыеФункцииСлужебныйКлиентСервер.РасширениеБезТочки(Файл.Расширение);
	ПараметрыСоздания.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ПараметрыСоздания.ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ПараметрыСоздания.Имя = Файл.ИмяБезРасширения;
	ПараметрыСоздания.Размер = Файл.Размер();
	ПараметрыСоздания.ВебКлиент = Ложь;
	
	Текст = "";
	
	Если НужноИзвлечьТекст Тогда
		Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(Файл.ПолноеИмя);
	КонецЕсли;	
	
	ПараметрыСоздания.Текст = Текст;
	
	ИдентификаторСозданногоФайла = РаботаС1СДокументооборотВызовСервера.СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, id, Тип, Представление);
	
	Состояние();
	
	Возврат ИдентификаторСозданногоФайла;
	
КонецФункции
	
// Проверяет все выделенные подписи ЭЦП
Процедура ПроверитьПодписи(ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор, АдресСлепкаДокумента) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;

	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
				СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Проверяет одну электронно-цифровую подпись 
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
	СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента) Экспорт
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	ДвоичныеДанныеФайла = СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд];
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		
		Если ДанныеСтроки.ОбъектТип = "DMFile" Тогда
			ДвоичныеДанныеФайла = РаботаС1СДокументооборотВызовСервера.ПолучитьДвоичныеДанныеФайла(ДанныеСтроки.ОбъектИд);
		Иначе	
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресСлепкаДокумента);
		КонецЕсли;
		
		СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд] = ДвоичныеДанныеФайла;
	КонецЕсли;
	
	Попытка
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;	
	
КонецПроцедуры

// Преобразует 2-уровневое дерево в массив
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписейПереданная) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписейПереданная.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат ДанныеСтрок;
	
КонецФункции	

// По окончании подписания нотифицирует
Процедура ИнформироватьОПодписании(Представление) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		Представление);
	Состояние(ТекстСообщения);
	
КонецПроцедуры	

Функция СформироватьПодписьОбъекта(id, Представление, Тип, УникальныйИдентификатор, 
			МассивДанныхДляЗанесенияВРегистр, МассивАдресов, Файлы, АдресСлепкаДокумента) Экспорт
			
	ТолькоЛичные = Истина; 
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ТолькоЛичные);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, Представление);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) = Тип("Структура") Тогда
		
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
		
		МассивФайлов = Новый Массив;
		Для Каждого Файл Из Файлы Цикл
			МассивФайлов.Добавить(Файл.УникальныйИдентификатор);
		КонецЦикла;
		
		ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресСлепкаДокумента);
		
		МассивОбъектовДляПодписи = Новый Массив;
		РаботаС1СДокументооборотВызовСервера.ПолучитьОбъектыДляПодписи(id, Тип, УникальныйИдентификатор, 
			МассивОбъектовДляПодписи, МассивФайлов, ДвоичныеДанныеДокумента);
		
		Для Каждого ОбъектДляПодписи Из МассивОбъектовДляПодписи Цикл
			
			ОбъектСсылкаДляПодписи = ОбъектДляПодписи.ОбъектСсылкаДляПодписи;
			
			АдресФайла = "";
			ДвоичныеДанныеФайла = Неопределено;
			
			Если НЕ ОбъектДляПодписи.Свойство("ДвоичныеДанные", ДвоичныеДанныеФайла) Тогда
				АдресФайла = ОбъектДляПодписи.АдресФайла;
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
			КонецЕсли;
			
			// удаляем двоичные данные из временного хранилища после получения
			Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
				МассивАдресов.Добавить(АдресФайла);
			КонецЕсли;
			
			ДанныеДляЗанесенияВРегистр = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
				МенеджерКриптографии, ОбъектСсылкаДляПодписи, 
				ДвоичныеДанныеФайла, СтруктураПараметровПодписи);
			ДанныеДляЗанесенияВРегистр.Вставить("ОбъектТип", ОбъектДляПодписи.ОбъектТип);
			
			МассивДанныхДляЗанесенияВРегистр.Добавить(ДанныеДляЗанесенияВРегистр);
				
		КонецЦикла;
		
	КонецЕсли;

	Возврат Истина;			
КонецФункции			

// формирует массив существующих подписей файла
Функция ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей) Экспорт
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	НомерСтроки = 0;
	
	// формируем массив данных подписи
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		
		ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
		
		ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, ДвоичныеДанныеСертификата, ОбъектТип, УстановившийПодпись, УстановившийПодписьИд, НомерСтроки",
								ИдентификаторФайла,
								ПодписьДвоичныеДанные,
								ДанныеСтроки.Отпечаток,
								ДанныеСтроки.ДатаПодписи,
								ДанныеСтроки.Комментарий,
								ДанныеСтроки.ИмяФайлаПодписи,
								ДанныеСтроки.КомуВыданСертификат,
								ДвоичныеДанныеСертификата,
								"DMFile",
								ДанныеСтроки.УстановившийПодпись,
								ДанныеСтроки.УстановившийПодписьИд,
								НомерСтроки);
		
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
		НомерСтроки = НомерСтроки + 1;
			
	КонецЦикла;	
	
	Возврат МассивДанныхПодписей;
	
КонецФункции	

/////////////////////////////////////////////////////////////////
//// РАБОТА С БИЗНЕС-ПРОЦЕССАМИ

// Выбрать тип бизнес-процесса
Функция ВыбратьТипБизнесПроцесса() Экспорт
	
	СписокДоступныхТиповБизнесПроцессов = Новый СписокЗначений;
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessPerformance", 	"Исполнение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessAcquaintance", 	"Ознакомление"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOrder", 			"Поручение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConsideration", 	"Рассмотрение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessRegistration", 	"Регистрация"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessApproval", 		"Согласование"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConfirmation", 	"Утверждение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessInternalDocumentProcessing", 	"Обработка внутреннего документа"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessIncomingDocumentProcessing", 	"Обработка входящего документа"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOutgoingDocumentProcessing", 	"Обработка исходящего документа"));
	
	ЗаголовокФормы = НСтр("ru = 'Тип бизнес-процесса'");
	
	ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТиповБизнесПроцессов, ЗаголовокФормы);
	ТипБизнесПроцесса = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборОдногоТипаИзСоставногоТипа", ПараметрыФормы);
	Возврат ТипБизнесПроцесса;
	
КонецФункции

// Создать бизнес-процесс по документу из 1С:Документооборот
// Параметры:
//		ИД - уникальный идентификатор документа в Документообороте
//		Тип - имя типа XDTO для документа
Процедура СоздатьБизнесПроцессПоДокументуИзДО(ИД, Тип) Экспорт
	
	ТипБизнесПроцесса = ВыбратьТипБизнесПроцесса();
	Если ТипБизнесПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПредметБизнесПроцесса = Новый Структура;
	ПредметБизнесПроцесса.Вставить("id", ИД);
	ПредметБизнесПроцесса.Вставить("type", Тип);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);	
	
	ПоказатьФормуБизнесПроцесса(ТипБизнесПроцесса, ПараметрыФормы);
	
КонецПроцедуры

// Глобальный обработчик команды создания бизнес-процесса. Открывает пользователю необходимые формы для создания и запуска бизнес-процесса.
// Параметры:
//		СсылкаНаВнешнийОбъект - ссылка на объект конфигурации-потребителя
//		ТипБизнесПроцесса - имя типа XDTO
Процедура СоздатьБизнесПроцесс(СсылкаНаВнешнийОбъект) Экспорт
	
	ТипБизнесПроцесса = ВыбратьТипБизнесПроцесса();
	
	Если ТипБизнесПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоискаДокументаВДО = РаботаС1СДокументооборотВызовСервера.ПолучитьСвязанныйCВнешнимОбъектомДокумент(СсылкаНаВнешнийОбъект);

	Если ТипЗнч(РезультатПоискаДокументаВДО) = Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Предмет", РезультатПоискаДокументаВДО);
		
		ПоказатьФормуБизнесПроцесса(ТипБизнесПроцесса, ПараметрыФормы);
				
	Иначе
	
		ИмяТипа = РаботаС1СДокументооборотВызовСервера.ПолучитьИмяТипаДокументаДОИзНастроекЗаполнения(СсылкаНаВнешнийОбъект);	
		
		Если ИмяТипа = Неопределено Тогда
			//выбор типа документа
			СписокДоступныхТиповДокументов = Новый СписокЗначений;
			СписокДоступныхТиповДокументов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMInternalDocument", 	"Внутренний документ"));
			СписокДоступныхТиповДокументов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMIncomingDocument", 	"Входящий документ"));
			СписокДоступныхТиповДокументов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMOutgoingDocument", 	"Исходящий документ"));
			ЗаголовокФормы = НСтр("ru = 'Тип предмета бизнес-процесса'");
			
			ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТиповДокументов, ЗаголовокФормы);
			РезультатВыбораТипа = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборОдногоТипаИзСоставногоТипа", ПараметрыФормы);
			Если РезультатВыбораТипа = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ИмяТипа = РезультатВыбораТипа;	
		КонецЕсли;
		
		//открытие карточки документа
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВнешнийОбъект", СсылкаНаВнешнийОбъект);
		Если ИмяТипа = "DMInternalDocument" Тогда 
			РезультатЗаполненияДокумента = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВнутреннийДокумент", ПараметрыФормы);	
		ИначеЕсли ИмяТипа = "DMIncomingDocument" Тогда 
			РезультатЗаполненияДокумента = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВходящийДокумент", ПараметрыФормы);
		ИначеЕсли ИмяТипа = "DMOutgoingDocument" Тогда 
			РезультатЗаполненияДокумента = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотИсходящийДокумент", ПараметрыФормы);
		КонецЕсли;
		
		//открытие карточки бизнес-процесса
		Если ТипЗнч(РезультатЗаполненияДокумента) = Тип("Структура")
			И ЗначениеЗаполнено(РезультатЗаполненияДокумента.id) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Предмет", РезультатЗаполненияДокумента);
			ПоказатьФормуБизнесПроцесса(ТипБизнесПроцесса, ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открыть форму бизнес-процесса
Процедура ПоказатьФормуБизнесПроцесса(ТипБизнесПроцесса, Параметрыформы) Экспорт 
	
	Если ТипБизнесПроцесса = "DMBusinessProcessPerformance" Тогда
			ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессИсполнение", ПараметрыФормы);
			
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessAcquaintance" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессОзнакомление", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessOrder" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессПоручение", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessConsideration" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессРассмотрение", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessRegistration" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессРегистрация", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessApproval" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессСогласование", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessConfirmation" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессУтверждение", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessInternalDocumentProcessing" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессОбработкаВнутреннегоДокумента", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессОбработкаВходящегоДокумента", ПараметрыФормы);
		
	ИначеЕсли ТипБизнесПроцесса = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотБизнесПроцессОбработкаИсходящегоДокумента", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму для работы с предметов бизнес-процесса. Это может быть Внутренний, Входящий или Исходящий документ.
Процедура ОткрытьКарточкуПредметаБизнесПроцесса(Тип, id, ЭлементВладелец, ТолькоЧтение = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура("id, Тип, ТолькоПросмотр", id, Тип, ТолькоЧтение);
	
	Если Тип = "DMInternalDocument" Тогда 
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВнутреннийДокумент", ПараметрыФормы, ЭлементВладелец);	
	ИначеЕсли Тип = "DMIncomingDocument" Тогда 
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВходящийДокумент", ПараметрыФормы, ЭлементВладелец);
	ИначеЕсли Тип = "DMOutgoingDocument" Тогда 
		ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотИсходящийДокумент", ПараметрыФормы, ЭлементВладелец);
	КонецЕсли;	
	
КонецПроцедуры

// Открывает форму выбора шаблона бизнес-процесса из списка
Функция ВыбратьШаблонБизнесПроцесса(Форма) Экспорт
	
	ДанныеОПредмете = Неопределено;
	Если ЗначениеЗаполнено(Форма.Предмет) Тогда
		ДанныеОПредмете = Новый Структура;
		ДанныеОПредмете.Вставить("id", Форма.ПредметID);
		ДанныеОПредмете.Вставить("Тип", Форма.ПредметТип);
	КонецЕсли;
	
	СписокШаблонов = РаботаС1СДокументооборотВызовСервера.ПолучитьСписокШаблоновБизнесПроцессов(Форма.Тип, ДанныеОПредмете);
	Если СписокШаблонов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("СписокЗначенийДляВыбора", СписокШаблонов);
		РезультатВыбораШаблона = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборИзСписка", ПараметрыФормы, Форма);
		Возврат РезультатВыбораШаблона;
		
	ИначеЕсли СписокШаблонов.Количество() = 1 Тогда
		РезультатВыбораШаблона = Новый Структура("РеквизитID, РеквизитТип, РеквизитПредставление");
		РезультатВыбораШаблона.РеквизитID = СписокШаблонов[0].Значение.id;
		РезультатВыбораШаблона.РеквизитТип = СписокШаблонов[0].Значение.type;
		РезультатВыбораШаблона.РеквизитПредставление = СписокШаблонов[0].Значение.Name;
		Возврат РезультатВыбораШаблона; 
		
	Иначе
		Предупреждение("Не найдено ни одного подходящего шаблона бизнес-процесса.");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить объекты адресации роли
Функция ПолучитьОбъектыАдресацииРоли(ИмяРоли, ТипРоли, IDРоли, ФормаВладелец) Экспорт
	
	ДанныеВозврата = Новый Структура;
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("Роль", ИмяРоли);	
	ПараметрыФормы.Вставить("РольID", IDРоли);
	ПараметрыФормы.Вставить("РольТип", ТипРоли);
			
	РезультатЗаполненияОбъектовАдресации = ОткрытьФормуМодально("ОбщаяФорма.ДокументооборотВыборОбъектовАдресацииРоли", ПараметрыФормы, ФормаВладелец);
	
	Если ТипЗнч(РезультатЗаполненияОбъектовАдресации) = Тип("Структура") Тогда
		Если РезультатЗаполненияОбъектовАдресации.Результат = "ОК" Тогда
	
			ДанныеВозврата.Вставить("Исполнитель", РезультатЗаполненияОбъектовАдресации.Исполнитель);	
			ДанныеВозврата.Вставить("ИсполнительID", РезультатЗаполненияОбъектовАдресации.ИсполнительID);
			ДанныеВозврата.Вставить("ИсполнительТип", РезультатЗаполненияОбъектовАдресации.ИсполнительТип);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", РезультатЗаполненияОбъектовАдресации.ОсновнойОбъектАдресации);	
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", РезультатЗаполненияОбъектовАдресации.ОсновнойОбъектАдресацииID);
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", РезультатЗаполненияОбъектовАдресации.ОсновнойОбъектАдресацииТип);
			
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", РезультатЗаполненияОбъектовАдресации.ДополнительныйОбъектАдресации);	
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", РезультатЗаполненияОбъектовАдресации.ДополнительныйОбъектАдресацииID);
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", РезультатЗаполненияОбъектовАдресации.ДополнительныйОбъектАдресацииТип);
			
		ИначеЕсли РезультатЗаполненияОбъектовАдресации.Результат = "БезОбъектовАдресации" Тогда
			
			ДанныеВозврата.Вставить("Исполнитель", ИмяРоли);	
			ДанныеВозврата.Вставить("ИсполнительID", IDРоли);
			ДанныеВозврата.Вставить("ИсполнительТип", ТипРоли);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", "");	
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", "");
				
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", "");	
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", "");
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат ДанныеВозврата;
	
КонецФункции

// Устанавливает в строку таблицы участников бизнес-процесса результат выбора участника бизнес-процесса из списка, который формируется при автоподборе
Процедура ПрименитьВыборУчастникаБизнесПроцессаВСписке(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			Элемент.ТекущиеДанные.Исполнитель = ВыбранноеЗначение.Name;
			Элемент.ТекущиеДанные.ИсполнительID = ВыбранноеЗначение.id;
			Элемент.ТекущиеДанные.ИсполнительТип = ВыбранноеЗначение.type;
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			РезультатВыбораРоли = ПолучитьОбъектыАдресацииРоли(
				 ВыбранноеЗначение.Name,
				 ВыбранноеЗначение.type,
				 ВыбранноеЗначение.id, Форма);
				 
			Если РезультатВыбораРоли = Неопределено Тогда
				Возврат;		 
			КонецЕсли;
						
			Элемент.ТекущиеДанные.Исполнитель = РезультатВыбораРоли.Исполнитель;
			Элемент.ТекущиеДанные.ИсполнительID = РезультатВыбораРоли.ИсполнительID;
			Элемент.ТекущиеДанные.ИсполнительТип = РезультатВыбораРоли.ИсполнительТип;

			Элемент.ТекущиеДанные.ОсновнойОбъектАдресации = РезультатВыбораРоли.ОсновнойОбъектАдресации;
			Элемент.ТекущиеДанные.ОсновнойОбъектАдресацииID = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
			Элемент.ТекущиеДанные.ОсновнойОбъектАдресацииТип = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
			
			Элемент.ТекущиеДанные.ДополнительныйОбъектАдресации = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
			Элемент.ТекущиеДанные.ДополнительныйОбъектАдресацииID = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
			Элемент.ТекущиеДанные.ДополнительныйОбъектАдресацииТип = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает в поле на форме результат выбора участника бизнес-процесса из списка, который формируется при автоподборе
Процедура ПрименитьВыборУчастникаБизнесПроцессаВПоле(ИмяПоля, ИмяПоляОбъектаАдресации, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			Форма[ИмяПоля] = ВыбранноеЗначение.Name;
			Форма[ИмяПоля + "id"] = ВыбранноеЗначение.id;
			Форма[ИмяПоля + "Тип"] = ВыбранноеЗначение.type;
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			РезультатВыбораРоли = ПолучитьОбъектыАдресацииРоли(
				 ВыбранноеЗначение.Name,
				 ВыбранноеЗначение.type,
				 ВыбранноеЗначение.id, Форма);
				 
			Если РезультатВыбораРоли = Неопределено Тогда
				Возврат;		 
			КонецЕсли;
						
			Форма[ИмяПоля] = РезультатВыбораРоли.Исполнитель;
			Форма[ИмяПоля + "id"] = РезультатВыбораРоли.ИсполнительID;
			Форма[ИмяПоля + "Тип"] = РезультатВыбораРоли.ИсполнительТип;

			Форма["Основной" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ОсновнойОбъектАдресации;
			Форма["Основной" + ИмяПоляОбъектаАдресации + "id"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
			Форма["Основной" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
			
			Форма["Дополнительный" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
			Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "id"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
			Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
