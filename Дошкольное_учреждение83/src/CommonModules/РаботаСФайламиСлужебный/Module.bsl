////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

Процедура ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь, Получатель = Неопределено) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		Если СозданиеНачальногоОбраза Тогда
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				Если Получатель <> Неопределено
					И Получатель.ДополнительныеСвойства.Свойство("РазмещатьФайлыВНачальномОбразе") Тогда
					
					// Помещаем данные файла из тома на диске в служебный реквизит справочника
					ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
					
				Иначе
					
					// Копируем файл из тома на диске в каталог создания начального образа
					ИмяКаталогаФайлов = ХранилищеОбщихНастроек.Загрузить("ОбменФайлами", "ВременныйКаталог");
					
					ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу;
					УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
					
					НовыйПутьФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
							ИмяКаталогаФайлов,
							УникальныйИдентификатор
					);
					
					ФайловыеФункцииСлужебный.СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла);
					
				КонецЕсли;
				
			Иначе
				
				// Если файл хранится в ИБ, то при создании начального образа
				// он будет выгружен в составе регистра сведений ХранимыеФайлыВерсий.
				
			КонецЕсли;
			
		Иначе
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				// Помещаем данные файла из тома на диске в служебный реквизит справочника
				ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
				
			Иначе // Перечисления.ТипыХраненияФайлов.ВИнформационнойБаза
				
				Попытка
					// Помещаем данные файла из информационной базы в служебный реквизит справочника
					АдресВоВременномХранилище = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ЭлементДанных.Ссылка);
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище), Новый СжатиеДанных(9));
				Исключение
					// Возможно, файл не был найден. Отправку данных не прерываем.
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'"),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					);
					
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
				КонецПопытки;
				
				ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
				ЭлементДанных.ПутьКФайлу = "";
				ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ХранимыеФайлыВерсий")
		И Не СозданиеНачальногоОбраза Тогда
		
		// Выгрузку регистра выполняем только при создании начального образа
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Файлы")
		И ПолучениеФайлаЗапрещено(ЭлементДанных) Тогда
		
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		Если ПолучениеВерсииФайлаЗапрещено(ЭлементДанных) Тогда
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			Возврат;
		КонецЕсли;
		
		// Для существующих файлов, размещенных в томах, выполняем их удаление из томов,
		// т.к. при получении нового файла он будет заново размещен в томе или информационной базе.
		Если НЕ ЭлементДанных.ЭтоНовый() Тогда
			
			ВерсияФайла = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭлементДанных.Ссылка, "ТипХраненияФайла, Том, ПутьКФайлу");
			
			Если ВерсияФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				ПрежнийПутьНаТоме = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияФайла.Том) + ВерсияФайла.ПутьКФайлу;
				
				ФайловыеФункцииСлужебный.УдалитьФайлыНаСервере(ПрежнийПутьНаТоме);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ФайловыеФункцииСлужебный.ПолучитьТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			// По обмену пришел элемент с хранением в базе - но в базе приемнике принято хранить в томах.
			// Из служебного реквизита файл размещаем на томе и меняем ТипХраненияФайла на ВТомахНаДиске.
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
								ЭлементДанных.ФайлХранилище.Получить(),
								ПутьКФайлуНаТоме,
								СсылкаНаТом,
								ЭлементДанных.ДатаМодификацииУниверсальная,
								ЭлементДанных.НомерВерсии,
								ЭлементДанных.Наименование,
								ЭлементДанных.Расширение,
								ЭлементДанных.Размер,
								ЭлементДанных.Зашифрован
			);
			
			ЭлементДанных.ПутьКФайлу = ПутьКФайлуНаТоме;
			ЭлементДанных.Том        = СсылкаНаТом;
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
			
		Иначе
			
			ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
			
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанные);
			КонецЕсли;
			
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
			ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ЭлементДанных.ПутьКФайлу = "";
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые в модуле СтандартныеПодсистемыПереопределяемый

// Возвращает Истина, если это элемент данных, относящийся к подсистеме РаботаСФайлами
//
Функция ЭтоЭлементРаботаСФайлами(ЭлементДанных) Экспорт
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов")
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВерсииФайлов");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

// Обработчик подписки "при записи" версии файла
//
Процедура ВерсииФайловПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПереименованиеФайла") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КонвертацияФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	// копируем реквизиты из версии в файл
	ТекущаяВерсия = Источник;
	Если Не ТекущаяВерсия.Ссылка.Пустая() Тогда
	
		ФайлСсылка = Источник.Владелец;
		
		РеквизитыФайла = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ФайлСсылка, 
			"ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияДатаСоздания, ТекущаяВерсияАвтор, ТекущаяВерсияРасширение, ТекущаяВерсияНомерВерсии, ТекущаяВерсияТом, ТекущаяВерсияПутьКФайлу, ТекущаяВерсияКод, ТекущаяВерсияДатаМодификацииФайла");
			
			Если РеквизитыФайла.ТекущаяВерсияРазмер <> ТекущаяВерсия.Размер 
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаСоздания <> ТекущаяВерсия.ДатаСоздания
				ИЛИ РеквизитыФайла.ТекущаяВерсияРасширение <> ТекущаяВерсия.Расширение
				ИЛИ РеквизитыФайла.ТекущаяВерсияНомерВерсии <> ТекущаяВерсия.НомерВерсии
				ИЛИ РеквизитыФайла.ТекущаяВерсияТом <> ТекущаяВерсия.Том
				ИЛИ РеквизитыФайла.ТекущаяВерсияПутьКФайлу <> ТекущаяВерсия.ПутьКФайлу 
				ИЛИ РеквизитыФайла.ТекущаяВерсияКод <> ТекущаяВерсия.Код
				ИЛИ РеквизитыФайла.ИндексКартинки <> ТекущаяВерсия.ИндексКартинки
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаМодификацииФайла <> ТекущаяВерсия.ДатаМодификацииФайла
			Тогда
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
				
				// Сменим индекс картинки, возможно, появилась версия или сменился индекс картинки у версии
				ФайлОбъект.ИндексКартинки = ТекущаяВерсия.ИндексКартинки;
				
				// копируем реквизиты для ускорения работы RLS
				ФайлОбъект.ТекущаяВерсияРазмер = ТекущаяВерсия.Размер;
				ФайлОбъект.ТекущаяВерсияДатаСоздания = ТекущаяВерсия.ДатаСоздания;
				ФайлОбъект.ТекущаяВерсияАвтор = ТекущаяВерсия.Автор;
				ФайлОбъект.ТекущаяВерсияРасширение = ТекущаяВерсия.Расширение;
				ФайлОбъект.ТекущаяВерсияНомерВерсии = ТекущаяВерсия.НомерВерсии;
				ФайлОбъект.ТекущаяВерсияТом = ТекущаяВерсия.Том;
				ФайлОбъект.ТекущаяВерсияПутьКФайлу = ТекущаяВерсия.ПутьКФайлу;
				ФайлОбъект.ТекущаяВерсияКод = ТекущаяВерсия.Код;
				ФайлОбъект.ТекущаяВерсияДатаМодификацииФайла = ТекущаяВерсия.ДатаМодификацииФайла;
				
				ФайлОбъект.Записать();
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияФайла.Установить(Источник.Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ВерсияФайла = Источник.Ссылка;
		Запись.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучениеФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
			И Не ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
					ФайловыеФункцииСлужебный.ПолучитьЗапретЗагрузкиФайловПоРасширению(),
					ФайловыеФункцииСлужебный.ПолучитьСписокЗапрещенныхРасширений(),
					ЭлементДанных.ТекущаяВерсияРасширение)
		;
КонецФункции

Функция ПолучениеВерсииФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
			И Не ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
					ФайловыеФункцииСлужебный.ПолучитьЗапретЗагрузкиФайловПоРасширению(),
					ФайловыеФункцииСлужебный.ПолучитьСписокЗапрещенныхРасширений(),
					ЭлементДанных.Расширение)
		;
КонецФункции

Процедура ПоместитьФайлВРеквизитСправочника(ЭлементДанных)
	
	Попытка
		// Помещаем данные файла из тома на диске в служебный реквизит справочника
		ЭлементДанных.ФайлХранилище = ФайловыеФункцииСлужебный.ПоместитьДвоичныеДанныеВХранилище(ЭлементДанных.Том, ЭлементДанных.ПутьКФайлу, ЭлементДанных.Ссылка.УникальныйИдентификатор());
	Исключение
		// Возможно, файл не был найден. Отправку данных не прерываем.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'"),
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
		ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецПопытки;
	
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецПроцедуры
