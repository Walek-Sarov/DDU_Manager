// Возвращает прокси веб-сервиса
// Возвращаемое значение
// Прокси веб-сервиса
// 		WSПрокси
//
Функция ПолучитьПрокси() Экспорт
	
	МестоположениеWSDL = Константы.АдресВебСервиса1СДокументооборот.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL) И 
		Прав(МестоположениеWSDL, 1) <> "/" И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;	
	МестоположениеWSDL = МестоположениеWSDL + "ws/dm.1cws?wsdl";
	
	ИмяПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтеграцияС1СДокументооборот", "Пользователь");
	Пароль 		 	= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтеграцияС1СДокументооборот", "Пароль");
	
	Если ИмяПользователя = Неопределено ИЛИ ПустаяСтрока(ИмяПользователя) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры авторизации в 1С:Документооборот'");
	КонецЕсли;	
	
	Попытка
		Определение = Новый WSОпределения(
			МестоположениеWSDL, 
			ИмяПользователя,
			Пароль);
		
		Прокси = Новый WSПрокси(
			Определение,
			"http://www.1c.ru/dm",
			"DMService",
			"DMServiceSoap");
	Исключение	
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с 1С:Документооборот'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'Не удалось подключиться к веб сервису 1С:Документооборота. 
			|Возможно указан неверный адрес веб-сервиса или база 1С:Документооборота не опубликована на веб сервере. 
			|Подробности в журнале регистрации.
			|Обратитесь к администратору системы.'");	
		
	КонецПопытки;	
		
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции	

//////////////////////////////////////////////////////
//// ОБЩИЕ ФУНКЦИИ
Функция ПолучитьИмяТипаДокументаДОИзНастроекЗаполнения(СсылкаНаВнешнийОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаполненияОбъектов1СДокументооборота.ТипОбъектаПотребителя,
		|	НастройкиЗаполненияОбъектов1СДокументооборота.ТипОбъектаДокументооборота
		|ИЗ
		|	Справочник.НастройкиЗаполненияОбъектов1СДокументооборота КАК НастройкиЗаполненияОбъектов1СДокументооборота
		|ГДЕ
		|	НастройкиЗаполненияОбъектов1СДокументооборота.ТипОбъектаПотребителя = &ТипВнешнегоОбъекта";

	Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", СсылкаНаВнешнийОбъект.Метаданные().ПолноеИмя()); 
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИмяТипа = ВыборкаДетальныеЗаписи.ТипОбъектаДокументооборота;
		Прервать;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИмяТипа;
	
КонецФункции

//////////////////////////////////////////////////////
//// ЗАПРОСЫ К ДОКУМЕНТООБОРОТУ

// Получает из Документооборота документ, связанный с объектом конфигурации-потребителя
// Параметры:
//		СсылкаНаВнешнийОбъект - ссылка на объект конфигурации-потребителя
// Возвращает: Структура
//		name - имя документа Документооборота
//		id - уникальный идентификатор документа в Документообороте
//		type - имя типа XDTO, соответствующего документу
Функция ПолучитьСвязанныйCВнешнимОбъектомДокумент(СсылкаНаВнешнийОбъект) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ВнешнийОбъект = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	ВнешнийОбъект.id = Строка(СсылкаНаВнешнийОбъект.УникальныйИдентификатор());
	ВнешнийОбъект.type = Строка(ТипЗнч(СсылкаНаВнешнийОбъект));
	ВнешнийОбъект.name = Строка(СсылкаНаВнешнийОбъект);
	
	Запрос = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
	Запрос.externalObjects.Добавить(ВнешнийОбъект);
	
	Запрос.columnSet.Добавить("name"); 
	
	Результат = Прокси.execute(Запрос);
	Если РаботаС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
		ВызватьИсключение Результат.description;
	КонецЕсли;	
		
	Если Результат.documents.Количество() > 0 Тогда 
		Объект = Результат.documents[0];
		ДанныеВозврата = Новый Структура();
		ДанныеВозврата.Вставить("name", Объект.name);
		ДанныеВозврата.Вставить("id", Объект.objectId.id);
		ДанныеВозврата.Вставить("type", Объект.objectId.type);
		Возврат ДанныеВозврата;
	КонецЕсли;	

	Возврат Неопределено;
	
КонецФункции

// Получает список шаблонов, определенных в Документообороте 
// для данного типа бизнес-процессов и вида данного предмета бизнес-процесса
// Параметры:
//		ТипБизнесПроцесса - имя типа XDTO
//		ПредметБизнесПроцесса - Структура
//			id - уникальный идентификатор предмета бизнес-процесса в Документообороте
//			type - имя типа XDTO предмета бизнес-процесса
// Возвращает: список структур
//		name - имя шаблона в документообороте
//		id - уникальный идентификатор шаблона
//		type - имя типа XDTO шаблона
Функция ПолучитьСписокШаблоновБизнесПроцессов(ТипБизнесПроцесса, ПредметБизнесПроцесса) Экспорт
	
	Прокси = ПолучитьПрокси();
	Запрос = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessTemplatesRequest");
    Запрос.businessProcessType = ТипБизнесПроцесса;
	
	Если ПредметБизнесПроцесса <> Неопределено Тогда 
		ПредметБизнесПроцессаИд = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = ПредметБизнесПроцесса.id;
		ПредметБизнесПроцессаИд.type = ПредметБизнесПроцесса.Тип;
		
		Запрос.businessProcessTargetId = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	Результат = Прокси.execute(Запрос);	
	РаботаС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	СписокШаблоновДокументов = Новый СписокЗначений;
	Для Каждого Шаблон Из Результат.BusinessProcessTemplates Цикл
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("name", Шаблон.name);
		ДанныеШаблона.Вставить("id", Шаблон.objectId.id);
		ДанныеШаблона.Вставить("type", Шаблон.objectId.type);
		СписокШаблоновДокументов.Добавить(ДанныеШаблона);
	КонецЦикла;
	
	Возврат СписокШаблоновДокументов;
	
КонецФункции

// Заполняет форму бизнес-процесса на основании шаблона
Функция ЗаполнитьБизнесПроцессПоШаблону(Форма, ДанныеОШаблоне) Экспорт
	
	Прокси = ПолучитьПрокси();
	Запрос = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessByTemplateRequest");
	
	Запрос.type = Форма.Тип;
	
	Если ЗначениеЗаполнено(Форма.Предмет)Тогда 
		ПредметБизнесПроцессаИд = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = Форма.ПредметID;
		ПредметБизнесПроцессаИд.type = Форма.ПредметТип;
		
		Запрос.targetId = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	ШаблонБизнесПроцессаИд = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	ШаблонБизнесПроцессаИд.id = ДанныеОШаблоне.РеквизитID;
	ШаблонБизнесПроцессаИд.type = ДанныеОШаблоне.РеквизитТип;
		
	Запрос.businessProcessTemplateId = ШаблонБизнесПроцессаИд;

	
	Результат = Прокси.execute(Запрос);	
	РаботаС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск объектов документооборота по части наименования
// Параметры:
//		Тип - имя класса XDTO, соответствующего типу искомого объекта
//		Наименование - часть наименования, по которой происходит поиск
// Возвращает:
//		Список объектов XDTO, соответствующих найденным объектам в 1С:Документооборот
Функция ПолучитьОбъектыПоНаименованию(Тип, Наименование) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	Условие = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "name";
	Условие.value = Наименование;
	
	СписокУсловий = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	СписокУсловий.conditions.Добавить(Условие);
	
	Запрос = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = Тип;
	Запрос.Query = СписокУсловий;
	
	Результат = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат.items;
	
КонецФункции

// Готовит данные для выбора из списка при обработке события АвтоПодбор у полей ввода
// Параметры:
//		ТипыЗначений - строка с именами классов XDTO, разделенными символом ';'
//		ДанныеВыбора - список значений, который показывается для выбора значения в поле
//		Текст - строка, по которой происходит поиск объектов
//		СтандартнаяОбработка - параметр, передаваемый из обработчика события на форме
Процедура ПолучитьДанныеДляАвтоПодбора(ТипыЗначений, ДанныеВыбора, Текст, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	МассивТипов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипыЗначений, ";");
	
	Для Каждого ТипXDTO Из МассивТипов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТипXDTO) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеЗначения = ПолучитьОбъектыПоНаименованию(ТипXDTO, Текст);
		
		Для Каждого НайденноеЗначение Из НайденныеЗначения Цикл
			ДанныеДляВыбора = Новый Структура;
			ДанныеДляВыбора.Вставить("name", НайденноеЗначение.object.name);
			ДанныеДляВыбора.Вставить("id", НайденноеЗначение.object.objectId.id);
			ДанныеДляВыбора.Вставить("type", НайденноеЗначение.object.objectId.type);

			ДанныеВыбора.Добавить(ДанныеДляВыбора, НайденноеЗначение.object.name);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////
//// РАБОТА С ФАЙЛАМИ

// получает двоичные данные файла и помещает во временное хранилище
Функция ПолучитьАдресФайла(ИдентификаторФайла, ИдентификаторФормы) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMRetrieveRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	
	objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	objectId.id = ИдентификаторФайла;
	objectId.type = "DMFile";
	
	Запрос.objectIds.Добавить(objectId);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("binaryData");
	Запрос.columnSet.Добавить("extension");
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	ДанныеФайла = Ответ.objects[0];
	
 	Адрес = ПоместитьВоВременноеХранилище(ДанныеФайла.binaryData, ИдентификаторФормы);
	Возврат Адрес;
	
КонецФункции

// получает двоичные данные файла
Функция ПолучитьДвоичныеДанныеФайла(ИдентификаторФайла) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMRetrieveRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	
	objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	objectId.id = ИдентификаторФайла;
	objectId.type = "DMFile";
	
	Запрос.objectIds.Добавить(objectId);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("binaryData");
	Запрос.columnSet.Добавить("extension");
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	ДанныеФайла = Ответ.objects[0];
	
	Возврат ДанныеФайла.binaryData;
	
КонецФункции

// возвращает массив структур
Функция ПолучитьДвоичныеДанныеФайлов(Файлы) Экспорт
	
	Прокси = ПолучитьПрокси();	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMRetrieveRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ObjectIDТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	
	Для Каждого Файл Из Файлы Цикл
		
		objectId = Прокси.ФабрикаXDTO.Создать(ObjectIDТип);
		
		objectId.id = Файл;
		objectId.type = "DMFile";
		
		Запрос.objectIds.Добавить(objectId);
		
	КонецЦикла;
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("binaryData");
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции	

// Возвращает доступные для реквизита типы
Функция ПолучитьДоступныеТипыДляРеквизита(ИмяТипаXDTO) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", ИмяТипаXDTO);
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
		
	ДанныеДляВыбора = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, ДанныеДляВыбора);
	
	СписокДоступныхТипов = Новый СписокЗначений;
	
	Для Каждого ОдноЗначение Из ДанныеДляВыбора.type Цикл
		ДанныеОдногоЗначения = Новый Структура;
		ДанныеОдногоЗначения.Вставить("Имя", ОдноЗначение.xdtoClassName);
		ДанныеОдногоЗначения.Вставить("Представление", ОдноЗначение.presentation);
		СписокДоступныхТипов.Добавить(ДанныеОдногоЗначения);
	КонецЦикла;
	
	Возврат СписокДоступныхТипов;
	
КонецФункции

// получает настройки базы 1С:Документооборот
Функция ПолучитьНастройки() Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMGetSettingsRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	НастройкиXDTO = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, НастройкиXDTO);
	
	Настройки = Новый Структура("НужноИзвлечьТекст, ИспользоватьЭлектронныеЦифровыеПодписи", 
		НастройкиXDTO.needExtractText, НастройкиXDTO.useDigitalSignatures);
	Возврат Настройки;
	
КонецФункции

// Возвращает путь к каталогу, используемому при интеграции, из временного хранилища
//
Функция ПолучитьЛокальныйКаталогФайлов() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКаталогФайловИнтеграции", , "");
	
КонецФункции


// Сохраняет путь к каталогу, используемому при интеграции, во временном хранилище
// Параметры
//  Каталог - строка - путь к каталогу печати
//
Процедура СохранитьЛокальныйКаталогФайлов(Каталог) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЛокальныйКаталогФайловИнтеграции", , Каталог);
	
КонецПроцедуры

// Создает объект указанного типа в пространстве имен http://www.1c.ru/dm
// Параметры
//		Прокси - объект для подключения к Документообороту
//		Тип - имя типа XDTO
// Возвращает
//		ОбъектXDTO указанного типа
Функция СоздатьОбъектDM(Прокси, Тип) Экспорт
	
	ТипОбъекта = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип);
	Объект = Прокси.ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат Объект;
	
КонецФункции

// создает в файл в 1С:Документооборот.  возвращает UUID созданного файла
Функция ОбновитьИзФайлаНаДиске(ПараметрыСоздания) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMUpdateRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ФайлТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMFile");
	Файл = Прокси.ФабрикаXDTO.Создать(ФайлТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	Файл.objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	
	Файл.objectId.id = ПараметрыСоздания.ИдентификаторФайла;
	Файл.objectId.type = "DMFile";
	Файл.name = ""; // имя не меняется
	
	Файл.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Файл.extension = ПараметрыСоздания.Расширение;
	
	Если ПараметрыСоздания.ВремяИзменения <> '00000000' Тогда
		Файл.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Иначе
		Файл.modificationDate = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Если ПараметрыСоздания.ВремяИзменения <> '00000000' Тогда
		Файл.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Иначе
		Файл.modificationDateUniversal = УниверсальноеВремя(ТекущаяДатаСеанса());
	КонецЕсли;	
	
	Файл.size = ПараметрыСоздания.Размер;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Файл.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Запрос.objects.Добавить(Файл);
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Истина;

КонецФункции

// проверить код возврата
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	Если РаботаС1СДокументооборот.ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
		ВызватьИсключение Ответ.subject + ":" + Символы.ПС + Символы.ПС + Ответ.description;
	КонецЕсли;	
	
КонецПроцедуры

// получить поля карточки файла
Функция ПолучитьКарточкуФайла(ИдентификаторФайла, Форма = Неопределено) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMRetrieveRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	Файл = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	Файл.id = ИдентификаторФайла;
	Файл.type = "DMFile";
	
	Запрос.objectIds.Добавить(Файл);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("signed");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("size");
	Запрос.columnSet.Добавить("creationDate");
	Запрос.columnSet.Добавить("modificationDateUniversal");
	Запрос.columnSet.Добавить("author");
	Запрос.columnSet.Добавить("extension");
	Запрос.columnSet.Добавить("description");
	Запрос.columnSet.Добавить("editing");
	Запрос.columnSet.Добавить("encrypted");
	
	Запрос.columnSet.Добавить("signatures.author");
	Запрос.columnSet.Добавить("signatures.date");
	Запрос.columnSet.Добавить("signatures.comment");
	Запрос.columnSet.Добавить("signatures.signature");
	Запрос.columnSet.Добавить("signatures.thumbprint");
	Запрос.columnSet.Добавить("signatures.lineNumber");
	Запрос.columnSet.Добавить("signatures.signer");
	Запрос.columnSet.Добавить("signatures.certificate");
	Запрос.columnSet.Добавить("signatures.signatureFileName");
	
	Файлы = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	ОписаниеФайла = Новый Структура;
	
	СведенияОФайле = Файлы.objects[0];
		
	ОписаниеФайла.Вставить("Наименование", СведенияОФайле.name);
	ОписаниеФайла.Вставить("Расширение", СведенияОФайле.extension);
	ОписаниеФайла.Вставить("Описание", СведенияОФайле.description);
	ОписаниеФайла.Вставить("Размер", Формат(СведенияОФайле.size, "ЧЦ=10; ЧН=0"));
	ОписаниеФайла.Вставить("ПодписанЭЦП", СведенияОФайле.signed);
	ОписаниеФайла.Вставить("Автор", СведенияОФайле.author.name);
	ОписаниеФайла.Вставить("УникальныйИдентификатор", СведенияОФайле.objectId.id);
	ОписаниеФайла.Вставить("ДатаСоздания", СведенияОФайле.creationDate);
	ОписаниеФайла.Вставить("ДатаМодификацииУниверсальная", СведенияОФайле.modificationDateUniversal);
	ОписаниеФайла.Вставить("Редактируется", СведенияОФайле.editing);
	ОписаниеФайла.Вставить("Зашифрован", СведенияОФайле.encrypted);
	
	Подписи = Новый Массив;
	
	Для Каждого ПодписьXDTO Из СведенияОФайле.signatures Цикл
		Подпись = Новый Структура;
		
		Подпись.Вставить("КомуВыданСертификат", ПодписьXDTO.author);
		Подпись.Вставить("ДатаПодписи", ПодписьXDTO.date);
		Подпись.Вставить("Комментарий", ПодписьXDTO.comment);
		Подпись.Вставить("Подпись", ПодписьXDTO.signature);
		Подпись.Вставить("Отпечаток", ПодписьXDTO.thumbprint);
		Подпись.Вставить("Сертификат", ПодписьXDTO.certificate);
		Подпись.Вставить("ИмяФайлаПодписи", ПодписьXDTO.signatureFileName);
		Подпись.Вставить("УстановившийПодпись", ПодписьXDTO.signer.name);
		Подпись.Вставить("УстановившийПодписьИд", ПодписьXDTO.signer.objectId.id);
		
		Подписи.Добавить(Подпись);
	КонецЦикла;	
	
	ОписаниеФайла.Вставить("Подписи", Подписи);
	
	Если Форма <> Неопределено Тогда
		// дополнительные реквизиты
		РаботаС1СДокументооборот.ПоместитьДополнительныеРеквизитыНаФорму(Форма, СведенияОФайле);
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции
	
// получить поля карточки файла
Функция ПолучитьСписокФайлов(ИдентификаторВладельца, ИмяВладельца, ТипВладельца) Экспорт

	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMGetFileListRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ОбъектТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "ExternalObject");
	ОбъектВладелец = Прокси.ФабрикаXDTO.Создать(ОбъектТип);
	
	ОбъектВладелец.name = ИмяВладельца;
	ОбъектВладелец.id = Строка(ИдентификаторВладельца);
	ОбъектВладелец.type = ТипВладельца;
	
	Запрос.externalObjects.Добавить(ОбъектВладелец);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("signed");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("size");
	Запрос.columnSet.Добавить("creationDate");
	Запрос.columnSet.Добавить("modificationDateUniversal");
	Запрос.columnSet.Добавить("author");
	Запрос.columnSet.Добавить("extension");
	Запрос.columnSet.Добавить("description");
	Запрос.columnSet.Добавить("editing");
	Запрос.columnSet.Добавить("encrypted");
	
	Запрос.columnSet.Добавить("signatures.author");
	Запрос.columnSet.Добавить("signatures.date");
	Запрос.columnSet.Добавить("signatures.comment");
	Запрос.columnSet.Добавить("signatures.signature");
	Запрос.columnSet.Добавить("signatures.thumbprint");
	Запрос.columnSet.Добавить("signatures.signer");
	Запрос.columnSet.Добавить("signatures.certificate");
	Запрос.columnSet.Добавить("signatures.signatureFileName");
	
	Файлы = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	Возврат Файлы;
	
КонецФункции

// получить поля карточки файла
Функция ПолучитьСписокФайловПоВладельцу(ИдентификаторВладельца, ИмяВладельца, ТипВладельца) Экспорт

	Прокси = ПолучитьПрокси();
	
	ЗапросТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMGetFileListByOwnerRequest");
	Запрос = Прокси.ФабрикаXDTO.Создать(ЗапросТип);
	
	ОбъектТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	ОбъектВладелец = Прокси.ФабрикаXDTO.Создать(ОбъектТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	ОбъектВладелец.name = ИмяВладельца;
	ОбъектВладелец.objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	ОбъектВладелец.objectId.id = Строка(ИдентификаторВладельца);
	ОбъектВладелец.objectId.type = ТипВладельца;
	
	Запрос.owners.Добавить(ОбъектВладелец);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("signed");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("size");
	Запрос.columnSet.Добавить("creationDate");
	Запрос.columnSet.Добавить("modificationDateUniversal");
	Запрос.columnSet.Добавить("author");
	Запрос.columnSet.Добавить("extension");
	Запрос.columnSet.Добавить("description");
	Запрос.columnSet.Добавить("editing");
	Запрос.columnSet.Добавить("encrypted");
	
	Файлы = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	Возврат Файлы;
	
КонецФункции

// заполняет XDTO объект подписи
Процедура ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи) Экспорт
	
	ОбъектТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	ПользовательТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMUser");
	
	ПодписьXDTO.author = ДанныеПодписи.КомуВыданСертификат;
	ПодписьXDTO.certificate = ДанныеПодписи.ДвоичныеДанныеСертификата;
	ПодписьXDTO.comment = ДанныеПодписи.Комментарий;
	ПодписьXDTO.date = ДанныеПодписи.ДатаПодписи;
	ПодписьXDTO.signature = ДанныеПодписи.НоваяПодписьДвоичныеДанные;
	ПодписьXDTO.signatureFileName = ДанныеПодписи.ИмяФайлаПодписи;
	ПодписьXDTO.thumbprint = ДанныеПодписи.Отпечаток;

	Если ДанныеПодписи.Свойство("УстановившийПодпись") Тогда
		
		ПодписьXDTO.signer = Прокси.ФабрикаXDTO.Создать(ПользовательТип);
		ПодписьXDTO.signer.name = ДанныеПодписи.УстановившийПодпись;
		
		ПодписьXDTO.signer.objectId = РаботаС1СДокументооборот.СоздатьObjectID(Прокси, 
			ДанныеПодписи.УстановившийПодписьИд, "DMUser");
			
	КонецЕсли;
	
КонецПроцедуры	

// подписать документ
Функция ПодписатьДокумент(ДобавленныеПодписи, ТаблицаПодписей, ЭтаФорма, 
	id, Тип, Файлы, Представление) Экспорт
	
	// получаем массив всех подписей
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей); 	
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления 
	
	// формируем массив данных подписи
	Для Каждого Элемент Из НомераСтрок Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
			
			ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, ДвоичныеДанныеСертификата, ОбъектТип, УстановившийПодпись, УстановившийПодписьИд",
									ДанныеСтроки.ОбъектИд,
									ПодписьДвоичныеДанные,
									ДанныеСтроки.Отпечаток,
									ДанныеСтроки.ДатаПодписи,
									ДанныеСтроки.Комментарий,
									ДанныеСтроки.ИмяФайлаПодписи,
									ДанныеСтроки.КомуВыданСертификат,
									ДвоичныеДанныеСертификата,
									ДанныеСтроки.ОбъектТип,
									ДанныеСтроки.УстановившийПодпись,
									ДанныеСтроки.УстановившийПодписьИд);
			
			МассивДанныхПодписей.Добавить(ДанныеПодписи);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого ДанныеПодписи Из ДобавленныеПодписи Цикл
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
	КонецЦикла;	
	
	Соответствие = Новый Соответствие;	
	
	// Из массива удаленных строим массив объектов, где изменились подписи - в том числе тех, где не осталось ни одной подписи
	Для Каждого СтрокаДобавленнойПодписи Из ДобавленныеПодписи Цикл
		
		Ид = СтрокаДобавленнойПодписи.ОбъектСсылка;
		
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца = Неопределено Тогда
			ДанныеВладельца = Новый Структура("Тип, МассивПодписей", СтрокаДобавленнойПодписи.ОбъектТип, Новый Массив);
			Соответствие.Вставить(Ид, ДанныеВладельца);
		КонецЕсли;			
		
	КонецЦикла;	
	
	// Распределяем массив всех оставшихся подписей по объектам
	Для Каждого Подпись Из МассивДанныхПодписей Цикл
		
		Ид = Подпись.ОбъектСсылка;
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца <> Неопределено Тогда
			ДанныеВладельца.МассивПодписей.Добавить(Подпись);
		КонецЕсли;			
		
	КонецЦикла;	
	
	Возврат Соответствие;
	
КонецФункции

// Удаляет подписи документа и его файлов
Функция УдалитьПодписиДокумента(ТаблицаУдаленныеСтроки, ТаблицаПодписей, ЭтаФорма, 
	id, Тип, Файлы, Представление) Экспорт
	
	// получаем массив всех подписей
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей);	
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	// формируем массив данных подписи
	Для Каждого Элемент Из НомераСтрок Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			// по GUID объекта + номер строки - удаляем из массива всех те, что надо удалить
			ПодписьУдалена = Ложь;
			Для Каждого СтрокаУдаленнойПодписи Из ТаблицаУдаленныеСтроки Цикл
				Если СтрокаУдаленнойПодписи.ОбъектСсылка = ДанныеСтроки.ОбъектИд И СтрокаУдаленнойПодписи.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
					ПодписьУдалена = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если НЕ ПодписьУдалена Тогда 
				
				ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
				
				ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, ДвоичныеДанныеСертификата, ОбъектТип, УстановившийПодпись, УстановившийПодписьИд",
										ДанныеСтроки.ОбъектИд,
										ПодписьДвоичныеДанные,
										ДанныеСтроки.Отпечаток,
										ДанныеСтроки.ДатаПодписи,
										ДанныеСтроки.Комментарий,
										ДанныеСтроки.ИмяФайлаПодписи,
										ДанныеСтроки.КомуВыданСертификат,
										ДвоичныеДанныеСертификата,
										ДанныеСтроки.ОбъектТип,
										ДанныеСтроки.УстановившийПодпись,
										ДанныеСтроки.УстановившийПодписьИд);
				
				МассивДанныхПодписей.Добавить(ДанныеПодписи);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Соответствие = Новый Соответствие;	
	
	// Из массива удаленных строим массив объектов, где изменились подписи - в том числе тех, где не осталось ни одной подписи
	Для Каждого СтрокаУдаленнойПодписи Из ТаблицаУдаленныеСтроки Цикл
		
		Ид = СтрокаУдаленнойПодписи.ОбъектСсылка;
		
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца = Неопределено Тогда
			ДанныеВладельца = Новый Структура("Тип, МассивПодписей", СтрокаУдаленнойПодписи.ОбъектТип, Новый Массив);
			Соответствие.Вставить(Ид, ДанныеВладельца);
		КонецЕсли;			
		
	КонецЦикла;	
	
	// Распределяем массив всех оставшихся подписей по объектам
	Для Каждого Подпись Из МассивДанныхПодписей Цикл
		
		Ид = Подпись.ОбъектСсылка;
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца <> Неопределено Тогда
			ДанныеВладельца.МассивПодписей.Добавить(Подпись);
		КонецЕсли;			
		
	КонецЦикла;	
	
	Возврат Соответствие;
	
КонецФункции	

// заносит информацию о подписи файла в базу Документооборот
Процедура ЗанестиИнформациюОПодписяхОбъекта(Идентификатор, Имя, ОписаниеФайла, Тип, 
	МассивДанныхПодписей, МассивСуществующихПодписейФайла) Экспорт
	
	Прокси = ПолучитьПрокси();
	
	ОбъектТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип);
	Объект = Прокси.ФабрикаXDTO.Создать(ОбъектТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	Объект.objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	
	Объект.objectId.id = Идентификатор;
	Объект.objectId.type = Тип;
	
	// только 2 поля - Имя и Описание передаем при записи
	Объект.name = Имя;
	Объект.description = ОписаниеФайла;
	
	ПодписьТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMSignature");
	
	Для Каждого ДанныеПодписи Из МассивСуществующихПодписейФайла Цикл
		
		ПодписьXDTO = Прокси.ФабрикаXDTO.Создать(ПодписьТип);
		ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;	
	
	Для Каждого ДанныеПодписи Из МассивДанныхПодписей Цикл 
		
		ПодписьXDTO = Прокси.ФабрикаXDTO.Создать(ПодписьТип);
		
		ПодписьXDTO.author = ДанныеПодписи.КомуВыданСертификат;
		ПодписьXDTO.certificate = ДанныеПодписи.ДвоичныеДанныеСертификата;
		ПодписьXDTO.comment = ДанныеПодписи.Комментарий;
		ПодписьXDTO.date = ДанныеПодписи.ДатаПодписи;
		ПодписьXDTO.signature = ДанныеПодписи.НоваяПодписьДвоичныеДанные;
		ПодписьXDTO.signatureFileName = ДанныеПодписи.ИмяФайлаПодписи;
		ПодписьXDTO.thumbprint = ДанныеПодписи.Отпечаток;
		
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
	Ответ = РаботаС1СДокументооборот.ЗаписатьОбъект(Прокси, Объект);
	
КонецПроцедуры

//создает XDTO объект Файл
Функция СоздатьXDTOФайл(Прокси, МассивПодписей, Файл) Экспорт
	
	ОбъектТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMFile");
	Объект = Прокси.ФабрикаXDTO.Создать(ОбъектТип);
	
	Объект.objectId = РаботаС1СДокументооборот.СоздатьObjectID(Прокси, Файл.УникальныйИдентификатор, "DMFile");
	
	// только 2 поля - Имя и Описание передаем при записи
	Объект.name = Файл.Наименование;
	Объект.description = Файл.Описание;
	
	// тут ЭЦП добавить
	ПодписьТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMSignature");
	
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ПодписьXDTO = Прокси.ФабрикаXDTO.Создать(ПодписьТип);
		ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;	
	
	Возврат Объект;
	
КонецФункции	

// Возвращает ИспользоватьЭлектронныеЦифровыеПодписи
Функция ПолучитьИспользоватьЭлектронныеЦифровыеПодписи() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьЭлектронныеЦифровыеПодписи = Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
	Возврат ИспользоватьЭлектронныеЦифровыеПодписи;
КонецФункции

// создает в файл в 1С:Документооборот.  возвращает UUID созданного файла
Функция СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, id, Тип, Представление) Экспорт
	
	Прокси = ПолучитьПрокси();
	Запрос = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddFileRequest");
	
	ОбъектВладелец = РаботаС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	ОбъектВладелец.objectId = РаботаС1СДокументооборот.СоздатьObjectID(Прокси, id, Тип);
	ОбъектВладелец.name = Представление;
	
	Запрос.owner = ОбъектВладелец;
	
	ФайлТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMFile");
	Запрос.file = Прокси.ФабрикаXDTO.Создать(ФайлТип);
	
	ОбъектИдТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObjectID");
	Запрос.file.objectId = Прокси.ФабрикаXDTO.Создать(ОбъектИдТип);
	
	Запрос.file.objectId.id = ""; // пусто - пока не создан
	Запрос.file.objectId.type = "DMFile";
	Запрос.file.name = "";
	
	Запрос.file.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Запрос.file.extension = ПараметрыСоздания.Расширение;
	Запрос.file.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Запрос.file.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Запрос.file.name = ПараметрыСоздания.Имя;
	Запрос.file.size = ПараметрыСоздания.Размер;
	
	Размер = Запрос.file.binaryData.Размер();
	МаксРазмерФайла = ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМб = Размер / (1024 * 1024);
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Размер > МаксРазмерФайла Тогда
		
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
				 ПараметрыСоздания.Имя, 
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),           
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Запрос.file.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);	
	
	Возврат Ответ.file.objectId.id; 

КонецФункции

// заполняет список файлов в карточке документа
Процедура ОбновитьСписокФайлов(files, Файлы, ГруппаФайлы) Экспорт
	
	Файлы.Очистить();
	
	// файлы
	Для каждого СведенияОФайле Из files Цикл
		НоваяСтрока = Файлы.Добавить();
		
		НоваяСтрока.Наименование = СведенияОФайле.name;
		НоваяСтрока.Расширение = СведенияОФайле.extension;
		НоваяСтрока.Описание = СведенияОФайле.description;
		НоваяСтрока.Размер = Формат(СведенияОФайле.size/1024, "ЧЦ=10; ЧН=0");
		НоваяСтрока.ПодписанЭЦП = СведенияОФайле.signed;
		НоваяСтрока.Автор = СведенияОФайле.author.name;
		НоваяСтрока.УникальныйИдентификатор = СведенияОФайле.objectId.id;
		НоваяСтрока.ДатаСоздания = СведенияОФайле.creationDate;
		НоваяСтрока.ДатаМодификацииУниверсальная = СведенияОФайле.modificationDateUniversal;
		Редактируется = СведенияОФайле.editing;
		Зашифрован = СведенияОФайле.encrypted;
		
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(НоваяСтрока.Расширение);
	КонецЦикла;
	
	ФайлыЗаголовок = НСтр("ru = 'Файлы'");
	
	Если Файлы.Количество() <> 0 Тогда 
		ФайлыЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'"),
			Файлы.Количество());
	КонецЕсли;	
	
	ГруппаФайлы.Заголовок = ФайлыЗаголовок;
	
КонецПроцедуры	

// заполняет строку дерева на закладке ЭЦП в документе
Процедура ЗаполнитьСтрокуДерева(НоваяСтрокаДерева, Подпись, УникальныйИдентификатор) Экспорт
	
	НоваяСтрокаДерева.КомуВыданСертификат = Подпись.КомуВыданСертификат;
	НоваяСтрокаДерева.ДатаПодписи = Подпись.ДатаПодписи;
	НоваяСтрокаДерева.Комментарий = Подпись.Комментарий;
	
	НоваяСтрокаДерева.ОбъектИмя = Подпись.ОбъектИмя;
	НоваяСтрокаДерева.ОбъектИд = Подпись.ОбъектИд;
	НоваяСтрокаДерева.ОбъектТип = Подпись.ОбъектТип;				
	
	НоваяСтрокаДерева.Объект = Подпись.ОбъектИд;
	
	НоваяСтрокаДерева.Отпечаток = Подпись.Отпечаток;
	НоваяСтрокаДерева.НомерСтроки = Подпись.НомерСтроки;
	НоваяСтрокаДерева.УстановившийПодпись = Подпись.УстановившийПодпись;
	НоваяСтрокаДерева.УстановившийПодписьИд = Подпись.УстановившийПодписьИд;
	НоваяСтрокаДерева.Неверна = Ложь;
	НоваяСтрокаДерева.ИндексКартинки = -1;
	
	НоваяСтрокаДерева.ИмяФайлаПодписи = Подпись.ИмяФайлаПодписи;
	
	ДвоичныеДанные = Подпись.Подпись;
	НоваяСтрокаДерева.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	ДвоичныеДанныеСертификата = Подпись.Сертификат;
	Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
		НоваяСтрокаДерева.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры	


Функция ПолучитьПредставлениеТипа(ОбъектТип)

	ПредставлениеТипа = "";
	
	Если ОбъектТип = "DMFile" Тогда
		ПредставлениеТипа = "Файл";
	ИначеЕсли ОбъектТип = "DMInternalDocument" Тогда
		ПредставлениеТипа = "Внутренний документ";
	ИначеЕсли ОбъектТип = "DMIncomingDocument" Тогда
		ПредставлениеТипа = "Входящий документ";
	ИначеЕсли ОбъектТип = "DMOutgoingDocument" Тогда
		ПредставлениеТипа = "Исходящий документ";
	КонецЕсли;	
	
	Возврат ПредставлениеТипа;

КонецФункции	

Процедура ЗаполнитьПоляПодписи(Подпись, ПодписьXDTO)
	Подпись.Вставить("КомуВыданСертификат", ПодписьXDTO.author);
	Подпись.Вставить("ДатаПодписи", ПодписьXDTO.date);
	Подпись.Вставить("Комментарий", ПодписьXDTO.comment);
	Подпись.Вставить("Подпись", ПодписьXDTO.signature);
	Подпись.Вставить("Отпечаток", ПодписьXDTO.thumbprint);
	Подпись.Вставить("Сертификат", ПодписьXDTO.certificate);
	Подпись.Вставить("ИмяФайлаПодписи", ПодписьXDTO.signatureFileName);
	Подпись.Вставить("УстановившийПодпись", ПодписьXDTO.signer.name);
	Подпись.Вставить("УстановившийПодписьИд", ПодписьXDTO.signer.objectId.id);
КонецПроцедуры	

// Заполняет список подписей Входящего Исходящего Внутреннего документа и его подчиненных файлов
Процедура ЗаполнитьСписокПодписейСервер(ПодписиXDTO, ФайлыXDTO, Представление, id, Тип, ТаблицаПодписей, 
	УникальныйИдентификатор, ГруппаЭЦП, Файлы) Экспорт
	
	Соответствие = Новый Соответствие;	
	
	Счетчик = 0;
	Для Каждого ПодписьXDTO Из ПодписиXDTO Цикл
		
		Подпись = Новый Структура;
		ЗаполнитьПоляПодписи(Подпись, ПодписьXDTO);		
		
		Подпись.Вставить("НомерСтроки", Счетчик);
		Подпись.Вставить("ОбъектИмя", Представление);
		Подпись.Вставить("ОбъектИд", id);
		Подпись.Вставить("ОбъектТип", Тип);
		
		Ид = Подпись.ОбъектИд;
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца = Неопределено Тогда
			ДанныеВладельца = Новый Структура("Тип, МассивПодписей", Подпись.ОбъектТип, Новый Массив);
			Соответствие.Вставить(Ид, ДанныеВладельца);
		КонецЕсли;			
		
		ДанныеВладельца.МассивПодписей.Добавить(Подпись);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;	
	
	Для Каждого Файл Из ФайлыXDTO Цикл
		
		Счетчик = 0;
		Для Каждого ПодписьXDTO Из Файл.signatures Цикл
			
			Подпись = Новый Структура;
			ЗаполнитьПоляПодписи(Подпись, ПодписьXDTO);		
			
			Подпись.Вставить("НомерСтроки", Счетчик);
			Подпись.Вставить("ОбъектИмя", Файл.name);
			Подпись.Вставить("ОбъектИд", Файл.objectId.id);
			Подпись.Вставить("ОбъектТип", Файл.objectId.type);
			
			Ид = Подпись.ОбъектИд;
			ДанныеВладельца = Соответствие.Получить(Ид);
			
			Если ДанныеВладельца = Неопределено Тогда
				ДанныеВладельца = Новый Структура("Тип, МассивПодписей", Подпись.ОбъектТип, Новый Массив);
				Соответствие.Вставить(Ид, ДанныеВладельца);
			КонецЕсли;			
			
			ДанныеВладельца.МассивПодписей.Добавить(Подпись);
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ВсегоПодписей = 0;
	ТаблицаПодписей.ПолучитьЭлементы().Очистить();
	
	ЭлементыДерева = ТаблицаПодписей.ПолучитьЭлементы();
	
	КоличествоПодписей = 0;
	
	Для Каждого ПараКлючЗначение Из Соответствие Цикл
		
		ИмяОбъекта = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		
		ТипОбъекта = ДанныеВладельца.Тип;
		
		Если ТипОбъекта <> "DMFile" И ДанныеВладельца.МассивПодписей.Количество() <> 0 Тогда
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			// для ветки дерева используем КомуВыданСертификат как Представление
			
			ПредставлениеТипа = ПолучитьПредставлениеТипа(ДанныеВладельца.МассивПодписей[0].ОбъектТип);
			
			НоваяСтрока.КомуВыданСертификат = ПредставлениеТипа + " """ + Представление + """"; 
			НоваяСтрока.ИндексКартинки = 0;  // стандартная иконка справочника
			
			Для Каждого Подпись Из ДанныеВладельца.МассивПодписей Цикл
				
				НоваяСтрокаДерева = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуДерева(НоваяСтрокаДерева, Подпись, УникальныйИдентификатор);
				КоличествоПодписей = КоличествоПодписей + 1;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
	
	Для Каждого ПараКлючЗначение Из Соответствие Цикл
		
		ИмяОбъекта = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		
		ТипОбъекта = ДанныеВладельца.Тип;
		
		Если ТипОбъекта = "DMFile" И ДанныеВладельца.МассивПодписей.Количество() <> 0 Тогда
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			// для ветки дерева используем КомуВыданСертификат как Представление
			ПредставлениеТипа = ПолучитьПредставлениеТипа(ДанныеВладельца.МассивПодписей[0].ОбъектТип);			
			НоваяСтрока.КомуВыданСертификат = ПредставлениеТипа + " """ + Подпись.ОбъектИмя + """"; 
			
			Отбор = Новый Структура("УникальныйИдентификатор", ДанныеВладельца.МассивПодписей[0].ОбъектИд);
			СтрокаФайлов = Файлы.НайтиСтроки(Отбор);
			Если СтрокаФайлов.Количество() <> 0 Тогда
				НоваяСтрока.ИндексКартинки = СтрокаФайлов[0].ИндексКартинки;
			КонецЕсли;	
			
			КоличествоПодписей = 0;
			
			Для Каждого Подпись Из ДанныеВладельца.МассивПодписей Цикл
				
				НоваяСтрокаДерева = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуДерева(НоваяСтрокаДерева, Подпись, УникальныйИдентификатор);
				КоличествоПодписей = КоличествоПодписей + 1;
				
			КонецЦикла;	
			
			ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТекстЗаголовка = НСтр("ru = 'ЭЦП'");
	Если ВсегоПодписей <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ВсегоПодписей) + ")";
	КонецЕсли;	
	ГруппаЭЦП.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Проверяет все подписи (на сервере) из массива ВыделенныеСтроки
Процедура ПроверитьПодписиНаСервере(Знач ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор,
	АдресСлепкаДокумента) Экспорт
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
				СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента);
		КонецЕсли;	
	КонецЦикла;
			
КонецПроцедуры

// Проверяет одну электронно-цифровую подпись 
Процедура ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
	СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента) Экспорт
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	ДвоичныеДанныеФайла = СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд];
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		
		Если ДанныеСтроки.ОбъектТип = "DMFile" Тогда
			ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ДанныеСтроки.ОбъектИд);
		Иначе	
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресСлепкаДокумента);
		КонецЕсли;
		
		СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд] = ДвоичныеДанныеФайла;
	КонецЕсли;
	
	Попытка
		ЭлектроннаяЦифроваяПодпись.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;	
	
КонецПроцедуры

// Проверяет все подписи (на сервере) из массива ВыделенныеСтроки
Процедура ПроверитьВсеПодписиНаСервере(ТаблицаПодписей, УникальныйИдентификатор,
	АдресСлепкаДокумента) Экспорт
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;
	
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей);
	Для Каждого Элемент Из НомераСтрок Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
				СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента);
		КонецЕсли;
	КонецЦикла;	
			
КонецПроцедуры

// Получает менеджер криптографии
Функция ПолучитьМенеджерКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодписьПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Преобразует 2-уровневое дерево в массив
Функция ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат ДанныеСтрок;
	
КонецФункции	


// получает массив подписей
Функция ПолучитьВыделенныеПодписи(
		ВыделенныеСтроки, ТаблицаПодписей) Экспорт
		
	ТаблицаВыделенныеСтроки = Новый ТаблицаЗначений;
	
	ТаблицаВыделенныеСтроки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ОбъектСсылка", Новый ОписаниеТипов("Строка"));
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ОбъектТип", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			НоваяСтрока = ТаблицаВыделенныеСтроки.Добавить();
			НоваяСтрока.НомерСтроки = ДанныеСтроки.НомерСтроки;
			НоваяСтрока.ОбъектСсылка = ДанныеСтроки.ОбъектИд;
			НоваяСтрока.ОбъектТип = ДанныеСтроки.ОбъектТип;
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТаблицаВыделенныеСтроки;
	
КонецФункции		

Процедура ПолучитьОбъектыДляПодписи(ОбъектИд, ОбъектТип, УникальныйИдентификатор, МассивОбъектовДляПодписи, Файлы, 
	ДвоичныеДанные) Экспорт 
	
	ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи, ОбъектТип", 
		ДвоичныеДанные, ОбъектИд, ОбъектТип);
	МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
	
	// тут собираем все подчиненные файлы
	ДанныеФайлов = ПолучитьДвоичныеДанныеФайлов(Файлы);
	
	Для Каждого Файл Из ДанныеФайлов.objects Цикл
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи, ОбъектТип", 
			Файл.binaryData, Файл.objectId.id, Файл.objectId.type);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
	КонецЦикла;	
	
КонецПроцедуры

// вернет массив подписей файла
Функция ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей) Экспорт
	
	// получаем массив всех подписей
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей);	
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	// формируем массив данных подписи
	Для Каждого Элемент Из НомераСтрок Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			Если ДанныеСтроки.ОбъектИд = ИдентификаторФайла Тогда 
				
				ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
				
				ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, ДвоичныеДанныеСертификата, ОбъектТип, УстановившийПодпись, УстановившийПодписьИд",
										ДанныеСтроки.ОбъектИд,
										ПодписьДвоичныеДанные,
										ДанныеСтроки.Отпечаток,
										ДанныеСтроки.ДатаПодписи,
										ДанныеСтроки.Комментарий,
										ДанныеСтроки.ИмяФайлаПодписи,
										ДанныеСтроки.КомуВыданСертификат,
										ДвоичныеДанныеСертификата,
										ДанныеСтроки.ОбъектТип,
										ДанныеСтроки.УстановившийПодпись,
										ДанныеСтроки.УстановившийПодписьИд);
				
				МассивДанныхПодписей.Добавить(ДанныеПодписи);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивДанныхПодписей;
	
КонецФункции	

// Интеграция с 1С:Документооборот
// Возвращает максимальный размер файла
//
Функция ПолучитьМаксимальныйРазмерПередаваемогоФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайлаПередачи = Константы.МаксимальныйРазмерФайлаДляПередачиВ1СДокументооборот.Получить();
	
	Если МаксимальныйРазмерФайлаПередачи = Неопределено ИЛИ МаксимальныйРазмерФайлаПередачи = 0 Тогда
		МаксимальныйРазмерФайлаПередачи = 10*1024*1024; // 10 мб
		Константы.МаксимальныйРазмерФайлаДляПередачиВ1СДокументооборот.Установить(МаксимальныйРазмерФайлаПередачи);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайлаПередачи;
	
КонецФункции

// заполнить список файлов копированием присоединенных файлов или Файлов из внешнего объекта
Процедура ЗаполнитьКопированием(ВнешнийОбъект, id, Тип, Представление, УникальныйИдентификатор) Экспорт
	
	МассивФайлов = ФайловыеФункцииСлужебный.ПолучитьХранимыеФайлы(ВнешнийОбъект);
	
	Для Каждого ДанныеФайла Из МассивФайлов Цикл
	
		ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");

		ВремяИзменения = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
		ВремяИзмененияУниверсальное = ДанныеФайла.ДатаМодификацииУниверсальная;
		Размер = ДанныеФайла.Размер;
		ИмяБезРасширения = ДанныеФайла.Наименование;
		Расширение = ДанныеФайла.Расширение;

		// Поместим Файл в ВременноеХранилище
		Если ТипЗнч(ДанныеФайла.ДвоичныеДанныеФайла) = Тип("Строка") И ЭтоАдресВременногоХранилища(ДанныеФайла.ДвоичныеДанныеФайла) Тогда
			АдресВременногоХранилищаФайла = ДанныеФайла.ДвоичныеДанныеФайла;
		Иначе // двоичные данные
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДанныеФайла.ДвоичныеДанныеФайла, УникальныйИдентификатор);
		КонецЕсли;	

		ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		ПараметрыСоздания.Расширение = Расширение;
		ПараметрыСоздания.ВремяИзменения = ВремяИзменения;
		ПараметрыСоздания.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		ПараметрыСоздания.Имя = ИмяБезРасширения;
		ПараметрыСоздания.Размер = Размер;
		ПараметрыСоздания.Текст = ДанныеФайла.Текст;
		
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, id, Тип, Представление);
		
	КонецЦикла;
	
КонецПроцедуры
