///////////////////////////////////////////////////////////////////////////////////
// ПользователиВМоделиСервиса: Работа с пользователями в модели сервиса.
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверяет содержится ли пользователь ИБ с заданным идентификатором
// в списке неразделенных пользователей.
//
// Параметры:
// ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор
// пользователя ИБ принадлежность которого к неразделенным пользователям
// требуется проверить.
//
Функция ЭтоНеразделенныйПользовательИБ(Знач ИдентификаторПользователяИБ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИДНеразделенныхПользователей.ИдентификаторПользователяИБ
	|ИЗ
	|	РегистрСведений.НеразделенныеПользователи КАК ИДНеразделенныхПользователей
	|ГДЕ
	|	ИДНеразделенныхПользователей.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// При работе в модели сервиса, заносит текущего пользователя в список неразделенных,
// если у него не установлено использование разделителей.
//
Процедура ЗарегистрироватьНеразделенногоПользователя() Экспорт
	
	Если НЕ ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
		И ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных.Количество() = 0 Тогда
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НеразделенныеПользователи");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ", 
				ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.НеразделенныеПользователи.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регистрация неразделенного пользователя'"), 
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает флаг доступности действий изменения пользователей.
//
// Возвращаемое значение:
// Булево - Истина, если изменение пользователей доступно, иначе Ложь.
//
Функция ДоступноИзменениеПользователей() Экспорт
	
	Возврат Константы.РежимИспользованияИнформационнойБазы.Получить() 
		<> Перечисления.РежимыИспользованияИнформационнойБазы.Демонстрационный;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьКодЯзыкаПоИмени(Знач ИмяЯзыка)
	
	Если ПустаяСтрока(ИмяЯзыка) Тогда
		Возврат "";
	Иначе
		Возврат Метаданные.Языки[ИмяЯзыка].КодЯзыка;
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования
Процедура ПередЗаписьюПользователя(ПользовательОбъект) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		УстановитьПривилегированныйРежим(Истина);
		// Кэш должен быть заполнен до записи пользователя ИБ
		РаботаВМоделиСервиса.ПолучитьПроксиМенеджераСервиса();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПриЗаписиПользователя(ПользовательОбъект, ОписаниеПользователя, ПользовательСуществует, ДоступРазрешен, СоздатьПользователяСервиса) Экспорт
	
	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи")
	   И ПользовательОбъект.Служебный Тогда
		
		Возврат;
	КонецЕсли;
	
	Имя = ОписаниеПользователя.Имя;
	ПолноеИмя = ОписаниеПользователя.ПолноеИмя;
	Язык = ОписаниеПользователя.Язык;
	
	УстановитьПривилегированныйРежим(Истина);
	КлючОбласти = Константы.КлючОбластиДанных.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СоздатьПользователяСервиса Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Прокси = РаботаВМоделиСервиса.ПолучитьПроксиМенеджераСервиса();
		
		ТекущаяОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательОбъект.ИдентификаторПользователяИБ);
			
		СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		СообщениеОбОшибке = "";
		
		ТипИнформацииОПользователе = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/1.0/XMLSchema/ManageApplication",
			"UserInfo");
		ИнформацияОПользователе = Прокси.ФабрикаXDTO.Создать(ТипИнформацииОПользователе);
		ИнформацияОПользователе.Name = Имя;
		ИнформацияОПользователе.FullName = ПолноеИмя;
		ИнформацияОПользователе.StoredPasswordValue = СохраняемоеЗначениеПароля;
		ИнформацияОПользователе.Language = ПолучитьКодЯзыкаПоИмени(Язык);
		ИнформацияОПользователе.UserID = ПользовательОбъект.ИдентификаторПользователяСервиса;
		
		Результат = Прокси.CreateUser(ТекущаяОбластьДанных, КлючОбласти, ИнформацияОПользователе, СообщениеОбОшибке);
		Если Результат <> Истина Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка при создании пользователя сервиса:
				|%1'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке));
		КонецЕсли;
			
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() 
		И ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяСервиса) Тогда
		
		// Нужно обновить информацию в сервисе
		УстановитьПривилегированныйРежим(Истина);
		Прокси = РаботаВМоделиСервиса.ПолучитьПроксиМенеджераСервиса();
		
		ТекущаяОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		УстановитьПривилегированныйРежим(Ложь);
		
		СообщениеОбОшибке = "";
		СписокПользователей = Неопределено;
		
		Результат = Прокси.GetUserList(ТекущаяОбластьДанных, КлючОбласти, СписокПользователей, СообщениеОбОшибке);
		
		Если НЕ Результат Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка при попытке получения списка пользователей сервиса:
				|%1'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке));
		КонецЕсли;
		
		ИнформацияОТекущемПользователе = Неопределено;
		Для каждого ИнформацияОПользователе Из СписокПользователей.User Цикл
			Если ПользовательОбъект.ИдентификаторПользователяСервиса = ИнформацияОПользователе.UserID Тогда
				
				ИнформацияОТекущемПользователе = ИнформацияОПользователе;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИнформацияОТекущемПользователе = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Пользователь с идентификатором %1 области данных %2 не найден в списке пользователей сервиса'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ПользовательОбъект.ИдентификаторПользователяСервиса,
				ТекущаяОбластьДанных);
				
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Если ПользовательСуществует <> ДоступРазрешен Тогда
		
			Если ИнформацияОТекущемПользователе.HasAccess <> ДоступРазрешен Тогда
				Если ДоступРазрешен Тогда
					СообщениеОбОшибке = "";
					Результат = Прокси.GrantUserAccess(ТекущаяОбластьДанных, КлючОбласти,
						ПользовательОбъект.ИдентификаторПользователяСервиса, "User", СообщениеОбОшибке);
						
					Если НЕ Результат Тогда
						ШаблонСообщения = НСтр("ru = 'Ошибка при попытке предоставления доступа пользователю в сервис:
							|%1'");
						ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке));
					КонецЕсли;
				Иначе
					СообщениеОбОшибке = "";
					Результат = Прокси.DeleteUserAccess(ТекущаяОбластьДанных, КлючОбласти,
						ПользовательОбъект.ИдентификаторПользователяСервиса, СообщениеОбОшибке);
						
					Если НЕ Результат Тогда
						ШаблонСообщения = НСтр("ru = 'Ошибка при попытке снятия доступа пользователю в сервис:
							|%1'");
						ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоступРазрешен Тогда
			
			ТипОписаниеПользователя = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/1.0/XMLSchema/ManageApplication", "UserInfo");
			ОписаниеПользователя = Прокси.ФабрикаXDTO.Создать(ТипОписаниеПользователя);
			ОписаниеПользователя.Name = Имя;
			ОписаниеПользователя.FullName = ПолноеИмя;
			
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательОбъект.ИдентификаторПользователяИБ);
			
			ОписаниеПользователя.StoredPasswordValue = ПользовательИБ.СохраняемоеЗначениеПароля;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ОписаниеПользователя.Language = ПолучитьКодЯзыкаПоИмени(Язык);
				
			СообщениеОбОшибке = "";
			Результат = Прокси.SetUserInfo(ОбщегоНазначения.ЗначениеРазделителяСеанса(), КлючОбласти,
				ПользовательОбъект.ИдентификаторПользователяСервиса, ОписаниеПользователя, СообщениеОбОшибке);
			
			Если НЕ Результат Тогда
				ШаблонСообщения = НСтр("ru = 'Ошибка при попытке синхронизации информации о пользователя с менеджером сервиса:
					|%1'");
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработкаПолученияФормыПользователя(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Ключ") И НЕ Параметры.Ключ.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.НеразделенныеПользователи КАК НеразделенныеПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО НеразделенныеПользователи.ИдентификаторПользователяИБ = Пользователи.ИдентификаторПользователяИБ
		|			И (Пользователи.Ссылка = &Ссылка)";
		Запрос.УстановитьПараметр("Ссылка", Параметры.Ключ);
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.ИнформацияНеразделенногоПользователя;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
