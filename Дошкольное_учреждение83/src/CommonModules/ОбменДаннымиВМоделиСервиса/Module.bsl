////////////////////////////////////////////////////////////////////////////////
// ОбменДаннымиВМоделиСервиса: механизм обмена данными.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработчик "После определения получателей".
// Вызывается при регистрации объектов в плане обмена.
// Устанавливает константу-признак изменения данных
// и отсылает менеджеру сервиса сообщение об изменении с номером текущей области.
//
// Параметры:
// Данные - СправочникОбъект или ДокументОбъект - Объект для получения значений реквизитов и других свойств.
// Получатели - Массив - Массив элементов типа ПланОбменаСсылка.<Имя> - Узлы плана обмена.
// ИмяПланаОбмена - Строка.
//
Процедура ПослеОпределенияПолучателей(Данные, Получатели, ИмяПланаОбмена) Экспорт
	
	// Изменения неразделенных данных (общих данных) не выгружаем в Сервис
	Если АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(Данные.Метаданные()) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Получатели, АвтономнаяРаботаСлужебный.ПриложениеВСервисе());
		Возврат;
	КонецЕсли;
	
	Если Данные.ОбменДанными.Загрузка Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	ИначеЕсли Получатели.Количество() = 0 Тогда // объект регистрации не подлежит
		Возврат;
	ИначеЕсли Не ОбменДаннымиВМоделиСервисаПовтИсп.ПланОбменаИспользуетсяВМоделиСервиса(ИмяПланаОбмена) Тогда
		Возврат;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ЗарегистрированыИзмененияДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
		
		УстановитьПризнакИзмененияДанных();
	Иначе
		
		Попытка
			ФоновыеЗадания.Выполнить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных",, "1");
		Исключение
			// Дополнительная обработка исключения не требуется
			// ожидаемое исключение - дублирвоание задание с таким же ключом
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает константу-признак изменения данных
// и отсылает менеджеру сервиса сообщение об изменении с номером текущей области.
//
Процедура УстановитьПризнакИзмененияДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	НачатьТранзакцию();
	Попытка
		ОбменСообщениями.ОтправитьСообщение("ОбменДанными\УправляющееПриложение\ПризнакИзмененияДанных",
						Новый Структура("КодУзла", ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(ОбластьДанных)),
						РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса()
		);
		
		Константы.ЗарегистрированыИзмененияДанных.Установить(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьПризнакЭтотУзел";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.2";
	Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьКодыПредопределенныхУзлов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.20";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьПризнакЭтотУзелДляВсехОбластейДанных";
	
КонецПроцедуры

// Для каждого из используемых в модели сервиса планов обмена
// определяет и устанавливает код и наименование предопределенного узла.
// Код генерируется на основании значения разделителя.
// Наименование  - либо по заголовку приложения, либо, если он пустой, 
// по представлению текущей области данных из регистра РегистрСведений.ОбластиДанных.
//
Процедура УстановитьКодыПредопределенныхУзлов() Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если Не ОбменДаннымиСервер.ЭтоРазделенныйПланОбменаБСП(ПланОбмена.Имя) Тогда
			Продолжить;
		ИначеЕсли ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		
		ПланОбменаИспользуетсяВМоделиСервиса = Ложь;
		
		Попытка
			ПланОбменаИспользуетсяВМоделиСервиса = ПланыОбмена[ПланОбмена.Имя].ПланОбменаИспользуетсяВМоделиСервиса();
		Исключение
			ПланОбменаИспользуетсяВМоделиСервиса = Ложь;
		КонецПопытки;
		
		Если ПланОбменаИспользуетсяВМоделиСервиса Тогда
			
			ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
			
			Если ПустаяСтрока(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотУзел, "Код")) Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Код = КодУзлаПланаОбменаВСервисе(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
				ЭтотУзелОбъект.Наименование = СокрЛП(СформироватьНаименованиеПредопределенногоУзла());
				ЭтотУзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значение констант ИспользоватьОбменДанными и ИспользоватьАвтономнуюРаботуВМоделиСервиса при необходимости
//
Процедура ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если АвтономнаяРаботаСлужебный.АвтономнаяРаботаПоддерживается() Тогда
			
			Константы.ИспользоватьОбменДанными.Установить(Истина);
			Константы.ИспользоватьАвтономнуюРаботуВМоделиСервиса.Установить(Истина);
			
		Иначе
			
			Константы.ИспользоватьАвтономнуюРаботуВМоделиСервиса.Установить(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак "ЭтотУзел" для предопределенных узлов разделенных планов обмена БСП
//
// Параметры:
//  Нет.
// 
Процедура УстановитьПризнакЭтотУзел() Экспорт
	
	Для Каждого ИмяПланаОбмена Из ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП() Цикл
		
		Попытка
			ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().ПолучитьОбъект();
			
			Если ЭтотУзел.ЭтотУзел <> Истина Тогда
				ЭтотУзел.ЭтотУзел = Истина;
				ЭтотУзел.Записать();
			КонецЕсли;
		Исключение
			// Для обеспечения обратной совместимости с БСП 2.1.1.19
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак "ЭтотУзел" для предопределенных узлов разделенных планов обмена БСП
// для всех областей данных
//
// Параметры:
//  Нет.
// 
Процедура УстановитьПризнакЭтотУзелДляВсехОбластейДанных() Экспорт
	
	РазделенныеПланыОбменаБСП = ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбластиДанных.ОбластьДанных КАК ОбластьДанных
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется), ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Удалена))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Выборка.ОбластьДанных);
		
		Для Каждого ИмяПланаОбмена Из РазделенныеПланыОбменаБСП Цикл
			
			Попытка
				ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().ПолучитьОбъект();
				
				Если ЭтотУзел.ЭтотУзел <> Истина Тогда
					ЭтотУзел.ЭтотУзел = Истина;
					ЭтотУзел.Записать();
				КонецЕсли;
			Исключение
				// Для обеспечения обратной совместимости с БСП 2.1.1.19
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики при запуске системы для подсистемы обмена данными в модели сервиса
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиПриЗапуске(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.Вставить("СинхронизироватьДанныеСПриложениемВИнтернетеПриНачалеРаботы", 
		АвтономнаяРаботаСлужебный.СинхронизироватьДанныеСПриложениемВИнтернетеПриНачалеРаботы());
	Параметры.Вставить("СинхронизироватьДанныеСПриложениемВИнтернетеПриЗавершенииРаботы", 
		АвтономнаяРаботаСлужебный.СинхронизироватьДанныеСПриложениемВИнтернетеПриЗавершенииРаботы());
	Параметры.Вставить("ОткрытьПомощникНастройкиАвтономногоРабочегоМеста", 
		АвтономнаяРаботаСлужебный.ОткрытьПомощникНастройкиАвтономногоРабочегоМеста());
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики для подсистемы обмена данными в модели сервиса
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
КонецПроцедуры

Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза, Получатель) Экспорт
	
	Если Получатель = Неопределено Тогда
		
		//
		
	ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли СозданиеНачальногоОбраза
		И ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И АвтономнаяРаботаСлужебный.ЭтоУзелАвтономногоРабочегоМеста(Получатель.Ссылка)
		И ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ЭлементДанных.Метаданные()) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
		ЗаписатьXML(Получатель.ДополнительныеСвойства.ВыгруженныеДанные, ЭлементДанных);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Выполняет обмен данными со всеми ИБ абонента.
// Для этого сначала формирует сценарии, а затем инициирует сам обмен.
//
Процедура ВыполнитьОбменДаннымиСоВсемиИнформационнымиБазамиАбонента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсииМенеджераСервиса = ВерсииМенеджераСервиса();
	
	Если ВерсииМенеджераСервиса.Найти("1.0.6.5") <> Неопределено Тогда
		
		WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена_1_0_6_5();
		
		СценарийОбменаДаннымиXDTO = СериализаторXDTO.ЗаписатьXDTO(Новый ТаблицаЗначений);
		
		// Получаем сценарий обмена из управляющего приложения и устанавливаем блокировку на обмен
		Попытка
			WSПроксиСервиса.GetExchangeScenario(ОбщегоНазначения.ЗначениеРазделителяСеанса(), СценарийОбменаДаннымиXDTO);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		СценарийОбменаДанными = СериализаторXDTO.ПрочитатьXDTO(СценарийОбменаДаннымиXDTO);
		
	Иначе
		
		WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена();
		
		СценарийОбменаДаннымиСтрокой = "";
		
		// Получаем сценарий обмена из управляющего приложения и устанавливаем блокировку на обмен
		Попытка
			WSПроксиСервиса.GetExchangeScenario(ОбщегоНазначения.ЗначениеРазделителяСеанса(), СценарийОбменаДаннымиСтрокой);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		СценарийОбменаДанными = ЗначениеИзСтрокиВнутр(СценарийОбменаДаннымиСтрокой);
		
	КонецЕсли;
	
	Если СценарийОбменаДанными.Количество() > 0 Тогда
		
		СценарийОбменаДанными.Колонки.Добавить("ИнициированоПользователем");
		СценарийОбменаДанными.ЗаполнитьЗначения(Истина, "ИнициированоПользователем");
		
		// Запускаем выполнение сценария
		ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(0, СценарийОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициирует обмен даными между двумя ИБ.
//
// Параметры:
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьОбменДанными(СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сбрасываем признак кумулятивного изменения данных для обмена
	Константы.ЗарегистрированыИзмененияДанных.Установить(Ложь);
	
	Если СценарийОбменаДанными.Количество() > 0 Тогда
		
		// Запускаем выполнение сценария
		ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(0, СценарийОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить действие сценария обмена, заданное строкой таблицы значений, для первой из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИндексСтрокиСценария > СценарийОбменаДанными.Количество() - 1 Тогда
		Возврат; // Завершение выполнения сценария
	КонецЕсли;
	
	СтрокаСценария = СценарийОбменаДанными[ИндексСтрокиСценария];
	
	Если СтрокаСценария.НомерИнформационнойБазы = 1 Тогда
		
		УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодУзлаИнформационнойБазы);
		
		ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Ложь, УзелИнформационнойБазы, ПолучитьДействиеПриОбмене(СтрокаСценария.ВыполняемоеДействие), Перечисления.ВидыТранспортаСообщенийОбмена.Combi);
		
		// Переходим к следующему шагу сценария
		ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
		
	ИначеЕсли СтрокаСценария.НомерИнформационнойБазы = 2 Тогда
		
		УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодЭтогоУзла);
		
		ВерсииКорреспондента = ВерсииКорреспондента(УзелИнформационнойБазы);
		
		Если ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено Тогда
			
			WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента_2_0_1_6(УзелИнформационнойБазы);
			
			Если WSПрокси = Неопределено Тогда
				
				// Переходим к следующему шагу сценария
				ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
				Возврат;
			КонецЕсли;
			
			WSПрокси.StartExchangeExecutionInSecondDataBase(ИндексСтрокиСценария, СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными));
			
		Иначе
			
			WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента(УзелИнформационнойБазы);
			
			Если WSПрокси = Неопределено Тогда
				
				// Переходим к следующему шагу сценария
				ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
				Возврат;
			КонецЕсли;
			
			WSПрокси.StartExchangeExecutionInSecondDataBase(ИндексСтрокиСценария, ЗначениеВСтрокуВнутр(СценарийОбменаДанными));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить действие сценария обмена, заданное строкой таблицы значений, для второй из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСценария = СценарийОбменаДанными[ИндексСтрокиСценария];
	
	УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодУзлаИнформационнойБазы);
	
	Если СтрокаСценария.ПорядковыйНомерВыполнения = 1 Тогда
		// Сбрасываем признак кумулятивного изменения данных для обмена
		Константы.ЗарегистрированыИзмененияДанных.Установить(Ложь);
	КонецЕсли;
	
	ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Ложь, УзелИнформационнойБазы, ПолучитьДействиеПриОбмене(СтрокаСценария.ВыполняемоеДействие), Перечисления.ВидыТранспортаСообщенийОбмена.Combi);
	
	// Завершение выполнения сценария
	Если ИндексСтрокиСценария = СценарийОбменаДанными.Количество() - 1 Тогда
		
		ВерсииМенеджераСервиса = ВерсииМенеджераСервиса();
		
		Если ВерсииМенеджераСервиса.Найти("1.0.6.5") <> Неопределено Тогда
			
			// Отмечаем выполнение обмена в управляющем приложении
			WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена_1_0_6_5();
			WSПроксиСервиса.CommitExchange(СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными));
			
		Иначе
			
			// Отмечаем выполнение обмена в управляющем приложении
			WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена();
			WSПроксиСервиса.CommitExchange(ЗначениеВСтрокуВнутр(СценарийОбменаДанными));
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ВерсииКорреспондента = ВерсииКорреспондента(УзелИнформационнойБазы);
	
	Если ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено Тогда
		
		WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента_2_0_1_6(УзелИнформационнойБазы);
		
		Если WSПрокси <> Неопределено Тогда
			
			WSПрокси.StartExchangeExecutionInFirstDataBase(ИндексСтрокиСценария + 1, СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными));
			
		КонецЕсли;
		
	Иначе
		
		WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента(УзелИнформационнойБазы);
		
		Если WSПрокси <> Неопределено Тогда
			
			WSПрокси.StartExchangeExecutionInFirstDataBase(ИндексСтрокиСценария + 1, ЗначениеВСтрокуВнутр(СценарийОбменаДанными));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, выполняется ли обмен в настоящее время.
// Для этого посылается запрос к менеджеру сервиса, установлена ли блокировка обмена.
//
// Возвращаемое значение:
// Булево. 
//
Функция ВСистемеВыполняетсяОбменДанными() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена();
	
	Возврат WSПроксиСервиса.ExchangeBlockIsSet(ОбщегоНазначения.ЗначениеРазделителяСеанса());
	
КонецФункции

// Возвращает дату последней успешной загрузки текущей области данных для всех узлов ИБ.
// Если синхронизация данных еще не выполнялась, возвращает Неопределено.
//
// Возвращаемое значение:
// Дата; Неопределено. 
//
Функция ДатаПоследнейУспешнойЗагрузкиДляВсехУзловИнформационнойБазы() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(СостоянияУспешныхОбменовДанными.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|	И СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.ОбластьДанных = &ОбластьДанных
	|	И СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.Код ПОДОБНО ""S%""";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат ?(ЗначениеЗаполнено(Выборка.ДатаОкончания), Выборка.ДатаОкончания, Неопределено);
	
КонецФункции

// Генерирует код узла плана обмена для заданной области данных.
//
// Параметры:
// НомерОбласти - Число - Значение разделителя. 
//
// Возвращаемое значение:
// Строка - Код узла плана обмена для заданной области. 
//
Функция КодУзлаПланаОбменаВСервисе(Знач НомерОбласти) Экспорт
	
	Если ТипЗнч(НомерОбласти) <> Тип("Число") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра номер [1].'");
	КонецЕсли;
	
	Результат = "S0[НомерОбласти]";
	
	Возврат СтрЗаменить(Результат, "[НомерОбласти]", Формат(НомерОбласти, "ЧЦ=7; ЧВН=; ЧГ=0"));
	
КонецФункции

Функция СформироватьНаименованиеПредопределенногоУзла() Экспорт
	
	Возврат НСтр("ru = 'Приложение в Интернете'");
	
КонецФункции

//

Процедура ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазеИзНеразделенногоСеанса(
																		ИндексСтрокиСценария,
																		СценарийОбменаДанными,
																		ОбластьДанных
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазеИзНеразделенногоСеанса(
																		ИндексСтрокиСценария,
																		СценарийОбменаДанными,
																		ОбластьДанных
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТребуемаяВерсияПлатформы() Экспорт
	
	ВерсияПлатформы = ОбменДаннымиВМоделиСервисаПереопределяемый.ТребуемаяВерсияПриложения();
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда
		Возврат ВерсияПлатформы;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	
	// Удаляем из номера версии дополнительный номер релиза (последний номер)
	ВерсияПлатформы.Удалить(3);
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ВерсияПлатформы, ".");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

Функция ПолучитьДействиеПриОбмене(ЗначениеСтрокой)
	
	Возврат Перечисления.ДействияПриОбмене[ЗначениеСтрокой];
	
КонецФункции

Функция НайтиУзелИнформационнойБазы(Знач ИмяПланаОбмена, Знач КодУзла)
	
	КодУзлаСПрефиксом = КодУзлаПланаОбменаВСервисе(Число(КодУзла));
	
	// Поиск узла по формату кода узла "S00000123"
	Результат = ОбменДаннымиПовтИсп.НайтиУзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзлаСПрефиксом);
	
	Если Результат = Неопределено Тогда
		
		// Поиск узла по формату кода узла "0000123" (старый формат)
		Результат = ОбменДаннымиПовтИсп.НайтиУзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзла);
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Сообщение = НСтр("ru = 'Не найден узел плана обмена. Имя плана обмена %1; код узла %2 или %3'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КодУзла, КодУзлаСПрефиксом);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ВерсииКорреспондента(Знач УзелИнформационнойБазы)
	
	СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаWS(УзелИнформационнойБазы);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      СтруктураНастроек.WSURLВебСервиса);
	ПараметрыПодключения.Вставить("UserName", СтруктураНастроек.WSИмяПользователя);
	ПараметрыПодключения.Вставить("Password", СтруктураНастроек.WSПароль);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "ОбменДаннымиВМоделиСервиса");
КонецФункции

Функция ВерсииМенеджераСервиса()
	
	ИмяПользователя    = Константы.ИмяСлужебногоПользователяМенеджераСервиса.Получить();
	ПарольПользователя = Константы.ПарольСлужебногоПользователяМенеджераСервиса.Получить();
	АдресСервиса       = Константы.АдресВебСервисаОбменаДанными.Получить();
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      АдресСервиса);
	ПараметрыПодключения.Вставить("UserName", ИмяПользователя);
	ПараметрыПодключения.Вставить("Password", ПарольПользователя);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "УправляющееПриложениеОбменДанными");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

Процедура ОтключитьАвтоматическуюСинхронизациюДанныхСПриложениемВИнтернетеПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	ОтключитьАвтоматическуюСинхронизацию = Ложь;
	
	Для Каждого СтрокаНабора Из Источник Цикл
		
		Если СтрокаНабора.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.WS
			И Не СтрокаНабора.WSЗапомнитьПароль Тогда
			
			ОтключитьАвтоматическуюСинхронизацию = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтключитьАвтоматическуюСинхронизацию Тогда
		
		АвтономнаяРаботаСлужебный.ОтключитьАвтоматическуюСинхронизациюДанныхСПриложениемВИнтернете();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИгнорироватьОтправкуНеразделенныхДанныхВСервис(Источник, ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	Если АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ЭлементДанных.Метаданные()) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИгнорироватьПолучениеНеразделенныхДанныхВСервисе(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ЭлементДанных.Метаданные()) Тогда
		
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры
