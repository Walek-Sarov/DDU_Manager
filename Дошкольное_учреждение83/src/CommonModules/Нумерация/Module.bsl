////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ НУМЕРАЦИИ ДОКУМЕНТОВ
// 

// Возвращает сформированный числовой номер
Процедура СформироватьЧисловойНомерДокумента(Объект, СформированныйНомер) Экспорт 
	
	// не известен вид нумерации
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) И Делопроизводство.ИспользоватьВидыДокументов(Объект) Тогда 
		СформированныйНомер = 0;
		Возврат;
	КонецЕсли;	
	
	// ручная нумерация
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект); 
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СформированныйНомер = 0;
		Возврат;
	КонецЕсли;
	
	// 
	ПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, Объект.ДатаРегистрации);
	Если Нумератор.НезависимаяНумерацияПоОрганизациям И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = Объект.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	// перерегистрация
	Если СформированныйНомер > 0 Тогда 
		Отбор = Новый Структура("Нумератор, ПериодНумерации, Организация", Нумератор, ПериодНумерации, Организация);
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(Отбор).ТекущийНомер; 
		Если ТекущийНомер = СформированныйНомер Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗанятыеНомера");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	Организация);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		СформированныйНомер = ПолучитьОчереднойНомер(Нумератор, ПериодНумерации, Организация);
		ЗанятьНомер(Нумератор, ПериодНумерации, Организация, СформированныйНомер);
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает сформированный числовой номер для Реестров
Процедура СформироватьЧисловойНомерДокументаРеестры(Объект, СформированныйНомер) Экспорт 
	
	// Не известен вид нумерации
	Если Не ЗначениеЗаполнено(Объект.ТипРеестра) Тогда 
		СформированныйНомер = 0;
		Возврат;
	КонецЕсли;	
	
	// Ручная нумерация
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект); 
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СформированныйНомер = 0;
		Возврат;
	КонецЕсли;
	
	// Перерегистрация
	ПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, Объект.ДатаОтправки);
	Организация = Справочники.Организации.ПустаяСсылка();
	

	Если СформированныйНомер > 0 Тогда 
		Отбор = Новый Структура("Нумератор, ПериодНумерации", Нумератор, ПериодНумерации);
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(Отбор).ТекущийНомер; 
		Если ТекущийНомер = СформированныйНомер Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	// Автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗанятыеНомера");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", ПериодНумерации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		СформированныйНомер = ПолучитьОчереднойНомер(Нумератор, ПериодНумерации,Организация);
		ЗанятьНомер(Нумератор,ПериодНумерации,Организация, СформированныйНомер);
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает сформированный строковый номер
Процедура СформироватьСтроковыйНомерДокумента(Объект, СформированныйНомер, ОписанияОшибок, ИзмененоПоле = "") Экспорт 
	
	Перем СтруктураФорматаНомера, ОписаниеОшибки;
	
	// вручную изменен номер
	Если Объект.ЧисловойНомер = -1 Тогда
		Возврат;
	КонецЕсли;	
	
	// изменено поле у незарег документа
	Если ЗначениеЗаполнено(ИзмененоПоле) И Объект.ЧисловойНомер = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	// не известен вид нумерации
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) И Делопроизводство.ИспользоватьВидыДокументов(Объект) Тогда
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("ВидДокумента", "Не заполнено поле ""Вид документа""");
		Возврат;
	КонецЕсли;	
	
	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(Объект); 
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если Не ЗначениеЗаполнено(Нумератор.ФорматНомера) Тогда
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", "Не указан формат номера для нумератора. Обратитесь к Администратору.");
		Возврат;
	КонецЕсли;	
	
	// автоматическая нумерация
	Если Не Нумерация.РазобратьФорматНомера(Нумератор.ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда 
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", "Ошибка в формате номера: " + ОписаниеОшибки + ". Обратитесь к Администратору.");
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИзмененоПоле) Тогда 
		СоответствиеРеквизитов = ПолучитьСоответствиеРеквизитов();
		СлужебноеПоле = СоответствиеРеквизитов.Получить(ИзмененоПоле);
		
		Если СлужебноеПоле = Неопределено Тогда // реквизит не влияет на нумерацию
			Возврат;
		КонецЕсли;
		
		Если Не СтруктураформатаНомераСодержитПоле(СтруктураФорматаНомера, СлужебноеПоле) Тогда // поле не входит в формат номера
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ЗначенияПараметровНомера = ПолучитьЗначенияПараметровНомера(Объект, СтруктураФорматаНомера, ОписанияОшибок);
	Если ОписанияОшибок.Количество() > 0 Тогда
		СформированныйНомер = "";
		Возврат;
	КонецЕсли;	
	
	СформированныйНомер = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	
КонецПроцедуры

// Возвращает сформированный строковый номер для Реестра
Процедура СформироватьСтроковыйНомерДокументаРеестры(Объект, СформированныйНомер, ОписанияОшибок, ИзмененоПоле = "") Экспорт 
	
	Перем СтруктураФорматаНомера, ОписаниеОшибки;
	
	// вручную изменен номер
	Если Объект.ЧисловойНомер = -1 Тогда
		Возврат;
	КонецЕсли;	
	
	// изменено поле у незарег документа
	Если ЗначениеЗаполнено(ИзмененоПоле) И Объект.ЧисловойНомер = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	// не известен вид нумерации
	Если Не ЗначениеЗаполнено(Объект.ТипРеестра) Тогда
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("ТипРеестра", "Не заполнено поле ""ТипРеестра""");
		Возврат;
	КонецЕсли;	
	
	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(Объект); 
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если Не ЗначениеЗаполнено(Нумератор.ФорматНомера) Тогда
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", "Не указан формат номера для нумератора. Обратитесь к Администратору.");
		Возврат;
	КонецЕсли;	
	
	// автоматическая нумерация
	Если Не Нумерация.РазобратьФорматНомера(Нумератор.ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда 
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", "Ошибка в формате номера: " + ОписаниеОшибки + ". Обратитесь к Администратору.");
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИзмененоПоле) Тогда 
		СоответствиеРеквизитов = ПолучитьСоответствиеРеквизитов();
		СлужебноеПоле = СоответствиеРеквизитов.Получить(ИзмененоПоле);
		
		Если СлужебноеПоле = Неопределено Тогда // реквизит не влияет на нумерацию
			Возврат;
		КонецЕсли;
		
		Если Не СтруктураформатаНомераСодержитПоле(СтруктураФорматаНомера, СлужебноеПоле) Тогда // поле не входит в формат номера
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ЗначенияПараметровНомера = ПолучитьЗначенияПараметровНомера(Объект, СтруктураФорматаНомера, ОписанияОшибок);
	Если ОписанияОшибок.Количество() > 0 Тогда
		СформированныйНомер = "";
		Возврат;
	КонецЕсли;	
	
	СформированныйНомер = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	
КонецПроцедуры

// Увеличивает очередной номер (при записи документа)
Процедура ЗаписатьОчереднойНомер(Нумератор, Объект) Экспорт
	
	ЧисловойНомер = Объект.ЧисловойНомер;
	
	// номер не присвоен
	Если ЧисловойНомер = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// номер изменен вручную
	Если ЧисловойНомер = -1 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.удуРеестрыОтправки") Тогда
		ПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, Объект.ДатаОтправки);
	Иначе
		ПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, Объект.ДатаРегистрации);
	КонецЕсли;
	Если Нумератор.НезависимаяНумерацияПоОрганизациям И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = Объект.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Отбор = Новый Структура("Нумератор, ПериодНумерации, Организация", Нумератор, ПериодНумерации, Организация);
	ТекущийНомер = РегистрыСведений.Нумерация.Получить(Отбор).ТекущийНомер;
	
	Если ЧисловойНомер > ТекущийНомер Тогда
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Нумератор 		= Нумератор;
		МенеджерЗаписи.ПериодНумерации 	= ПериодНумерации;
		МенеджерЗаписи.Организация	 	= Организация;
		МенеджерЗаписи.ТекущийНомер 	= ЧисловойНомер;
		МенеджерЗаписи.Записать();
	КонецЕсли;	
	ОсвободитьНомер(Нумератор, ПериодНумерации, Организация, ЧисловойНомер);
	
КонецПроцедуры

// Освобождает занятый номер
Процедура ОсвободитьНомер(Нумератор, ПериодНумерации, Организация, ЧисловойНомер) Экспорт 
	
	// ручная нумерация
	Если ЧисловойНомер = 0 Или ЧисловойНомер = -1 Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЗанятыеНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Нумератор 		= Нумератор;
	МенеджерЗаписи.ПериодНумерации 	= ПериодНумерации;
	МенеджерЗаписи.ЗанятыйНомер 	= ЧисловойНомер;
	МенеджерЗаписи.Организация 		= Организация;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры	

// Разбирает текстовый формат номера в структуру 
Функция РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера = Неопределено) Экспорт 
	// Дошкольное учреждение
	Если ФорматНомера = "" Тогда 
		ФорматНомера = "[Номер]";
	КонецЕсли;
	
	СтруктураФорматаНомера = Новый ТаблицаЗначений;
	СтруктураФорматаНомера.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка")); // разделитель или служебное поле
	СтруктураФорматаНомера.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка")); // значение терма 
	СтруктураФорматаНомера.Колонки.Добавить("ВходитВСлужебное", Новый ОписаниеТипов("Число")); // разделитель входит в служебное поле
	
	ОписаниеОшибки = "";
	СоответствиеПолей = ПолучитьСоотвествиеСлужебныхПолей();
	
	// проверка соответствия скобок
	ПозицияСкобки = 0;
	ПоказательСкобки = 0;
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Для Инд = 1 По СтрДлина(врФорматНомера) Цикл
		
		ТекСимвол = Сред(врФорматНомера, Инд, 1);
		Если (ТекСимвол <> "[") И (ТекСимвол <> "]") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если (ТекСимвол = "[") Тогда
			ПоказательСкобки = ПоказательСкобки + 1;
			Если ПоказательСкобки > 1 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				ОписаниеОшибки = "Отсутсвует символ ']'" + ?(ФрагментОшибки <> "", " в фрагменте '" + ФрагментОшибки + "'", "");
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		Если (ТекСимвол = "]") Тогда
			ПоказательСкобки = ПоказательСкобки - 1;
			Если ПоказательСкобки < 0 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				ОписаниеОшибки = "Отсутсвует символ '['" + ?(ФрагментОшибки <> "", " в фрагменте '" + ФрагментОшибки + "'", "");
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		ПозицияСкобки = Инд;
	КонецЦикла;
	
	Если ПоказательСкобки > 0 Тогда 
		ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1);
		ОписаниеОшибки = "Отсутсвует символ ']'" + ?(ФрагментОшибки <> "", " в фрагменте '" + ФрагментОшибки + "'", "");
		Возврат Ложь;
	КонецЕсли;
	
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Пока врФорматНомера <> "" Цикл
		
		Поз1 = Найти(врФорматНомера, "["); // начало служебного поля
		Если Поз1 > 0 Тогда
			
			Разделитель = Лев(врФорматНомера, Поз1-1);
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;	
			
			врФорматНомера = Сред(врФорматНомера, Поз1+1);
		    Поз2 = Найти(врФорматНомера, "]"); // окончание служебного поля
			
			Если Поз2 > 0 Тогда
				КодСлужебногоПоля = Лев(врФорматНомера, Поз2-1);
				
				НайденоСлужебноеПоле = Ложь;
				Для Каждого СлужебноеПоле Из СоответствиеПолей Цикл
					
					Поз3 = Найти(КодСлужебногоПоля, СлужебноеПоле.Ключ);
					Если Поз3 = 0 Тогда 
						Продолжить;
					КонецЕсли;	
					
					Если Поз3 > 1 Тогда 
						Разделитель = Лев(КодСлужебногоПоля, Поз3 - 1);
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока) + 2;
					КонецЕсли;	
					
					НоваяСтрока = СтруктураФорматаНомера.Добавить();
					НоваяСтрока.Ключ = "СлужебноеПоле";
					НоваяСтрока.Значение = СлужебноеПоле.Значение;
					
					Если Поз3 + СтрДлина(СлужебноеПоле.Ключ) - 1 < СтрДлина(КодСлужебногоПоля) Тогда 
						Разделитель = Сред(КодСлужебногоПоля, Поз3 + СтрДлина(СлужебноеПоле.Ключ) - 1);
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока);
					КонецЕсли;	
					
					НайденоСлужебноеПоле = Истина;
					Прервать;
				КонецЦикла;	
				
				Если Не НайденоСлужебноеПоле Тогда 
					ОписаниеОшибки = "Неверное служебное поле '" + КодСлужебногоПоля + "'";
					Возврат Ложь;
				КонецЕсли;	
				
				врФорматНомера = Сред(врФорматНомера, Поз2+1);
			Иначе
				ОписаниеОшибки = "Не обнаружено окончание служебного поля '" + врФорматНомера + "'";
				Возврат Ложь;
			КонецЕсли;	
			
		Иначе	
			
			Разделитель = врФорматНомера;
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;
			врФорматНомера = "";
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Проверят смену периода при изменении даты регистрации
Функция ПроверитьСменуПериодаНумерации(НоваяДата, СтараяДата, Нумератор) Экспорт
	
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НовыйПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, НоваяДата);
	СтарыйПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, СтараяДата);
	
	Возврат (НовыйПериодНумерации <> СтарыйПериодНумерации);
	
КонецФункции	

// Формирует пример номера
Функция СформироватьПримерНомера(ФорматНомера, Пример, ОписаниеОшибки) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	День  = День(ТекущаяДата);
	Месяц = Месяц(ТекущаяДата);
	Год4  = Год(ТекущаяДата);
	Год2  = Прав(Строка(Год4), 2);
	
	Если 	  Месяц <= 3 Тогда Квартал = 1;
	ИначеЕсли Месяц <= 6 Тогда Квартал = 2;
	ИначеЕсли Месяц <= 9 Тогда Квартал = 3;
	Иначе Квартал = 4; КонецЕсли;
	
	ЗначенияПараметровНомера = Новый Структура;
	ЗначенияПараметровНомера.Вставить("Номер", 	12345);
	ЗначенияПараметровНомера.Вставить("День", 	Формат(День,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Месяц", 	Формат(Месяц,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Год4", 	Год4);
	ЗначенияПараметровНомера.Вставить("Год2", 	Год2);
	ЗначенияПараметровНомера.Вставить("Квартал",Квартал);
	
	ЗначенияПараметровНомера.Вставить("ИндексОрганизации", 		"ОРГ"); 
	ЗначенияПараметровНомера.Вставить("ИндексВидаДокумента", 	"АКТ"); 
	ЗначенияПараметровНомера.Вставить("ИндексПодразделения", 	"БУХ"); 
	ЗначенияПараметровНомера.Вставить("ИндексКорреспондента", 	"АДМ ОБЛ"); 
    // Дошкольное учреждение
	ЗначенияПараметровНомера.Вставить("ИндексРеестра", 	"П"); 

	
	ОписаниеОшибки = "";
	СтруктураФорматаНомера = ""; 
	
	Если Не Нумерация.РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда
		Пример = "";
		Возврат Ложь;
	КонецЕсли;
	
	Пример = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	Возврат Истина;
	
КонецФункции

// Возвращает индекс нумерации для объекта
Функция ПолучитьИндексОбъекта(Объект)
	
	Возврат РегистрыСведений.ИндексыНумерации.Получить(Новый Структура("Объект", Объект)).Индекс;
	
КонецФункции

// Вычисляет начало периода нумерации
Функция НачалоПериодаНумерации(Периодичность, Дата) Экспорт
	
	Если Периодичность = Перечисления.ПериодичностьНумераторов.День Тогда
		ПериодНумерации = НачалоДня(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Месяц Тогда
		ПериодНумерации = НачалоМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Квартал Тогда
		ПериодНумерации = НачалоКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Год Тогда
		ПериодНумерации = НачалоГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический Тогда 
		ПериодНумерации = '00010101';
		
	КонецЕсли;
	
	Возврат ПериодНумерации;
	
КонецФункции	

// Вычисляет начало периода нумерации
Функция КонецПериодаНумерации(Периодичность, Дата) Экспорт
	
	Если Периодичность = Перечисления.ПериодичностьНумераторов.День Тогда
		ПериодНумерации = КонецДня(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Месяц Тогда
		ПериодНумерации = КонецМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Квартал Тогда
		ПериодНумерации = КонецКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Год Тогда
		ПериодНумерации = КонецГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический Тогда 
		ПериодНумерации = '39990101';
		
	КонецЕсли;
	
	Возврат ПериодНумерации;
	
КонецФункции	

// Возвращает очередной номер для нумератора
Функция ПолучитьОчереднойНомер(Нумератор, ПериодНумерации, Организация)
	
	Отбор = Новый Структура("Нумератор, ПериодНумерации, Организация", Нумератор, ПериодНумерации, Организация);
	ТекущийНомер = РегистрыСведений.Нумерация.Получить(Отбор).ТекущийНомер;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗанятыеНомера.ЗанятыйНомер) КАК ЗанятыйНомер
	|ИЗ
	|	РегистрСведений.ЗанятыеНомера КАК ЗанятыеНомера
	|ГДЕ
	|	ЗанятыеНомера.Нумератор = &Нумератор
	|	И ЗанятыеНомера.ПериодНумерации = &ПериодНумерации
	|	И ЗанятыеНомера.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Нумератор", Нумератор);
	Запрос.УстановитьПараметр("ПериодНумерации", ПериодНумерации);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		ЗанятыйНомер = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗанятыйНомер = ?(Выборка.ЗанятыйНомер = Null, 0, Выборка.ЗанятыйНомер);
	КонецЕсли;
	
	Возврат Макс(ТекущийНомер, ЗанятыйНомер) + 1;
	
КонецФункции	

// Помечает сформированный номер как занятый
Процедура ЗанятьНомер(Нумератор, ПериодНумерации, Организация, ЧисловойНомер)
	
	Если ЧисловойНомер = 0 Или ЧисловойНомер = -1 Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЗанятыеНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Нумератор 		= Нумератор;
	МенеджерЗаписи.ПериодНумерации 	= ПериодНумерации;
	МенеджерЗаписи.ЗанятыйНомер 	= ЧисловойНомер;
	МенеджерЗаписи.Организация 		= Организация;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

// Для параметров, указанных в формате номера, вычисляет их значения
Функция ПолучитьЗначенияПараметровНомера(Объект, СтруктураФорматаНомера, ОписанияОшибок) 
	
	ПараметрыНомера = Новый Структура;
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		Если ЭлементФормата.Ключ <> "СлужебноеПоле" Тогда
			Продолжить;
		КонецЕсли;	
		
		СлужебноеПоле = ЭлементФормата.Значение;
		ЗначениеПоля = "";
		
		Если СлужебноеПоле = "Номер" Тогда
			ЗначениеПоля = Объект.ЧисловойНомер;
			
			
		ИначеЕсли СлужебноеПоле = "День" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", "Не заполнено поле ""Дата регистрации""");
			Иначе
				ЗначениеПоля = Формат(День(Объект.ДатаРегистрации), "ЧЦ=2; ЧВН=");
			КонецЕсли;	
			
			
		ИначеЕсли СлужебноеПоле = "Месяц" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", "Не заполнено поле ""Дата регистрации""");
			Иначе
				ЗначениеПоля = Формат(Месяц(Объект.ДатаРегистрации), "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			
		ИначеЕсли СлужебноеПоле = "Квартал" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", "Не заполнено поле ""Дата регистрации""");
			Иначе
				Месяц = Месяц(Объект.ДатаРегистрации);
				Если 	  Месяц <= 3 Тогда ЗначениеПоля = 1;
				ИначеЕсли Месяц <= 6 Тогда ЗначениеПоля = 2;
				ИначеЕсли Месяц <= 9 Тогда ЗначениеПоля = 3;
				Иначе ЗначениеПоля = 4; КонецЕсли;
			КонецЕсли;	
			
			
		ИначеЕсли СлужебноеПоле = "Год4" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", "Не заполнено поле ""Дата регистрации""");
			Иначе
				ЗначениеПоля = Год(Объект.ДатаРегистрации);
			КонецЕсли;
			
			
		ИначеЕсли СлужебноеПоле = "Год2" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", "Не заполнено поле ""Дата регистрации""");
			Иначе
				ЗначениеПоля = Прав(Строка(Год(Объект.ДатаРегистрации)), 2);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексВидаДокумента" Тогда 
			Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ВидДокумента);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "ИндексПодразделения" Тогда 
			Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Подразделение);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексОрганизации" Тогда 
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Организация);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексКорреспондента" И ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			Если ЗначениеЗаполнено(Объект.Отправитель) Тогда 
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Отправитель);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "ИндексКорреспондента" И ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 		
			Если ЗначениеЗаполнено(Объект.Получатель) Тогда 
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Получатель);
			// Дошкольное учреждение	
			КонецЕсли;
		ИначеЕсли СлужебноеПоле = "ИндексРеестра" И ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.удуРеестрыОтправки") Тогда 		
			Если ЗначениеЗаполнено(Объект.ТипРеестра) Тогда 
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ТипРеестра);

			КонецЕсли;
				
		КонецЕсли;	
		
		ПараметрыНомера.Вставить(СлужебноеПоле, ЗначениеПоля);
		
	КонецЦикла;	
	
	Возврат ПараметрыНомера;
	
КонецФункции	

// Формирует номер из структуры формата и значений параметров
Функция СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера) 
	
	СформированныйНомер = "";
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		
		Если ЭлементФормата.Ключ = "Разделитель" Тогда
			
			Если ЭлементФормата.ВходитВСлужебное = 0 Тогда
				СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
			Иначе
				ЗначениеПараметра = "";
				СлужебноеПоле = СтруктураФорматаНомера.Получить(ЭлементФормата.ВходитВСлужебное - 1).Значение;
				ЗначенияПараметровНомера.Свойство(СлужебноеПоле, ЗначениеПараметра);
				Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда 
					СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
				КонецЕсли;	
			КонецЕсли;	
			
		ИначеЕсли ЭлементФормата.Ключ = "СлужебноеПоле" Тогда
			
			ЗначениеПараметра = "";
			ЗначенияПараметровНомера.Свойство(ЭлементФормата.Значение, ЗначениеПараметра);
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
				ЗначениеПараметра = Формат(ЗначениеПараметра, "ЧГ=");
			Иначе	
				ЗначениеПараметра = Строка(ЗначениеПараметра);
			КонецЕсли;	
			
			СформированныйНомер = СформированныйНомер + ЗначениеПараметра;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат СформированныйНомер;
	
КонецФункции

Функция СтруктураформатаНомераСодержитПоле(СтруктураФорматаНомера, СлужебноеПоле)
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		Если ЭлементФормата.Ключ <> "СлужебноеПоле" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Найти(СлужебноеПоле, ЭлементФормата.Значение) > 0 Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ПолучитьСоотвествиеСлужебныхПолей()
	
	СоответствиеПолей = Новый Соответствие; // ключ - служебное поле в форматной строке
											// значение - представление служебного поля
	
	СоответствиеПолей.Вставить("Номер",   "Номер"); 	// числовой номер
	СоответствиеПолей.Вставить("День", 	  "День");  	// день месяца
	СоответствиеПолей.Вставить("Месяц",   "Месяц"); 	// номер месяца
	СоответствиеПолей.Вставить("Квартал", "Квартал"); 	// номер квартала
	СоответствиеПолей.Вставить("Год4", 	  "Год4");  	// год 4 знака
	СоответствиеПолей.Вставить("Год2", 	  "Год2");  	// год 2 знака
	
	СоответствиеПолей.Вставить("ИндексОрг",			"ИндексОрганизации"); 
	СоответствиеПолей.Вставить("ИндексВидаДок",		"ИндексВидаДокумента"); 
	СоответствиеПолей.Вставить("ИндексПодр", 		"ИндексПодразделения"); 
	СоответствиеПолей.Вставить("ИндексКорресп", 	"ИндексКорреспондента"); 
    СоответствиеПолей.Вставить("ИндексГрифа", 		"ИндексГрифаДоступа"); 
	// Дошкольное учреждение
	СоответствиеПолей.Вставить("ИндексРеестра", 		"ИндексРеестра"); 

	
	Возврат СоответствиеПолей;
	
КонецФункции	

Функция ПолучитьСоответствиеРеквизитов()
	
	СоответствиеПолей = Новый Соответствие; // ключ - реквизит влияющий на нумерацию
	                                       // значение - представление служебного поля
										   
	СоответствиеПолей.Вставить("ДатаРегистрации","День, Месяц, Квартал, Год2, Год4");
	СоответствиеПолей.Вставить("ВидДокумента", 	"ИндексВидаДокумента");

	СоответствиеПолей.Вставить("Организация", 	"ИндексОрганизации");

	
	СоответствиеПолей.Вставить("Адресат", 		"ИндексПодразделения");
	СоответствиеПолей.Вставить("Подписал", 		"ИндексПодразделения");
	СоответствиеПолей.Вставить("Подготовил", 	"ИндексПодразделения");
		
	СоответствиеПолей.Вставить("Отправитель", 	"ИндексКорреспондента");
	СоответствиеПолей.Вставить("Получатель", 	"ИндексКорреспондента");

	
	СоответствиеПолей.Вставить("ТипРеестра", 	"ИндексРеестра");

	
	Возврат СоответствиеПолей;
	
КонецФункции	

// Получает нумератор документа
Функция ПолучитьНумераторДокумента(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект.Ссылка)= Тип("СправочникСсылка.удуРеестрыОтправки") Тогда
		Если ЗначениеЗаполнено(Объект.ТипРеестра) И Объект.ТипРеестра.СпособНумерации = Перечисления.СпособыНумерации.Автоматически Тогда
			Возврат Объект.ТипРеестра.Нумератор;
		ИначеЕсли ЗначениеЗаполнено(Объект.ТипРеестра) И Объект.ТипРеестра.СпособНумерации = Перечисления.СпособыНумерации.Вручную Тогда
			Возврат Справочники.Нумераторы.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ВидДокумента) И Объект.ВидДокумента.СпособНумерации = Перечисления.СпособыНумерации.Автоматически Тогда
			Возврат Объект.ВидДокумента.Нумератор;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") И (Не Делопроизводство.ИспользоватьВидыВходящихДокументов()) Тогда 
		Возврат Справочники.Нумераторы.ВходящиеДокументы;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка)= Тип("СправочникСсылка.ИсходящиеДокументы") И (Не Делопроизводство.ИспользоватьВидыИсходящихДокументов()) Тогда 
		Возврат Справочники.Нумераторы.ИсходящиеДокументы;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") И (Не Делопроизводство.ИспользоватьВидыВнутреннихДокументов()) Тогда 
		Возврат Справочники.Нумераторы.ВнутренниеДокументы;
		

	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.удуРеестрыОтправки") Тогда 
		Возврат Справочники.Нумераторы.ТипыРеестра;
	КонецЕсли;	
			
	Возврат Справочники.Нумераторы.ПустаяСсылка();
	
КонецФункции	

Процедура ОсвободитьНомерПриУдалении(Объект) Экспорт 
	
	ЧисловойНомер = Объект.ЧисловойНомер;
	Если ЧисловойНомер = 0 Или ЧисловойНомер = -1 Тогда 
		Возврат;
	КонецЕсли;
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, Объект.ДатаРегистрации);
	Если Нумератор.НезависимаяНумерацияПоОрганизациям И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = Объект.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Отбор = Новый Структура("Нумератор, ПериодНумерации, Организация", Нумератор, ПериодНумерации, Организация);
	ТекущийНомер = РегистрыСведений.Нумерация.Получить(Отбор).ТекущийНомер;
	
	Если ТекущийНомер = ЧисловойНомер Тогда // уменьшить номер в регистре
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Нумератор = Нумератор;
		МенеджерЗаписи.ПериодНумерации = ПериодНумерации;
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ТекущийНомер = ТекущийНомер - 1;
		МенеджерЗаписи.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОсвободитьНомерДокумента(Нумератор, Объект) Экспорт
	
	ПериодНумерации = НачалоПериодаНумерации(Нумератор.Периодичность, Объект.ДатаРегистрации);
	
	Если Нумератор.НезависимаяНумерацияПоОрганизациям И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = Объект.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Нумерация.ОсвободитьНомер(Нумератор, ПериодНумерации, Организация, Объект.ЧисловойНомер);
	
КонецПроцедуры	
