// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ИмяРеквизита = "Сотрудник") Экспорт
	
	КраткийСоставДокумента = "";
	
	КоличествоТЧ = 1;
	КраткийСоставДокументаЗаполнен = Ложь;
	Для каждого ТабличнаяЧастьДокумента Из ТЧДокумента Цикл
		
		Если НЕ КраткийСоставДокументаЗаполнен Тогда
			
			Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
				
				ФИОФизЛица = удуОбщегоНазначенияСервер.ФамилияИнициалыФизЛица(СтрокаТЧ[ИмяРеквизита]);
				Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
					
					Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
					Иначе
						
						Если КоличествоТЧ = 1 Тогда
							КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
						Иначе
							
							Если Лев(КраткийСоставДокумента,2) = ", " Тогда
								КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
							Иначе
								КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
							КонецЕсли;
							
						КонецЕсли; 
						
						КраткийСоставДокументаЗаполнен = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			КоличествоТЧ = КоличествоТЧ + 1;
			
		КонецЕсли; 
		
		Если КраткийСоставДокументаЗаполнен Тогда
			Прервать
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
	Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	
	Если МетаданныеДокумента.Реквизиты.Найти("Подразделение") <> Неопределено 
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение)) Тогда
	КонецЕсли;
	
	ПроверятьСоответствиеПодразделенияОрганизации = истина;
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		ДокументОбъект.Организация = Константы.удуОсновноеУчреждение.Получить();
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ХарактерОплаты") <> Неопределено Тогда
		ДокументОбъект.ХарактерОплаты = Перечисления.удуХарактерВыплатыПоДоговору.ОднократноВКонцеСрока;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВидДоговора") <> Неопределено Тогда
		ДокументОбъект.ВидДоговора=Перечисления.удуВидыДоговоровСФизЛицами.Подряда;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВидРасчета") <> Неопределено Тогда
		ДокументОбъект.ВидРасчета = ПланыВидовРасчета.удуДополнительныеНачисленияОрганизаций.ДоговорПодряда;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
	КонецЕсли;
		
	Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации.
// Процедура исполняется только на клиенте.
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры

// Подбирает массив номеров месяцев, соответствующих переданной строке.
// Например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8.
// Используется в ПодобратьДатуПоТексту.
//
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		удуОбщегоНазначенияСервер.Просклонять(Представление, 2, Представление, );
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

// Предназначена для реализации "произвольного" ввода даты-месяца.
// Подбирает по переданному тексту строку-представление даты или список таких строк.
// В переданный параметр ДатаПоТексту возвращает подобранную по тексту дату.
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат СписокВозврата;
	КонецЕсли;
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	Если Подстроки.Количество() = 1 Тогда
		// Единственное слово - пытаемся получить месяц.
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		// Два слова - первое считаем месяцем, второе - годом.
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
				СтрокаФорматированияГода = "г";
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
				СтрокаФорматированияГода = "гг";
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
				СтрокаФорматированияГода = "гггг";
			КонецЕсли;                    
		Иначе
			// Второе слово может быть только годом.
			Возврат СписокВозврата;
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
				// Если "правильный" месяц и год.
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(ТекстВозврата);
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить("");
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СписокВозврата;
КонецФункции

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	ТекстАвтоПодбора=Список;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
	Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	Значение = Список;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Проверяет правильность заполнения Ф.И.О.
//
Функция ФИОНаписаноВерно(Знач СтрокаПараметр, ПроверятьТолькоРусскиеБуквы = Ложь) Экспорт
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);
	
	СписокДопустимыхЗначений = Новый Соответствие;
	СписокДопустимыхЗначений.Вставить(КодСимвола(" "), " ");
	СписокДопустимыхЗначений.Вставить(КодСимвола("-"), "-");
	СписокДопустимыхЗначений.Вставить(КодСимвола("ё"), "ё");
	СписокДопустимыхЗначений.Вставить(КодСимвола("Ё"), "Ё");
	
	КодA = КодСимвола("A");
	КодZ = КодСимвола("z");
	КодА = КодСимвола("А");
	КодЯ = КодСимвола("я");
	Если  ПроверятьТолькоРусскиеБуквы Тогда
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если ((Код >= КодА) И (Код <= КодЯ)) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если (((Код >= КодA) И (Код <= КодZ)) ИЛИ ((Код >= КодА) И (Код <= КодЯ))) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат 1;
	
КонецФункции // ФИОНаписаноВерно()

// Возвращает список причин отсутствия, регистрируемых документом Отсутствие организации.
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокПрочихСостоянийРаботника() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.Заболевание);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.Работает);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ПоУходуЗаРебенком);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.Простой);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ВынужденныйПрогул);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ГосударственныеОбязанности);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.Прогулы);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ТравмаНаПроизводстве);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.Протезирование);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.Карантин);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ПоУходуЗаВзрослым);
	СписокСпособов.Добавить(Перечисления.удуСостоянияРаботникаОрганизации.ПособиеПриДолечивании);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокПрочихСостоянийРаботника()

// Возвращает список отпусков, регистрируемых документом Отпуска организации.
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокОтпусковОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	СписокСпособов.Добавить(Перечисления.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный);
	СписокСпособов.Добавить(Перечисления.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый);
	СписокСпособов.Добавить(Перечисления.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);
	
	Возврат СписокСпособов;
	
КонецФункции

// Возвращает список дополнительных отпусков, регистрируемых документом Отпуска организации.
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокДопОтпусковОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.удуОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск)");
	
	СписокСпособов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
	
	Возврат СписокСпособов;
	
КонецФункции


// Проверяет, заполнен ли регламентированный производственный календарь за переданный период.
//
// Параметры
//  ДатаНач, ДатаКон - дата, определяют проверяемый период
//  ТекстСообщенияОбОшибке - строка
//
// Возвращаемое значение:
//   Булево  - если колендарь заполнен за весь период
//   дополнительно возвращается описание незаполненных лет - в параметр ТекстСообщенияОбОшибке
//
Функция РегламентированныйКалендарьЗаполнен(ДатаНач, ДатаКон, ТекстСообщенияОбОшибке) Экспорт 
	
	ТекстЛет = "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ДатаНач,"ДФ=yyyy; ДП='0'") + " КАК Год";
	ТекущийГод = Год(ДатаНач) + 1;
	Пока ТекущийГод <= Год(ДатаКон) Цикл
		ТекстЛет = ТекстЛет + Символы.ПС + Символы.Таб + "Объединить" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ТекущийГод,"ЧГ=0");
		ТекущийГод = ТекущийГод + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГодыПериода.Год,
	|	ДатыКалендаря.КоличествоДней
	|ИЗ
	|	(" + ТекстЛет + ") КАК ГодыПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней,
	|			РегламентированныйПроизводственныйКалендарь.Год КАК Год
	|		ИЗ
	|			РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаС И &ДатаПо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегламентированныйПроизводственныйКалендарь.Год) КАК ДатыКалендаря
	|		ПО ГодыПериода.Год = ДатыКалендаря.Год";
	
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаС", ДатаНач);
	Выборка = Запрос.Выполнить().Выбрать();
	КалендарьЗаполнен = Истина;
	ТекстСообщенияОбОшибке = "";
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДней = Null Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
			КалендарьЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	ТекстСообщенияОбОшибке = "Перед формированием отчета заполните ""Регламентированный производственный календарь"" за " + ТекстСообщенияОбОшибке + ?(Найти(ТекстСообщенияОбОшибке,",")=0," год!"," годы!");
	
	Возврат КалендарьЗаполнен
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

// Функция выбирает стажи по физлицу из ТЧ "Стажи" справочника "Физические лица".
//
// Параметры
//  Физлицо		– СправочникСсылка.ФизическиеЛица – работник, которому вычисляется стаж
//  ДопУсловие	– Строка – строка дополнительного условия в запрос
//  ВидСтажа	– СправочникСсылка.ВидыСтажа - значение параметра для дополнительного условия
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   – выборка со стажами работника
//
Функция ВыбратьСтажиРаботника(Физлицо, ДопУсловие = Неопределено, ВидСтажа = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	ФизическиеЛицаСтажи.ВидСтажа,
	|	ФизическиеЛицаСтажи.ВидСтажа.Наименование КАК Наименование,
	|	ФизическиеЛицаСтажи.ДатаОтсчета,
	|	ФизическиеЛицаСтажи.РазмерМесяцев,
	|	ФизическиеЛицаСтажи.РазмерДней
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|ГДЕ
	|	ФизическиеЛицаСтажи.Ссылка = &Физлицо
	|	И ФизическиеЛицаСтажи.ДатаОтсчета <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Если ДопУсловие <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " " + ДопУсловие;
		
		Если ВидСтажа <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("ВидСтажа", ВидСтажа);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции // ВыбратьСтажиРаботника()

// Процедура предназначена для получения начислений и действий с ними
// в зависимости от действия с сотрудником.
//
// Параметры:
//  ДанныеДокумента					- исходные данные для выполнения запроса: ссылка на сотрудника, 
//									  если сотрудник один, таблица значений в случае, если их несколько
//  ДокументСсылка					- ссылка на документ
//  ДокументДата					- дата документа
//  Организация						- ссылка на организацию
//	ИмяДатыДействия					- в разных документах поле с датой действия 
//									  имеет разное имя: ДатаНачала, ДатаДействия, ДатаПриема
//	КоэффициентИндексацииЗаработка 	- необязательный, по умолчанию - 1 (нет индексации), 
//									  используется для пересчета значений при заполнении документа 
//									  Кадровое перемещение сотрудников организаций
//	ПоДаннымТрудовогоДоговора 		- необязательный, по умолчанию - Ложь, признак необходимости 
//									  получать данные трудового договора
//	ПолучатьПлановыеНачисления 		- необязательный, по умолчанию - Истина, признак необходимости 
//									  получать плановые начисления
//
Функция ПолучитьТаблицуДействийСНачислениями(ДанныеДокумента, ДокументСсылка, ДокументДата, Организация, ИмяДатыДействия, КоэффициентИндексацииЗаработка = 1, ПоДаннымТрудовогоДоговора = Ложь, ПолучатьПлановыеНачисления = Истина, ОбособленноеПодразделение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ИндексируемыеСпособыРасчета = Новый Массив;
	ИндексируемыеСпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	ИндексируемыеСпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	ИндексируемыеСпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	ИндексируемыеСпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	ИндексируемыеСпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	ИндексируемыеСпособыРасчета.Добавить(Перечисления.удуСпособыРасчетаОплатыТруда.СдельныйЗаработок);
	
	Запрос.УстановитьПараметр("ПолучатьПлановыеНачисления", ПолучатьПлановыеНачисления);
	Запрос.УстановитьПараметр("ИндексируемыеСпособыРасчета", ИндексируемыеСпособыРасчета);
	Запрос.УстановитьПараметр("КоэффициентИндексацииЗаработка", КоэффициентИндексацииЗаработка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента." + ИмяДатыДействия + " <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеДокумента." + ИмяДатыДействия + "
	|		ИНАЧЕ ДанныеДокумента.ДатаДокумента
	|	КОНЕЦ КАК ДатаДействия,
	|	ДанныеДокумента.ПодразделениеОрганизации,
	|	ДанныеДокумента.Должность,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ДатаДокумента
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|		
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	ДатаДействия
	|;";
	
	Если ДанныеДокумента.Колонки.Найти("ПодразделениеОрганизации") = Неопределено Тогда 
		ДанныеДокумента.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.удуПодразделенияУчереждения"));
		ДанныеДокумента.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КонецЕсли;
	
	// Дополним таблицу данными шапки документа.
	ДанныеДокумента.Колонки.Добавить("ДатаДокумента", 	удуОбщегоНазначенияСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ДанныеДокумента.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.удуУчреждения"));
	
	ДанныеДокумента.ЗаполнитьЗначения(ДокументДата,		"ДатаДокумента");
	ДанныеДокумента.ЗаполнитьЗначения(Организация, 		"Организация");
	
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	
	ТекстЗапроса = ТекстЗапроса +  
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ДатаДействия,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ РаботникиСрезПоследнихДаты
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ДанныеДокумента.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ДанныеДокумента.Организация = РаботникиОрганизаций.Организация
	|			И ДанныеДокумента.ДатаДействия >= РаботникиОрганизаций.Период
	|			И (&Ссылка <> РаботникиОрганизаций.Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаДействия,
	|	ДанныеДокумента.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиСрезПоследних.Сотрудник,
	|	РаботникиСрезПоследних.Организация,
	|	РаботникиСрезПоследних.ДатаДействия,
	|	РаботникиСрезПоследних.Период,
	|	РаботникиОрганизаций.ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность
	|ПОМЕСТИТЬ РаботникиСрезПоследних
	|ИЗ
	|	РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаботникиСрезПоследнихДаты КАК РаботникиСрезПоследних
	|		ПО РаботникиОрганизаций.Сотрудник = РаботникиСрезПоследних.Сотрудник
	|			И РаботникиОрганизаций.Организация = РаботникиСрезПоследних.Организация
	|			И РаботникиОрганизаций.Период = РаботникиСрезПоследних.Период
	|			И (РаботникиОрганизаций.Регистратор <> &Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаботникиСрезПоследних.Сотрудник,
	|	РаботникиСрезПоследних.Организация,
	|	РаботникиСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаДействия,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПодразделениеОрганизации ЕСТЬ NULL 
	|				ИЛИ ДанныеДокумента.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.удуПодразделенияУчереждения.ПустаяСсылка)
	|			ТОГДА РаботникиСрезПоследних.ПодразделениеОрганизации
	|		ИНАЧЕ ДанныеДокумента.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Должность ЕСТЬ NULL 
	|				ИЛИ ДанныеДокумента.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА РаботникиСрезПоследних.Должность
	|		ИНАЧЕ ДанныеДокумента.Должность
	|	КОНЕЦ КАК Должность,
	|	РаботникиСрезПоследних.Организация КАК СтараяОрганизация,
	|	РаботникиСрезПоследних.ПодразделениеОрганизации КАК СтароеПодразделениеОрганизации,
	|	РаботникиСрезПоследних.Должность КАК СтараяДолжность,
	|	СотрудникиОрганизаций.ВидРасчета,
	|	СотрудникиОрганизаций.ТарифнаяСтавка
	|ПОМЕСТИТЬ ДанныеСотрудников
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаботникиСрезПоследних КАК РаботникиСрезПоследних
	|		ПО ДанныеДокумента.Сотрудник = РаботникиСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ДанныеДокумента.Сотрудник = СотрудникиОрганизаций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаДействия,
	|	МАКСИМУМ(Начисления.Период) КАК Период
	|ПОМЕСТИТЬ ОсновныеНачисленияСрезПоследних
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО ДанныеДокумента.Сотрудник = Начисления.Сотрудник
	|			И ДанныеДокумента.Организация = Начисления.Организация
	|			И (ВЫБОР
	|				КОГДА ДанныеДокумента.ДатаДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ДанныеДокумента.ДатаДействия >= Начисления.Период
	|			КОНЕЦ)
	|ГДЕ
	|	Начисления.ВидРасчета ССЫЛКА ПланВидовРасчета.удуОсновныеНачисленияОрганизаций
	|	И Начисления.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|	И Начисления.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаДействия,
	|	ДанныеДокумента.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияСрезПоследних.Организация,
	|	ОсновныеНачисленияСрезПоследних.Сотрудник,
	|	ОсновныеНачисленияСрезПоследних.ДатаДействия,
	|	Начисления.Период,
	|	Начисления.ВидРасчета,
	|	Начисления.Показатель1 КАК Показатель1
	|ПОМЕСТИТЬ ОсновныеНачисленияСотрудников
	|ИЗ
	|	ОсновныеНачисленияСрезПоследних КАК ОсновныеНачисленияСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО ОсновныеНачисленияСрезПоследних.Сотрудник = Начисления.Сотрудник
	|			И ОсновныеНачисленияСрезПоследних.Организация = Начисления.Организация
	|			И ОсновныеНачисленияСрезПоследних.Период = Начисления.Период
	|			И (Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Прекратить))
	|ГДЕ
	|	Начисления.ВидРасчета ССЫЛКА ПланВидовРасчета.удуОсновныеНачисленияОрганизаций
	|	И Начисления.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|	И Начисления.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаДействия,
	|	МАКСИМУМ(Начисления.Период) КАК Период,
	|	Начисления.ВидРасчета
	|ПОМЕСТИТЬ НачисленияСрезПоследних
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО ДанныеДокумента.Сотрудник = Начисления.Сотрудник
	|			И ДанныеДокумента.Организация = Начисления.Организация
	|			И ДанныеДокумента.ДатаДействия >= Начисления.Период
	|			И (ВЫБОР
	|				КОГДА ДанныеДокумента.ДатаДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ДанныеДокумента.ДатаДействия >= Начисления.Период
	|			КОНЕЦ)
	|ГДЕ
	|	Начисления.ВидРасчета ССЫЛКА ПланВидовРасчета.удуОсновныеНачисленияОрганизаций
	|	И Начисления.ВидРасчетаИзмерение <> НЕОПРЕДЕЛЕНО
	|	И Начисления.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаДействия,
	|	ДанныеДокумента.Организация,
	|	Начисления.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСрезПоследних.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.Показатель1 КАК Показатель1,
	|	НачисленияСрезПоследних.ДатаДействия
	|ПОМЕСТИТЬ НачисленияСотрудника
	|ИЗ
	|	РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияСрезПоследних КАК НачисленияСрезПоследних
	|		ПО (Начисления.Регистратор <> &Ссылка)
	|			И Начисления.Сотрудник = НачисленияСрезПоследних.Сотрудник
	|			И Начисления.Организация = НачисленияСрезПоследних.Организация
	|			И Начисления.Период = НачисленияСрезПоследних.Период
	|			И Начисления.ВидРасчета = НачисленияСрезПоследних.ВидРасчета
	|			И (Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Прекратить))
	|ГДЕ
	|	Начисления.ВидРасчета ССЫЛКА ПланВидовРасчета.удуОсновныеНачисленияОрганизаций
	|	И &ПолучатьПлановыеНачисления
	|	И Начисления.ВидРасчетаИзмерение <> НЕОПРЕДЕЛЕНО
	|	И Начисления.Регистратор <> &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОсновныеНачисленияСотрудников.Сотрудник,
	|	ОсновныеНачисленияСотрудников.ВидРасчета,
	|	ОсновныеНачисленияСотрудников.Показатель1,
	|	ОсновныеНачисленияСотрудников.ДатаДействия
	|ИЗ
	|	ОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачисленияСрезПоследних.Сотрудник,
	|	Начисления.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСотрудников.Сотрудник,
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации,
	|	ШтатноеРасписаниеОрганизаций.Должность,
	|	МАКСИМУМ(ШтатноеРасписаниеОрганизаций.Период) КАК Период,
	|	ДанныеСотрудников.ДатаДействия
	|ПОМЕСТИТЬ ШтатноеРасписаниеСтараяПозицияСрезПоследних
	|ИЗ
	|	ДанныеСотрудников КАК ДанныеСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	|		ПО ДанныеСотрудников.СтароеПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	|			И ДанныеСотрудников.СтараяДолжность = ШтатноеРасписаниеОрганизаций.Должность
	|			И ДанныеСотрудников.ДатаДействия >= ШтатноеРасписаниеОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации,
	|	ДанныеСотрудников.Сотрудник,
	|	ШтатноеРасписаниеОрганизаций.Должность,
	|	ДанныеСотрудников.ДатаДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСотрудников.Сотрудник,
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации,
	|	ШтатноеРасписаниеОрганизаций.Должность,
	|	МАКСИМУМ(ШтатноеРасписаниеОрганизаций.Период) КАК Период,
	|	ДанныеСотрудников.ДатаДействия
	|ПОМЕСТИТЬ ШтатноеРасписаниеНоваяПозицияСрезПоследних
	|ИЗ
	|	ДанныеСотрудников КАК ДанныеСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	|		ПО ДанныеСотрудников.ДатаДействия >= ШтатноеРасписаниеОрганизаций.Период
	|			И ДанныеСотрудников.Подразделение = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	|			И ДанныеСотрудников.Должность = ШтатноеРасписаниеОрганизаций.Должность
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации,
	|	ДанныеСотрудников.Сотрудник,
	|	ШтатноеРасписаниеОрганизаций.Должность,
	|	ДанныеСотрудников.ДатаДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеСтараяПозицияСрезПоследних.Сотрудник,
	|	ШтатноеРасписаниеСтараяПозицияСрезПоследних.ПодразделениеОрганизации,
	|	ШтатноеРасписаниеСтараяПозицияСрезПоследних.Должность,
	|	ШтатноеРасписаниеОрганизаций.ВидРасчета,
	|	ШтатноеРасписаниеОрганизаций.МесячнаяСтавка,
	|	ШтатноеРасписаниеСтараяПозицияСрезПоследних.ДатаДействия
	|ПОМЕСТИТЬ ШтатноеРасписаниеСтараяПозиция
	|ИЗ
	|	ШтатноеРасписаниеСтараяПозицияСрезПоследних КАК ШтатноеРасписаниеСтараяПозицияСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	|		ПО ШтатноеРасписаниеСтараяПозицияСрезПоследних.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	|			И ШтатноеРасписаниеСтараяПозицияСрезПоследних.Должность = ШтатноеРасписаниеОрганизаций.Должность
	|			И ШтатноеРасписаниеСтараяПозицияСрезПоследних.Период = ШтатноеРасписаниеОрганизаций.Период
	|			И (ШтатноеРасписаниеОрганизаций.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеНоваяПозицияСрезПоследних.Сотрудник,
	|	ШтатноеРасписаниеНоваяПозицияСрезПоследних.ПодразделениеОрганизации,
	|	ШтатноеРасписаниеНоваяПозицияСрезПоследних.Должность,
	|	ШтатноеРасписаниеОрганизаций.ВидРасчета,
	|	ШтатноеРасписаниеОрганизаций.МесячнаяСтавка,
	|	ШтатноеРасписаниеНоваяПозицияСрезПоследних.ДатаДействия
	|ПОМЕСТИТЬ ШтатноеРасписаниеНоваяПозиция
	|ИЗ
	|	ШтатноеРасписаниеНоваяПозицияСрезПоследних КАК ШтатноеРасписаниеНоваяПозицияСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	|		ПО ШтатноеРасписаниеНоваяПозицияСрезПоследних.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
	|			И ШтатноеРасписаниеНоваяПозицияСрезПоследних.Должность = ШтатноеРасписаниеОрганизаций.Должность
	|			И ШтатноеРасписаниеНоваяПозицияСрезПоследних.Период = ШтатноеРасписаниеОрганизаций.Период
	|			И (ШтатноеРасписаниеОрганизаций.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ШтатноеРасписание.Период) КАК Период,
	|	ДанныеСотрудников.ДатаДействия,
	|	ДанныеСотрудников.СтароеПодразделениеОрганизации,
	|	ДанныеСотрудников.СтараяДолжность
	|ПОМЕСТИТЬ ШтатноеРасписаниеСтараяПозицияКрайниеДаты
	|ИЗ
	|	РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСотрудников КАК ДанныеСотрудников
	|		ПО ШтатноеРасписание.Период <= ДанныеСотрудников.ДатаДействия
	|			И ШтатноеРасписание.ПодразделениеОрганизации = ДанныеСотрудников.СтароеПодразделениеОрганизации
	|			И ШтатноеРасписание.Должность = ДанныеСотрудников.СтараяДолжность
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСотрудников.Сотрудник,
	|	ДанныеСотрудников.ДатаДействия,
	|	ДанныеСотрудников.СтароеПодразделениеОрганизации,
	|	ДанныеСотрудников.СтараяДолжность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ШтатноеРасписание.Период) КАК Период,
	|	ДанныеСотрудников.ДатаДействия,
	|	ДанныеСотрудников.Подразделение,
	|	ДанныеСотрудников.Должность КАК Должность
	|ПОМЕСТИТЬ ШтатноеРасписаниеНоваяПозицияКрайниеДаты
	|ИЗ
	|	РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСотрудников КАК ДанныеСотрудников
	|		ПО ШтатноеРасписание.Период <= ДанныеСотрудников.ДатаДействия
	|			И ШтатноеРасписание.ПодразделениеОрганизации = ДанныеСотрудников.Подразделение
	|			И ШтатноеРасписание.Должность = ДанныеСотрудников.Должность
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСотрудников.Сотрудник,
	|	ДанныеСотрудников.ДатаДействия,
	|	ДанныеСотрудников.Подразделение,
	|	ДанныеСотрудников.Должность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеКрайниеДаты.Сотрудник КАК Сотрудник,
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки КАК ВидНадбавки,
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1,
	|	ШтатноеРасписаниеКрайниеДаты.ДатаДействия
	|ПОМЕСТИТЬ НачисленияСтаройПозицииСрезПоследних
	|ИЗ
	|	ШтатноеРасписаниеСтараяПозицияКрайниеДаты КАК ШтатноеРасписаниеКрайниеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуНадбавкиПоШтатномуРасписаниюОрганизаций КАК НадбавкиПоШтатномуРасписаниюОрганизаций
	|		ПО ШтатноеРасписаниеКрайниеДаты.Период = НадбавкиПоШтатномуРасписаниюОрганизаций.Период
	|			И ШтатноеРасписаниеКрайниеДаты.СтароеПодразделениеОрганизации = НадбавкиПоШтатномуРасписаниюОрганизаций.ПодразделениеОрганизации
	|			И ШтатноеРасписаниеКрайниеДаты.СтараяДолжность = НадбавкиПоШтатномуРасписаниюОрганизаций.Должность
	|ГДЕ
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки ССЫЛКА ПланВидовРасчета.удуОсновныеНачисленияОрганизаций
	|	И НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки <> ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.РайонныйКоэффициент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеСтараяПозиция.Сотрудник,
	|	ШтатноеРасписаниеСтараяПозиция.ВидРасчета,
	|	ШтатноеРасписаниеСтараяПозиция.МесячнаяСтавка,
	|	ШтатноеРасписаниеСтараяПозиция.ДатаДействия
	|ИЗ
	|	ШтатноеРасписаниеСтараяПозиция КАК ШтатноеРасписаниеСтараяПозиция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеКрайниеДаты.Сотрудник КАК Сотрудник,
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки КАК ВидНадбавки,
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1,
	|	ШтатноеРасписаниеКрайниеДаты.ДатаДействия
	|ПОМЕСТИТЬ НачисленияНовойПозицииСрезПоследних
	|ИЗ
	|	ШтатноеРасписаниеНоваяПозицияКрайниеДаты КАК ШтатноеРасписаниеКрайниеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуНадбавкиПоШтатномуРасписаниюОрганизаций КАК НадбавкиПоШтатномуРасписаниюОрганизаций
	|		ПО ШтатноеРасписаниеКрайниеДаты.Период = НадбавкиПоШтатномуРасписаниюОрганизаций.Период
	|			И ШтатноеРасписаниеКрайниеДаты.Должность = НадбавкиПоШтатномуРасписаниюОрганизаций.Должность
	|			И ШтатноеРасписаниеКрайниеДаты.Подразделение = НадбавкиПоШтатномуРасписаниюОрганизаций.ПодразделениеОрганизации
	|ГДЕ
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки ССЫЛКА ПланВидовРасчета.удуОсновныеНачисленияОрганизаций
	|	И НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки <> ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.РайонныйКоэффициент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеНоваяПозиция.Сотрудник,
	|	ШтатноеРасписаниеНоваяПозиция.ВидРасчета,
	|	ШтатноеРасписаниеНоваяПозиция.МесячнаяСтавка,
	|	ШтатноеРасписаниеНоваяПозиция.ДатаДействия
	|ИЗ
	|	ШтатноеРасписаниеНоваяПозиция КАК ШтатноеРасписаниеНоваяПозиция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.НеИзменять) КАК Действие,
	|	НачисленияСотрудника.Сотрудник,
	|	НачисленияСотрудника.ВидРасчета,
	|	НачисленияСотрудника.Показатель1,
	|	НачисленияСотрудника.ДатаДействия
	|ПОМЕСТИТЬ Начисления
	|ИЗ
	|	НачисленияСтаройПозицииСрезПоследних КАК НачисленияСтаройПозицииСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияНовойПозицииСрезПоследних КАК НачисленияНовойПозицииСрезПоследних
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияНовойПозицииСрезПоследних.ВидНадбавки
	|			И НачисленияСтаройПозицииСрезПоследних.Показатель1 = НачисленияНовойПозицииСрезПоследних.Показатель1
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияНовойПозицииСрезПоследних.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияСотрудника КАК НачисленияСотрудника
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияСотрудника.ВидРасчета
	|			И НачисленияСтаройПозицииСрезПоследних.Показатель1 = НачисленияСотрудника.Показатель1
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияСотрудника.Сотрудник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.НеИзменять),
	|	НачисленияСотрудника.Сотрудник,
	|	НачисленияСотрудника.ВидРасчета,
	|	НачисленияСотрудника.Показатель1,
	|	НачисленияСотрудника.ДатаДействия
	|ИЗ
	|	НачисленияСтаройПозицииСрезПоследних КАК НачисленияСтаройПозицииСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияНовойПозицииСрезПоследних КАК НачисленияНовойПозицииСрезПоследних
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияНовойПозицииСрезПоследних.ВидНадбавки
	|			И НачисленияСтаройПозицииСрезПоследних.Показатель1 = НачисленияНовойПозицииСрезПоследних.Показатель1
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияНовойПозицииСрезПоследних.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияСотрудника КАК НачисленияСотрудника
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияСотрудника.ВидРасчета
	|			И НачисленияСтаройПозицииСрезПоследних.Показатель1 <> НачисленияСотрудника.Показатель1
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияСотрудника.Сотрудник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать),
	|	ДанныеСотрудников.Сотрудник,
	|	НачисленияНовойПозицииСрезПоследних.ВидНадбавки,
	|	НачисленияНовойПозицииСрезПоследних.Показатель1,
	|	ДанныеСотрудников.ДатаДействия
	|ИЗ
	|	НачисленияНовойПозицииСрезПоследних КАК НачисленияНовойПозицииСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСтаройПозицииСрезПоследних КАК НачисленияСтаройПозицииСрезПоследних
	|		ПО (НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияНовойПозицииСрезПоследних.ВидНадбавки)
	|			И НачисленияНовойПозицииСрезПоследних.Сотрудник = НачисленияСтаройПозицииСрезПоследних.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСотрудников КАК ДанныеСотрудников
	|		ПО НачисленияНовойПозицииСрезПоследних.Сотрудник = ДанныеСотрудников.Сотрудник
	|ГДЕ
	|	НачисленияСтаройПозицииСрезПоследних.ВидНадбавки ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Прекратить),
	|	ДанныеСотрудников.Сотрудник,
	|	НачисленияСтаройПозицииСрезПоследних.ВидНадбавки,
	|	НачисленияСтаройПозицииСрезПоследних.Показатель1,
	|	ДанныеСотрудников.ДатаДействия
	|ИЗ
	|	НачисленияСтаройПозицииСрезПоследних КАК НачисленияСтаройПозицииСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияНовойПозицииСрезПоследних КАК НачисленияНовойПозицииСрезПоследних
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияНовойПозицииСрезПоследних.ВидНадбавки
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияНовойПозицииСрезПоследних.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСотрудников КАК ДанныеСотрудников
	|		ПО НачисленияСтаройПозицииСрезПоследних.Сотрудник = ДанныеСотрудников.Сотрудник
	|ГДЕ
	|	НачисленияНовойПозицииСрезПоследних.ВидНадбавки ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать),
	|	ДанныеСотрудников.Сотрудник,
	|	НачисленияНовойПозицииСрезПоследних.ВидНадбавки,
	|	НачисленияНовойПозицииСрезПоследних.Показатель1,
	|	ДанныеСотрудников.ДатаДействия
	|ИЗ
	|	НачисленияСтаройПозицииСрезПоследних КАК НачисленияСтаройПозицииСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияНовойПозицииСрезПоследних КАК НачисленияНовойПозицииСрезПоследних
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияНовойПозицииСрезПоследних.ВидНадбавки
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияНовойПозицииСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСотрудника КАК НачисленияСотрудника
	|		ПО НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияСотрудника.Сотрудник
	|			И НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияСотрудника.ВидРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСотрудников КАК ДанныеСотрудников
	|		ПО НачисленияСтаройПозицииСрезПоследних.Сотрудник = ДанныеСотрудников.Сотрудник
	|ГДЕ
	|	НачисленияСотрудника.ВидРасчета ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Изменить),
	|	НачисленияСотрудника.Сотрудник,
	|	НачисленияСтаройПозицииСрезПоследних.ВидНадбавки,
	|	ВЫБОР
	|		КОГДА НачисленияСотрудника.Показатель1 = НачисленияСтаройПозицииСрезПоследних.Показатель1
	|			ТОГДА НачисленияНовойПозицииСрезПоследних.Показатель1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	НачисленияСотрудника.ДатаДействия
	|ИЗ
	|	НачисленияСтаройПозицииСрезПоследних КАК НачисленияСтаройПозицииСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияНовойПозицииСрезПоследних КАК НачисленияНовойПозицииСрезПоследних
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияНовойПозицииСрезПоследних.ВидНадбавки
	|			И НачисленияСтаройПозицииСрезПоследних.Показатель1 <> НачисленияНовойПозицииСрезПоследних.Показатель1
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияНовойПозицииСрезПоследних.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияСотрудника КАК НачисленияСотрудника
	|		ПО НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияСотрудника.ВидРасчета
	|			И НачисленияСтаройПозицииСрезПоследних.Сотрудник = НачисленияСотрудника.Сотрудник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.НеИзменять),
	|	НачисленияСотрудника.Сотрудник,
	|	НачисленияСотрудника.ВидРасчета,
	|	НачисленияСотрудника.Показатель1,
	|	НачисленияСотрудника.ДатаДействия
	|ИЗ
	|	НачисленияСотрудника КАК НачисленияСотрудника
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияНовойПозицииСрезПоследних КАК НачисленияНовойПозицииСрезПоследних
	|		ПО НачисленияСотрудника.ВидРасчета = НачисленияНовойПозицииСрезПоследних.ВидНадбавки
	|			И НачисленияСотрудника.Сотрудник = НачисленияНовойПозицииСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСтаройПозицииСрезПоследних КАК НачисленияСтаройПозицииСрезПоследних
	|		ПО (НачисленияСтаройПозицииСрезПоследних.ВидНадбавки = НачисленияСотрудника.ВидРасчета)
	|			И НачисленияСотрудника.Сотрудник = НачисленияСтаройПозицииСрезПоследних.Сотрудник
	|ГДЕ
	|	НачисленияНовойПозицииСрезПоследних.ВидНадбавки ЕСТЬ NULL 
	|	И НачисленияСтаройПозицииСрезПоследних.ВидНадбавки ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Начисления.Действие = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.НеИзменять)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(Начисления.Показатель1, 0) * ВЫБОР
	|							КОГДА Начисления.ВидРасчета.СпособРасчета В (&ИндексируемыеСпособыРасчета)
	|								ТОГДА &КоэффициентИндексацииЗаработка
	|							ИНАЧЕ 1
	|						КОНЕЦ = ЕСТЬNULL(Начисления.Показатель1, 0)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.НеИзменять)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Изменить)
	|				КОНЕЦ
	|		ИНАЧЕ Начисления.Действие
	|	КОНЕЦ КАК Действие,
	|	Начисления.ДатаДействия,
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ВидРасчета,
	|	ЕСТЬNULL(Начисления.Показатель1, 0) * ВЫБОР
	|		КОГДА Начисления.ВидРасчета.СпособРасчета В (&ИндексируемыеСпособыРасчета)
	|			ТОГДА &КоэффициентИндексацииЗаработка
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Показатель1
	|ИЗ
	|	Начисления КАК Начисления";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат=Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ формирования движений кадровых документов по плановым начислениям работников организации

// Функция формирует часть текста запроса по проверке плановых начислений штатному расписанию.
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   часть текста запроса
//
Функция СформироватьТекстЗапросаПоПроверкеСоответствияШтатномуРасписанию() 
	
	Возврат 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТЧНачисления.ЗанимаемыхСтавок <> 1
		|			ТОГДА ИСТИНА
		|		КОГДА ТЧНачисления.ЗачетОтработанногоВремени
		|				И ТЧНачисления.Действие В (ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать), ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Изменить))
		|			ТОГДА ВЫБОР
		|					КОГДА ТЧНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.удуСпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.удуСпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
		|						ТОГДА ВЫБОР
		|								КОГДА ТЧНачисления.Показатель1 = ШтатноеРасписаниеОрганизаций.МесячнаяСтавка
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазмерСоответствуетШТР
		|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|		ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ТЧНачисления.Должность КАК Должность,
		|		ТЧНачисления.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|		ТЧНачисления.Показатель1 КАК Показатель1,
		|		ТЧНачисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|		ТЧНачисления.СпособРасчета КАК СпособРасчета,
		|		ТЧНачисления.Действие КАК Действие,
		|		МАКСИМУМ(ШтатноеРасписаниеОрганизаций.Период) КАК ПериодШтР
		|	ИЗ
		|		ВТДанныеОНачислениях КАК ТЧНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
		|			ПО ТЧНачисления.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
		|				И ТЧНачисления.Должность = ШтатноеРасписаниеОрганизаций.Должность
		|				И ТЧНачисления.Период >= ШтатноеРасписаниеОрганизаций.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТЧНачисления.ПодразделениеОрганизации,
		|		ТЧНачисления.Должность,
		|		ТЧНачисления.ЗанимаемыхСтавок,
		|		ТЧНачисления.Показатель1,
		|		ТЧНачисления.ЗачетОтработанногоВремени,
		|		ТЧНачисления.СпособРасчета,
		|		ТЧНачисления.Действие,
		|		ТЧНачисления.НомерСтроки) КАК ТЧНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
		|		ПО ТЧНачисления.ПериодШтР = ШтатноеРасписаниеОрганизаций.Период
		|			И ТЧНачисления.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
		|			И ТЧНачисления.Должность = ШтатноеРасписаниеОрганизаций.Должность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
	
КонецФункции // СформироватьТекстЗапросаПоПроверкеСоответствияШтатномуРасписанию()

// Функция формирует запрос по плановым начислениям.
//
// Параметры
//  ДанныеОНачислениях		– таблица значений с данными по начислениям
//  ПроверкаШтатногоРасписания	– признак проверки на соответствие штатному расписанию
//  ДанныеПлановыхНачислений	– данные о плановых начислениях
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   – выборка из результата запроса
//
Функция СформироватьЗапросПоПлановымНачислениям(ДанныеОНачислениях, ПроверкаШтатногоРасписания, ДанныеПлановыхНачислений = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеОНачислениях", ДанныеОНачислениях);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ЗанимаемыхСтавок,
	|	ТЧНачисления.ГрафикРаботы,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчетаИзмерение,
	|	ТЧНачисления.СпособРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.Показатель1
	|ПОМЕСТИТЬ ВТДанныеОНачислениях
	|ИЗ
	|	&ДанныеОНачислениях КАК ТЧНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();	
	
	// Временная таблица с результатами проверки штатного расписания.
	Если ПроверкаШтатногоРасписания Тогда
		Запрос.Текст =  СформироватьТекстЗапросаПоПроверкеСоответствияШтатномуРасписанию();
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА КАК РазмерСоответствуетШТР
		|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
	КонецЕсли;
	Запрос.Выполнить();	
	
	// Временная таблица с данными плановых начислений по состоянию до изменения.
	Если ДанныеПлановыхНачислений = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|ГДЕ
		|	(ТЧНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать)
		|			ИЛИ ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Изменить))";
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|	ТЧОсновныеНачисления.ВидРасчета КАК ПрежнийВидРасчета,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель1,
			|	НЕОПРЕДЕЛЕНО КАК КонфликтныйДокумент,
			|	НЕОПРЕДЕЛЕНО КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|ГДЕ
			|	(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать)
			|			ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Изменить))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДатыНачислений.НомерСтроки КАК НомерСтроки,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета КАК ПрежнийВидРасчета,
			|	ПлановыеНачисленияРаботниковОрганизаций.Показатель1 КАК ПрежнийПоказатель1,
			|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор КАК КонфликтныйДокумент,
			|	ДатыНачислений.ПериодНачислений КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ТЧОсновныеНачисления.Период КАК Период,
			|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ КАК ВидРасчетаИзмерение,
			|		МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК ПериодНачислений
			|	ИЗ
			|		ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|			ПО ТЧОсновныеНачисления.Период >= ПлановыеНачисленияРаботниковОрганизаций.Период
			|				И ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ВЫБОР
			|					КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|						ТОГДА НЕОПРЕДЕЛЕНО
			|					ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|				КОНЕЦ = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение)
			|	ГДЕ
			|		(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать)
			|				ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Изменить))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТЧОсновныеНачисления.НомерСтроки,
			|		ТЧОсновныеНачисления.ВидРасчета,
			|		ТЧОсновныеНачисления.Период,
			|		ТЧОсновныеНачисления.Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ) КАК ДатыНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ПО ДатыНачислений.ПериодНачислений = ПлановыеНачисленияРаботниковОрганизаций.Период
			|			И ДатыНачислений.ВидРасчетаИзмерение = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение
			|			И ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("ДанныеПлановыхНачислений", ДанныеПлановыхНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧОсновныеНачисления.ПрежнийВидРасчета,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель1,
		|	ТЧОсновныеНачисления.КонфликтныйДокумент,
		|	ТЧОсновныеНачисления.ДатаДвижения
		|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
		|ИЗ
		|	&ДанныеПлановыхНачислений КАК ТЧОсновныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	Запрос.Выполнить();	
	
	// Временная таблица с описанием показателей.
	// В основном запросе собираем в единой выборке подготовленные ранее данные.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|ПОМЕСТИТЬ ВТДвойныеСтроки
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОНачислениях КАК ТЧНачисления2
	|		ПО (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|				ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|			И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|			И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|			И ТЧНачисления.Период = ТЧНачисления2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Организация КАК ОрганизацияСотрудника,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ЗачетОтработанногоВремени, ЛОЖЬ) КАК ОсновноеНачисление,
	|	ТЧНачисления.Показатель1,
	|	ДанныеШтатногоРасписания.РазмерСоответствуетШТР,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийВидРасчета
	|	КОНЕЦ КАК ВидРасчетаЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчетаЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель1
	|	КОНЕЦ КАК Показатель1Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета КАК ПрежнийСпособРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель1,
	|	ДанныеОПрежнихНачислениях.КонфликтныйДокумент,
	|	ДанныеОПрежнихНачислениях.ДатаДвижения,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеШтатногоРасписания КАК ДанныеШтатногоРасписания
	|		ПО ТЧНачисления.НомерСтроки = ДанныеШтатногоРасписания.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПрежнихНачислениях КАК ДанныеОПрежнихНачислениях
	|		ПО ТЧНачисления.НомерСтроки = ДанныеОПрежнихНачислениях.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвойныеСтроки КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

// Процедура формирует движения по плановым начислениям.
//
// Параметры
//  Движение		– запись
//  ВыборкаПоШапкеДокумента	– выборка по шапке документа
//  ВыборкаСтрокЗапроса	– выборка по табличной части документа
//
// Возвращаемое значение:
//
Процедура СформироватьДвижениеПоПлановымНачислениям(Движение, ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса) Экспорт

	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение	= ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;
	Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
	
	СтрокаПолей = "Период,Сотрудник,Действие,ВидРасчета";
	
	Если ВыборкаСтрокЗапроса.Действие <> Перечисления.удуВидыДействияСНачислением.Прекратить Тогда
		
		СтрокаПолей =СтрокаПолей +",Показатель1";
				
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаСтрокЗапроса, СтрокаПолей);

КонецПроцедуры

// Функция выполняет проверку показателей.
//
// Параметры
//  ВыборкаПоСтрокамДокумента - выборка из результата запроса
//  СтрокаНачалаСообщенияОбОшибке - текст начального сообщения об ошибке
//  ЭтоНачисление - признак начисления
//  Отказ - флаг отказа от проведения
//
// Возвращаемое значение:
// СписокОшибок - список ошибок
//
Функция ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, ЭтоНачисление, Отказ) Экспорт
	
	СписокОшибок=Новый Массив;
	
	// Размер оплаты
	Если  ВыборкаПоСтрокамДокумента.Действие <> Перечисления.удуВидыДействияСНачислением.Прекратить И удуПроцедурыУправленияПерсоналом.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
		Если ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 Тогда
			СписокОшибок.Добавить(СтрокаНачалаСообщенияОбОшибке + "не указан размер начисления!");
		КонецЕсли;
	КонецЕсли;

	
	Возврат СписокОшибок;
	
КонецФункции //ПроверкаПоказателей



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ "Обработка табличных частей"

Процедура ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСотрудникФизлицо = Новый Соответствие;
	ПустоеФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ПустойСотрудник = Справочники.удуСотрудникиОрганизаций.ПустаяСсылка();
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник И СтрокаТабличнойЧасти.Физлицо = ПустоеФизлицо Тогда
				СоответствиеСотрудникФизлицо.Вставить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	МассивСотрудников = Новый Массив;
	Для Каждого ЭлементСоответствия Из СоответствиеСотрудникФизлицо Цикл
		МассивСотрудников.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", МассивСотрудников);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеСотрудникФизлицо.Вставить(Выборка.Сотрудник, Выборка.Физлицо);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписыватьТабличнуюЧасть = Ложь;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник И СтрокаТабличнойЧасти.Физлицо = ПустоеФизлицо Тогда
				СтрокаТабличнойЧасти.Физлицо = СоответствиеСотрудникФизлицо.Получить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним табличную часть ФизическиеЛица
	ЗаполнитьТабличнуюЧастьФизическиеЛица(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры // ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти()

Процедура ЗаполнитьТабличнуюЧастьФизическиеЛица(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.Метаданные().ТабличныеЧасти.Найти("ФизическиеЛица") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СоответствиеФизлица = Новый Соответствие;
	
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			СоответствиеФизлица.Вставить(СтрокаТабличнойЧасти.Физлицо, "");
		КонецЦикла;
	КонецЦикла;

	Формировать = Ложь;
	Если СоответствиеФизлица.Количество() = Источник.ФизическиеЛица.Количество() Тогда
		Для Каждого Строка Из Источник.ФизическиеЛица Цикл
			Если СоответствиеФизлица[Строка.ФизическоеЛицо] = НеОпределено Тогда
				Формировать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Формировать = Истина;
	КонецЕсли;
	
	Если Формировать Тогда
		Источник.ФизическиеЛица.Очистить();
		Для Каждого ЭлементСтруктуры Из СоответствиеФизлица Цикл
			Строка = Источник.ФизическиеЛица.Добавить();
			Строка.ФизическоеЛицо = ЭлементСтруктуры.Ключ;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	
