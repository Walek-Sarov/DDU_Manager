////////////////////////////////////////////////////////////////////////////////
// ОчередьЗаданий: Работа с неразделенными регламентными заданиями.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Производит планирование выполнения заданий из РС ОчередьЗаданий 
// 
Процедура ПланированиеОбработкиЗаданий() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьЗаданий.ОбластьДанных,
	|	ОчередьЗаданий.Задание,
	|	ОчередьЗаданий.Использование,
	|	ОчередьЗаданий.ЗапланированныйМоментЗапуска,
	|	ОчередьЗаданий.СостояниеЗадания,
	|	ОчередьЗаданий.ИсполняющееФоновоеЗадание,
	|	ОчередьЗаданий.ЭксклюзивноеВыполнение,
	|	ОчередьЗаданий.НомерПопытки,
	|	ОчередьЗаданий.РегламентноеЗадание,
	|	ОчередьЗаданий.ИмяМетода,
	|	ОчередьЗаданий.Параметры,
	|	ОчередьЗаданий.ДатаНачалаПоследнегоЗапуска,
	|	ОбластиДанных.ЧасовойПояс
	|ИЗ
	|	РегистрСведений.ОчередьЗаданий КАК ОчередьЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|		ПО ОчередьЗаданий.ОбластьДанных = ОбластиДанных.ОбластьДанных
	|ГДЕ
	|	ОчередьЗаданий.СостояниеЗадания В (ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Выполняется), ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Завершено), ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.НеЗапланировано))";
	
	КоличествоПопыток = 0;
	Результат = Неопределено;
	Пока КоличествоПопыток < 5 Цикл
		Попытка
			Результат = Запрос.Выполнить();
			Прервать;
		Исключение
			КоличествоПопыток = КоличествоПопыток + 1;
			Если КоличествоПопыток = 5 Тогда
				ЗаписьЖурналаРегистрации(НСтр("Очередь заданий.Планирование обработки заданий"), УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	
	СоответствиеРегламентныеЗадания = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ЧасовойПояс) Тогда
			ЧасовойПояс = Выборка.ЧасовойПояс;
		Иначе
			ЧасовойПояс = Неопределено;
		КонецЕсли;
		
		Попытка
			КлючЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьКлючЗаписи(Новый Структура("ОбластьДанных, Задание", Выборка.ОбластьДанных, Выборка.Задание));
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		Исключение
			// Запись заблокирована, перейти к следующей
			Продолжить;
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.ОчередьЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбластьДанных.Установить(Выборка.ОбластьДанных);
		НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		Если ЗначениеЗаполнено(Запись.РегламентноеЗадание) Тогда
			Если СоответствиеРегламентныеЗадания[Запись.РегламентноеЗадание] = Неопределено Тогда
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Запись.РегламентноеЗадание);
				Если РегламентноеЗадание <> Неопределено Тогда
					СоответствиеРегламентныеЗадания.Вставить(Запись.РегламентноеЗадание, РегламентноеЗадание);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Запись.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется Тогда
			ЗаписьКонтроляВыполнения("ОчередьРегламентныхЗаданий.ЗавершеноСОшибками", Запись);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.РегламентноеЗадание)Тогда
			РегламентноеЗадание = СоответствиеРегламентныеЗадания[Запись.РегламентноеЗадание];
			Если РегламентноеЗадание <> Неопределено Тогда
				
				НомерПопытки = Запись.НомерПопытки + 1;
				Если Запись.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется
					И НомерПопытки < РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении Тогда
					
					Запись.ЗапланированныйМоментЗапуска = ТекущаяУниверсальнаяДата();
					Запись.НомерПопытки                 = НомерПопытки;
					Запись.СостояниеЗадания             = Перечисления.СостоянияЗаданий.Запланировано;
					Запись.ИсполняющееФоновоеЗадание    = Неопределено;
				Иначе
					Запись.ЗапланированныйМоментЗапуска = ПолучитьЗапланированныйМоментЗапускаЗадания(
						РегламентноеЗадание.Расписание, ЧасовойПояс, Запись.ДатаНачалаПоследнегоЗапуска);
					Запись.НомерПопытки                 = 0;
					Если ЗначениеЗаполнено(Запись.ЗапланированныйМоментЗапуска) Тогда
						Запись.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
					Иначе
						Запись.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
					КонецЕсли;
					Запись.ИсполняющееФоновоеЗадание    = Неопределено;
				КонецЕсли;
			КонецЕсли;			
		Иначе
			// Это фоновое задание, после выполнения подлежит удалению
			НаборЗаписей.Очистить();
		КонецЕсли;
		НаборЗаписей.Записать();
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	КонецЦикла;

	// Вычисление количество требуемых исполняющих фоновых заданий
	КоличествоЗапускаемыхФоновыхЗаданий = КоличествоИсполняющихФоновыхЗаданийКЗапуску();
	
	// Запуск исполняющих фоновых заданий
	ЗапуститьИсполняющееФоновоеЗадание(КоличествоЗапускаемыхФоновыхЗаданий);
	
КонецПроцедуры

// Возвращает текст ошибки при попытке выполнить одновременно два задания с одним ключом.
//
// Возвращаемое значение:
// Строка.
//
Функция ПолучитьТекстИсключенияДублированиеЗаданийСОдинаковымКлючом() Экспорт
	
	Возврат НСтр("ru = 'Дублирование заданий с одинаковым значения поля ''Ключ'' не допустимо.'");
	
КонецФункции

// Процедура выполняет задания из РС ОчередьЗаданий 
// 
// Параметры: 
// КлючФоновогоЗадания - УникальныйИдентификатор - ключь необходим 
//                       для поиска текущего фонового задания.
//
Процедура ОбработатьОчередьЗаданий(КлючФоновогоЗадания) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	НайденноеФоновоеЗадание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ", КлючФоновогоЗадания));
	Если НайденноеФоновоеЗадание.Количество() = 1 Тогда
		ИсполняющееФоновоеЗадание = НайденноеФоновоеЗадание[0];
	Иначе
		Возврат;
	КонецЕсли;	
	
	МожноВыполнять = Истина;
	НачалоВыполнения = ТекущаяУниверсальнаяДата();
	
	Пока МожноВыполнять Цикл 
		// Выбор задания для исполнения
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 111
		|	ОчередьЗаданий.ОбластьДанных,
		|	ОчередьЗаданий.Задание КАК Задание,
		|	ОчередьЗаданий.Использование,
		|	ОчередьЗаданий.ЗапланированныйМоментЗапуска КАК ЗапланированныйМоментЗапуска,
		|	ОчередьЗаданий.СостояниеЗадания,
		|	ОчередьЗаданий.ИсполняющееФоновоеЗадание,
		|	ОчередьЗаданий.ЭксклюзивноеВыполнение КАК ЭксклюзивноеВыполнение,
		|	ОчередьЗаданий.НомерПопытки,
		|	ОчередьЗаданий.РегламентноеЗадание,
		|	ОчередьЗаданий.ИмяМетода,
		|	ОчередьЗаданий.Параметры,
		|	ОчередьЗаданий.ДатаНачалаПоследнегоЗапуска
		|ИЗ
		|	РегистрСведений.ОчередьЗаданий КАК ОчередьЗаданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСеансовОбластиДанных КАК БлокировкиСеансов
		|		ПО ОчередьЗаданий.ОбластьДанных = БлокировкиСеансов.ОбластьДанных
		|ГДЕ
		|	ОчередьЗаданий.Использование
		|	И ОчередьЗаданий.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата
		|	И ОчередьЗаданий.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
		|	И (ОчередьЗаданий.ЭксклюзивноеВыполнение
		|			ИЛИ БлокировкиСеансов.ОбластьДанных ЕСТЬ NULL 
		|			ИЛИ БлокировкиСеансов.НачалоБлокировки > &ТекущаяУниверсальнаяДата
		|			ИЛИ БлокировкиСеансов.КонецБлокировки < &ТекущаяУниверсальнаяДата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭксклюзивноеВыполнение УБЫВ,
		|	ЗапланированныйМоментЗапуска,
		|	Задание";
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		
		РазмерВыборкиТекст = Формат(Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить(), "ЧН=; ЧГ=");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111", РазмерВыборкиТекст);
		
		КоличествоПопыток = 0;
		Выборка = Неопределено;
		Пока КоличествоПопыток < 5 Цикл
			Попытка
				Выборка = Запрос.Выполнить().Выбрать();
				Прервать;
			Исключение
				КоличествоПопыток = КоличествоПопыток + 1;
				Если КоличествоПопыток = 5 Тогда
					ЗаписьЖурналаРегистрации(НСтр("Очередь заданий.Исполнение заданий"), УровеньЖурналаРегистрации.Ошибка, , ,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		
		БлокировкаУстановлена = Ложь;
		Пока Выборка.Следующий() Цикл 
			Попытка
				КлючЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьКлючЗаписи(Новый Структура("ОбластьДанных, Задание", Выборка.ОбластьДанных, Выборка.Задание));
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
				БлокировкаУстановлена = Истина;
				
				Задание       = Выборка.Задание;
				ОбластьДанных = Выборка.ОбластьДанных;
				Прервать;
			Исключение
			КонецПопытки;
		КонецЦикла;	
		
		Если Не БлокировкаУстановлена Тогда 
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЗаданий");
			ЭлементБлокировки.УстановитьЗначение("ОбластьДанных", ОбластьДанных);
			ЭлементБлокировки.УстановитьЗначение("Задание"      , Задание);
			Блокировка.Заблокировать(); 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОчередьЗаданий.ОбластьДанных,
			|	ОчередьЗаданий.Задание,
			|	ОчередьЗаданий.Использование,
			|	ОчередьЗаданий.ЗапланированныйМоментЗапуска,
			|	ОчередьЗаданий.СостояниеЗадания,
			|	ОчередьЗаданий.ИсполняющееФоновоеЗадание,
			|	ОчередьЗаданий.ЭксклюзивноеВыполнение,
			|	ОчередьЗаданий.НомерПопытки,
			|	ОчередьЗаданий.РегламентноеЗадание,
			|	ОчередьЗаданий.ИмяМетода,
			|	ОчередьЗаданий.Параметры,
			|	ОчередьЗаданий.ДатаНачалаПоследнегоЗапуска
			|ИЗ
			|	РегистрСведений.ОчередьЗаданий КАК ОчередьЗаданий
			|ГДЕ
			|	ОчередьЗаданий.ОбластьДанных = &ОбластьДанных
			|	И ОчередьЗаданий.Задание = &Задание
			|	И ОчередьЗаданий.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
			|	И ОчередьЗаданий.Использование
			|	И ОчередьЗаданий.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата";
			
			Запрос.УстановитьПараметр("ОбластьДанных"           , ОбластьДанных);
			Запрос.УстановитьПараметр("Задание"                 , Задание);
			Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
				НаборЗаписей = РегистрыСведений.ОчередьЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ОбластьДанных.Установить(ОбластьДанных);
				НаборЗаписей.Отбор.Задание.Установить(Задание);
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				НоваяЗапись.СостояниеЗадания            = Перечисления.СостоянияЗаданий.Выполняется;
				НоваяЗапись.ИсполняющееФоновоеЗадание   = ИсполняющееФоновоеЗадание.УникальныйИдентификатор;
				НоваяЗапись.ДатаНачалаПоследнегоЗапуска = ТекущаяУниверсальнаяДата();
				
				НаборЗаписей.Записать();
			Иначе
				Возврат;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка очереди заданий'"), 
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
		//-1 - признак того, что задание исполняется без разделителя
		Если ОбластьДанных <> -1 Тогда
			УстановитьПривилегированныйРежим(Истина);
		
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		// Выполнение задания
		Попытка
			ЗаписьКонтроляВыполнения("ОчередьРегламентныхЗаданий.Старт", НаборЗаписей[0]);
			
			ВыполнитьЗадание(Выборка.ИмяМетода, Выборка.Параметры.Получить());
			
			ЗаписьКонтроляВыполнения("ОчередьРегламентныхЗаданий.ЗавершеноУспешно", НаборЗаписей[0]);
		Исключение
			ЗаписьКонтроляВыполнения("ОчередьРегламентныхЗаданий.ЗавершеноСОшибками", НаборЗаписей[0]);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание. Ошибка выполнения'"), УровеньЖурналаРегистрации.Ошибка, ,
				ИсполняющееФоновоеЗадание, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
				
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЗаданий");
			ЭлементБлокировки.УстановитьЗначение("ОбластьДанных", ОбластьДанных);
			ЭлементБлокировки.УстановитьЗначение("Задание"      , Задание);
			Блокировка.Заблокировать(); 
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда // иначе - задание могло быть удалено внутри обработчика
				НаборЗаписей[0].СостояниеЗадания = Перечисления.СостоянияЗаданий.Завершено;
				НаборЗаписей.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
		// Проверка возможности дальнейшего выполения
		КоличествоРаботающихФоновыхЗаданий = КоличествоИсполняющихФоновыхЗаданий();
		
		ДлительностьВыполнения = ТекущаяУниверсальнаяДата() - НачалоВыполнения;
		Если ДлительностьВыполнения > Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Получить()
			ИЛИ КоличествоРаботающихФоновыхЗаданий > Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить() Тогда
			
			МожноВыполнять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет РС "РазделенныеРегламентныеЗадания" списком разделенных регламентных заданий,
// а также принудительно снимает признак Использования для этих заданий в системной таблице регламентных заданий.
// 
Процедура ОбновитьРазделенныеРегламентныеЗадания() Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Регламентные задание необходимо получать в неразделенном режиме.
	// Сохранение текущего состояния.
	ТекущееСостояние = ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	Если ТекущееСостояние Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ТаблицаИспользованияРегламентныхЗаданий = ПолучитьТаблицуИспользованияРегламентныхЗаданий();
		
		Для Каждого Строка Из ТаблицаИспользованияРегламентныхЗаданий Цикл
			
			Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания[Строка.РегламентноеЗадание]);
			НайденныеРегламентыеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
			
			Для каждого РегламентноеЗадание Из НайденныеРегламентыеЗадания Цикл
				РегламентноеЗадание.Использование = Строка.Использование;
				РегламентноеЗадание.Записать();
			КонецЦикла;
			
		КонецЦикла;
		
		// Если включено разделение, необходимо отключить разделенные регламентные задания
		// и заполнить регистр РазделенныеРегламентныеЗадания.
		ТаблицаНеразделенныхРегламентныхЗаданий = Новый ТаблицаЗначений;
		ТаблицаНеразделенныхРегламентныхЗаданий.Колонки.Добавить("РегламентноеЗадание"    , Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаНеразделенныхРегламентныхЗаданий.Колонки.Добавить("Использование"          , Новый ОписаниеТипов("Булево"));
		ТаблицаНеразделенныхРегламентныхЗаданий.Колонки.Добавить("ИндивидуальнаяНастройка", Новый ОписаниеТипов("Булево"));
		
		СписокРазделенныхРегламентныхЗаданий = ПолучитьСписокРазделенныхРегламентныхЗаданий();
		
		Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
		Для Каждого Задание Из Задания Цикл
			Если СписокРазделенныхРегламентныхЗаданий.Найти(Задание.Метаданные.Имя) <> Неопределено Тогда
				НоваяСтрока = ТаблицаНеразделенныхРегламентныхЗаданий.Добавить();
				НоваяСтрока.РегламентноеЗадание = Задание.УникальныйИдентификатор;
				НоваяСтрока.Использование       = Задание.Метаданные.Использование;
				
				Задание.Использование = Ложь;
				Задание.Записать();
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.РазделенныеРегламентныеЗадания.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ИсходнаяТаблицаЗаданий = НаборЗаписей.Выгрузить();
		Для каждого СтрокаТаблицы Из ТаблицаНеразделенныхРегламентныхЗаданий Цикл
			ИсходнаяСтрокаЗадания = ИсходнаяТаблицаЗаданий.Найти(СтрокаТаблицы.РегламентноеЗадание, "РегламентноеЗадание");
			Если ИсходнаяСтрокаЗадания <> Неопределено Тогда
				СтрокаТаблицы.Использование           = ИсходнаяСтрокаЗадания.Использование;
				СтрокаТаблицы.ИндивидуальнаяНастройка = ИсходнаяСтрокаЗадания.ИндивидуальнаяНастройка;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Загрузить(ТаблицаНеразделенныхРегламентныхЗаданий);
		НаборЗаписей.Записать();
		
		// Восставновление состояния параметра сеанса
		Если ТекущееСостояние <> ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
			ОбщегоНазначения.УстановитьРазделениеСеанса(ТекущееСостояние);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление разделенных регламентных заданий'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Синхронизирует РС "ОчередьЗаданий" с заданиями в РС "РазделенныеРегламентныеЗадания".
// Если в РС "РазделенныеРегламентныеЗадания" добавлено регламентное задание, 
// то производится добавление этого задания в РС "ОчередьЗаданий".
// Если регламентное задание удалено, то из РС "ОчередьЗаданий" задание также удалется.
// Также синхронизуется признак Использования задания.
// Функция производит синхронизацию в текущей области данных.
//
// Параметры: 
// ОбластьДанных - Число - Если параметр задан, 
//                 то обновление производится в соответствующей ему области данных, 
//                 иначе в текущей области данных.
//
Процедура ОбновитьОчередьЗаданий(ОбластьДанных = Неопределено) Экспорт 
	
	Если НЕ ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено Тогда
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	ЧасовойПояс = ПолучитьЧасовойПоясОбластиДанных(ОбластьДанных);
	
	СписокРегламентныхЗаданийИндивидуальнаяНастройка = Новый Массив;
		
	// Регламентные задание необходимо получать в неразделенном режиме
	ТекущееСостояние = ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	Если ТекущееСостояние Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
	СписокРегламентныхЗаданий = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазделенныеРегламентныеЗадания.РегламентноеЗадание,
	|	РазделенныеРегламентныеЗадания.Использование,
	|	РазделенныеРегламентныеЗадания.ИндивидуальнаяНастройка
	|ИЗ
	|	РегистрСведений.РазделенныеРегламентныеЗадания КАК РазделенныеРегламентныеЗадания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Выборка.РегламентноеЗадание);
		Если РегламентноеЗадание <> Неопределено Тогда
			СписокРегламентныхЗаданий.Добавить(РегламентноеЗадание,, Выборка.Использование);
			
			Если Выборка.ИндивидуальнаяНастройка Тогда
				СписокРегламентныхЗаданийИндивидуальнаяНастройка.Добавить(Выборка.РегламентноеЗадание);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		// Удаление существующих регламентных заданий в РС ОчередьЗаданий
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьЗаданий.ОбластьДанных,
		|	ОчередьЗаданий.Задание,
		|	ОчередьЗаданий.РегламентноеЗадание
		|ИЗ
		|	РегистрСведений.ОчередьЗаданий КАК ОчередьЗаданий
		|ГДЕ
		|	ОчередьЗаданий.РегламентноеЗадание <> &ПустойУникальныйИдентификатор
		|	И ОчередьЗаданий.ОбластьДанных = &ОбластьДанных";
		Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		Запрос.УстановитьПараметр("ОбластьДанных"                , ОбластьДанных);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		МенеджерЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьМенеджерЗаписи();
		
		Пока Выборка.Следующий() Цикл
			КлючЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьКлючЗаписи(Новый Структура("ОбластьДанных, Задание",
				Выборка.ОбластьДанных, Выборка.Задание));
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		КонецЦикла;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЗаданий");
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбластьДанных", "ОбластьДанных");			
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Задание"      , "Задание");
		Блокировка.Заблокировать();
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Если СписокРегламентныхЗаданийИндивидуальнаяНастройка.Найти(Выборка.РегламентноеЗадание) = Неопределено Тогда
				МенеджерЗаписи.ОбластьДанных = Выборка.ОбластьДанных;
				МенеджерЗаписи.Задание       = Выборка.Задание;
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		// Добавление заданий в РС ОчередьЗаданий в соответствии со списком регламентных заданий из РС РазделенныеРегламентныеЗадания
		Для Каждого РегламентноеЗадание Из СписокРегламентныхЗаданий Цикл
			Расписание = РегламентноеЗадание.Значение.Расписание;
			Если РегламентноеЗадание <> Неопределено
				И СписокРегламентныхЗаданийИндивидуальнаяНастройка.Найти(РегламентноеЗадание.Значение.УникальныйИдентификатор) = Неопределено Тогда
				Задание = Новый УникальныйИдентификатор;
				
				НовыйНаборЗаписей = РегистрыСведений.ОчередьЗаданий.СоздатьНаборЗаписей();
				НовыйНаборЗаписей.Отбор.ОбластьДанных.Установить(ОбластьДанных);
				НовыйНаборЗаписей.Отбор.Задание.Установить(Задание);
				
				НоваяЗапись = НовыйНаборЗаписей.Добавить();
				НоваяЗапись.ОбластьДанных                = ОбластьДанных;
				НоваяЗапись.Задание                      = Задание;
				НоваяЗапись.Использование                = РегламентноеЗадание.Пометка;
				НоваяЗапись.РегламентноеЗадание          = РегламентноеЗадание.Значение.УникальныйИдентификатор;	
				НоваяЗапись.Ключ                         = РегламентноеЗадание.Значение.Ключ;
				НоваяЗапись.Параметры                    = Новый ХранилищеЗначения(РегламентноеЗадание.Значение.Параметры);
				НоваяЗапись.ИмяМетода                    = РегламентноеЗадание.Значение.Метаданные.ИмяМетода;
				НоваяЗапись.ЗапланированныйМоментЗапуска = ПолучитьЗапланированныйМоментЗапускаЗадания(Расписание, ЧасовойПояс);
				
				// Если запланированный момент запуска не задан, то задание считается не запланированным (выполняться не будет).
				Если ЗначениеЗаполнено(НоваяЗапись.ЗапланированныйМоментЗапуска) Тогда
					НоваяЗапись.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
				Иначе
					НоваяЗапись.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
				КонецЕсли;
				
				КлючЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьКлючЗаписи(Новый Структура("ОбластьДанных, Задание",
					НоваяЗапись.ОбластьДанных, НоваяЗапись.Задание));
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
				
				НовыйНаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление очереди заданий'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	// Восставновление состояния параметра сеанса
	Если ТекущееСостояние Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(ТекущееСостояние);
	КонецЕсли;
	
КонецПроцедуры

// Получает задания для области данных по отбору. 
// 
// Параметры: 
// Отбор         - Структура - Задает отбор. 
//                 Значениями структуры могут быть: 
//                 ИмяМетода, Задание, СостояниеЗадания, РегламентноеЗадание, Ключ
// ОбластьДанных - Число - задает область данных,
//                 для которой необходимо добавить новое задание.
// ОтборКроме	 - Структура; Неопределено - Реализует исключение по заданным значениям полей.
//					ИмяМетода 			- Строка;
//					РегламентноеЗадание - УникальныйИдентификатор;
//					СостояниеЗадания 	- ПеречислениеСсылка.СостоянияЗаданий;
//					Ключ 				- Строка;
//					Задание 			- Строка.
// 
// Возвращаемое значение: 
// Строка; Массив; Неопределено. 
// 	Строка       - Идентификатор задания, если найдено ровно одно задание.
// 	Массив       - заданий несколько.
// 	Неопределено - задание не найдено. 
// 
Функция ПолучитьЗадание(Отбор, ОбластьДанных = Неопределено, ОтборКроме = Неопределено) Экспорт
	
	Если ТипЗнч(Отбор) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
	КонецЕсли;
	Если Отбор.Свойство("Ключ") Тогда
		Если ТипЗнч(Отбор.Ключ) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Ключ'')'");
		КонецЕсли;	
	КонецЕсли;
	Если Отбор.Свойство("Метаданные") Тогда
		Если ТипЗнч(Отбор.Метаданные) <> Тип("Строка")
			И ТипЗнч(Отбор.Метаданные) <> Тип("ОбъектМетаданных") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Метаданные'')'");
		КонецЕсли;	
	КонецЕсли;
	Если Отбор.Свойство("РегламентноеЗадание") Тогда
		Если ТипЗнч(Отбор.РегламентноеЗадание) <> Тип("УникальныйИдентификатор") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''РегламентноеЗадание'')'");
		КонецЕсли;	
	КонецЕсли;
	Если Отбор.Свойство("ИмяМетода") Тогда
		Если ТипЗнч(Отбор.ИмяМетода) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''ИмяМетода'')'");
		КонецЕсли;	
	КонецЕсли;
	Если Отбор.Свойство("Задание") Тогда
		Если ТипЗнч(Отбор.Задание) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Задание'')'");
		КонецЕсли;	
	КонецЕсли;	
	Если ОтборКроме <> Неопределено И ТипЗнч(ОтборКроме) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''3'')'");
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено Тогда
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	Задания = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Отбор.Свойство("ИмяМетода") И ЗначениеЗаполнено(Отбор.ИмяМетода)
		ИЛИ Отбор.Свойство("РегламентноеЗадание") И ЗначениеЗаполнено(Отбор.РегламентноеЗадание) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьЗаданий.Задание
		|ИЗ
		|	РегистрСведений.ОчередьЗаданий КАК ОчередьЗаданий
		|ГДЕ
		|	ОчередьЗаданий.ОбластьДанных = &ОбластьДанных";
		Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
		
		// Сравнение на совпадение.
		
		Если Отбор.Свойство("ИмяМетода") И ЗначениеЗаполнено(Отбор.ИмяМетода) Тогда
			Запрос.Текст = Запрос.Текст + "	И ОчередьЗаданий.ИмяМетода = &ИмяМетода ";
			Запрос.УстановитьПараметр("ИмяМетода", Отбор.ИмяМетода);
		КонецЕсли;
		Если Отбор.Свойство("РегламентноеЗадание") И ЗначениеЗаполнено(Отбор.РегламентноеЗадание) Тогда 
			Запрос.Текст = Запрос.Текст + " И ОчередьЗаданий.РегламентноеЗадание = &РегламентноеЗадание ";
			Запрос.УстановитьПараметр("РегламентноеЗадание", Отбор.РегламентноеЗадание);
		КонецЕсли;
		Если Отбор.Свойство("СостояниеЗадания") И ЗначениеЗаполнено(Отбор.СостояниеЗадания) Тогда
			Запрос.Текст = Запрос.Текст + "	И ОчередьЗаданий.СостояниеЗадания = &СостояниеЗадания ";
			Запрос.УстановитьПараметр("СостояниеЗадания", Отбор.СостояниеЗадания);
		КонецЕсли;
		Если Отбор.Свойство("Ключ") И ЗначениеЗаполнено(Отбор.Ключ) Тогда 
			Запрос.Текст = Запрос.Текст + " И ОчередьЗаданий.Ключ = &Ключ ";
			Запрос.УстановитьПараметр("Ключ", Отбор.Ключ);
		КонецЕсли;
		Если Отбор.Свойство("Задание") И ЗначениеЗаполнено(Отбор.Задание) Тогда 
			Запрос.Текст = Запрос.Текст + " И ОчередьЗаданий.Задание = &Задание ";
			Запрос.УстановитьПараметр("Задание", Отбор.Задание);
		КонецЕсли;
		
		// Сравнение на несовпадение.
		
		Если ОтборКроме <> Неопределено Тогда
			Если ОтборКроме.Свойство("ИмяМетода") И ЗначениеЗаполнено(ОтборКроме.ИмяМетода) Тогда
				Запрос.Текст = Запрос.Текст + "	И ОчередьЗаданий.ИмяМетода <> &ИмяМетодаКИсключению ";
				Запрос.УстановитьПараметр("ИмяМетодаКИсключению", ОтборКроме.ИмяМетода);
			КонецЕсли;
			Если ОтборКроме.Свойство("РегламентноеЗадание") И ЗначениеЗаполнено(ОтборКроме.РегламентноеЗадание) Тогда 
				Запрос.Текст = Запрос.Текст + " И ОчередьЗаданий.РегламентноеЗадание <> &РегламентноеЗаданиеКИсключению ";
				Запрос.УстановитьПараметр("РегламентноеЗаданиеКИсключению", ОтборКроме.РегламентноеЗадание);
			КонецЕсли;
			Если ОтборКроме.Свойство("СостояниеЗадания") И ЗначениеЗаполнено(ОтборКроме.СостояниеЗадания) Тогда
				Запрос.Текст = Запрос.Текст + "	И ОчередьЗаданий.СостояниеЗадания <> &СостояниеЗаданияКИсключению ";
				Запрос.УстановитьПараметр("СостояниеЗаданияКИсключению", ОтборКроме.СостояниеЗадания);
			КонецЕсли;
			Если ОтборКроме.Свойство("Ключ") И ЗначениеЗаполнено(ОтборКроме.Ключ) Тогда
				Запрос.Текст = Запрос.Текст + "	И ОчередьЗаданий.Ключ <> &КлючКИсключению ";
				Запрос.УстановитьПараметр("КлючКИсключению", ОтборКроме.Ключ);
			КонецЕсли;
			Если ОтборКроме.Свойство("Задание") И ЗначениеЗаполнено(ОтборКроме.Задание) Тогда
				Запрос.Текст = Запрос.Текст + "	И ОчередьЗаданий.Задание <> &ЗаданиеКИсключению ";
				Запрос.УстановитьПараметр("ЗаданиеКИсключению", ОтборКроме.Задание);
			КонецЕсли;
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			СписокЗаданий = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Задание");
			Если СписокЗаданий.Количество() = 1 Тогда
				Задания = СписокЗаданий[0];
			Иначе
				Задания = СписокЗаданий;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Задания;
	
КонецФункции

// Добавляет новое задание в РС ОчередьЗаданий. 
// 
// Параметры: 
// ПараметрыЗадания - Структура - Параметры добавляемого задания:
// 		              Использование, ЗапланированныйМоментЗапуска, ИмяМетода, 
// 		              Параметры, ЭксклюзивноеВыполнение, РегламентноеЗадание 
// ОбластьДанных    - Число - задает область данных,
//                    для которой необходимо добавить новое задание.
// 
// Возвращаемое значение: 
// Строка. 
// Идентификатор добавленого задания. 
// 
Функция ДобавитьЗадание(ПараметрыЗадания, ОбластьДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("Использование") Тогда
		Если ТипЗнч(ПараметрыЗадания.Использование) <> Тип("Булево") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Использование'')'");
		Иначе
			Использование = ПараметрыЗадания.Использование;
		КонецЕсли;	
	Иначе
		Использование = Истина;
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("ЭксклюзивноеВыполнение") Тогда
		Если ТипЗнч(ПараметрыЗадания.ЭксклюзивноеВыполнение) <> Тип("Булево") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''ЭксклюзивноеВыполнение'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("Ключ") Тогда
		Если ТипЗнч(ПараметрыЗадания.Ключ) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Ключ'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("РегламентноеЗадание") Тогда
		Если ТипЗнч(ПараметрыЗадания.РегламентноеЗадание) <> Тип("УникальныйИдентификатор") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''РегламентноеЗадание'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("ИмяМетода") Тогда
		Если ТипЗнч(ПараметрыЗадания.ИмяМетода) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''ИмяМетода'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("ЗапланированныйМоментЗапуска") Тогда
		Если ТипЗнч(ПараметрыЗадания.ЗапланированныйМоментЗапуска) <> Тип("Дата") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''ЗапланированныйМоментЗапуска'')'");
		КонецЕсли;	
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено Тогда
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	Иначе
		Если Не ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() 
			И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
			ВызватьИсключение(НСтр("ru = 'В данном сеансе недопустимо обращение к данным из другой области данных!'"));
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Ключ") И ЗначениеЗаполнено(ПараметрыЗадания.Ключ) Тогда
		ОтборКроме = Новый Структура("СостояниеЗадания", Перечисления.СостоянияЗаданий.Завершено);
		Если ПолучитьЗадание(ПараметрыЗадания, ОбластьДанных, ОтборКроме) <> Неопределено Тогда // Не учитывать завершенные.
			ВызватьИсключение ПолучитьТекстИсключенияДублированиеЗаданийСОдинаковымКлючом();
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый ХранилищеЗначения(Новый Массив);
	Если ПараметрыЗадания.Свойство("Параметры") Тогда
		Если ТипЗнч(ПараметрыЗадания.Параметры) = Тип("ХранилищеЗначения") Тогда
			Параметры = ПараметрыЗадания.Параметры;
		ИначеЕсли ТипЗнч(ПараметрыЗадания.Параметры) = Тип("Массив") Тогда
			Параметры = Новый ХранилищеЗначения(ПараметрыЗадания.Параметры);
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗадания);
	МенеджерЗаписи.ОбластьДанных = ОбластьДанных;
	МенеджерЗаписи.Задание       = Новый УникальныйИдентификатор;
	
	ЧасовойПояс = ПолучитьЧасовойПоясОбластиДанных(ОбластьДанных);
	Если ЗначениеЗаполнено(МенеджерЗаписи.ЗапланированныйМоментЗапуска) Тогда
		МенеджерЗаписи.ЗапланированныйМоментЗапуска = УниверсальноеВремя(МенеджерЗаписи.ЗапланированныйМоментЗапуска, ЧасовойПояс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.ЗапланированныйМоментЗапуска) Тогда
		МенеджерЗаписи.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
	Иначе
		Если ЗначениеЗаполнено(МенеджерЗаписи.РегламентноеЗадание) Тогда 
			МенеджерЗаписи.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
		Иначе
			МенеджерЗаписи.ЗапланированныйМоментЗапуска = ТекущаяУниверсальнаяДата();
			МенеджерЗаписи.СостояниеЗадания             = Перечисления.СостоянияЗаданий.Запланировано;
		КонецЕсли;
	КонецЕсли;
	МенеджерЗаписи.Параметры     = Параметры;
	МенеджерЗаписи.Использование = Использование;
	МенеджерЗаписи.Записать();
	
	Возврат МенеджерЗаписи.Задание;
	
КонецФункции

// Добавляет новое задание в РС ОчередьЗаданий. 
// 
// Параметры: 
// Задание - Строка - Идентификатор задания
// ПараметрыЗадания - Структура - Параметры, которые следует установить заданию:
// 		              Использование, ЗапланированныйМоментЗапуска, ИмяМетода, 
// 		              Параметры, ЭксклюзивноеВыполнение, РегламентноеЗадание 
// ОбластьДанных    - Число - задает область данных,
//                    для которой необходимо добавить новое задание.
// 
// Возвращаемое значение: 
// Строка. 
// Идентификатор добавленого задания. 
// 
Процедура ИзменитьЗадание(Задание, ПараметрыЗадания, ОбластьДанных = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Задание) ИЛИ ТипЗнч(Задание) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗадания) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''2'')'");
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("Использование") Тогда
		Если ТипЗнч(ПараметрыЗадания.Использование) <> Тип("Булево") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''2'', свойство ''Использование'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("ЭксклюзивноеВыполнение") Тогда
		Если ТипЗнч(ПараметрыЗадания.ЭксклюзивноеВыполнение) <> Тип("Булево") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''2'', свойство ''ЭксклюзивноеВыполнение'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("Ключ") Тогда
		Если ТипЗнч(ПараметрыЗадания.Ключ) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''2'', свойство ''Ключ'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("РегламентноеЗадание") Тогда
		Если ТипЗнч(ПараметрыЗадания.РегламентноеЗадание) <> Тип("УникальныйИдентификатор") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''2'', свойство ''РегламентноеЗадание'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("ИмяМетода") Тогда
		Если ТипЗнч(ПараметрыЗадания.ИмяМетода) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''2'', свойство ''ИмяМетода'')'");
		КонецЕсли;	
	КонецЕсли;
	Если ПараметрыЗадания.Свойство("ЗапланированныйМоментЗапуска") Тогда
		Если ТипЗнч(ПараметрыЗадания.ЗапланированныйМоментЗапуска) <> Тип("Дата") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''2'', свойство ''ЗапланированныйМоментЗапуска'')'");
		КонецЕсли;	
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено Тогда
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Ключ") И ЗначениеЗаполнено(ПараметрыЗадания.Ключ) Тогда
		ОтборКроме = Новый Структура("Задание", Задание);
		Если ПолучитьЗадание(ПараметрыЗадания, ОбластьДанных, ОтборКроме) <> Неопределено Тогда // Не учитывать само изменяемое.
			ВызватьИсключение ПолучитьТекстИсключенияДублированиеЗаданийСОдинаковымКлючом();
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	КлючЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьКлючЗаписи(Новый Структура("ОбластьДанных, Задание", ОбластьДанных, Задание));
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	МенеджерЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбластьДанных = ОбластьДанных;
	МенеджерЗаписи.Задание       = Задание;
	МенеджерЗаписи.Прочитать();
	
    Если Не МенеджерЗаписи.Выбран() Тогда
		ШаблонСообщения = НСтр("ru = 'Задание %1 к изменению не найдено. Область: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Задание, ОбластьДанных);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗадания);
	
	Если ПараметрыЗадания.Свойство("Параметры") И ТипЗнч(ПараметрыЗадания.Параметры) = Тип("Массив") Тогда
		МенеджерЗаписи.Параметры = Новый ХранилищеЗначения(ПараметрыЗадания.Параметры);
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ЗапланированныйМоментЗапуска") 
		И ЗначениеЗаполнено(ПараметрыЗадания.ЗапланированныйМоментЗапуска) Тогда

		ЧасовойПояс = ПолучитьЧасовойПоясОбластиДанных(ОбластьДанных);
		МенеджерЗаписи.ЗапланированныйМоментЗапуска = УниверсальноеВремя(МенеджерЗаписи.ЗапланированныйМоментЗапуска, ЧасовойПояс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.ЗапланированныйМоментЗапуска) Тогда
		МенеджерЗаписи.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
	Иначе
		Если ЗначениеЗаполнено(МенеджерЗаписи.РегламентноеЗадание) Тогда 
			МенеджерЗаписи.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
		Иначе
			МенеджерЗаписи.ЗапланированныйМоментЗапуска = ТекущаяУниверсальнаяДата();
			МенеджерЗаписи.СостояниеЗадания             = Перечисления.СостоянияЗаданий.Запланировано;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет задания из РС ОчередьЗаданий. 
// 
// Параметры: 
// Задание       - Строка - Идентификатор задания
// ОбластьДанных - Число - задает область данных,
// 				   для которой необходимо добавить новое задание. 
// 
Процедура УдалитьЗадание(Задание, ОбластьДанных = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Задание) ИЛИ ТипЗнч(Задание) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено Тогда
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	КлючЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьКлючЗаписи(Новый Структура("ОбластьДанных, Задание", ОбластьДанных, Задание));
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	МенеджерЗаписи = РегистрыСведений.ОчередьЗаданий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбластьДанных = ОбластьДанных;
	МенеджерЗаписи.Задание       = Задание;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

// Осуществляет поиск регламентного задания по уникальному идентификатору.
// В разделенном режиме 
// 
// Параметры: 
// Идентификатор - УникальныйИдентификатор - Идентификатор 
//                 регламентного задания.
//
// Возвращаемое значение: 
// РегламентноеЗадание, Структура, Неопределено. 
// Для разделеного режима возвращается структура 
// со свойствами регламентного задания.
//
Функция НайтиПоУникальномуИдентификатору(Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("УникальныйИдентификатор") Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
	КонецЕсли;
	
	РегламентноеЗадание = Неопределено;
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		
		Отбор = Новый Структура("УникальныйИдентификатор", Идентификатор);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьЗаданий.ОбластьДанных,
		|	ОчередьЗаданий.Задание,
		|	ОчередьЗаданий.Использование,
		|	ОчередьЗаданий.ЗапланированныйМоментЗапуска,
		|	ОчередьЗаданий.СостояниеЗадания,
		|	ОчередьЗаданий.ИсполняющееФоновоеЗадание,
		|	ОчередьЗаданий.ЭксклюзивноеВыполнение,
		|	ОчередьЗаданий.НомерПопытки,
		|	ОчередьЗаданий.РегламентноеЗадание,
		|	ОчередьЗаданий.ИмяМетода,
		|	ОчередьЗаданий.Параметры,
		|	ОчередьЗаданий.ДатаНачалаПоследнегоЗапуска,
		|	ОчередьЗаданий.Ключ
		|ИЗ
		|	РегистрСведений.ОчередьЗаданий КАК ОчередьЗаданий
		|ГДЕ
		|	ОчередьЗаданий.ОбластьДанных = &ОбластьДанных
		|	И ОчередьЗаданий.РегламентноеЗадание = &РегламентноеЗадание";
		Запрос.УстановитьПараметр("РегламентноеЗадание", Идентификатор);
		Запрос.УстановитьПараметр("ОбластьДанных"      , ОбластьДанных);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			РегламентноеЗадание = Новый Структура;
			РегламентноеЗадание.Вставить("Задание"               , Выборка.Задание);
			РегламентноеЗадание.Вставить("Использование"         , Выборка.Использование);
			РегламентноеЗадание.Вставить("УникальныйИдентфикатор", Выборка.РегламентноеЗадание);
			РегламентноеЗадание.Вставить("ИмяМетода"             , Выборка.ИмяМетода);
			РегламентноеЗадание.Вставить("Ключ"                  , Выборка.Ключ);
			Если ТипЗнч(Выборка.Параметры) = Тип("ХранилищеЗначения") Тогда
				РегламентноеЗадание.Вставить("Параметры", Выборка.Параметры.Получить());
			Иначе
				РегламентноеЗадание.Вставить("Параметры", Новый Массив);
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Возвращает Истина, если разделенное регламентное задание с ключом РегламентноеЗаданиеGUID используется.
//
Функция РазделенноеРегламентноеЗаданиеИспользуется(РегламентноеЗаданиеGUID) Экспорт
	
	НаборЗаписей = РегистрыСведений.РазделенныеРегламентныеЗадания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РегламентноеЗадание.Установить(РегламентноеЗаданиеGUID);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат НаборЗаписей[0].Использование;
	КонецЕсли;
		
КонецФункции	

// Получает массив регламентных заданий по заданному отбору.
//
// Параметры:
// Отбор - Структура - Структура, задающая отбор. 
//         Значениями структуры могут быть: УникальныйИдентификатор, Ключ, 
//         Использование, Задание. 
//         Если отбор не задан, получаются все регламентные задания.
//
// Возвращаемое значение:
// Массив. 
//
Функция ПолучитьРегламентныеЗадания(Отбор, ОбластьДанных = Неопределено) Экспорт
	
	Если Отбор <> Неопределено Тогда
		Если ТипЗнч(Отбор) <> Тип("Структура") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
		КонецЕсли;
		Если Отбор.Свойство("Использование") Тогда
			Если ТипЗнч(Отбор.Использование) <> Тип("Булево") Тогда
				ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Использование'')'");
			КонецЕсли;	
		КонецЕсли;
		Если Отбор.Свойство("Ключ") Тогда
			Если ТипЗнч(Отбор.Ключ) <> Тип("Строка") Тогда
				ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Ключ'')'");
			КонецЕсли;	
		КонецЕсли;
		Если Отбор.Свойство("УникальныйИдентификатор") Тогда
			Если ТипЗнч(Отбор.УникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
				ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''УникальныйИдентификатор'')'");
			КонецЕсли;	
		КонецЕсли;
		Если Отбор.Свойство("Задание") Тогда
			Если ТипЗнч(Отбор.Задание) <> Тип("Строка") Тогда
				ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''Задание'')'");
			КонецЕсли;	
		КонецЕсли;
		Если Отбор.Свойство("ИмяМетода") Тогда
			Если ТипЗнч(Отбор.ИмяМетода) <> Тип("Строка") Тогда
				ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра (параметр номер ''1'', свойство ''ИмяМетода'')'");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	НайденныеРегламентныеЗадания = Новый Массив;
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда 
		Если ОбластьДанных = Неопределено Тогда
			ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		Иначе
			Если Не ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() 
				И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
				ВызватьИсключение(НСтр("ru = 'В данном сеансе недопустимо обращение к данным из другой области данных!'"));
			КонецЕсли;	
		КонецЕсли;
		
		РазделенныеРегламентныеЗадания = Новый Массив;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьЗаданий.ОбластьДанных,
		|	ОчередьЗаданий.Задание,
		|	ОчередьЗаданий.Использование,
		|	ОчередьЗаданий.ЗапланированныйМоментЗапуска,
		|	ОчередьЗаданий.СостояниеЗадания,
		|	ОчередьЗаданий.ИсполняющееФоновоеЗадание,
		|	ОчередьЗаданий.ЭксклюзивноеВыполнение,
		|	ОчередьЗаданий.НомерПопытки,
		|	ОчередьЗаданий.РегламентноеЗадание,
		|	ОчередьЗаданий.ИмяМетода,
		|	ОчередьЗаданий.Параметры,
		|	ОчередьЗаданий.ДатаНачалаПоследнегоЗапуска,
		|	ОчередьЗаданий.Ключ
		|ИЗ
		|	РегистрСведений.ОчередьЗаданий КАК ОчередьЗаданий
		|ГДЕ
		|	ОчередьЗаданий.ОбластьДанных = &ОбластьДанных";
		Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
		
		Если Отбор.Свойство("Использование") 
			ИЛИ Отбор.Свойство("Ключ") 
			ИЛИ Отбор.Свойство("УникальныйИдентификатор") 
			ИЛИ Отбор.Свойство("Задание")
			ИЛИ Отбор.Свойство("ИмяМетода") Тогда
			МассивСвойств = Новый Массив;
			МассивСвойств.Добавить("Использование");
			МассивСвойств.Добавить("Ключ");
			МассивСвойств.Добавить("УникальныйИдентификатор");
			МассивСвойств.Добавить("Задание");
			МассивСвойств.Добавить("ИмяМетода");
			Для Каждого Свойство Из МассивСвойств Цикл
				Если Отбор.Свойство(Свойство) Тогда 
					Если Свойство = "УникальныйИдентификатор" Тогда
						Запрос.Текст = Запрос.Текст + " И ОчередьЗаданий.РегламентноеЗадание = &УникальныйИдентификатор ";
					Иначе
						Запрос.Текст = Запрос.Текст + " И ОчередьЗаданий." + Свойство + " = &" + Свойство;
					КонецЕсли;
					Запрос.УстановитьПараметр(Свойство, Отбор[Свойство]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РегламентноеЗадание = Новый Структура;
			РегламентноеЗадание.Вставить("Задание"               , Выборка.Задание);
			РегламентноеЗадание.Вставить("Использование"         , Выборка.Использование);
			РегламентноеЗадание.Вставить("УникальныйИдентфикатор", Выборка.РегламентноеЗадание);
			РегламентноеЗадание.Вставить("ИмяМетода"             , Выборка.ИмяМетода);
			РегламентноеЗадание.Вставить("Ключ"                  , Выборка.Ключ);
			РегламентноеЗадание.Вставить("ДатаНачалаПоследнегоЗапуска", Выборка.ДатаНачалаПоследнегоЗапуска);
			Если ТипЗнч(Выборка.Параметры) = Тип("ХранилищеЗначения") Тогда
				РегламентноеЗадание.Вставить("Параметры", Выборка.Параметры.Получить());
			Иначе
				РегламентноеЗадание.Вставить("Параметры", Новый Массив);
			КонецЕсли;
			НайденныеРегламентныеЗадания.Добавить(РегламентноеЗадание);
		КонецЦикла;
	Иначе
		Если Не Отбор.Свойство("ИмяМетода") Тогда
			ВызватьИсключение НСтр("ru = 'Поиск регламентных заданий возможен только по ИмяМетода'");
		КонецЕсли;
		
		Для Каждого РегламентноеЗаданиеМетаданные Из Метаданные.РегламентныеЗадания Цикл
			Если ВРег(РегламентноеЗаданиеМетаданные.ИмяМетода) = ВРег(Отбор.ИмяМетода) Тогда
				НайденныеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", РегламентноеЗаданиеМетаданные));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НайденныеРегламентныеЗадания;
	
КонецФункции

// Записать регламентное задание в базу данных.
//
// Параметры:
// РегламетноеЗадание - РегламентноеЗадание, Структура.
//
Процедура Записать(РегламентноеЗадание) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ТипЗнч(РегламентноеЗадание) <> Тип("Структура") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
		КонецЕсли;
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		Если Не РегламентноеЗадание.Свойство("Задание") 
			ИЛИ Не ЗначениеЗаполнено(РегламентноеЗадание.Задание) 
			ИЛИ ТипЗнч(РегламентноеЗадание.Задание) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1, свойство ''Задание'')'");
		КонецЕсли;
		ИзменитьЗадание(РегламентноеЗадание.Задание, РегламентноеЗадание, ОбластьДанных);
	Иначе
		Если ТипЗнч(РегламентноеЗадание) <> Тип("РегламентноеЗадание") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
		КонецЕсли;
		
		РегламентноеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет регламентное задание из базы данных.
//
// Параметры:
// РегламетноеЗадание - РегламентноеЗадание, Структура.
//
Процедура Удалить(РегламентноеЗадание) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ТипЗнч(РегламентноеЗадание) <> Тип("Структура") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
		КонецЕсли;
		
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		Если Не РегламентноеЗадание.Свойство("Задание") 
			ИЛИ Не ЗначениеЗаполнено(РегламентноеЗадание.Задание) 
			ИЛИ ТипЗнч(РегламентноеЗадание.Задание) <> Тип("Строка") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1, свойство ''Задание'')'");
		КонецЕсли;
		УдалитьЗадание(РегламентноеЗадание.Задание, ОбластьДанных);
	Иначе
		Если ТипЗнч(РегламентноеЗадание) <> Тип("РегламентноеЗадание") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'");
		КонецЕсли;
		
		РегламентноеЗадание.Удалить();
	КонецЕсли;

КонецПроцедуры

// Добавляет новое задание в РС ОчередьЗаданий. 
// 
// Параметры: 
// ИмяМетода              - Строка - Имя метода из не глобального 
//                          общего модуля в форме ИмяМодуля.ИмяМетода.
// Параметры              - Массив - Массив параметров, передаваемых в метод. 
//                          Количество и типы параметров должны соответствовать 
//                          параметрам метода.
// Ключ                   - Строка - Ключ задания. Если ключ задан, 
//                          то он должен быть уникальным среди ключей заданий, 
//                          имеющих такое же имя метода, что и у данного фонового задания.
// ЭксклюзивноеВыполнение - Булево - Признак эксклюзивного выполнения задания.
// ОбластьДанных          - Число - задает область данных,
//                          для которой необходимо добавить новое задание.
// 
// Возвращаемое значение: 
// Строка. 
// Идентификатор добавленого задания. 
//
Функция ЗапланироватьВыполнениеЗадания(ИмяМетода, Параметры = Неопределено, Ключ = "", ЭксклюзивноеВыполнение = Ложь, ОбластьДанных = Неопределено) Экспорт 
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяМетода"    , ИмяМетода);
		ПараметрыЗадания.Вставить("Параметры"    , Параметры);
		ПараметрыЗадания.Вставить("Ключ"         , Ключ);
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		Возврат ДобавитьЗадание(ПараметрыЗадания, ОбластьДанных);
		
	КонецЕсли;
	
КонецФункции

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОчередьЗаданий.ОбновитьОчередьЗаданий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОчередьЗаданий.ОбновитьРазделенныеРегламентныеЗадания";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

Функция ПолучитьСписокРазделенныхРегламентныхЗаданий()
	
	СписокРазделенныхРегламентныхЗаданий = Новый Массив;
	СтандартныеПодсистемыПереопределяемый.ЗаполнитьСписокРазделенныхРегламентныхЗаданий(СписокРазделенныхРегламентныхЗаданий);
	ОчередьЗаданийПереопределяемый.ЗаполнитьСписокРазделенныхРегламентныхЗаданий(СписокРазделенныхРегламентныхЗаданий);
	
	Возврат СписокРазделенныхРегламентныхЗаданий;
	
КонецФункции

// Формирует и возвращает таблицу имен регламентных заданий с признаком использования.
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица, которую необходимо заполнить
// 	регламентными заданиями и признаком использования.
//
Функция ПолучитьТаблицуИспользованияРегламентныхЗаданий()
	
	ТаблицаИспользования = Новый ТаблицаЗначений;
	ТаблицаИспользования.Колонки.Добавить("РегламентноеЗадание", Новый ОписаниеТипов("Строка"));
	ТаблицаИспользования.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	
	// Обязательно для этой подсистемы.
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ПланированиеОбработкиЗаданий";
	НоваяСтрока.Использование       = Истина;
	
	СтандартныеПодсистемыПереопределяемый.ЗаполнитьТаблицуИспользованияРегламентныхЗаданий(ТаблицаИспользования);
	
	Возврат ТаблицаИспользования;
	
КонецФункции

Функция ПолучитьЧасовойПоясОбластиДанных(ОбластьДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбластиДанных.ЧасовойПояс
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.ОбластьДанных = &ОбластьДанных";
	Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЧасовойПояс = "";
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЧасовойПояс = Выборка.ЧасовойПояс;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЧасовойПояс) Тогда
		ЧасовойПояс = Неопределено;
	КонецЕсли;
	
	Возврат ЧасовойПояс;
	
КонецФункции

Функция КоличествоИсполняющихФоновыхЗаданий()
	
	Отбор = Новый Структура("Наименование, Состояние", ПолучитьНаименованиеИсполняющегоФоновогоЗадания(), СостояниеФоновогоЗадания.Активно); 
	ИсполняющиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор); 
	
	КоличествоРаботающихФоновыхЗаданий = ИсполняющиеФоновыеЗадания.Количество();
	
	Возврат КоличествоРаботающихФоновыхЗаданий;
	
КонецФункции

// Рассчитывает необходимое количество исполняющих фоновых заданий
// 
Функция КоличествоИсполняющихФоновыхЗаданийКЗапуску()
	
	КоличествоРаботающихФоновыхЗаданий = КоличествоИсполняющихФоновыхЗаданий();
	
	КоличествоИсполняющихФоновыхЗаданийКЗапуску = Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить() - КоличествоРаботающихФоновыхЗаданий;
	Если КоличествоИсполняющихФоновыхЗаданийКЗапуску < 0 Тогда
		КоличествоИсполняющихФоновыхЗаданийКЗапуску = 0;
	КонецЕсли;

	Возврат КоличествоИсполняющихФоновыхЗаданийКЗапуску;
	
КонецФункции

// Запускает заданое количество фоновых заданий 
// 
// Параметры: 
// КоличествоЗапускаемыхФоновыхЗаданий - Число - количество фоновых заданий,
//                                       которых необходимо запустить.
//
Процедура ЗапуститьИсполняющееФоновоеЗадание(КоличествоЗапускаемыхФоновыхЗаданий) 
	
	Для Индекс = 1 По КоличествоЗапускаемыхФоновыхЗаданий Цикл
		Ключ = Новый УникальныйИдентификатор;
		Параметры = Новый Массив;
		Параметры.Добавить(Ключ);
		ФоновыеЗадания.Выполнить("ОчередьЗаданий.ОбработатьОчередьЗаданий", Параметры, Ключ, ПолучитьНаименованиеИсполняющегоФоновогоЗадания());
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаименованиеИсполняющегоФоновогоЗадания()
	
	Возврат "ИсполняющееФоновоеЗадание_5340185be5b240538bc73d9f18ef8df1";
	
КонецФункции

Процедура ЗаписьКонтроляВыполнения(Знач ИмяСобытия, Знач ЗаписьЗадания)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, ,
		ЗаписьЗадания.Задание, ЗаписьЗадания.ИмяМетода + ";" + Формат(ЗаписьЗадания.ОбластьДанных, "ЧН=0; ЧГ="));
	
КонецПроцедуры

// Выполняет метод по его строковому представлению
// Рассчитывает следующий момент запуска задания. 
// 
// Параметры: 
// ИмяМетода - Строка - имя метода, который необходимо выполнить.
// Параметры - Массив - параметры передаются в ИмяМетода 
// в порядке расположения элементов массива.
// 
Процедура ВыполнитьЗадание(ИмяМетода, Параметры = Неопределено)
	
	Если ОчередьЗаданийПовтИсп.ПолучитьРазрешенныеМетоды().Найти(ВРег(ИмяМетода)) = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Метод %1 не разрешен к вызову через очередь заданий.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяМетода);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	Выполнить(ИмяМетода + "(" + ПараметрыСтрока + ")");
	
КонецПроцедуры

// Рассчитывает следующий момент запуска задания. 
// 
// Параметры: 
// Расписание                  - РасписаниеРегламентногоЗадания - расписание, 
//                               для которого требуется рассчитать момент следующего запуска.
// ЧасовойПояс				   - Строка.
// ДатаНачалаПоследнегоЗапуска - Дата - Дата начала последнего запуска регламентного задания. 
//                               Если дата задана, то используется для проверки таких условий как 
//                               ПериодПовтораДней, ПериодНедель, ПериодПовтораВТечениеДня. 
//                               Если дата не задана, то считается, 
//                               что задание не выполнялось ни разу и проверка этих условий не производится.
// 
// Возвращаемое значение: 
// Дата - Рассчитанный следующий момент запуска задания. 
// 
Функция ПолучитьЗапланированныйМоментЗапускаЗадания(Знач Расписание, Знач ЧасовойПояс, Знач ДатаНачалаПоследнегоЗапуска = '00010101')
	
	Если ЗначениеЗаполнено(ДатаНачалаПоследнегоЗапуска) Тогда 
		ДатаНачалаПоследнегоЗапуска = МестноеВремя(ДатаНачалаПоследнегоЗапуска, ЧасовойПояс);
	КонецЕсли;
	
	ДатаРасчета = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);

	ТочностьРасчета = 5; // Точность расчета момента запуска - 5 сек.
	ПределРасчета   = 367 * 86400; // В пределах 367 дней
	Приращение      = 0;

	// Если задание не требуется выполнять в пределах интервала [ТекущаяДата; ТекущаяДата + ПределРасчета],
	// возвращается пустая дата.
	Если Не Расписание.ТребуетсяВыполнение(ДатаРасчета + ПределРасчета, ДатаНачалаПоследнегоЗапуска) Тогда
		Возврат '00010101';
	Иначе
		НачалоИнтервала = 0;
		КонецИнтервала  = ПределРасчета;
		Пока (КонецИнтервала - НачалоИнтервала) > ТочностьРасчета Цикл
			Приращение = Окр((КонецИнтервала - НачалоИнтервала) / 2);
			Если Расписание.ТребуетсяВыполнение(ДатаРасчета + НачалоИнтервала + Приращение, ДатаНачалаПоследнегоЗапуска) Тогда
				КонецИнтервала = НачалоИнтервала + Приращение;
			Иначе
				НачалоИнтервала = НачалоИнтервала + Приращение + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НайденнаяДата = ДатаРасчета + НачалоИнтервала + Приращение;
	
	Возврат УниверсальноеВремя(НайденнаяДата, ЧасовойПояс);
	
КонецФункции

