////////////////////////////////////////////////////////////////////////////////
// Подсистема "Информационный центр".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Описывает структуру полезной ссылки.
// 
// Возвращаемое значение:
//	Структура - структура с полями, которые описывают полезную ссылку:
//		Имя - Строка - наименование полезной ссылки.
//		Адрес - Строка - адрес полезной ссылки.
//		Пояснение - Строка - пояснение полезной ссылки.
//		ДействиеПоНажатию - Строка - процедура-обработчик для полезной ссылки.
//	
// Примечание:
//	Поле "ДействиеПоНажатию" можно не устанавливать, если подразумевается переход по ссылке.
//
Функция НовоеОписаниеПолезнойСсылки() Экспорт
	
	Возврат Новый Структура("Имя, Адрес, Пояснение, ДействиеПоНажатию");
	
КонецФункции

// Описывает структуру статьи.
// 
// Возвращаемое значение:
//	Структура - структура с полями, которые описывают статью. 
//	
Функция НовоеОписаниеСтатьи() Экспорт
	
	Возврат Новый Структура("Имя, Адрес");
	
КонецФункции	

// Описывает ссылку сайта для для публикации приложений через Интернет.
// 
// Возвращаемое значение:
//	Структура - структура с полями, которые описывают ссылку сайта. 
//	
Функция НовоеОписаниеСсылкиСайтаДляПубликацииПриложенийЧерезИнтернет() Экспорт 
	
	Возврат Новый Структура("Имя, Адрес");
	
КонецФункции

// Определяет список всех новостей.
//
// Возвращаемое значение:
//	ТаблицаЗначений с полями:
//		Наименование - Строка - заголовок новости.
//		Идентификатор - УникальныйИдентификатор - идентификатор новости.
//		Критичность - Число - критичность новости.
//		ВнешняяСсылка - Строка - адрес внешней ссылки.
//
Функция СформироватьСписокВсехНовостей() Экспорт
	
	ЗапросВсехНовостей = Новый Запрос;
	ЗапросВсехНовостей.УстановитьПараметр("ТипИнформацииНовость",		ОпределитьСсылкуТипаИнформации("Новость"));
	ЗапросВсехНовостей.УстановитьПараметр("ТипИнформацииНедоступность",	ОпределитьСсылкуТипаИнформации("Недоступность"));
	ЗапросВсехНовостей.УстановитьПараметр("ПометкаУдаления",Ложь);
	
	ЗапросВсехНовостей.Текст = "ВЫБРАТЬ
		|	ОбщиеДанныеИнформационногоЦентра.Наименование КАК Наименование,
		|	ОбщиеДанныеИнформационногоЦентра.Критичность КАК Критичность,
		|	ОбщиеДанныеИнформационногоЦентра.Идентификатор КАК Идентификатор,
		|	ОбщиеДанныеИнформационногоЦентра.ВнешняяСсылка КАК ВнешняяСсылка
		|ИЗ
		|	Справочник.ОбщиеДанныеИнформационногоЦентра КАК ОбщиеДанныеИнформационногоЦентра
		|ГДЕ
		|	(ОбщиеДанныеИнформационногоЦентра.ТипИнформации = &ТипИнформацииНовость
		|			ИЛИ ОбщиеДанныеИнформационногоЦентра.ТипИнформации = &ТипИнформацииНедоступность)
		|	И ОбщиеДанныеИнформационногоЦентра.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбщиеДанныеИнформационногоЦентра.ДатаНачалаАктуальности УБЫВ";
	
	Возврат ЗапросВсехНовостей.Выполнить().Выгрузить();
	
КонецФункции

// Формирует список новостей.
//
// Параметры:
//	ТаблицаНовостей - ТаблицаЗначений с колонками:
//		Наименование - Строка - заголовок новости.
//		Идентификатор - УникальныйИдентификатор - идентификатор новости.
//		Критичность - Число - критичность новости.
//		ВнешняяСсылка - Строка - адрес внешней ссылки.
//	КоличествоВыводимыхНовостей - Число - Количество выводимых новостей на рабочем столе.
//
Процедура СформироватьСписокНовостейНаРабочийСтол(ТаблицаНовостей, Знач КоличествоВыводимыхНовостей = 3) Экспорт
	
	КритичныеНовости = СформироватьАктуальныеКритичныеНовости();
	
	КоличествоКритичныхНовостей = ?(КритичныеНовости.Количество() >= КоличествоВыводимыхНовостей, КоличествоВыводимыхНовостей, КритичныеНовости.Количество());
	
	// Добавление новостей в общую таблицу.
	Если КоличествоКритичныхНовостей > 0 Тогда 
		Для Итерация = 0 по КоличествоКритичныхНовостей - 1 Цикл
			Новость = ТаблицаНовостей.Добавить();
			ЗаполнитьЗначенияСвойств(Новость, КритичныеНовости.Получить(Итерация));
		КонецЦикла;	
	КонецЕсли;
	
	Если КоличествоКритичныхНовостей = КоличествоВыводимыхНовостей Тогда 
		Возврат;
	КонецЕсли;
	
	НеКритичныеНовости = СформироватьАктуальныеНеКритичныеНовости();
	
	КоличествоВыводимыхНеКритичныхНовостей = КоличествоВыводимыхНовостей - КоличествоКритичныхНовостей;
	
	КоличествоВыводимыхНеКритичныхНовостей = ?(НеКритичныеНовости.Количество() < КоличествоВыводимыхНеКритичныхНовостей, НеКритичныеНовости.Количество(), КоличествоВыводимыхНеКритичныхНовостей);
	
	Если НеКритичныеНовости.Количество() > 0 Тогда 
		Для Итерация = 0 по КоличествоВыводимыхНеКритичныхНовостей - 1 Цикл
			Новость = ТаблицаНовостей.Добавить();
			ЗаполнитьЗначенияСвойств(Новость, НеКритичныеНовости.Получить(Итерация));
		КонецЦикла;	
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Возвращает список актуальных критичных новостей (критичность > 5).
//
// Возвращаемое значение:
//	ТаблицаЗначений с полями ТаблицыЗначений "ТаблицаНовостей" в процедуре СформироватьСписокНовостейНаРабочийСтол.
//
Функция СформироватьАктуальныеКритичныеНовости()
	
	ЗапросКритичныхНовостей = Новый Запрос;
	
	ЗапросКритичныхНовостей.УстановитьПараметр("ТекущаяДата",		ТекущаяДатаСеанса());
	ЗапросКритичныхНовостей.УстановитьПараметр("КритичностьПять",	5);
	ЗапросКритичныхНовостей.УстановитьПараметр("ТипИнформацииНовость",			ОпределитьСсылкуТипаИнформации("Новость"));
	ЗапросКритичныхНовостей.УстановитьПараметр("ТипИнформацииНедоступность",	ОпределитьСсылкуТипаИнформации("Недоступность"));
	ЗапросКритичныхНовостей.УстановитьПараметр("ПустаяДата", 		'00010101');
	ЗапросКритичныхНовостей.УстановитьПараметр("ПометкаУдаления", 	Ложь);
	
	ЗапросКритичныхНовостей.Текст = "ВЫБРАТЬ
		|	ОбщиеДанныеИнформационногоЦентра.Наименование КАК Наименование,
		|	ОбщиеДанныеИнформационногоЦентра.Критичность КАК Критичность,
		|	ОбщиеДанныеИнформационногоЦентра.Идентификатор КАК Идентификатор,
		|	ОбщиеДанныеИнформационногоЦентра.ВнешняяСсылка КАК ВнешняяСсылка
		|ИЗ
		|	Справочник.ОбщиеДанныеИнформационногоЦентра КАК ОбщиеДанныеИнформационногоЦентра
		|ГДЕ
		|	ОбщиеДанныеИнформационногоЦентра.ДатаНачалаАктуальности <= &ТекущаяДата
		|	И ОбщиеДанныеИнформационногоЦентра.Критичность > &КритичностьПять
		|	И (ОбщиеДанныеИнформационногоЦентра.ТипИнформации = &ТипИнформацииНовость
		|			ИЛИ ОбщиеДанныеИнформационногоЦентра.ТипИнформации = &ТипИнформацииНедоступность)
		|	И (ОбщиеДанныеИнформационногоЦентра.ДатаОкончанияАктуальности >= &ТекущаяДата
		|			ИЛИ ОбщиеДанныеИнформационногоЦентра.ДатаОкончанияАктуальности = &ПустаяДата)
		|	И ОбщиеДанныеИнформационногоЦентра.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Критичность УБЫВ,
		|	ОбщиеДанныеИнформационногоЦентра.ДатаНачалаАктуальности УБЫВ";
	
	Возврат ЗапросКритичныхНовостей.Выполнить().Выгрузить();
	
КонецФункции	

// Возвращает список актуальных некритичных новостей (критичность <= 5).
//
// Возвращаемое значение:
//	ТаблицаЗначений с полями ТаблицыЗначений "ТаблицаНовостей" в процедуре СформироватьСписокНовостейНаРабочийСтол.
//
Функция СформироватьАктуальныеНеКритичныеНовости()
	
	ЗапросНеКритичныхНовостей = Новый Запрос;
	
	ЗапросНеКритичныхНовостей.УстановитьПараметр("ТекущаяДата",		ТекущаяДатаСеанса());
	ЗапросНеКритичныхНовостей.УстановитьПараметр("КритичностьПять",	5);
	ЗапросНеКритичныхНовостей.УстановитьПараметр("ТипИнформацииНовость",		ОпределитьСсылкуТипаИнформации("Новость"));
	ЗапросНеКритичныхНовостей.УстановитьПараметр("ТипИнформацииНедоступность",	ОпределитьСсылкуТипаИнформации("Недоступность"));
	ЗапросНеКритичныхНовостей.УстановитьПараметр("ПустаяДата", 		'00010101');
	ЗапросНеКритичныхНовостей.УстановитьПараметр("ПометкаУдаления", 	Ложь);
	
	ЗапросНеКритичныхНовостей.Текст = "ВЫБРАТЬ
		|	ОбщиеДанныеИнформационногоЦентра.Наименование КАК Наименование,
		|	ОбщиеДанныеИнформационногоЦентра.Критичность КАК Критичность,
		|	ОбщиеДанныеИнформационногоЦентра.Идентификатор КАК Идентификатор,
		|	ОбщиеДанныеИнформационногоЦентра.ВнешняяСсылка КАК ВнешняяСсылка
		|ИЗ
		|	Справочник.ОбщиеДанныеИнформационногоЦентра КАК ОбщиеДанныеИнформационногоЦентра
		|ГДЕ
		|	ОбщиеДанныеИнформационногоЦентра.ДатаНачалаАктуальности <= &ТекущаяДата
		|	И ОбщиеДанныеИнформационногоЦентра.Критичность <= &КритичностьПять
		|	И (ОбщиеДанныеИнформационногоЦентра.ТипИнформации = &ТипИнформацииНовость
		|			ИЛИ ОбщиеДанныеИнформационногоЦентра.ТипИнформации = &ТипИнформацииНедоступность)
		|	И (ОбщиеДанныеИнформационногоЦентра.ДатаОкончанияАктуальности >= &ТекущаяДата
		|			ИЛИ ОбщиеДанныеИнформационногоЦентра.ДатаОкончанияАктуальности = &ПустаяДата)
		|	И ОбщиеДанныеИнформационногоЦентра.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбщиеДанныеИнформационногоЦентра.ДатаНачалаАктуальности УБЫВ";
	
	Возврат ЗапросНеКритичныхНовостей.Выполнить().Выгрузить();
	
КонецФункции	

// Возвращает ссылку на элемент справочника "ТипыИнформацииИнформационногоЦентра" по Наименованию
//
// Параметры:
//	Наименование - Строка - наименования типа новости.
//
// Возвращаемое значение:
//	СправочникСсылка.ТипыИнформацииИнформационногоЦентра - тип информации.
//
Функция ОпределитьСсылкуТипаИнформации(знач Наименование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Наименование = СокрЛП(Наименование);
	
	НайденнаяСсылка = Справочники.ТипыИнформацииИнформационногоЦентра.НайтиПоНаименованию(Наименование);
	
	Если НайденнаяСсылка.Пустая() Тогда 
		ТипИнформации = Справочники.ТипыИнформацииИнформационногоЦентра.СоздатьЭлемент();
		ТипИнформации.Наименование = Наименование;
		ТипИнформации.Записать();
		
		Возврат ТипИнформации.Ссылка;
	Иначе	
		Возврат НайденнаяСсылка;
	КонецЕсли;	
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Получение параметров для отправки сообщений пользователя

// Возвращает адрес электронной почты текущего пользователя.
//
// Возвращаемое значение:
//	Строка - адрес электронной почты текущего пользователя.
//
Функция ОпределитьАдресЭлектроннойПочтыПользователя() Экспорт 
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для каждого СтрокаКонтактнойИнформации из ТекущийПользователь.КонтактнаяИнформация Цикл
		Если Не ПустаяСтрока(СтрокаКонтактнойИнформации.АдресЭП) Тогда 
			Возврат СтрокаКонтактнойИнформации.АдресЭП;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат "";
	
КонецФункции

// Возвращает шаблон текста в техподдержку.
//
// Возвращаемое значение:
//	Строка - шаблон текста в техподдержку.
//
Функция СформироватьШаблонТекстаВТехПоддержку() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Шаблон = НСтр("ru = 'Здравствуйте!
		|
		|ПозицияКурсора
		|
		|С уважением, %1.'");
	Шаблон = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, 
			ПараметрыСеанса.ТекущийПользователь.ПолноеНаименование());
	
	Возврат Шаблон;
	
КонецФункции

// Возвращает текст технических параметров.
//
// Возвращаемое значение:
//	Соответствие:
//		Ключ - строка - наименование вложения.
//		Значение - ДвоичныеДанные - файл вложения.
//
Функция СформироватьXMLСТехническимиПараметрами() Экспорт
	
	МассивПараметров = ОпределитьМассивТехническихПараметров();
	
	ФайлXML = ПолучитьИмяВременногоФайла("xml");
	
	ТекстXML = Новый ЗаписьXML;
	ТекстXML.ОткрытьФайл(ФайлXML);
	ТекстXML.ЗаписатьОбъявлениеXML();
	ЗаписатьПараметрыВXML(ТекстXML, МассивПараметров);
	ТекстXML.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлXML);
	
	Попытка
		УдалитьФайлы(ФайлXML);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Информационный центр. Отправка сообщения в техподдержку. Не удалось удалить временный файл технических параметров.'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Вложение = Новый СписокЗначений;
	Вложение.Добавить(ДвоичныеДанныеФайла, ПолучитьИмяФайлаТехническихПараметровДляСообщенияВтехПоддержку(), Истина);
	Возврат Вложение;
	
КонецФункции

// Возвращает массив технических параметров.
//
// Возвращаемое значение:
//	Массив  - массив структуры технических параметров с полями:
//		Имя - Строка - имя параметра.
//		Значение - Строка - значение параметра.
//
Функция ОпределитьМассивТехническихПараметров()
	
	СисИнфо = Новый СистемнаяИнформация;

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Имя, Значение", "ИмяКонфигурации",	Метаданные.Имя));
	МассивПараметров.Добавить(Новый Структура("Имя, Значение", "ВерсияКонфигурации",Метаданные.Версия));
	МассивПараметров.Добавить(Новый Структура("Имя, Значение", "ВерсияПлатформы",	СисИнфо.ВерсияПриложения));
	МассивПараметров.Добавить(Новый Структура("Имя, Значение", "ОбластьДанных",		Строка(Формат(ПараметрыСеанса.ОбластьДанныхЗначение, "ЧГ=0"))));
	МассивПараметров.Добавить(Новый Структура("Имя, Значение", "Логин",				ИмяПользователя()));
	
	Возврат МассивПараметров;
	
КонецФункции	

// Записывает параметры в XML.
//
// Параметры:
//	ТекстXML - ЗаписьXML - запись XML.
//	МассивПараметров - массив параметров.
//
Процедура ЗаписатьПараметрыВXML(ТекстXML, МассивПараметров)
	
	ТекстXML.ЗаписатьНачалоЭлемента("parameters");
	Для Итерация = 0 по МассивПараметров.Количество() - 1 Цикл 
		ТекстXML.ЗаписатьНачалоЭлемента("parameter");
		Элемент = МассивПараметров.Получить(Итерация);
		ТекстXML.ЗаписатьАтрибут(Элемент.Имя, Элемент.Значение);
		ТекстXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ТекстXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	

// Возвращает строку с в нешней ссылкой.
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - уникальный идентификатор новости.
//
// Возвращаемое значение:
//	Строка - адрес внешенго ресурса.
//
Функция ПолучитьВнешнююСсылкуПоИдентификаторуНовости(Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СсылкаНаДанные	= Справочники.ОбщиеДанныеИнформационногоЦентра.НайтиПоРеквизиту("Идентификатор", Идентификатор);
	Если СсылкаНаДанные.Пустая() Тогда 
		Возврат "";
	КонецЕсли;	
	
	Возврат СсылкаНаДанные.ВнешняяСсылка;
	
КонецФункции	

// Возвращает имя файла, в котором находятся технические параметры
// для службы техподдержки.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция ПолучитьИмяФайлаТехническихПараметровДляСообщенияВтехПоддержку() Экспорт
	
	Возврат "TechnicalParameters.xml";
	
КонецФункции