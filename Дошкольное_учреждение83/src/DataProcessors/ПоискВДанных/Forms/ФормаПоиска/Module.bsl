// Процедура выполняет полнотекстовый поиск
//
&НаСервереБезКонтекста
Функция ИскатьВыполнитьСервер(Направление, ТекущаяПозиция, СтрокаПоиска) Экспорт
	
	РазмерПорции = 20;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	
	Если Направление = 0 Тогда
		СписокПоиска.ПерваяЧасть();
	ИначеЕсли Направление = -1 Тогда
		СписокПоиска.ПредыдущаяЧасть(ТекущаяПозиция);
	ИначеЕсли Направление = 1 Тогда
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
	КонецЕсли;
	
	РезультатыПоиска = Новый СписокЗначений;
	РезультатыПоиска.Очистить();
	Для Каждого Результат Из СписокПоиска Цикл
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Значение", Результат.Значение);
		СтруктураРезультата.Вставить("ЗначенияДляОткрытия", ПолучитьЗначенияДляОткрытия(Результат.Значение));
		РезультатыПоиска.Добавить(СтруктураРезультата);
	КонецЦикла; 	
	
	HTMLТекст = СписокПоиска.ПолучитьОтображение(ВидОтображенияПолнотекстовогоПоиска.HTMLТекст);
	
	HTMLТекст = СтрЗаменить(HTMLТекст, "<td>", "<td><font face=""Arial"" size=""2"">");
	HTMLТекст = СтрЗаменить(HTMLТекст, "<td valign=top width=1>", "<td valign=top width=1><font face=""Arial"" size=""1"">");
	HTMLТекст = СтрЗаменить(HTMLТекст, "<body>", "<body topmargin=0 leftmargin=0 scroll=auto>");
	HTMLТекст = СтрЗаменить(HTMLТекст, "</td>", "</font></td>");
	HTMLТекст = СтрЗаменить(HTMLТекст, "<b>", "");
	HTMLТекст = СтрЗаменить(HTMLТекст, "</b>", "");
	
	ТекущаяПозиция = СписокПоиска.НачальнаяПозиция();
	ПолноеКоличество = СписокПоиска.ПолноеКоличество();
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПоиска", РезультатыПоиска);
	Результат.Вставить("ТекущаяПозиция", ТекущаяПозиция);
	Результат.Вставить("ПолноеКоличество", ПолноеКоличество);
	Результат.Вставить("HTMLТекст", HTMLТекст);
	
	Возврат Результат;
КонецФункции

// Обработка команды Найти
//
&НаКлиенте
Процедура ИскатьВыполнить()
	Искать(0);
КонецПроцедуры

// Обработчик команды Назад
//
&НаКлиенте
Процедура НазадВыполнить()
	Искать(-1);
КонецПроцедуры

// Обработчик команды Далее
//
&НаКлиенте
Процедура ДалееВыполнить()
	Искать(1);
КонецПроцедуры

&НаКлиенте
Функция ЭтоНавигационнаяСсылка(Ссылка)
	
	Если Найти(Ссылка, "e1cib/data/") <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

// Процедура поиска, получение и отображение результата
//
&НаКлиенте
Процедура Искать(Направление)
	
	Попытка
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Предупреждение(НСтр("ru = 'Введите, что нужно найти!'"));
			Возврат;
		КонецЕсли;
		
		Если ЭтоНавигационнаяСсылка(СтрокаПоиска) Тогда
			ПерейтиПоНавигационнойСсылке(СтрокаПоиска);
			СтрокаПоиска = "";
			Возврат;
		КонецЕсли;
		
		НСтрока = НСтр("ru = 'Выполняется поиск...'");
		Состояние(НСтрока);

		Результат = ИскатьВыполнитьСервер(Направление, ТекущаяПозиция, СтрокаПоиска);
		Если ЭтоФайловаяБаза Тогда
			ОбновитьАктуальностьИндекса();
		КонецЕсли;
		
		Состояние();
		
		РезультатыПоиска = Результат.РезультатПоиска;
		HTMLТекст = Результат.HTMLТекст;
		ТекущаяПозиция = Результат.ТекущаяПозиция;
		ПолноеКоличество = Результат.ПолноеКоличество;
		
		Если РезультатыПоиска.Количество() <> 0 Тогда
			
			ПоказаныРезультатыСПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                            НСтр("ru = 'Показаны %1 - %2 из %3'"),
			                            Строка(ТекущаяПозиция + 1),
			                            Строка(ТекущаяПозиция + РезультатыПоиска.Количество()),
			                            Строка(ПолноеКоличество) );
			
			Элементы.Далее.Доступность = (ПолноеКоличество - ТекущаяПозиция) > РезультатыПоиска.Количество();
			Элементы.Назад.Доступность = (ТекущаяПозиция > 0);
		Иначе
			ПоказаныРезультатыСПо = НСтр("ru = 'Не найдено'");
			Элементы.Далее.Доступность = Ложь;
			Элементы.Назад.Доступность = Ложь;
		КонецЕсли;
	Исключение
		Предупреждение(ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ИнформацияОбОшибке()));
	КонецПопытки	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначениеПоиска(Значение)
	СтандартнаяОбработка = Истина;
	ПолнотекстовыйПоискКлиентПереопределяемый.ПриОткрытииОбъекта(Значение, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Истина Тогда
		ОткрытьЗначение(Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура HTMLТекстПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ЭлементHTML = ДанныеСобытия.Anchor;
	
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементHTML.id = "FullTextSearchListItem") Тогда
		ЧастьURL = ЭлементHTML.pathName;
		Позиция = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(ЧастьURL, "/");
		Если Позиция <> 0 Тогда
			ЧастьURL = Сред(ЧастьURL, Позиция + 1);
			НомерВСписке = Число(ЧастьURL);
			СтруктураРезультата = РезультатыПоиска[НомерВСписке].Значение;
			ВыбраннаяСтрока = СтруктураРезультата.Значение;
			МассивОбъектов = СтруктураРезультата.ЗначенияДляОткрытия;

			Если МассивОбъектов.Количество() = 1 Тогда
				ОткрытьЗначениеПоиска(МассивОбъектов[0]);
			ИначеЕсли МассивОбъектов.Количество() <> 0 Тогда
				Список = Новый СписокЗначений;
				Для Каждого ЭлементМассива Из МассивОбъектов Цикл
					Список.Добавить(ЭлементМассива);
				КонецЦикла;
				ВыбранныйОбъект = ВыбратьИзСписка(Список, Элементы.HTMLТекст);
				Если ВыбранныйОбъект <> Неопределено Тогда
					ОткрытьЗначениеПоиска(ВыбранныйОбъект.Значение);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктуальностьИндекса()
	
	Если ЭтоФайловаяБаза Тогда
		Элементы.ГруппаОбновлениеИндекса.Видимость = Истина;
		
		Попытка
			ДатаАктуальностиИндекса = ПолнотекстовыйПоиск.ДатаАктуальности();
			Если ДатаАктуальностиИндекса <> '00010101000000' Тогда
				Элементы.СостояниеИндекса.Подсказка = НСтр("ru = 'Последнее обновление индекса: '") + Строка(ДатаАктуальностиИндекса);
			КонецЕсли;
			
			ИндексАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
			Элементы.ГруппаОбновлениеИндекса.Видимость = Не ИндексАктуален;
			Элементы.ОбновитьИндекс.Доступность = Не ИндексАктуален;
			Если Не ИндексАктуален Тогда
				СостояниеИндекса = НСтр("ru = 'Требуется обновление индекса'");
			КонецЕсли;	
		Исключение	
		КонецПопытки;
		
	Иначе
		Элементы.ГруппаОбновлениеИндекса.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
	ОбновитьАктуальностьИндекса();
	
	Попытка
		ПоказаныРезультатыСПо = НСтр("ru = 'Введите, что нужно найти.'");
		ТекущаяПозиция = 0;
		
		Элементы.Далее.Доступность = Ложь;
		Элементы.Назад.Доступность = Ложь;
		
		Массив = ХранилищеОбщихНастроек.Загрузить("ПолнотекстовыйПоискСтрокиПолнотекстовогоПоиска");
		
		Если Массив <> Неопределено Тогда
			Элементы.ПолеВводаПоиска.СписокВыбора.ЗагрузитьЗначения(Массив);
		КонецЕсли;	
		
		Если Не ПустаяСтрока(Параметры.ПереданнаяСтрокаПоиска) Тогда
			СтрокаПоиска = Параметры.ПереданнаяСтрокаПоиска;
			
			СохранитьСтрокуПоиска();
			Результат = ИскатьВыполнитьСервер(0, ТекущаяПозиция, СтрокаПоиска);
			
			РезультатыПоиска = Результат.РезультатПоиска;
			HTMLТекст = Результат.HTMLТекст;
			ТекущаяПозиция = Результат.ТекущаяПозиция;
			ПолноеКоличество = Результат.ПолноеКоличество;
			
			Если РезультатыПоиска.Количество() <> 0 Тогда
				
				ПоказаныРезультатыСПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                            НСтр("ru = 'Показаны %1 - %2 из %3'"),
				                            Строка(ТекущаяПозиция + 1),
				                            Строка(ТекущаяПозиция + РезультатыПоиска.Количество()),
				                            Строка(ПолноеКоличество) );
				
				Элементы.Далее.Доступность = (ПолноеКоличество - ТекущаяПозиция) > РезультатыПоиска.Количество();
				Элементы.Назад.Доступность = (ТекущаяПозиция > 0);
			Иначе
				ПоказаныРезультатыСПо = НСтр("ru = 'Не найдено'");
				Элементы.Далее.Доступность = Ложь;
				Элементы.Назад.Доступность = Ложь;
			КонецЕсли;
		Иначе
			HTMLТекст = "<html>
						|<head>
						|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
						|</head>
						|<body topmargin=0 leftmargin=0 scroll=auto>
						|<table border=""0"" width=""100%"" cellspacing=""5"">
						|</table>
						|</body>
						|</html>";
		КонецЕсли;	
	Исключение	
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПриИзмененииТекстаСервер()
	СохранитьСтрокуПоиска();
	
	Если ЭтоФайловаяБаза Тогда
		ОбновитьАктуальностьИндекса();
	КонецЕсли;
	
	Возврат ИскатьВыполнитьСервер(0, ТекущаяПозиция, СтрокаПоиска);
КонецФункции

&НаКлиенте
Процедура ПолеВводаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Попытка
		СтрокаПоиска = ВыбранноеЗначение;
		ИскатьВыполнить();
	Исключение
	КонецПопытки;	
КонецПроцедуры


&НаКлиенте
Процедура ПолеВводаПоискаПриИзменении(Элемент)
	Попытка
		Если ЭтоНавигационнаяСсылка(СтрокаПоиска) Тогда
			ПерейтиПоНавигационнойСсылке(СтрокаПоиска);
			СтрокаПоиска = "";
			Возврат;
		КонецЕсли;
		
		Результат = ПриИзмененииТекстаСервер();
		
		РезультатыПоиска = Результат.РезультатПоиска;
		HTMLТекст = Результат.HTMLТекст;
		ТекущаяПозиция = Результат.ТекущаяПозиция;
		ПолноеКоличество = Результат.ПолноеКоличество;
		
		Если РезультатыПоиска.Количество() <> 0 Тогда
			
			ПоказаныРезультатыСПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                            НСтр("ru = 'Показаны %1 - %2 из %3'"),
			                            Строка(ТекущаяПозиция + 1),
			                            Строка(ТекущаяПозиция + РезультатыПоиска.Количество()),
			                            Строка(ПолноеКоличество) );
			
			Элементы.Далее.Доступность = (ПолноеКоличество - ТекущаяПозиция) > РезультатыПоиска.Количество();
			Элементы.Назад.Доступность = (ТекущаяПозиция > 0);
		Иначе
			ПоказаныРезультатыСПо = НСтр("ru = 'Не найдено'");
			Элементы.Далее.Доступность = Ложь;
			Элементы.Назад.Доступность = Ложь;
		КонецЕсли;
	Исключение
	КонецПопытки;	
КонецПроцедуры

// Возвращает массив объектов (возможно из одного элемента) для показа пользователю.
&НаСервереБезКонтекста
Функция ПолучитьЗначенияДляОткрытия(Объект)
	Результат = Новый Массив;
	
	// Объект ссылочного типа
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
		Результат.Добавить(Объект);
		Возврат Результат;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	ИмяМетаданного = МетаданныеОбъекта.Имя;
	
	ПолноеИмяОбъекта = ВРЕГ(Метаданные.НайтиПоТипу(ТипЗнч(Объект)).ПолноеИмя());
	ЭтоРегистрСведений = (Найти(ПолноеИмяОбъекта, "РЕГИСТРСВЕДЕНИЙ.") > 0);

	Если Не ЭтоРегистрСведений Тогда // Регистр бухгалтерии или накопления или расчета
		Регистратор = Объект["Регистратор"];
		Результат.Добавить(Регистратор);
		Возврат Результат;
	КонецЕсли;

	// Ниже - это уже регистр сведений
	Если МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		Регистратор = Объект["Регистратор"];
		Результат.Добавить(Регистратор);
		Возврат Результат;
	КонецЕсли;

	// Независимый регистр сведений
	// сперва - основные типы
	Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
		Если Измерение.Ведущее Тогда 
			ЗначениеИзмерения = Объект[Измерение.Имя];
			
			Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеИзмерения) Тогда
				Результат.Добавить(ЗначениеИзмерения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Результат.Количество() = 0 Тогда
		// теперь - любые типы
		Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			Если Измерение.Ведущее Тогда 
				ЗначениеИзмерения = Объект[Измерение.Имя];
				Результат.Добавить(ЗначениеИзмерения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Нет ни одного ведущего измерения - вернем сам ключ регистра сведений
	Если Результат.Количество() = 0 Тогда
		Результат.Добавить(Объект);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаСервере
Процедура СохранитьСтрокуПоиска()
	СохраненнаяСтрока = Элементы.ПолеВводаПоиска.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	Если СохраненнаяСтрока <> Неопределено Тогда
		Элементы.ПолеВводаПоиска.СписокВыбора.Удалить(СохраненнаяСтрока);
	КонецЕсли;
		
	Элементы.ПолеВводаПоиска.СписокВыбора.Вставить(0, СтрокаПоиска);
	КоличествоСтрок = Элементы.ПолеВводаПоиска.СписокВыбора.Количество();
	Если КоличествоСтрок > 20 Тогда
		Элементы.ПолеВводаПоиска.СписокВыбора.Удалить(КоличествоСтрок - 1);
	КонецЕсли;	
	Строки = Элементы.ПолеВводаПоиска.СписокВыбора.ВыгрузитьЗначения();
	
	ХранилищеОбщихНастроек.Сохранить("ПолнотекстовыйПоискСтрокиПолнотекстовогоПоиска", , Строки);
КонецПроцедуры	


&НаСервере
Процедура ОбновитьИндексСервер()
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Ложь);
	
	ДатаАктуальностиИндекса = ПолнотекстовыйПоиск.ДатаАктуальности();
	ИндексАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
	Элементы.ГруппаОбновлениеИндекса.Видимость = Не ИндексАктуален;
	Элементы.ОбновитьИндекс.Доступность = Не ИндексАктуален;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндекс(Команда)
	Состояние(НСтр("ru = 'Идет обновление полнотекстового индекса...
					|Пожалуйста, подождите.'"));
	ОбновитьИндексСервер();
	Состояние(НСтр("ru = 'Обновление полнотекстового индекса завершено.'"));
КонецПроцедуры

