
///////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура загружает настройки ТЧ, если это первое открытие
// то в ТЧ добавляются все ключевые операции из справочника
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка
		ЗагружаемаяНастройка = ЗагрузитьКО();
		Объект.Производительность.Загрузить(ЗагружаемаяНастройка);
	Исключение
		Сообщить(НСтр("ru = 'Не удалось загрузить настройки.'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаОбновлена = Ложь;
	ДиаграммаОбновлена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьКлючеваяОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Не ТаблицаОбновлена Или Не ДиаграммаОбновлена Тогда
		Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
			ДиаграммаОбновлена = Истина;
		ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
			ТаблицаОбновлена = Истина;
		КонецЕсли;
		ОбновитьПоказатели();
	КонецЕсли;
	
КонецПроцедуры

// Запрещает редактирование ключевой операции из формы обработки
// т.к. могут пострадать внутренние механизмы
//
&НаКлиенте
Процедура КлючеваяОперацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦелевоеВремяПриИзменении(Элемент)
	
	ТД = Элементы.Производительность.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьЦелевоеВремя(ТД.КлючеваяОперация, ТД.ЦелевоеВремя);
	ОбновитьПоказатели();
	
КонецПроцедуры

// Отображение истории выполнения ключевой операции
//
&НаКлиенте
Процедура ПроизводительностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТЧ = Объект.Производительность.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Лев(Поле.Имя, 18) <> "Производительность" Или
		СтрокаТЧ.КлючеваяОперация = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный()
		Тогда
			Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = 0;
	ОкончаниеПериода = 0;
	ИндексПериода = Число(Сред(Поле.Имя, 19));
	Если Не ПолучитьДатыОтрезка(НачалоПериода, ОкончаниеПериода, ИндексПериода) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИстории = Новый Структура("КлючеваяОперация, ДатаНачала, ДатаОкончания", СтрокаТЧ.КлючеваяОперация, НачалоПериода, ОкончаниеПериода);
	
	ПараметрыОткрытия = Новый Структура("НастройкиИстории", НастройкиИстории);
	ОткрытьФормуМодально("Обработка.ОценкаПроизводительности.Форма.ИсторияВыполнеия", ПараметрыОткрытия);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТД = Элементы.Производительность.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Врем = Объект.Производительность;
	ТекущийИндекс = Врем.Индекс(ТД);
	
	Если Врем.Количество() <= 1 ИЛИ 
		ТекущийИндекс = 0 ИЛИ 
		ТД.КлючеваяОперация = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный()
		Тогда
			Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = -1;
	ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТД = Элементы.Производительность.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Врем = Объект.Производительность;
	ТекущийИндекс = Врем.Индекс(ТД);
	
	Если Врем.Количество() <= 1 Или
		ТекущийИндекс = Врем.Количество() - 1 Или
		Врем[ТекущийИндекс + 1].КлючеваяОперация = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный() Или
		ТД.КлючеваяОперация = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный()
		Тогда
			Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = 1;
	ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортДанных(Команда)
	
	АдресВХранилище = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	ИмяФайла = "";
	РезультатВызова = ОценкаПроизводительностиКлиент.ВызватьДиалогРаботыСФайлами(
		РежимДиалогаВыбораФайла.Сохранение, 
		ИмяФайла, 
		АдресВХранилище, 
		"zip");
	
	Если Не РезультатВызова Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЭкспорта = ПодготовитьПараметрыЭкспорта();
	
	Состояние(НСтр("ru = 'Экспорт данных...'"));
	Экспортировать(АдресВХранилище, ПараметрыЭкспорта);
	
	//ОценкаПроизводительностиКлиент.СохранитьФайлНаКлиент(АдресВХранилище, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуМодально("Обработка.ОценкаПроизводительности.Форма.НастройкаПодсистемы");
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьAPDEX(Команда)
	
	СтрокаТЧ = Объект.Производительность.НайтиПоИдентификатору(Элементы.Производительность.ТекущаяСтрока);
	Элемент = Элементы.Производительность.ТекущийЭлемент;
	
	Если Лев(Элемент.Имя, 18) <> "Производительность" Или
		СтрокаТЧ.КлючеваяОперация = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный()
		Тогда
			Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ[Элемент.Имя] = 0 Тогда
		Предупреждение(НСтр("ru = 'Отсутствуют замеры производительности.
			|Рассчетать целевое время невозможно.'"));
		Возврат;
	КонецЕсли;
	
	ЗначениеAPDEX = 0;
	Если Не ВвестиЧисло(ЗначениеAPDEX, НСтр("ru = 'Введите желаемое значение APDEX'"), 3, 2) Тогда
		Возврат;
	КонецЕсли;
	
	Если 0 > ЗначениеAPDEX Или ЗначениеAPDEX > 1 Тогда
		Предупреждение(НСтр("ru = 'Введен неправильный показатель APDEX.
			|Допустимые значения от 0 до 1.'"));
		Возврат;
	КонецЕсли;
	
	ЗначениеAPDEX = ?(ЗначениеAPDEX = 0, 0.001, ЗначениеAPDEX);
	СтрокаТЧ[Элемент.Имя] = ЗначениеAPDEX;
	
	ИндексПериода = Число(Сред(Элемент.Имя, 19));
	ЦелевоеВремя = РассчетатьЦелевоеВремя(СтрокаТЧ.КлючеваяОперация, ЗначениеAPDEX, ИндексПериода);
	
	СтрокаТЧ.ЦелевоеВремя = ЦелевоеВремя;
	ЦелевоеВремяПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	
	ЗначенияОтбора = ОткрытьФормуМодально("Обработка.ОценкаПроизводительности.Форма.ФормаОтбора");
	
	Если ЗначенияОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПоказатели(ЗначенияОтбора);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ (СЕРВЕР)

// Процедура рассчитывает показатели производительности
//
&НаСервере
Процедура ОбновитьПоказатели(ЗначенияОтбора = Неопределено)
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
		ДиаграммаОбновлена = Истина;
		ТаблицаОбновлена = Ложь;
	ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
		ТаблицаОбновлена = Истина;
		ДиаграммаОбновлена = Ложь;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не НастройкаВыполнена() Тогда
		Возврат;
	КонецЕсли;
	
	// Получение итоговой ТЗ которая будет выведена пользователю
	ТЗ = ОбработкаОбъект.ПолучитьПоказателиПроизводительности();
	Если ТЗ = Неопределено Тогда
		СП = Новый СообщениеПользователю;
		СП.Поле = "Объект.ДатаОкончания";
		СП.Текст = НСтр("ru = 'Период установлен не верно.'");
		СП.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначенияОтбора <> Неопределено Тогда
		УстановитьОтборТЗ(ТЗ, ЗначенияОтбора);
	КонецЕсли;
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
		
		ОбновитьДиаграмму(ТЗ);
		
	ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
		
		ОбработатьРеквизитыОбъекта(ТЗ.Колонки);
		Объект.Производительность.Загрузить(ТЗ);
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет целевое время для указанного значения APDEX
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации, ключевая операция, для которой следует рассчетать целевое время
//  ЗначениеAPDEX - Число, APDEX, для которого необходимо подобрать целевое время
//  ИндексПериода - Число, индекс периода, для которого будет вычислено целевое время
//
// Возвращаемое значение:
//  Число - целевое время, при котором APDEX будет равен указанному значению
//
&НаСервере
Функция РассчетатьЦелевоеВремя(КлючеваяОперация, ЗначениеAPDEX, ИндексПериода)
	
	ТЗ = ПолучитьТЗДляВычисленияAPDEX();
	СтрокаТЗ = ТЗ.Добавить();
	СтрокаТЗ.КлючеваяОперация = КлючеваяОперация;
	СтрокаТЗ.Приоритет = 1;
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ШагЧисло = 0;
	КоличествоШагов = 0;
	Если Не ЭтотОбъект.ПолучитьПериодичность(ШагЧисло, КоличествоШагов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачалоПериода = Объект.ДатаНачала + (ШагЧисло * ИндексПериода);
	ОкончаниеПериода = НачалоПериода + ШагЧисло - 1;
	
	ПараметрыВычисления = ЭтотОбъект.ПолучитьСтруктуруПараметров();
	ПараметрыВычисления.ШагЧисло = ШагЧисло;
	ПараметрыВычисления.КоличествоШагов = 1;
	ПараметрыВычисления.ДатаНачала = НачалоПериода;
	ПараметрыВычисления.ДатаОкончания = ОкончаниеПериода;
	ПараметрыВычисления.ВыводитьИтоги = Ложь;
	
	ЦелевоеВремя = 0.01;
	ПредыдущеецелевоеВремя = ЦелевоеВремя;
	ШагСекунд = 1;
	Пока Истина Цикл
		
		ТЗ[0].ЦелевоеВремя = ЦелевоеВремя;
		ПараметрыВычисления.ТЗ = ТЗ;
		
		ТЗРассчитанная = ЭтотОбъект.ПолучитьAPDEX(ПараметрыВычисления);
		ЗначениеAPDEXРассчитанное = ТЗРассчитанная[0][3];
		
		Если ЗначениеAPDEXРассчитанное < ЗначениеAPDEX Тогда
			
			ПредыдущеецелевоеВремя = ЦелевоеВремя;
			ЦелевоеВремя = ЦелевоеВремя + ШагСекунд;
		
		ИначеЕсли ЗначениеAPDEXРассчитанное > ЗначениеAPDEX Тогда
			
			Если ШагСекунд = 0.01 Или ЦелевоеВремя = 0.01 Тогда
				Прервать;
			КонецЕсли;
			
			ШагСекунд = ШагСекунд / 10;
			ЦелевоеВремя = ПредыдущееЦелевоеВремя + ШагСекунд;
		
		ИначеЕсли ЗначениеAPDEXРассчитанное = ЗначениеAPDEX Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЦелевоеВремя;
	
КонецФункции


///////////////////////////////////////////////////////////////////////
// РАБОТА С ФОРМОЙ (СЕРВЕР)

// Обрабатывает реквизиты табличной части "Производительность"
//
// Параметры:
//  КолонкиТЗ - КоллекцияКолонокТаблицыЗначений, из них вычисляется какие реквизиты удалить, а какие оставить
//
&НаСервере
Процедура ОбработатьРеквизитыОбъекта(КолонкиТЗ)
	
	РеквизитыОбъекта = ПолучитьРеквизиты("Объект.Производительность");
	УдаляемыеРеквизиты = ПолучитьУдаляемыеРеквизиты(РеквизитыОбъекта);
	
	// Колонки "Ключевая операция", "Приоритет" и "Целевое время"
	КоличествоПредопределенныхКолонок = 3;
	
	// Меняется состав колонок
	Если УдаляемыеРеквизиты.Количество() <> (КолонкиТЗ.Количество() - КоличествоПредопределенныхКолонок) Тогда
		
		ИзменитьСоставРеквизитовОбъекта(КолонкиТЗ, УдаляемыеРеквизиты);
		
		// Формирование списков полей для условного оформления
		ПоляОтбора = Новый Массив;
		ПоляОформления = Новый Массив;
		Для Каждого КолонкаТЗ Из КолонкиТЗ Цикл
			Если КолонкиТЗ.Индекс(КолонкаТЗ) < КоличествоПредопределенныхКолонок Тогда
				Продолжить;
			КонецЕсли;
			ПоляОтбора.Добавить("Объект.Производительность." + КолонкаТЗ.Имя);
			ПоляОформления.Добавить(КолонкаТЗ.Имя);
		КонецЦикла;
		
		УстановитьУсловноеОформлениеТЧ(ПоляОтбора, ПоляОформления, УсловноеОформление);
		
	// Меняются только заголовки колонок
	Иначе
		
		Сч = -1;
		Для Каждого Элемент Из Элементы.Производительность.ПодчиненныеЭлементы Цикл
			Сч = Сч + 1;
			// Пропускаем первые 3 элемента, чтобы не менять заголовки у колонок "Ключевая операция", "Приоритет" и "Целевое время"
			Если Сч < КоличествоПредопределенныхКолонок Тогда
				Продолжить;
			КонецЕсли;
			Элемент.Заголовок = КолонкиТЗ[Сч].Заголовок;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяются реквизиты формы ненужные удаляются нужные добавляются
//
// Параметры:
//  КолонкиТЗ - КоллекцияКолонокТаблицыЗначений, из них вычисляется какие реквизиты удалить, а какие оставить
//  УдаляемыеРеквизиты - Массив, список полных имен удаляемых реквизитов
//  	имена в формате Объект.Производительность.ПроизводительностьN, где N номер
//
&НаСервере
Процедура ИзменитьСоставРеквизитовОбъекта(КолонкиТЗ, УдаляемыеРеквизиты)
	
	// Удаление колонок из табличной части "Производительность"
	Для а = 0 По УдаляемыеРеквизиты.Количество() - 1 Цикл
		
		// Имена удаляемых реквизитов Объект.Производительность.ПроизводительностьN
		// где N номер, это выражение получает строку вида ПроизводительностьN
		Элемент = Элементы.Найти(Сред(УдаляемыеРеквизиты[а], 27));
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавляемыеРеквизиты = ПолучитьДобавляемыеРеквизиты(КолонкиТЗ);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Добавление колонок в табличную часть "Производительность"
	РеквизитыОбъекта = ПолучитьРеквизиты("Объект.Производительность");
	Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
		
		ИмяРеквизита = РеквизитОбъекта.Имя;
		Если Лев(ИмяРеквизита, 18) = "Производительность" Тогда
			Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.Производительность);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "Объект.Производительность." + ИмяРеквизита;
			Элемент.Заголовок = РеквизитОбъекта.Заголовок;
			Элемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
			Элемент.Формат = "ЧЦ=5; ЧДЦ=2; ЧН=";
			Элемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает массив реквизитов формы(колонки ТЧ "Производительность"), которые надо добавить
//
// Параметры:
//  КолонкиТЗ - КоллекцияКолонокТаблицыЗначений, список колонок, которые необходимо создать
//
// Возвращаемое значение:
//  Массив - Массив реквизтов формы
//
&НаСервереБезКонтекста
Функция ПолучитьДобавляемыеРеквизиты(КолонкиТЗ)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипЧисло63 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 3, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого КолонкаТЗ Из КолонкиТЗ Цикл
		
		Если КолонкиТЗ.Индекс(КолонкаТЗ) < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизитФормы = Новый РеквизитФормы(КолонкаТЗ.Имя, ТипЧисло63, "Объект.Производительность", КолонкаТЗ.Заголовок);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизитФормы);
		
	КонецЦикла;
	
	Возврат ДобавляемыеРеквизиты;
	
КонецФункции

// Функция создает массив реквизитов формы(колонки ТЧ "Производительность"), которые надо удалить
// и удаляет элементы формы связанные с реквизитами
//
// Возвращаемое значение:
//  Массив - Массив реквизтов формы
//
&НаСервереБезКонтекста
Функция ПолучитьУдаляемыеРеквизиты(РеквизитыОбъекта)
	
	УдаляемыеРеквизиты = Новый Массив;
	
	а = 0;
	Пока а < РеквизитыОбъекта.Количество() Цикл
		
		ИмяРеквизита = РеквизитыОбъекта[а].Имя;
		Если Лев(ИмяРеквизита, 18) = "Производительность" Тогда
			УдаляемыеРеквизиты.Добавить("Объект.Производительность." + ИмяРеквизита);
		КонецЕсли;
		а = а + 1;
		
	КонецЦикла;
	
	Возврат УдаляемыеРеквизиты;
	
КонецФункции

// Процедура устанавливает условное оформление ТЧ "Производительность"
//
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеТЧ(ПоляОтбора, ПоляОформления, УсловноеОформление);
	
	УсловноеОформление.Элементы.Очистить();
	
	// Убрать приоритет у ключевой операции ОбщаяПроизводительностьСистемы
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный();
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Приоритет");
	
	// Только просмотр колонки Приоритет
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.НомерСтроки");
	ЭлементОтбора.ПравоеЗначение = 0;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Приоритет");
	
	// Только просмотр целевого времени у ключевой операции ОбщаяПроизводительностьСистемы
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный();
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЦелевоеВремя");
	
	// Отметка незаполненного целевого времени у всех кроме ОбщаяПроизводительностьСистемы
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	// Условие для оформления
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный();
	//
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.ЦелевоеВремя");
	ЭлементОтбора.ПравоеЗначение = 0;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЦелевоеВремя");
	
	КоличествоПолей = ПоляОтбора.Количество() - 1;
	
	// Оформление если операция не выполнялась
	Для а = 0 По КоличествоПолей Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Вид оформления
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Н/Д");
		// Условие для оформления
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[а]);
		ЭлементОтбора.ПравоеЗначение = 0;
		// Оформляемое поле
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПоляОформления[а]);
		
	КонецЦикла;
	
	// Оформление для показателей производительности
	Соответствие = ПолучитьСоответствие();
	Для Каждого КлючЗначение Из Соответствие Цикл
	
		Для а = 0 По КоличествоПолей Цикл
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			
			// Вид оформления
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", КлючЗначение.Значение.Цвет);
			// Условие для оформления
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[а]);
			ЭлементОтбора.ПравоеЗначение = КлючЗначение.Значение.От;
			// Условие для оформления
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[а]);
			ЭлементОтбора.ПравоеЗначение = КлючЗначение.Значение.До;
			// Оформляемое поле
			ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПоляОформления[а]);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обновление диаграммы
//
// Параметры:
//  ТЗ - ТаблицаЗначений, данные, по которым будет обновлена диаграмма
//
&НаСервере
Процедура ОбновитьДиаграмму(ТЗ)
	
	Диаграмма = Объект.Диаграмма;
	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	Диаграмма.МаксимальноеЗначение		= 1;
	Диаграмма.МинимальноеЗначение		= 0;
	Диаграмма.БазовоеЗначение			= 0;
	Диаграмма.ПропускатьБазовоеЗначение	= Истина;
	
	Диаграмма.Очистить();
	
	ТекстЗаголовка = НСтр("ru = 'Диаграмма производительности с %1 по %2 - шаг: %3'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"));
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2", Формат(Объект.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%3", Строка(Объект.Шаг));
	Элементы.Диаграмма.Заголовок = ТекстЗаголовка;
	
	ТЗ.Колонки.Удалить(1); // Приоритет
	ТЗ.Колонки.Удалить(1); // ЦелевоеВремя
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		Серия = Диаграмма.Серии.Добавить(СтрокаТЗ.КлючеваяОперация);
		Серия.Текст = СтрокаТЗ.КлючеваяОперация;
		
	КонецЦикла;
	
	ТЗ.Колонки.Удалить(0); // КлючеваяОперация
	
	Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
		
		Точка = Диаграмма.Точки.Добавить(КолонкаТЗ.Имя);
		Точка.Текст = ?(Объект.Шаг = "Час", Лев(КолонкаТЗ.Заголовок, 2), КолонкаТЗ.Заголовок); //Для отображения только часов если шаг Час
		Строка = 0;
		Столбец = ТЗ.Колонки.Индекс(КолонкаТЗ);
		Для Каждого Серия Из Диаграмма.Серии Цикл
			
			ЗначениеТочки = ТЗ[Строка][Столбец];
			Если ЗначениеТочки <> Неопределено И ЗначениеТочки <> Null Тогда
				Диаграмма.УстановитьЗначение(Точка, Серия, ?(ЗначениеТочки = 0.001 ИЛИ ЗначениеТочки = 0, ЗначениеТочки, ЗначениеТочки - 0.001));
			КонецЕсли;	
			Строка = Строка + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ЭКСПОРТ ДАННЫХ

&НаКлиенте
Функция ПодготовитьПараметрыЭкспорта()
	
	КлючевыеОперации = Новый Массив;
	
	ОбщаяПроизводительность = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный();
	Для Каждого СтрокаТЗ Из Объект.Производительность Цикл
		
		Если СтрокаТЗ.КлючеваяОперация = ОбщаяПроизводительность Тогда
			Продолжить;
		КонецЕсли;
		
		КлючевыеОперации.Добавить(СтрокаТЗ.КлючеваяОперация);
		
	КонецЦикла;
	
	ПараметрыЭкспорта = Новый Структура("ДатаНачала, ДатаОкончания, Шаг, МассивКО");
	ПараметрыЭкспорта.ДатаНачала	= Объект.ДатаНачала;
	ПараметрыЭкспорта.ДатаОкончания	= Объект.ДатаОкончания;
	ПараметрыЭкспорта.Шаг			= Строка(Объект.Шаг);
	ПараметрыЭкспорта.МассивКО		= КлючевыеОперации;
	
	Возврат ПараметрыЭкспорта;
	
КонецФункции

// Экспортировать данные замеров на указанном интервале
//
&НаСервереБезКонтекста
Процедура Экспортировать(АдресВХранилище, ПараметрыЭкспорта)
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	ИмяФайла = ВременныйКаталог + "/exp.zip";
	ИмяФайлаОписания = ВременныйКаталог + "/Description.xml";
	ИмяФайлаНастроек = ВременныйКаталог + "/Settings.xml";
	СоздатьКаталог(ВременныйКаталог);
	
	ЗаписьZip	= Новый ЗаписьZipФайла(ИмяФайла);
	Начало		= ПараметрыЭкспорта.ДатаНачала;
	Конец		= ПараметрыЭкспорта.ДатаОкончания;
	МассивКО	= ПараметрыЭкспорта.МассивКО;
	
	НачалоИнтервала = Начало;
	КонецИнтервала = Конец;
	
	ШиринаИнтервалаПакета = 3600 - 1;
	КоличествоПакетов = (Конец - Начало) / ШиринаИнтервалаПакета;
	КоличествоПакетов = Цел(КоличествоПакетов) + ?(КоличествоПакетов - Цел(КоличествоПакетов) > 0, 1, 0);
	
	Пока НачалоИнтервала < Конец Цикл
		КонецИнтервала = НачалоИнтервала + ШиринаИнтервалаПакета;
		
		Если КонецИнтервала > Конец Тогда
			КонецИнтервала = Конец;
		КонецЕсли;
		
		ИмяВременногоФайла = ВременныйКаталог + "/" + ИмяФайлаПоВремени(НачалоИнтервала) + ".1capd";
		ЭкспортироватьИнтервал(ИмяВременногоФайла, НачалоИнтервала, КонецИнтервала, МассивКО);
		
		ЗаписьZip.Добавить(ИмяВременногоФайла);
		
		НачалоИнтервала = КонецИнтервала + 1;
		
	КонецЦикла;
	
	ЗаполнитьОписание(ИмяФайлаОписания, Начало, Конец, МассивКО);
	ЗаписьZip.Добавить(ИмяФайлаОписания);
	
	ЗаполнитьНастройки(ИмяФайлаНастроек, Начало, Конец, ПараметрыЭкспорта.Шаг, МассивКО);
	ЗаписьZip.Добавить(ИмяФайлаНастроек);
	
	ЗаписьZip.Записать();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВХранилище);
	
	УдалитьФайлыНаСервере(ВременныйКаталог);
	
	
КонецПроцедуры // Экспортировать()

// Экспортировать данные замеров информационной базы на указанном интервале
//
// Параметры:
//  ИмяВременногоФайла - Строка, имя файла для записи данных
//  Начало - ДатаВремя, начало интервала поиска
//  Конец - ДатаВремя, конец интервала поиска
//  МассивКО - Массив, массив ключевых операций данные по которым надо экспортировать
//
&НаСервереБезКонтекста
Процедура ЭкспортироватьИнтервал(ИмяВременногоФайла, Начало, Конец, МассивКО)
	
	НаборЗаписейЗамеры = ПолучитьНаборЗаписейЗамерыВремени(Начало, Конец, МассивКО);
	
	Если Не ЗначениеЗаполнено(НаборЗаписейЗамеры) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписатьXML(ЗаписьXML, НаборЗаписейЗамеры);
	
КонецПроцедуры // ЭкспортироватьИнтервал()

// Получить набор записей регистра
//
// Параметры:
//  Начало - ДатаВремя, начало интервала поиска
//  Конец - ДатаВремя, конец интервала поиска
//  МассивКО - Массив, экспортируемые ключевые операции
//
// Возвращаемое значение:
//  РегистрСведений.ЗамерыВремени.НаборЗаписей
//
&НаСервереБезКонтекста
Функция ПолучитьНаборЗаписейЗамерыВремени(Начало, Конец, МассивКО)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ЗамерыВремени;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ";
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
			|	Замеры." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
	КонецЦикла;
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ТекстЗапроса = ТекстЗапроса + "
			|	Замеры." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + "
			|	Замеры." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
	КонецЦикла;
	
	// Убираем последнюю запятую
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	" + МетаданныеРегистра.ПолноеИмя() + " КАК Замеры
		|ГДЕ
		|	Замеры.ДатаЗамера МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Замеры.КлючеваяОперация В(&МассивКО)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Конец);
	Запрос.УстановитьПараметр("МассивКО", МассивКО);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	Если Результат.Пустой() Тогда
		Возврат НаборЗаписей;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Запись[Измерение.Имя] = Выборка[Измерение.Имя];
		КонецЦикла;
		Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			Запись[Ресурс.Имя] = Выборка[Ресурс.Имя];
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			Запись[Реквизит.Имя] = Выборка[Реквизит.Имя];
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции

// Заполнить файл описания экспорта
//
// Параметры:
//  ИмяФайлаОписания - Строка, имя файла для размещения описания
//  Начало - ДатаВермя, начало периода экспорта
//  Конец - ДатаВремя, конец периода экспорта
//
&НаСервереБезКонтекста
Процедура ЗаполнитьОписание(ИмяФайлаОписания, Начало, Конец, МассивКО)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаОписания);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CommonSettings");
	
	ЗаписьXML.ЗаписатьАтрибут("Version", "1.0.0.3");
	ЗаписьXML.ЗаписатьАтрибут("BeginDate", Строка(Начало));
	ЗаписьXML.ЗаписатьАтрибут("EndDate", Строка(Конец));
	ЗаписьXML.ЗаписатьАтрибут("ExportDate", Строка(ТекущаяДата()));
	
	Для а = 0 По МассивКО.Количество() - 1 Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("KeyOperation");
		ЗаписьXML.ЗаписатьАтрибут("name", Строка(МассивКО[а]));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры // ЗаполнитьОписание()

//Заполняет файл настроек
//
&НаСервереБезКонтекста
Процедура ЗаполнитьНастройки(ИмяФайлаНастроек, Начало, Конец, Шаг, МассивКО)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаНастроек);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CommonSettings");
	
	ЗаписьXML.ЗаписатьАтрибут("BeginDate", Строка(Начало));
	ЗаписьXML.ЗаписатьАтрибут("EndDate", Строка(Конец));
	ЗаписьXML.ЗаписатьАтрибут("Step", Шаг);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("TableSettings");
	ЗаписьXML.ЗаписатьАтрибут("RowCount", Формат(МассивКО.Количество(), "ЧГ=0"));
	
	Для Сч = 0 По МассивКО.Количество() - 1 Цикл
		ЗаписатьXML(ЗаписьXML, МассивКО[Сч].ПолучитьОбъект());
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Сдвигает строки табличной части и меняет приоритеты ключевых операций
//
// Параметры:
//  НаправлениеСдвига - Число,
//  	-1, сдвиг вверх
//  	1, сдвиг вниз
//  ТекущийИндекс - Число, индекс сдвигаемой строки
//
&НаКлиенте
Процедура ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс)
	
	Врем = Объект.Производительность;
	
	Приоритет1 = Врем[ТекущийИндекс].Приоритет;
	Приоритет2 = Врем[ТекущийИндекс + НаправлениеСдвига].Приоритет;
	
	ОбментяьПриоритеты(
		Врем[ТекущийИндекс].КлючеваяОперация,
		Приоритет1,
		Врем[ТекущийИндекс + НаправлениеСдвига].КлючеваяОперация, 
		Приоритет2);
		
	Врем[ТекущийИндекс].Приоритет = Приоритет2;
	Врем[ТекущийИндекс + НаправлениеСдвига].Приоритет = Приоритет1;
	
	Врем.Сдвинуть(ТекущийИндекс, НаправлениеСдвига);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Блокировки объектов при изменении

// Устанавливает исключительную управляемую блокировку на ссылку
//
&НаСервереБезКонтекста
Процедура ЗаблокироватьСсылку(Ссылка)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить(Ссылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

// Начинает транзакцию и устанавливает исключительную 
// управляемую блокировку по значению ссылки
//
// Параметры:
//  Ссылка - ЛюбаяСсылка, ссылка, которую надо заблокировать
//
// Возвращаемое значение:
//  Объект - объект полученный из ссылки
//
&НаСервереБезКонтекста
Функция НачатьИзменениеОбъекта(Ссылка)
	
	НачатьТранзакцию();
	
	ЗаблокироватьСсылку(Ссылка);
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Возврат Объект;
	
КонецФункции

// Фиксирует транзакцию и записывает объект
//
// Параметры:
//  Объект - ЛюбойОбъект, объект, изменения которого следует зафиксировать
//  Записывать - Булево, необходимость записи объекта перед фиксацией транзакции
//
&НаСервереБезКонтекста
Процедура ЗафиксироватьИзменениеОбъекта(Объект, Записывать = Истина)
	
	Если Записывать Тогда
		Объект.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

// Выполняет обмен приоритетами ключевых операций
//
// Параметры:
//  КлючеваяОперация1 - СправочникСсылка.КлючевыеОперации
//  Приоритет1 - Число, будет присвоен КлючеваяОперация2
//  КлючеваяОперация2 - СправочникСсылка.КлючевыеОперации
//  Приоритет2 - Число, будет присвоен КлючеваяОперация1
//
&НаСервере
Процедура ОбментяьПриоритеты(КлючеваяОперация1, Приоритет1, КлючеваяОперация2, Приоритет2)
	
	НачатьТранзакцию();
	
	ОбъектКлючевойОперации = НачатьИзменениеОбъекта(КлючеваяОперация1);
	ОбъектКлючевойОперации.Приоритет = Приоритет2;
	ОбъектКлючевойОперации.ДополнительныеСвойства.Вставить(ОценкаПроизводительностиВызовСервераПолныеПрава.НеПроверятьПриоритет());
	ЗафиксироватьИзменениеОбъекта(ОбъектКлючевойОперации);
	
	ОбъектКлючевойОперации = НачатьИзменениеОбъекта(КлючеваяОперация2);
	ОбъектКлючевойОперации.Приоритет = Приоритет1;
	ЗафиксироватьИзменениеОбъекта(ОбъектКлючевойОперации);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура открывает форму выбора справочника КлючевыеОперации
// и устанавливает отбор, чтобы в списке небыло операций которые уже выбраны
//
&НаКлиенте
Процедура ОткрытьФормуВыбора()
	
	ТЧ = Объект.Производительность;
	
	Отбор = Новый Массив;
	Для а = 0 По ТЧ.Количество() -1 Цикл
		Отбор.Добавить(ТЧ[а].КлючеваяОперация);
	КонецЦикла;
	
	Структура = Новый Структура("Отбор");
	Структура.Отбор = Отбор;
	
	РезультатВыбора = ОткрытьФормуМодально("Справочник.КлючевыеОперации.ФормаВыбора", Структура, ЭтаФорма);
	
	ТекущаяСтрока = Элементы.Производительность.ТекущиеДанные;
	Если РезультатВыбора = Неопределено Тогда
		Если ТекущаяСтрока = Неопределено ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.КлючеваяОперация) Тогда
			Возврат;
		КонецЕсли;
		ТЧ.Удалить(ТекущаяСтрока.НомерСтроки - 1);
		Возврат;
	КонецЕсли;
	
	ПредопределенныйЭлемент = ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный();
	ТекущаяСтрока.КлючеваяОперация = РезультатВыбора.КлючеваяОперация;
	ТекущаяСтрока.ЦелевоеВремя = РезультатВыбора.ЦелевоеВремя;
	ТекущаяСтрока.Приоритет = РезультатВыбора.Приоритет;
	
	ТЧ.Сортировать("Приоритет");
	МассивСтрок = ТЧ.НайтиСтроки(Новый Структура("КлючеваяОперация", ПредопределенныйЭлемент));
	Если МассивСтрок.Количество() > 0 Тогда
		ТекущийИндекс = ТЧ.Индекс(МассивСтрок[0]);
		ТЧ.Сдвинуть(ТекущийИндекс, ТЧ.Количество() - 1 - ТекущийИндекс);
	КонецЕсли;
	
КонецПроцедуры

// Функция получает имя файла по указанному времени
//
//
// Параметры:
//  Время - ДатаВремя
//
// Возвращаемое значение:
//  Строка - Имя файла
//
&НаСервереБезКонтекста
Функция ИмяФайлаПоВремени(Время)
	
	Возврат Формат(Время, "ДФ=""гггг-ММ-дд ЧЧ-мм-сс""");
	
КонецФункции // ИмяФайлаПоВремени()

// Процедура удаляет каталог на сервере
//
&НаСервереБезКонтекста
Процедура УдалитьФайлыНаСервере(Каталог)
	
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Вычисляет точные дату начала и окончания на выбранном отрезкпе
//
// Параметры:
//  ДатаНачала [OUT] - Дата, дата начала выбранного периода
//  ДатаОкончания [OUT] - Дата, дата окончания выбранного периода
//  ИндексПериода [IN] - Число, индекс выбранного периода
//
// Возвращаемое значение:
//  Булево - 
//  	Истина, даты рассчитаны
//  	Ложь, даты не рассчитаны
//
&НаСервере
Функция ПолучитьДатыОтрезка(ДатаНачала, ДатаОкончания, ИндексПериода)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ШагЧисло = 0;
	КоличествоШагов = 0;
	Если Не ЭтотОбъект.ПолучитьПериодичность(ШагЧисло, КоличествоШагов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КоличествоШагов <= ИндексПериода Тогда
		ВызватьИсключение НСтр("ru = 'Количество шагов не может быть меньше индекса.'");
	КонецЕсли;
	
	ДатаНачала = Объект.ДатаНачала + (ШагЧисло * ИндексПериода);
	ДатаОкончания = ДатаНачала + ШагЧисло - 1;
	
	Возврат Истина;
	
КонецФункции

// Создает таблицу значения, которая необходима для рассчета APDEX
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со структурой необходимой для рассчета APDEX
//
&НаСервереБезКонтекста
Функция ПолучитьТЗДляВычисленияAPDEX()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить(
		"КлючеваяОперация", 
		Новый ОписаниеТипов("СправочникСсылка.КлючевыеОперации")
		);
	ТЗ.Колонки.Добавить(
		"Приоритет", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный))
		);
	ТЗ.Колонки.Добавить(
		"ЦелевоеВремя",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный))
		);
	
	Возврат ТЗ;
	
КонецФункции


///////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (ОФОРМЛЕНИЕ, НАСТРОЙКИ)

// Функция возвращает цвет значения Неприемлимо
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветНеприемлимо()
	
	Возврат Новый Цвет(187, 187, 187);
	
КонецФункции

// Функция возвращает цвет значения Плохо
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветПлохо()
	
	Возврат Новый Цвет(255, 212, 171);
	
КонецФункции

// Функция возвращает цвет значения Удовлетворительно
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветУдовлетворительно()
	
	Возврат Новый Цвет(255, 255, 153);
	
КонецФункции

// Функция возвращает цвет значения Хорошо
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветХорошо()
	
	Возврат Новый Цвет(204, 255, 204);
	
КонецФункции

// Функция возвращает цвет значения Отлично
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветОтлично()
	
	Возврат Новый Цвет(204, 255, 255);
	
КонецФункции

// Функция возвращает соответствие, в котором 
// Ключ - Строка, оценка производительности
// Значение - Структура, параметры оценки
//
// Возвращаемое значение:
//  Соответствие
//
&НаСервереБезКонтекста
Функция ПолучитьСоответствие()
	
	Соответствие = Новый Соответствие;
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.001; // 0 означает что операция не выполнялась вообще
	Значения.До = 0.5;
	Значения.Цвет = ЦветНеприемлимо();
	Соответствие.Вставить("Неприемлимо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.5;
	Значения.До = 0.7;
	Значения.Цвет = ЦветПлохо();
	Соответствие.Вставить("Плохо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.7;
	Значения.До = 0.85;
	Значения.Цвет = ЦветУдовлетворительно();
	Соответствие.Вставить("Удовлетворительно", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.85;
	Значения.До = 0.94;
	Значения.Цвет = ЦветХорошо();
	Соответствие.Вставить("Хорошо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.94;
	Значения.До = 1.002; // т.к. в условном оформлении к значению "До" применяется условие "Меньше", а не "МеньшеИлиРавно"
	Значения.Цвет = ЦветОтлично();
	Соответствие.Вставить("Отлично", Значения);
	
	Возврат Соответствие;
	
КонецФункции

// Функция проверяет правильность настроек формы
//
// Возварщаемое значение:
//  Истина - настройки верны
//  Ложь - Настройки не верны
//
&НаСервере
Функция НастройкаВыполнена()
	
	Выполнена = Истина;
	Для Каждого СтрокаТЧ Из Объект.Производительность Цикл
		
		Если СтрокаТЧ.ЦелевоеВремя = 0 
			И СтрокаТЧ.КлючеваяОперация <> ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный()
			Тогда
			СП = Новый СообщениеПользователю;
			СП.ПутьКДанным = "Объект";
			СП.Поле = "Производительность[" + Объект.Производительность.Индекс(СтрокаТЧ) + "].ЦелевоеВремя";
			СП.Текст = НСтр("ru = 'Целевое время обязательно должно быть заполнено.'");
			СП.Сообщить();
			
			Выполнена = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Выполнена;
	
КонецФункции

// Процедура при первом открытии офрмы обработки заполняет 
// ТЧ "Производительность" из справочника "КлючевыеОперации"
//
&НаСервереБезКонтекста
Функция ЗагрузитьКО()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОПС", ОценкаПроизводительностиВызовСервераПолныеПрава.ПолучитьПредопределенный());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК КлючеваяОперация,
	|	ВЫБОР
	|		КОГДА КлючевыеОперации.Ссылка = &ОПС
	|			ТОГДА ""я""
	|		ИНАЧЕ КлючевыеОперации.Приоритет
	|	КОНЕЦ КАК Приоритет,
	|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|АВТОУПОРЯДОЧИВАНИЕ";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Меняет целевое время ключевой операции
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации, операция, у которой необходимо изменить целеове время
//  ЦелевоеВремя - Число, новое целевое время
//
&НаСервере
Процедура ИзменитьЦелевоеВремя(КлючеваяОперация, ЦелевоеВремя)
	
	КлючеваяОперацияОбъект = НачатьИзменениеОбъекта(КлючеваяОперация);
	КлючеваяОперацияОбъект.ЦелевоеВремя = ЦелевоеВремя;
	ЗафиксироватьИзменениеОбъекта(КлючеваяОперацияОбъект);
	
КонецПроцедуры

// Удаляет из таблицы значений строки не подходящие под отбор
//
// Параметры:
//  ТЗ - ТаблицаЗначений, таблица, которую нужно отфильтровать
//  ЗначенияОтбора - Массив, массив строк со значениями отбора
//
&НаСервереБезКонтекста
Процедура УстановитьОтборТЗ(ТЗ, ЗначенияОтбора)
	
	Если ЗначенияОтбора.Направление > 0 Тогда
		Если ВРег(ЗначенияОтбора.Состояние) = "ХОРОШО" Тогда
			Предел = 0.93;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "УДОВЛЕТВОРИТЕЛЬНО" Тогда
			Предел = 0.84;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "ПЛОХО" Тогда
			Предел = 0.69;
		КонецЕсли;
	ИначеЕсли ЗначенияОтбора.Направление < 0 Тогда
		Если ВРег(ЗначенияОтбора.Состояние) = "ХОРОШО" Тогда
			Предел = 0.85;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "УДОВЛЕТВОРИТЕЛЬНО" Тогда
			Предел = 0.7;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "ПЛОХО" Тогда
			Предел = 0.5;
		КонецЕсли;
	КонецЕсли;
	
	Сч = 0;
	Удалять = Ложь;
	Пока Сч < ТЗ.Количество() Цикл
		
		Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
			Если (Лев(КолонкаТЗ.Имя, 18) <> "Производительность") Или (ТЗ[Сч][КолонкаТЗ.Имя] = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначенияОтбора.Направление > 0 Тогда
				Если ТЗ[Сч][КолонкаТЗ.Имя] > Предел Тогда
					Удалять = Ложь;
					Прервать;
				Иначе
					Удалять = Истина;
				КонецЕсли;
			ИначеЕсли ЗначенияОтбора.Направление < 0 Тогда
				Если ТЗ[Сч][КолонкаТЗ.Имя] < Предел Тогда
					Удалять = Ложь;
					Прервать;
				Иначе
					Удалять = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Удалять Тогда
			ТЗ.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

