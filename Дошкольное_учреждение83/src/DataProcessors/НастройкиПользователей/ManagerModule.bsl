#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, отвечающие за получение настроек форм

// Получить список настроек форм для указанного пользователя Пользователь.
//
// Параметры 
//   ИмяПользователя - Строка - имя пользователя информационной базы, для которого нужно
//                              получить настройки форм
// 
// Возвращаемое значение
//   СписокЗначений - Список форм, для которых у переданного пользователя есть настройки
//
Функция НастройкиВсехФорм(ИмяПользователя) Экспорт
	
	СписокФорм = ФормыОбъектовМетаданных();
	
	// Добавление стандартных форм в список
	СписокФорм.Добавить("ВнешняяОбработка.StandardEventLog.Форма.EventsJournal", 
		НСтр("ru='Стандартные.Журнал регистрации'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardEventLog.Форма.EventForm", 
		НСтр("ru='Стандартные.Журнал регистрации, Событие'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardEventLog.Форма.EventsJournalFilter", 
		НСтр("ru='Стандартные.Журнал регистрации, Настройка отбора событий'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardFindByRef.Форма.MainForm", 
		НСтр("ru='Стандартные.Поиск ссылок на объект'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardFullTextSearchManagement.Форма.MainForm", 
		НСтр("ru='Стандартные.Управление полнотекстовым поиском'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardDocumentsPosting.Форма.MainForm", 
		НСтр("ru='Стандартные.Проведение документов'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardDeleteMarkedObjects.Форма.Form", 
		НСтр("ru='Стандартные.Удаление помеченных объектов'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardExternalDataSourceManagement.Форма.Form", 
		НСтр("ru='Стандартные.Управление внешними источниками данных'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardTotalsManagement.Форма.MainForm", 
		НСтр("ru='Стандартные.Управление итогами'") , Ложь, БиблиотекаКартинок.Форма);
	СписокФорм.Добавить("ВнешняяОбработка.StandardActiveUsers.Форма.ActiveUsersListForm", 
		НСтр("ru='Стандартные.Активные пользователи'") , Ложь, БиблиотекаКартинок.Форма);
		
	Возврат СписокНастроекФорм(СписокФорм, ИмяПользователя);
	
КонецФункции

// Получает список форм, в конфигурации, при этом заполняются следующие поля:
// Значение - имя формы, идентифицирующее ее.
// Представление - синоним формы
// Картинка - картинка соответствующая объекту, к которому форма имеет отношение
//
// Параметры
// Список - СписокЗначений - список значений, в который будут добавлены описания форм
//
// Возвращаемое значение
// СписокЗначений - Список всех форм объектов метаданных
//
Функция ФормыОбъектовМетаданных()
	
	СписокФорм = Новый СписокЗначений;
	
	Для Каждого Форма Из Метаданные.ОбщиеФормы Цикл
		СписокФорм.Добавить("ОбщаяФорма." + Форма.Имя, Форма.Синоним, Ложь, БиблиотекаКартинок.Форма);
	КонецЦикла;

	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.КритерииОтбора, "КритерийОтбора", НСтр("ru='Критерий отбора'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.КритерийОтбора, СписокФорм);
		
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ХранилищаНастроек, "ХранилищеНастроек", НСтр("ru='Хранилище настроек'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ХранилищеНастроек, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаГруппы");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбораГруппы");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Справочники, "Справочник", НСтр("ru='Справочник'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Справочник, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Документы, "Документ", НСтр("ru='Документ'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Документ, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ЖурналыДокументов, "ЖурналДокументов", НСтр("ru='Журнал документов'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ЖурналДокументов, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Перечисления, "Перечисление", НСтр("ru='Перечисление'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Перечисление, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ИменаСтандартныхФорм.Добавить("ФормаНастроек");
	ИменаСтандартныхФорм.Добавить("ФормаВарианта");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Отчеты, "Отчет", НСтр("ru='Отчет'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Отчет, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Обработки, "Обработка", НСтр("ru='Обработка'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Обработка, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаГруппы");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбораГруппы");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыВидовХарактеристик, "ПланВидовХарактеристик", НСтр("ru='План видов характеристик'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ПланВидовХарактеристик, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыСчетов, "ПланСчетов", НСтр("ru='План счетов'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ПланСчетов, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыВидовРасчета, "ПланВидовРасчета", НСтр("ru='План видов расчета'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ПланВидовРасчета, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаЗаписи");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыСведений, "РегистрСведений", НСтр("ru='Регистр сведений'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрСведений, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыНакопления, "РегистрНакопления", НСтр("ru='Регистр накопления'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрНакопления, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыБухгалтерии, "РегистрБухгалтерии", НСтр("ru='Регистр бухгалтерии'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрБухгалтерии, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыРасчета, "РегистрРасчета", НСтр("ru='Регистр расчета'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрРасчета, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.БизнесПроцессы, "БизнесПроцесс", НСтр("ru='Бизнес-процесс'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.БизнесПроцесс, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Задачи, "Задача", НСтр("ru='Задача'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.Задача, СписокФорм);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаЗаписи");
	ИменаСтандартныхФорм.Добавить("ФормаСписка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ВнешниеИсточникиДанных, "ВнешнийИсточникДанных", НСтр("ru='Внешние источники данных'"),
		ИменаСтандартныхФорм, БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица, СписокФорм);

	Возврат СписокФорм;
КонецФункции

// Возвращает список настроек для указанных форм СписокФормы и указанного пользователя Пользователь. 
//
Функция СписокНастроекФорм(СписокФорм, ИмяПользователя)
	
	Результат = Новый СписокЗначений;
	Настройки = ПрочитатьНастройкиИзХранилища(ХранилищеСистемныхНастроек, ИмяПользователя);
	МассивНастроекФорм = ПредопределенныеНастройки();
	Для Каждого Элемент Из СписокФорм Цикл
		
		Для Каждого НастройкаФормы Из МассивНастроекФорм Цикл
		
			ПоискНастройки = Настройки.Найти(Элемент.Значение + НастройкаФормы);
			Если ПоискНастройки <> Неопределено Тогда
				Результат.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка, Элемент.Картинка);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСписокФормОбъектаМетаданных(СписокОбъектовМетаданных, ТипОбъектаМетаданных,
	ПредставлениеОбъектаМетаданных, ИменаСтандартныхФорм, Картинка, СписокФорм)
	
	Для Каждого Объект Из СписокОбъектовМетаданных Цикл
		
		Если ТипОбъектаМетаданных = "ВнешнийИсточникДанных" Тогда
			ПолучитьСписокФормВнешнихИсточниковДанных(Объект, ТипОбъектаМетаданных, ПредставлениеОбъектаМетаданных, Картинка, СписокФорм);
			Продолжить;
		КонецЕсли;
		
		ПрефиксИмени = ТипОбъектаМетаданных + "." + Объект.Имя;
		ПрефиксПредставления = Объект.Синоним + ".";
		
		Для Каждого Форма Из Объект.Формы Цикл
			ПредставлениеФормыИПометка = ПредставлениеФормы(Объект, Форма, ТипОбъектаМетаданных);
			ПредставлениеФормы = ПредставлениеФормыИПометка.ИмяФормы;
			Пометка = ПредставлениеФормыИПометка.ФормаОткрываемая;
			СписокФорм.Добавить(ПрефиксИмени + ".Форма." + Форма.Имя, ПрефиксПредставления + ПредставлениеФормы, Пометка, Картинка);
		КонецЦикла;
		
		Для Каждого ИмяСтандартнойФормы Из ИменаСтандартныхФорм Цикл
			
			Если Объект["Основная" + ИмяСтандартнойФормы] = Неопределено Тогда
				ПредставлениеФормыИПометка = ПредставлениеАвтогенерируемойФормы(Объект, ИмяСтандартнойФормы.Значение, ТипОбъектаМетаданных);
				ПредставлениеФормы = ПредставлениеФормыИПометка.ИмяФормы;
				Пометка = ПредставлениеФормыИПометка.ФормаОткрываемая;
				СписокФорм.Добавить(ПрефиксИмени + "." + ИмяСтандартнойФормы.Значение, ПрефиксПредставления + ПредставлениеФормы, Пометка, Картинка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСписокФормВнешнихИсточниковДанных(Объект, ТипОбъектаМетаданных, 
	ПредставлениеОбъектаМетаданных, Картинка, СписокФорм)
	
	Для Каждого Таблица Из Объект.Таблицы Цикл
		
		ПрефиксИмени = ТипОбъектаМетаданных + "." + Объект.Имя + ".Таблица.";
		ПрефиксПредставления = Таблица.Синоним + ".";
		
		Для Каждого Форма Из Таблица.Формы Цикл
			ПредставлениеФормы = ПредставлениеФормы(Таблица, Форма, ТипОбъектаМетаданных).ИмяФормы;
			СписокФорм.Добавить(ПрефиксИмени + Таблица.Имя + ".Форма." + Форма.Имя, ПрефиксПредставления + ПредставлениеФормы, Ложь, Картинка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, отвечающие за копирование и удаление всех настроек пользователя

// Удаляет настройки пользователей из хранилища
//
// Параметры:
// ОчищаемыеНастройки - Массив, где элемент массива - тип настроек, которые необходимо
//                      очистить. Например, НастройкиОтчетов или НастройкиВнешнегоВида.
// Источники - Массив, где элемент массива - Справочник.ПользовательСсылка. Массив пользователей,
//             у которых необходимо очистить настройки
//
Процедура УдалитьНастройкиПользователей(ОчищаемыеНастройки, Источники) Экспорт
	
	СоответствиеНастройкаХранилище = Новый Соответствие;
	СоответствиеНастройкаХранилище.Вставить("НастройкиОтчетов", ХранилищеПользовательскихНастроекОтчетов);
	СоответствиеНастройкаХранилище.Вставить("НастройкиВнешнегоВида", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("ДанныеФорм", ХранилищеНастроекДанныхФорм);
	СоответствиеНастройкаХранилище.Вставить("ПерсональныеНастройки", ХранилищеОбщихНастроек);
	СоответствиеНастройкаХранилище.Вставить("Избранное", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("НастройкиПечати", ХранилищеСистемныхНастроек);
	
	Для Каждого ОчищаемаяНастройка Из ОчищаемыеНастройки Цикл
		МенеджерНастроек = СоответствиеНастройкаХранилище[ОчищаемаяНастройка];
		
		Для Каждого Источник Из Источники Цикл
			Источник = ИмяПользователяИБ(Источник);
			НастройкиИзХранилища = СписокНастроек(Источник, МенеджерНастроек, ОчищаемаяНастройка);
			УдалитьНастройки(МенеджерНастроек, НастройкиИзХранилища, Источник)
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНастройки(МенеджерНастроек, НастройкиИзХранилища, Пользователь)
	
	Для Каждого Настройка Из НастройкиИзХранилища Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастроек = Настройка.КлючНастроек;
		МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, Пользователь);
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьНастройкиПользователей(ПользовательИсточник, ПользователиПриемник, КопируемыеНастройки) Экспорт
	
	СоответствиеНастройкаХранилище = Новый Соответствие;
	СоответствиеНастройкаХранилище.Вставить("НастройкиОтчетов", ХранилищеПользовательскихНастроекОтчетов);
	СоответствиеНастройкаХранилище.Вставить("НастройкиВнешнегоВида", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("ДанныеФорм", ХранилищеНастроекДанныхФорм);
	СоответствиеНастройкаХранилище.Вставить("ПерсональныеНастройки", ХранилищеОбщихНастроек);
	СоответствиеНастройкаХранилище.Вставить("Избранное", ХранилищеСистемныхНастроек);
	СоответствиеНастройкаХранилище.Вставить("НастройкиПечати", ХранилищеСистемныхНастроек);
	ЕстьНастройки = Ложь;
	
	Для Каждого КопируемаяНастройка Из КопируемыеНастройки Цикл
		МенеджерНастроек = СоответствиеНастройкаХранилище[КопируемаяНастройка];
		НастройкиИзХранилища = СписокНастроек(ПользовательИсточник, МенеджерНастроек, КопируемаяНастройка);
		Если НастройкиИзХранилища.Количество() <> 0 Тогда
			ЕстьНастройки = Истина;
		КонецЕсли;
		
		Для Каждого ПользовательПриемник Из ПользователиПриемник Цикл
			ПользовательПриемник = ИмяПользователяИБ(ПользовательПриемник);
			СкопироватьНастройки(МенеджерНастроек, НастройкиИзХранилища, ПользовательИсточник, ПользовательПриемник);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьНастройки;
	
КонецФункции

Функция СписокНастроек(ИмяПользователя, МенеджерНастроек, КопируемаяНастройка)
	
	ПолучитьИзбранное = Ложь;
	ПолучитьНастройкиПечати = Ложь;
	Если КопируемаяНастройка = "Избранное" Тогда
		ПолучитьИзбранное = Истина;
	КонецЕсли;
	
	Если КопируемаяНастройка = "НастройкиПечати" Тогда
		ПолучитьНастройкиПечати = Истина;
	КонецЕсли;
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователя);
	
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	
	Пропустить = Ложь;
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПолучитьИзбранное
			И Найти(ВыборкаНастроек.КлючОбъекта, "ИзбранноеРаботыПользователя") <> 0 Тогда
			Продолжить;
		ИначеЕсли ПолучитьИзбранное Тогда
			
			Если Найти(ВыборкаНастроек.КлючОбъекта, "ИзбранноеРаботыПользователя") = 0 Тогда
				Продолжить;
			ИначеЕсли Найти(ВыборкаНастроек.КлючОбъекта, "ИзбранноеРаботыПользователя") <> 0 Тогда
				ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПолучитьНастройкиПечати
			И Найти(ВыборкаНастроек.КлючОбъекта, "НастройкиПечатиТабличногоДокумента") <> 0 Тогда
			Продолжить;
		ИначеЕсли ПолучитьНастройкиПечати Тогда
			
			Если Найти(ВыборкаНастроек.КлючОбъекта, "НастройкиПечатиТабличногоДокумента") = 0 Тогда
				Продолжить;
			ИначеЕсли Найти(ВыборкаНастроек.КлючОбъекта, "НастройкиПечатиТабличногоДокумента") <> 0 Тогда
				ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
			
		ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек);
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция СледующаяНастройка(ВыборкаНастроек, Пропустить)
	
	Попытка 
		Пропустить = Ложь;
		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура СкопироватьНастройки(МенеджерНастроек, ТаблицаНастроек, ПользовательИсточник, ПользовательПриемник)
	
	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастроек = Настройка.КлючНастроек;
		Попытка
			Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ПользовательИсточник);
		Исключение
			Продолжить;
		КонецПопытки;
		ОписаниеНастроек = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ПользовательИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
			ОписаниеНастроек, ПользовательПриемник);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Получает имя пользователя информационной базы по переданной ссылке
// справочника
// Параметры 
// ПользовательСсылка - СправочникСсылка - Пользователь, для которого нужно получить
// имя пользователя информационной базы
//
// Возвращаемое значение
// Строка - Имя пользователя информационной базы. Если Пользователь ИБ не найден - Неопределено.
// 
Функция ИмяПользователяИБ(ПользовательСсылка) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторПользователяИБ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПользовательСсылка, "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	
	Если Не ПользовательИБ = Неопределено Тогда
		Возврат ПользовательИБ.Имя; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПредопределенныеНастройки()
	
	МассивНастроекФорм = Новый Массив;
	МассивНастроекФорм.Добавить("/НастройкиФормы");
	МассивНастроекФорм.Добавить("/НастройкиОкна");
	МассивНастроекФорм.Добавить("/НастройкиОкнаВебКлиента");
	МассивНастроекФорм.Добавить("/ТекущиеДанные");
	
	Возврат МассивНастроекФорм;
КонецФункции

Функция ПредставлениеФормы(Объект, Форма, ТипОбъектаМетаданных)
	
	ФормаОткрываемая = Ложь;
	
	Если ТипОбъектаМетаданных = "КритерийОтбора"
		Или ТипОбъектаМетаданных = "ЖурналДокументов" Тогда
		
		Если Форма = Объект.ОсновнаяФорма Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		Иначе 
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрНакопления"
		Или ТипОбъектаМетаданных = "РегистрБухгалтерии"
		Или ТипОбъектаМетаданных = "РегистрРасчета" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		Иначе 
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрСведений" Тогда
		
		Если Форма = Объект.ОсновнаяФормаЗаписи Тогда
			
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			
		ИначеЕсли Форма = Объект.ОсновнаяФормаСписка Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		Иначе 
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "Отчет"
		Или ТипОбъектаМетаданных = "Обработка" Тогда
		
		Если Форма = Объект.ОсновнаяФорма Тогда
			Если Не ПустаяСтрока(Объект.РасширенноеПредставление) Тогда
				ИмяФормы = Объект.РасширенноеПредставление;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			ФормаОткрываемая = Истина;
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "ХранилищеНастроек" Тогда
		ИмяФормы = Форма.Синоним;
	ИначеЕсли ТипОбъектаМетаданных = "Перечисление" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка
			Или Форма = Объект.ОсновнаяФормаДляВыбора Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = ?(Форма = Объект.ОсновнаяФормаСписка, Истина, Ложь);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "Справочник"
		Или ТипОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка
			Или Форма = Объект.ОсновнаяФормаДляВыбора
			Или Форма = Объект.ОсновнаяФормаГруппы 
			Или Форма = Объект.ОсновнаяФормаДляВыбораГруппы Тогда
			
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ДобавитьТипФормыВПредставление(Объект, Форма, ИмяФормы);
			ФормаОткрываемая = ?(Форма = Объект.ОсновнаяФормаСписка, Истина, Ложь);
			
		ИначеЕсли Форма = Объект.ОсновнаяФормаОбъекта Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "ВнешнийИсточникДанных" Тогда
		
		Если Форма = Объект.ОсновнаяФормаСписка Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		ИначеЕсли Форма = Объект.ОсновнаяФормаЗаписи Тогда
			
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи ;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			
		ИначеЕсли Форма = Объект.ОсновнаяФормаОбъекта Тогда
			ПредставлениеФормыОбъекта(Объект);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	Иначе // Получение представления формы для Документа, Плана счетов, Плана видов расчета, Бизнесс-процесса и Задачи
		
		Если Форма = Объект.ОсновнаяФормаСписка
			Или Форма = Объект.ОсновнаяФормаДляВыбора Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = ?(Форма = Объект.ОсновнаяФормаСписка, Истина, Ложь);
		ИначеЕсли Форма = Объект.ОсновнаяФормаОбъекта Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		Иначе
			ИмяФормы = Форма.Синоним;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ИмяФормы, ФормаОткрываемая", ИмяФормы, ФормаОткрываемая);
	
КонецФункции

Функция ПредставлениеАвтогенерируемойФормы(Объект, Форма, ТипОбъектаМетаданных)
	
	ФормаОткрываемая = Ложь;
	
	Если ТипОбъектаМетаданных = "КритерийОтбора"
		Или ТипОбъектаМетаданных = "ЖурналДокументов" Тогда
		
		ИмяФормы = ПредставлениеФормыСписка(Объект);
		ФормаОткрываемая = Истина;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрНакопления"
		Или ТипОбъектаМетаданных = "РегистрБухгалтерии"
		Или ТипОбъектаМетаданных = "РегистрРасчета" Тогда
		
		ИмяФормы = ПредставлениеФормыСписка(Объект);
		ФормаОткрываемая = Истина;
		
	ИначеЕсли ТипОбъектаМетаданных = "РегистрСведений" Тогда
		
		Если Форма = "ФормаЗаписи" Тогда
			
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
			
		ИначеЕсли Форма = "ФормаСписка" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "Отчет"
		Или ТипОбъектаМетаданных = "Обработка" Тогда
		
		Если Не ПустаяСтрока(Объект.РасширенноеПредставление) Тогда
			ИмяФормы = Объект.РасширенноеПредставление;
		Иначе
			ИмяФормы = Объект.Представление();
		КонецЕсли;
		ФормаОткрываемая = Истина;
		
	ИначеЕсли ТипОбъектаМетаданных = "Перечисление" Тогда
		
		ИмяФормы = ПредставлениеФормыСписка(Объект);
		ФормаОткрываемая = ?(Форма = "ФормаСписка", Истина, Ложь);
		
	ИначеЕсли ТипОбъектаМетаданных = "Справочник"
		Или ТипОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
		
		Если Форма = "ФормаСписка"
			Или Форма = "ФормаДляВыбора"
			Или Форма = "ФормаГруппы" 
			Или Форма = "ФормаДляВыбораГруппы" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ДобавитьТипФормыВПредставлениеАвтогенерируемойФормы(Объект, Форма, ИмяФормы);
			ФормаОткрываемая = ?(Форма = "ФормаСписка", Истина, Ложь);
		ИначеЕсли Форма = "ФормаОбъекта" Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаМетаданных = "ВнешнийИсточникДанных" Тогда
		
		Если Форма = "ФормаСписка" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = Истина;
		ИначеЕсли Форма = "ФормаЗаписи" Тогда
			Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.РасширенноеПредставлениеЗаписи ;
			ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеЗаписи) Тогда
				ИмяФормы = Объект.ПредставлениеЗаписи;
			Иначе
				ИмяФормы = Объект.Представление();
			КонецЕсли;
		ИначеЕсли Форма = "ФормаОбъекта" Тогда
			ПредставлениеФормыОбъекта(Объект);
		КонецЕсли;
		
	Иначе // Получение представления формы для Документа, Плана счетов, Плана видов расчета, Бизнесс-процесса и Задачи
		
		Если Форма = "ФормаСписка"
			Или Форма = "ФормаДляВыбора" Тогда
			ИмяФормы = ПредставлениеФормыСписка(Объект);
			ФормаОткрываемая = ?(Форма = "ФормаСписка", Истина, Ложь);
		ИначеЕсли Форма = "ФормаОбъекта" Тогда
			ИмяФормы = ПредставлениеФормыОбъекта(Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ИмяФормы, ФормаОткрываемая", ИмяФормы, ФормаОткрываемая);
	
КонецФункции

Функция ПредставлениеФормыСписка(Объект)
	
	Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеСписка) Тогда
		ИмяФормы = Объект.РасширенноеПредставлениеСписка;
	ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеСписка) Тогда
		ИмяФормы = Объект.ПредставлениеСписка;
	Иначе
		ИмяФормы = Объект.Представление();
	КонецЕсли;
	
	Возврат ИмяФормы;
КонецФункции

Функция ПредставлениеФормыОбъекта(Объект)
	Если Не ПустаяСтрока(Объект.РасширенноеПредставлениеОбъекта) Тогда
		ИмяФормы = Объект.РасширенноеПредставлениеОбъекта;
	ИначеЕсли Не ПустаяСтрока(Объект.ПредставлениеОбъекта) Тогда
		ИмяФормы = Объект.ПредставлениеОбъекта;
	Иначе
		ИмяФормы = Объект.Представление();
	КонецЕсли;;
	
	Возврат ИмяФормы;
КонецФункции

Процедура ДобавитьТипФормыВПредставление(Объект, Форма, ИмяФормы)
	
	Если Форма = Объект.ОсновнаяФормаСписка Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (список)'"), ИмяФормы);
	ИначеЕсли Форма = Объект.ОсновнаяФормаДляВыбора Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (выбор)'"), ИмяФормы);
	ИначеЕсли Форма = Объект.ОсновнаяФормаГруппы Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (группа)'"), ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТипФормыВПредставлениеАвтогенерируемойФормы(Объект, Форма, ИмяФормы)
	
	Если Форма = "ФормаСписка" Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (список)'"), ИмяФормы);
	ИначеЕсли Форма = "ФормаДляВыбора" Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (выбор)'"), ИмяФормы);
	ИначеЕсли Форма = "ФормаДляВыбораГруппы" Тогда
		ИмяФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (группа)'"), ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуЗначений(ТаблицаНастроек, ВыборкаНастроек)
	
	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
	НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
	
КонецПроцедуры

Функция ПредставлениеВариантаОтчета(НастройкаОбъект, НастройкаКлюч) Экспорт
	
	ИмяВариантаОтчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НастройкаОбъект, "/");
	ИмяОтчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяВариантаОтчета[0], ".");
	Отчет = Метаданные.Отчеты.Найти(ИмяОтчета[1]);
	
	Если Отчет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеВариантов = Отчет.ХранилищеВариантов;
	
	Если ХранилищеВариантов = Неопределено Тогда
		ХранилищеВариантов = Метаданные.ХранилищеВариантовОтчетов;
	КонецЕсли;
	Если ХранилищеВариантов = Неопределено Тогда
		ХранилищеВариантов = ХранилищеВариантовОтчетов;
	Иначе
		ХранилищеВариантов = ХранилищаНастроек[ХранилищеВариантов.Имя];
	КонецЕсли;
	
	Если ИмяВариантаОтчета.Количество() = 1 Тогда
		ИдентификаторВарианта = ИмяОтчета[1];
	Иначе
		ИдентификаторВарианта = ИмяВариантаОтчета[1];
	КонецЕсли;
	
	ПредставлениеВариантаОтчета = ХранилищеВариантов.ПолучитьОписание(ИмяВариантаОтчета[0], ИдентификаторВарианта);
	
	Если ПредставлениеВариантаОтчета <> Неопределено Тогда
		Возврат ПредставлениеВариантаОтчета.Представление;
	Иначе
		Возврат ИмяОтчета[1];
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьНастройкиИзХранилища(МенеджерНастроек, Пользователь)
	
	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("КлючОбъекта");
	Настройки.Колонки.Добавить("КлючНастроек");
	Настройки.Колонки.Добавить("Представление");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", Пользователь);
	
	Пропустить = Ложь;
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
		НоваяСтрока.Представление = ВыборкаНастроек.Представление;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция КлючиПользовательскихНастроек()
	
	МассивКлючей = Новый Массив;
	МассивКлючей.Добавить("КлючТекущегоВарианта");
	МассивКлючей.Добавить("КлючТекущихПользовательскихНастроек");
	МассивКлючей.Добавить("ТекущиеПользовательскиеНастройки");
	МассивКлючей.Добавить("КлючТекущихНастроекДанных");
	МассивКлючей.Добавить("НастройкиКлиентскогоПриложения");
	МассивКлючей.Добавить("НастройкиВнешнейКомпоненты");
	МассивКлючей.Добавить("НастройкиСправки");
	МассивКлючей.Добавить("НастройкиСравнения");
	МассивКлючей.Добавить("ПараметрыПоискаТаблиц");
	
	Возврат МассивКлючей;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для форм НастройкиПользователей и ВыборНастроек

Процедура ЗаполнитьСпискиНастроек(Форма) Экспорт
	
	ЗаполнитьСписокНастроекОтчетов(Форма);
	ЗаполнитьСписокНастроекВнешнегоВида(Форма);
	ЗаполнитьСписокПрочихНастроек(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьСписокНастроекОтчетов(Форма)
	
	Форма.НастройкиОтчетов.ПолучитьЭлементы().Очистить();
	НастройкиОтчетовДерево = Форма.РеквизитФормыВЗначение("НастройкиОтчетов");
	Настройки = ПрочитатьНастройкиИзХранилища(ХранилищеПользовательскихНастроекОтчетов, Форма.Пользователь);
	
	ТекущийОбъект = Неопределено;
	Для Каждого Настройка Из Настройки Цикл
		НастройкаОбъект = Настройка.КлючОбъекта;
		НастройкаКлюч = Настройка.КлючНастроек;
		НазваниеНастройки = Настройка.Представление;
		
		ПредставлениеВариантаОтчета = Обработки.НастройкиПользователей.ПредставлениеВариантаОтчета(НастройкаОбъект, НастройкаКлюч);
		
		Если ПредставлениеВариантаОтчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Форма.Поиск) Тогда
			Если Найти(ВРег(ПредставлениеВариантаОтчета), ВРег(Форма.Поиск)) = 0 
				И Найти(ВРег(НазваниеНастройки), ВРег(Форма.Поиск)) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем строку варианта отчета
		Если ТекущийОбъект <> ПредставлениеВариантаОтчета Тогда
			НоваяСтрокаВариантОтчета = НастройкиОтчетовДерево.Строки.Добавить();
			НоваяСтрокаВариантОтчета.Настройка = ПредставлениеВариантаОтчета;
			НоваяСтрокаВариантОтчета.Картинка = БиблиотекаКартинок.Отчет;
			НоваяСтрокаВариантОтчета.Тип = "Отчет";
		КонецЕсли;
		// Заполняем строку настройки
		НоваяСтрокаНастройка = НоваяСтрокаВариантОтчета.Строки.Добавить();
		НоваяСтрокаНастройка.Настройка = ?(Не ПустаяСтрока(НазваниеНастройки), НазваниеНастройки, ПредставлениеВариантаОтчета);
		НоваяСтрокаНастройка.Картинка = БиблиотекаКартинок.Форма;
		НоваяСтрокаНастройка.Тип = "НастройкаОтчета";
		НоваяСтрокаНастройка.Ключи.Добавить(НастройкаОбъект, НастройкаКлюч);
		// Заполняем ключ объекта и ключ настройки для варианта отчета
		НоваяСтрокаВариантОтчета.Ключи.Добавить(НастройкаОбъект, НастройкаКлюч);
		
		ТекущийОбъект = ПредставлениеВариантаОтчета;
	КонецЦикла;
	
	НастройкиОтчетовДерево.Строки.Сортировать("Настройка Возр", Истина);
	Форма.ЗначениеВРеквизитФормы(НастройкиОтчетовДерево, "НастройкиОтчетов");
	
КонецПроцедуры

Процедура ДобавитьНастройкиРабочегоСтолаИКомандногоИнтерфейса(Форма, ДеревоНастроек)
	
	Если Не ПустаяСтрока(Форма.Поиск) Тогда
		Если Найти(ВРег(НСтр("ru='Рабочий стол и командный интерфейс'")), ВРег(Форма.Поиск)) = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Настройки = ПрочитатьНастройкиИзХранилища(ХранилищеСистемныхНастроек, Форма.Пользователь);
	КлючиНастроекРабочегоСтола = Новый СписокЗначений;
	КлючиНастроекИнтерфейса = Новый СписокЗначений;
	КлючиВсехНастроек = Новый СписокЗначений; 
	
	Для Каждого Настройка Из Настройки Цикл
		ИмяНастройки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Настройка.КлючОбъекта, "/");
		ЧастьИмениНастройки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяНастройки[0], ".");
		Если ЧастьИмениНастройки[0] = "Подсистема" Тогда
			
			КлючиНастроекИнтерфейса.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			
		ИначеЕсли ИмяНастройки[0] = "Общее" Тогда
			
			Если ИмяНастройки[1] = "ПанельРазделов"
				Или ИмяНастройки[1] = "ПанельДействий" Тогда
				КлючиНастроекИнтерфейса.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			ИначеЕсли ИмяНастройки[1] = "НастройкиРабочегоСтола" Тогда
				КлючиНастроекРабочегоСтола.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КонецЕсли;
			
		ИначеЕсли ИмяНастройки[0] = "РабочийСтол" Тогда
			
			Если ИмяНастройки[1] = "НастройкиОкна" Тогда
				КлючиНастроекРабочегоСтола.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			Иначе
				КлючиНастроекИнтерфейса.Добавить(Настройка.КлючОбъекта, "Интерфейс");
				КлючиВсехНастроек.Добавить(Настройка.КлючОбъекта, "Интерфейс");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КлючиВсехНастроек.Количество() > 0 Тогда
		// Добавление группы верхнего уровня для настроек рабочего стола и интерфейса
		НоваяСтрокаИнтерфейса = ДеревоНастроек.Строки.Добавить();
		НоваяСтрокаИнтерфейса.Настройка = НСтр("ru='Рабочий стол и командный интерфейс'");
		НоваяСтрокаИнтерфейса.Картинка = БиблиотекаКартинок.Картинка;
		НоваяСтрокаИнтерфейса.Ключи = КлючиВсехНастроек.Скопировать();
	КонецЕсли;
	Если КлючиНастроекРабочегоСтола.Количество() > 0 Тогда
		// Добавление строки настроек рабочего стола
		НоваяПодстрокаИнтерфейса = НоваяСтрокаИнтерфейса.Строки.Добавить();
		НоваяПодстрокаИнтерфейса.Настройка = НСтр("ru='Рабочий стол'");
		НоваяПодстрокаИнтерфейса.Картинка = БиблиотекаКартинок.Картинка;
		НоваяПодстрокаИнтерфейса.Ключи = КлючиНастроекРабочегоСтола.Скопировать();
	КонецЕсли;
	Если КлючиНастроекИнтерфейса.Количество() > 0 Тогда
		// Добавление строки настроек интерфейса
		НоваяПодстрокаИнтерфейса = НоваяСтрокаИнтерфейса.Строки.Добавить();
		НоваяПодстрокаИнтерфейса.Настройка = НСтр("ru='Командный интерфейс'");
		НоваяПодстрокаИнтерфейса.Картинка = БиблиотекаКартинок.Картинка;
		НоваяПодстрокаИнтерфейса.Ключи = КлючиНастроекИнтерфейса.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНастроекВнешнегоВида(Форма)
	
	Форма.ВнешнийВид.ПолучитьЭлементы().Очистить();
	НастройкиВнешнегоВида = Форма.РеквизитФормыВЗначение("ВнешнийВид");
	
	ТекущийОбъект = Неопределено;
	НастройкиФорм = НастройкиВсехФорм(Форма.Пользователь);
	
	Для Каждого НастройкаФормы Из НастройкиФорм Цикл
		ИмяОбъектаМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НастройкаФормы.Значение, ".");
		ПредставлениеОбъектаМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НастройкаФормы.Представление, ".");
		
		Если Не ПустаяСтрока(Форма.Поиск) Тогда 
			Если Найти(НастройкаФормы.Представление, ВРег(Форма.Поиск)) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ИмяОбъектаМетаданных[0] = "ОбщаяФорма" Тогда
			НоваяСтрокаОбщиеФормы = НастройкиВнешнегоВида.Строки.Добавить();
			НоваяСтрокаОбщиеФормы.Настройка = НастройкаФормы.Представление;
			НоваяСтрокаОбщиеФормы.Картинка = БиблиотекаКартинок.Форма;
			НоваяСтрокаОбщиеФормы.Ключи.Добавить(НастройкаФормы.Значение, "");
		ИначеЕсли ИмяОбъектаМетаданных[0] = "ХранилищеНастроек" Тогда
			НоваяСтрокаХранилищеНастроек = НастройкиВнешнегоВида.Строки.Добавить();
			НоваяСтрокаХранилищеНастроек.Настройка = НастройкаФормы.Представление;
			НоваяСтрокаХранилищеНастроек.Картинка = БиблиотекаКартинок.Форма;
			НоваяСтрокаХранилищеНастроек.Ключи.Добавить(НастройкаФормы.Значение, "");
		ИначеЕсли ПредставлениеОбъектаМетаданных[0] = НСтр("ru = 'Стандартные'") Тогда
			
			// Группа дерева настроек
			Если ТекущийОбъект <> ПредставлениеОбъектаМетаданных[0] Тогда
				НоваяСтрокаОбъектМетаданных = НастройкиВнешнегоВида.Строки.Добавить();
				НоваяСтрокаОбъектМетаданных.Настройка = ПредставлениеОбъектаМетаданных[0];
				НоваяСтрокаОбъектМетаданных.Картинка = НастройкаФормы.Картинка;
			КонецЕсли;
			
			// Элемент дерева настроек
			НоваяСтрокаВнешнегоВидаФорм = НоваяСтрокаОбъектМетаданных.Строки.Добавить();
			НоваяСтрокаВнешнегоВидаФорм.Настройка = ПредставлениеОбъектаМетаданных[1];
			НоваяСтрокаВнешнегоВидаФорм.Картинка = БиблиотекаКартинок.Форма;
			НоваяСтрокаВнешнегоВидаФорм.Ключи.Добавить(НастройкаФормы.Значение, "", НастройкаФормы.Пометка);
			НоваяСтрокаОбъектМетаданных.Ключи.Добавить(НастройкаФормы.Значение, "", НастройкаФормы.Пометка);
			
			ТекущийОбъект = ПредставлениеОбъектаМетаданных[0];
			
		Иначе
			
			// Группа дерева настроек
			Если ТекущийОбъект <> ИмяОбъектаМетаданных[1] Тогда
				НоваяСтрокаОбъектМетаданных = НастройкиВнешнегоВида.Строки.Добавить();
				НоваяСтрокаОбъектМетаданных.Настройка = ПредставлениеОбъектаМетаданных[0];
				НоваяСтрокаОбъектМетаданных.Картинка = НастройкаФормы.Картинка;
			КонецЕсли;
			
			// Элемент дерева настроек
			НоваяСтрокаВнешнегоВидаФорм = НоваяСтрокаОбъектМетаданных.Строки.Добавить();
			НоваяСтрокаВнешнегоВидаФорм.Настройка = ПредставлениеОбъектаМетаданных[1];
			НоваяСтрокаВнешнегоВидаФорм.Картинка = БиблиотекаКартинок.Форма;
			НоваяСтрокаВнешнегоВидаФорм.Ключи.Добавить(НастройкаФормы.Значение, "", НастройкаФормы.Пометка);
			НоваяСтрокаОбъектМетаданных.Ключи.Добавить(НастройкаФормы.Значение, "", НастройкаФормы.Пометка);
			
			ТекущийОбъект = ИмяОбъектаМетаданных[1];
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьНастройкиРабочегоСтолаИКомандногоИнтерфейса(Форма, НастройкиВнешнегоВида);
	
	НастройкиВнешнегоВида.Строки.Сортировать("Настройка Возр", Истина);
	РабочийСтолИКомандныйИнтерфейс = НастройкиВнешнегоВида.Строки.Найти(НСтр("ru='Рабочий стол и командный интерфейс'"), "Настройка");
	Если РабочийСтолИКомандныйИнтерфейс <> Неопределено Тогда
		ИндексСтроки = НастройкиВнешнегоВида.Строки.Индекс(РабочийСтолИКомандныйИнтерфейс);
		НастройкиВнешнегоВида.Строки.Сдвинуть(ИндексСтроки, -ИндексСтроки);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(НастройкиВнешнегоВида, "ВнешнийВид");
	
КонецПроцедуры

Процедура ЗаполнитьСписокПрочихНастроек(Форма)
	
	Форма.ПрочиеНастройки.ПолучитьЭлементы().Очистить();
	ПрочиеНастройкиДерево = Форма.РеквизитФормыВЗначение("ПрочиеНастройки");
	Настройки = ПрочитатьНастройкиИзХранилища(ХранилищеОбщихНастроек, Форма.Пользователь);
	Ключи = Новый СписокЗначений;
	ПрочиеКлючи = Новый СписокЗначений;
	
	// Заполнение произвольных пользовательских настроек
	Для Каждого Настройка Из Настройки Цикл
		Ключи.Добавить(Настройка.КлючОбъекта, Настройка.КлючНастроек);
	КонецЦикла;
	
	Если Ключи.Количество() > 0 Тогда
		Настройка = НСтр("ru='Персональные настройки'");
		Тип = "ПерсональныеНастройки";
		Картинка = БиблиотекаКартинок.СостояниеПользователя02;
		ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, Ключи, Тип);
	КонецЕсли;
	
	// Заполнение настроек избранного и печати
	Настройки = ПрочитатьНастройкиИзХранилища(ХранилищеСистемныхНастроек, Форма.Пользователь);
	
	Ключи.Очистить();
	ЕстьИзбранное = Ложь;
	ЕстьНастройкиПечати = Ложь;
	ОкончанияКлючей = КлючиПользовательскихНастроек();
	Для Каждого Настройка Из Настройки Цикл
		
		ИмяНастройки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Настройка.КлючОбъекта, "/");
		Если ИмяНастройки.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОкончанияКлючей.Найти(ИмяНастройки[1]) <> Неопределено Тогда
			ПрочиеКлючи.Добавить(Настройка.КлючОбъекта, "Прочие");
		КонецЕсли;
		
		Если ИмяНастройки[1] = "ИзбранноеРаботыПользователя" Тогда
			ЕстьИзбранное = Истина;
		ИначеЕсли ИмяНастройки[1] = "НастройкиПечатиТабличногоДокумента" Тогда
			Ключи.Добавить(Настройка.КлючОбъекта, "Прочие");
			ЕстьНастройкиПечати = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление строки дерева "Настройки печати"
	Если ЕстьНастройкиПечати Тогда
		Настройка = НСтр("ru='Настройки печати табличных документов'");
		Картинка = БиблиотекаКартинок.Печать;
		ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, Ключи);
	КонецЕсли;
	
	// Добавление строки дерева "Избранное"
	Если ЕстьИзбранное Тогда
		
		Настройка = НСтр("ru='Избранное'");
		Картинка = БиблиотекаКартинок.ДобавитьВИзбранное;
		Ключи.Очистить();
		Ключи.Добавить("Общее/ИзбранноеРаботыПользователя", "Прочие");
		ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, Ключи);
		
	КонецЕсли;
	
	Если ПрочиеКлючи.Количество() <> 0 Тогда
		Настройка = НСтр("ru='Прочие настройки'");
		Картинка = БиблиотекаКартинок.ПрочиеПользовательскиеНастройки;
		ДобавитьСтрокуДерева(ПрочиеНастройкиДерево, Настройка, Картинка, ПрочиеКлючи);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ПрочиеНастройкиДерево, "ПрочиеНастройки");
	
КонецПроцедуры

Процедура ДобавитьСтрокуДерева(ДеревоЗначений, Настройка, Картинка, Ключи, Тип = "")
	
	НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	НоваяСтрока.Настройка = Настройка;
	НоваяСтрока.Картинка = Картинка;
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.Ключи = Ключи.Скопировать();
	
КонецПроцедуры


#КонецЕсли