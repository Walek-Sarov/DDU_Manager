////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует отчет, записывает в файл и отправляет по почте.
//   В отчет включены ошибки и предупреждения журнала регистраци,
// за указанный период (если не указан то за сутки, начиная с последнего вызова
// или текущего момента при первом вызове).
//
// Параметры:
//  НачалоПериодаВыборки    - Дата начала    в отборе событий журнала регистрации
//  ОкончаниеПериодаВыборки - Дата окончания в отборе событий журнала регистрации
// 
//  СохранятьВремяПоследнейВыборки - Булево - начальное значение истина, указывает
//                 запоминать, когда делать следующую выборку, если не указано.
//                 При ошибке ничего не изменится.
//
Процедура СформироватьОтчетПоОшибкамИПослатьОтчет(Знач НачалоПериодаВыборки = Неопределено,
                                                  Знач ОкончаниеПериодаВыборки = Неопределено,
                                                  Знач СохранятьВремяПоследнейВыборки = Истина) Экспорт
	
	Если ЗначениеЗаполнено(НачалоПериодаВыборки)
	   И ЗначениеЗаполнено(ОкончаниеПериодаВыборки) Тогда
		ПериодВыборки = Новый Структура;
		ПериодВыборки.Вставить("НачалоПериода",    НачалоПериодаВыборки);
		ПериодВыборки.Вставить("ОкончаниеПериода", ОкончаниеПериодаВыборки);
	Иначе
		ПериодВыборки = ПолучитьПериодВыборкиДанных();
	КонецЕсли;
	
	// Формирование  отчета и запись в файл
	РезультатФормированияОтчета = СформироватьОтчет(ПериодВыборки.НачалоПериода,
	                                                ПериодВыборки.ОкончаниеПериода);
	
	Отчет = РезультатФормированияОтчета.Отчет;
	
	ИмяФайлаОтчета = ПолучитьИмяВременногоФайла();
	
	Отчет.Записать(ИмяФайлаОтчета);
	
	// Формирование и отправка письма
	Вложения = Новый Соответствие;
	
	Вложения.Вставить("report.mxl", Новый ДвоичныеДанные(ИмяФайлаОтчета));
	
	УдалитьФайлы(ИмяФайлаОтчета);
	
	ПараметрыПисьма = Новый Структура;
	
	ПолучателиОтчета = КонтрольЖурналаРегистрацииСлужебный.ПолучитьАдресатовПолученияОтчетаПоЖурналуРегистрации();
	
	Если ПустаяСтрока(ПолучателиОтчета) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан ни один получатель отчета по ошибкам и предупреждениям журнала регистрации.'");
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Кому", ПолучателиОтчета);
	
	ПредставлениеИБ = ОбщегоНазначения.ПолучитьПредставлениеИнформационнойБазы();
	
	ПараметрыПисьма.Вставить("Тема",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контроль журнала регистрации: %1.'"),
			ПредставлениеИБ));
	
	ТекстТелаПисьма =
		НСтр("ru = 'Информация по ошибкам и предупреждениям журнала регистрации.
		           |Информационная база: %1.
		           |Период выборки данных: c %2 по %3.
		           |Всего ошибок: %4.
		           |Всего предупреждений: %5.
		           |Во вложении находится подробный отчет по ошибкам и предупреждениям.
		           |За более детальной информацией необходимо обращаться к журналу регистрации.'");
	
	ТекстТелаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстТелаПисьма,
		ПредставлениеИБ,
		ПериодВыборки.НачалоПериода,
		ПериодВыборки.ОкончаниеПериода,
		РезультатФормированияОтчета.ИтогПоОшибкам,
		РезультатФормированияОтчета.ИтогПоПредупреждениям);
	
	ПараметрыПисьма.Вставить("Тело", ТекстТелаПисьма);
	
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
		РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(),
		ПараметрыПисьма);
	
	Если СохранятьВремяПоследнейВыборки Тогда
		СохранитьВремяПоследнейВыборкиИнформации(ПериодВыборки.ОкончаниеПериода);
	КонецЕсли;
	
КонецПроцедуры

// Формирует отчет по ошибкам и предупреждениями журнала регистрации за заданный период.
Функция СформироватьОтчет(Знач НачалоПериода, Знач ОкончаниеПериода) Экспорт
	
	Результат = Новый Структура;
	Отчет = Новый ТабличныйДокумент;
	
	Макет = Обработки.КонтрольЖурналаРегистрации.ПолучитьМакет("МакетОтчетаПоОшибкамВЖурналеРегистрации");
	
	ДанныеЖурналаРегистрации = ПолучитьИнформациюПоОшибкамЖурналаРегистрации(НачалоПериода, ОкончаниеПериода);
	
	// Предварительная подготовка данных
	
	СверткаПоКомментариям = ДанныеЖурналаРегистрации.Скопировать();
	СверткаПоКомментариям.Колонки.Добавить("ИтогПоКомментарию");
	СверткаПоКомментариям.ЗаполнитьЗначения(1, "ИтогПоКомментарию");
	СверткаПоКомментариям.Свернуть("Уровень, Комментарий", "ИтогПоКомментарию");
	
	МассивСтрок_УровеньОшибка = СверткаПоКомментариям.НайтиСтроки(
		Новый Структура("Уровень", УровеньЖурналаРегистрации.Ошибка));
	
	МассивСтрок_УровеньПредупреждение = СверткаПоКомментариям.НайтиСтроки(
		Новый Структура("Уровень", УровеньЖурналаРегистрации.Предупреждение));
	
	Свертка_Ошибки         = СверткаПоКомментариям.Скопировать(МассивСтрок_УровеньОшибка);
	Свертка_Ошибки.Сортировать("ИтогПоКомментарию Убыв");
	Свертка_Предупреждения = СверткаПоКомментариям.Скопировать(МассивСтрок_УровеньПредупреждение);
	Свертка_Предупреждения.Сортировать("ИтогПоКомментарию Убыв");
	
	// Формирование отчета
	
	Область = Макет.ПолучитьОбласть("ШапкаОтчета");
	Область.Параметры.ПериодВыборкиНачало    = НачалоПериода;
	Область.Параметры.ПериодВыборкиОкончание = ОкончаниеПериода;
	Область.Параметры.ПредставлениеИнформационнойБазы = ОбщегоНазначения.ПолучитьПредставлениеИнформационнойБазы();
	Отчет.Вывести(Область);
	
	РезультатКомпоновки = РазделОтчетаПоСвернутымДанным(Макет, ДанныеЖурналаРегистрации, Свертка_Ошибки);
	
	Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
	Область = Макет.ПолучитьОбласть("ЗаголовокБлокаОшибки");
	Область.Параметры.ЧислоОшибок = Строка(РезультатКомпоновки.Итог);
	Отчет.Вывести(Область);
	
	Если РезультатКомпоновки.Итог > 0 Тогда
		Отчет.Вывести(РезультатКомпоновки.ТабличнаяЧасть);
	КонецЕсли;
	
	Результат.Вставить("ИтогПоОшибкам", РезультатКомпоновки.Итог);
	
	РезультатКомпоновки = РазделОтчетаПоСвернутымДанным(Макет, ДанныеЖурналаРегистрации, Свертка_Предупреждения);
	
	Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
	Область = Макет.ПолучитьОбласть("ЗаголовокБлокаПредупреждения");
	Область.Параметры.ЧислоПредупреждений = РезультатКомпоновки.Итог;
	Отчет.Вывести(Область);
	
	Если РезультатКомпоновки.Итог > 0 Тогда
		Отчет.Вывести(РезультатКомпоновки.ТабличнаяЧасть);
	КонецЕсли;
	
	Результат.Вставить("ИтогПоПредупреждениям", РезультатКомпоновки.Итог);
	
	Отчет.ОтображатьСетку = Ложь;
	
	Результат.Вставить("Отчет", Отчет);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Функция ПолучитьИнформациюПоОшибкамЖурналаРегистрации(Знач НачалоПериода, Знач ОкончаниеПериода)
	
	ДанныеЖурналаРегистрации = Новый ТаблицаЗначений;
	
	УровниРегистрацииОшибок = Новый Массив;
	УровниРегистрацииОшибок.Добавить(УровеньЖурналаРегистрации.Ошибка);
	УровниРегистрацииОшибок.Добавить(УровеньЖурналаРегистрации.Предупреждение);
	
	ВыгрузитьЖурналРегистрации(ДанныеЖурналаРегистрации,
	                           Новый Структура("Уровень, ДатаНачала, ДатаОкончания",
	                                           УровниРегистрацииОшибок,
	                                           НачалоПериода,
	                                           ОкончаниеПериода));
	
	Возврат ДанныеЖурналаРегистрации;
	
КонецФункции

Функция ПолучитьПериодВыборкиДанных()
	
	Результат = Новый Структура;
	
	ВремяПоследнейВыборкиИнформации = ПолучитьВремяПоследнейВыборкиИнформации();
	ОкончаниеПериода = ТекущаяДатаСеанса();
	Если ВремяПоследнейВыборкиИнформации = Неопределено Тогда // если регламентное задание еще не выполнялось - выбираем данные за сутки
		НачалоПериода = ОкончаниеПериода - 86400; // - 24 часа
	Иначе
		НачалоПериода = ВремяПоследнейВыборкиИнформации;
	КонецЕсли;
	
	Результат.Вставить("НачалоПериода",    НачалоПериода);
	Результат.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВремяПоследнейВыборкиИнформации()
	
	ВремяПоследнейВыборкиИнформации = Неопределено;
	
	ПараметрыОтчета = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчетаПоЖурналуРегистрации");
	
	Если ПараметрыОтчета <> Неопределено Тогда
		ПараметрыОтчета.Свойство("ВремяПоследнейВыборкиИнформации", ВремяПоследнейВыборкиИнформации);
	КонецЕсли;
	
	Возврат ВремяПоследнейВыборкиИнформации;
	
КонецФункции

Процедура СохранитьВремяПоследнейВыборкиИнформации(ВремяПоследнейВыборкиИнформации)
	
	ПараметрыОтчета = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчетаПоЖурналуРегистрации");
	
	Если ПараметрыОтчета = Неопределено Или ТипЗнч(ПараметрыОтчета) <> Тип("Структура") Тогда
		ПараметрыОтчета = Новый Структура;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВремяПоследнейВыборкиИнформации", ВремяПоследнейВыборкиИнформации);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПараметрыОтчетаПоЖурналуРегистрации",
		,
		ПараметрыОтчета
	);
	
КонецПроцедуры

// Возвращает раздел отчета по данным журнала регистрации, сгруппированным по комментарию.
Функция РазделОтчетаПоСвернутымДанным(Макет, ДанныеЖурналаРегистрации, СвернутыеДанные)
	
	Отчет = Новый ТабличныйДокумент;
	
	Итог = 0;
	
	Если СвернутыеДанные.Количество() > 0 Тогда
		Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
		
		Для Каждого Запись Из СвернутыеДанные Цикл
			Итог = Итог + Запись.ИтогПоКомментарию;
			МассивСтрок = ДанныеЖурналаРегистрации.НайтиСтроки(Новый Структура(
				"Уровень,
				|Комментарий",
				УровеньЖурналаРегистрации.Ошибка,
				Запись.Комментарий));
			
			Область = Макет.ПолучитьОбласть("ТелоТабличнойЧастиШапка");
			Область.Параметры.Заполнить(Запись);
			Отчет.Вывести(Область);
			
			Отчет.НачатьГруппуСтрок(, Ложь);
			Для Каждого Строка Из МассивСтрок Цикл
				Область = Макет.ПолучитьОбласть("ТелоТабличнойЧастиДетализация");
				Область.Параметры.Заполнить(Строка);
				Отчет.Вывести(Область);
			КонецЦикла;
			Отчет.ЗакончитьГруппуСтрок();
			Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("ТабличнаяЧасть, Итог", Отчет, Итог);
	
	Возврат Результат;
	
КонецФункции

