////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОПОЛНИТЕЛЬНЫХ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

// Для адреса
&НаСервере
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "РЕГИОН" Тогда
			СтрокаТабличнойЧасти.Регион = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для телефона и факса
&НаСервере
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "КОДСТРАНЫ" Тогда
			КодСтраны = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "КОДГОРОДА" Тогда
			КодГорода = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "НОМЕРТЕЛЕФОНА" Тогда
			НомерТелефона = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(КодСтраны, 1) = "+" Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(КодСтраны + КодГорода + НомерТелефона);
		
КонецПроцедуры

&НаСервере
Функция УбратьРазделителиВНомерТелефона(Знач СтрНомер)
	
	Поз = Найти(СтрНомер, ",");
	Если Поз <> 0 Тогда
		СтрНомер = Лев(СтрНомер, Поз-1);
	КонецЕсли;
	
	СтрНомер = СтрЗаменить(СтрНомер, "-", "");
	СтрНомер = СтрЗаменить(СтрНомер, " ", "");
	СтрНомер = СтрЗаменить(СтрНомер, "+", "");

	Возврат СтрНомер;

КонецФункции

// Преобразовать список полей в строку
&НаСервере
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьЗаявкуНаСервере(СписокПараметров)	
	// формируем карточку ребенка	
	НовыйРебенок = Справочники.удуДети.СоздатьЭлемент();
	НовыйРебенок.Фамилия = СписокПараметров[0].Значение;
	НовыйРебенок.Имя = СписокПараметров[1].Значение;
	НовыйРебенок.Отчество = СписокПараметров[2].Значение;
	НовыйРебенок.Наименование = СокрЛП(СписокПараметров[0].Значение) + " " + СокрЛП(СписокПараметров[1].Значение) + " " + СокрЛП(СписокПараметров[2].Значение);
	НовыйРебенок.ДатаРождения = СписокПараметров[3].Значение;
	НовыйРебенок.Пол = СписокПараметров[4].Значение;
	НовыйРебенок.Записать();
	
	// формируем карточку родителя
	НовыйРодитель = Справочники.удуРодители.СоздатьЭлемент();
	НовыйРодитель.Фамилия = СписокПараметров[5].Значение;
	НовыйРодитель.Имя = СписокПараметров[6].Значение;
	НовыйРодитель.Отчество = СписокПараметров[7].Значение;
	НовыйРодитель.Наименование = СокрЛП(СписокПараметров[5].Значение) + " " + СокрЛП(СписокПараметров[6].Значение) + " " + СокрЛП(СписокПараметров[7].Значение);	
	НовыйРодитель.Работает = СписокПараметров[8].Значение;	
	НовыйРодитель.Записать();
	
	// сформируем сведения о месте работы
	Если СписокПараметров[8].Значение = 1 Тогда
		НоваяЗаписьОМестеРаботы = РегистрыСведений.удуСведенияОМестеРаботы.СоздатьМенеджерЗаписи();	
		НоваяЗаписьОМестеРаботы.Период = СписокПараметров[19].Значение;
		НоваяЗаписьОМестеРаботы.Работник = НовыйРодитель.Ссылка;
		НоваяЗаписьОМестеРаботы.МестоРаботы = СокрЛП(СписокПараметров[9].Значение);
		НоваяЗаписьОМестеРаботы.ЗанимаемаяДолжность = СокрЛП(СписокПараметров[10].Значение);
		НоваяЗаписьОМестеРаботы.Записать(Истина);		
	КонецЕсли;
	
	// сформируем сведения о месте обучения/образования
	Если СписокПараметров[8].Значение = 0 Тогда
		НоваяЗаписьОМестеУчебы = РегистрыСведений.удуСведенияОМестеОбученияОбразования.СоздатьМенеджерЗаписи();	
		НоваяЗаписьОМестеУчебы.Период = СписокПараметров[19].Значение;
		НоваяЗаписьОМестеУчебы.Обучающийся = НовыйРодитель.Ссылка;
		НоваяЗаписьОМестеУчебы.МестоОбучения = СокрЛП(СписокПараметров[9].Значение);
		НоваяЗаписьОМестеУчебы.КлассГруппа = СокрЛП(СписокПараметров[10].Значение);
		НоваяЗаписьОМестеУчебы.Записать(Истина);		
	КонецЕсли;
	
	// запишем адрес родителя
	Если ЗначениеЗаполнено(СписокПараметров[11].Значение) Тогда
		НоваяСтрокаКонтактнойИнформации = НовыйРодитель.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияРодителя;
		Если СписокПараметров[12].Значение.Количество() > 0 Тогда
			НоваяСтрокаКонтактнойИнформации.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПараметров[12].Значение);
		КонецЕсли;
		НоваяСтрокаКонтактнойИнформации.Представление = СокрЛП(СписокПараметров[11].Значение);
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКонтактнойИнформации, СписокПараметров[12].Значение);				
		НоваяСтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		
		// и теперь его же запишем в домашний адрес ребенка
		НоваяСтрокаКонтактнойИнформации = НовыйРебенок.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияРебенка;
		Если СписокПараметров[12].Значение.Количество() > 0 Тогда
			НоваяСтрокаКонтактнойИнформации.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПараметров[12].Значение);
		КонецЕсли;
		НоваяСтрокаКонтактнойИнформации.Представление = СокрЛП(СписокПараметров[11].Значение);
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКонтактнойИнформации, СписокПараметров[12].Значение);				
		НоваяСтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;		
		НовыйРебенок.Записать();
	КонецЕсли;	
	
	// запишем домашний телефон родителя
	Если ЗначениеЗаполнено(СписокПараметров[13].Значение) Тогда
		НоваяСтрокаКонтактнойИнформации = НовыйРодитель.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ДомашнийТелефонРодителя;
		Если СписокПараметров[14].Значение.Количество() > 0 Тогда
			НоваяСтрокаКонтактнойИнформации.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПараметров[14].Значение);
		КонецЕсли;
		НоваяСтрокаКонтактнойИнформации.Представление = СокрЛП(СписокПараметров[13].Значение);
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКонтактнойИнформации, СписокПараметров[14].Значение);				
		НоваяСтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	КонецЕсли;	
	
	// запишем мобильный телефон родителя
	Если ЗначениеЗаполнено(СписокПараметров[15].Значение) Тогда
		НоваяСтрокаКонтактнойИнформации = НовыйРодитель.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонРодителя;
		Если СписокПараметров[16].Значение.Количество() > 0 Тогда
			НоваяСтрокаКонтактнойИнформации.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПараметров[16].Значение);
		КонецЕсли;
		НоваяСтрокаКонтактнойИнформации.Представление = СокрЛП(СписокПараметров[15].Значение);
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКонтактнойИнформации, СписокПараметров[16].Значение);				
		НоваяСтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	КонецЕсли;	
	
	НовыйРодитель.Записать();
	
	НоваяЗаписьРодства = РегистрыСведений.удуСоставСемьиРебенка.СоздатьМенеджерЗаписи();	
	НоваяЗаписьРодства.Период = СписокПараметров[19].Значение;
	НоваяЗаписьРодства.Ребенок = НовыйРебенок.Ссылка;
	НоваяЗаписьРодства.СтепеньРодства = СписокПараметров[17].Значение;
	НоваяЗаписьРодства.ЧленСемьи = НовыйРодитель.Ссылка;
	НоваяЗаписьРодства.Записать(Истина);
	
	// формируем заявку на зачисление ребенка
	НоваяЗаявкаНаЗачисление = Документы.удуЗаявкаНаЗачислениеРебенкаВДОУ.СоздатьДокумент();
	НоваяЗаявкаНаЗачисление.ГруппаЖелаемая = СписокПараметров[20].Значение;
	НоваяЗаявкаНаЗачисление.Дата = СписокПараметров[19].Значение;
	НоваяЗаявкаНаЗачисление.ДатаПланируемогоПоступления = СписокПараметров[18].Значение;
	НоваяЗаявкаНаЗачисление.ДатаРегистрацииВОчередь = СписокПараметров[19].Значение;
	НоваяЗаявкаНаЗачисление.ПризнакВозможностиНеЗачисления = Истина;
	НоваяЗаявкаНаЗачисление.Ребенок = НовыйРебенок.Ссылка;
	НоваяЗаявкаНаЗачисление.РодительПодавшийЗаявку = НовыйРодитель.Ссылка;
	НоваяЗаявкаНаЗачисление.Учреждение = СписокПараметров[22].Значение;;
	
	// добавим льготы по заявке
	Для Сч = 0 По СписокПараметров[21].Значение.Количество() - 1  Цикл
		НоваяСтрокаЛьготы = НоваяЗаявкаНаЗачисление.ЛьготыПоЗаявке.Добавить();
		НоваяСтрокаЛьготы.Льгота = СписокПараметров[21].Значение[Сч].Значение;
	КонецЦикла; 
	
	НоваяЗаявкаНаЗачисление.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьЗаявку(Команда)
	// Вставить содержимое обработчика.
	СписокПараметровДляЗаявки = Новый СписокЗначений;
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РебенокФамилия); //0
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РебенокИмя); //1
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РебенокОтчество); //2
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РебенокДатаРождения); //3
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РебенокПол); //4
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительФамилия); //5
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительИмя); //6
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительОтчество); //7
	СписокПараметровДляЗаявки.Добавить(?(ЭтаФорма.ВладелецФормы.ИмеютсяСведенияОМестеРаботы, ЭтаФорма.ВладелецФормы.Объект.РодительРаботает, 2)); //8
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительМестоРаботыОбучения); //9
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительДолжностьКласс);	//10	
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительАдресПроживания); //11
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.ЗначенияПолейАдресаПроживанияРодителя); //12
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительТелефонДомашний); //13
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.ЗначенияПолейДомашнегоТелефонаРодителя); //14
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.РодительТелефонМобильный); //15
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.ЗначенияПолейМобильногоТелефонаРодителя);	//16
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.СтепеньРодства); //17
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.ПериодЗачисления); //18
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.ДатаРегистрацииЗаявки); //19
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.ГруппаЖелаемая); //20
		
	
	СписокЛьгот = Новый СписокЗначений;	
	Для Каждого СтрокаЛьгот Из ЭтаФорма.ВладелецФормы.Объект.ЛьготыПоЗаявке Цикл
		СписокЛьгот.Добавить(СтрокаЛьгот.Льгота);		
	КонецЦикла;
	СписокПараметровДляЗаявки.Добавить(СписокЛьгот); //21
	СписокПараметровДляЗаявки.Добавить(ЭтаФорма.ВладелецФормы.Объект.Учреждение); //22
	
	СформироватьЗаявкуНаСервере(СписокПараметровДляЗаявки);
	Вопрос("Заявка сформирована!", РежимДиалогаВопрос.ОК);
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ДекорацияРебенок.Заголовок 	= Параметры.ФИОРебенка;
	Элементы.ДекорацияРодитель.Заголовок 	= Параметры.ФИОРодителя;
	Элементы.ДекорацияУчреждение.Заголовок 	= Параметры.Учреждение;
	Элементы.ДекорацияГруппа.Заголовок 	= Параметры.ГруппаЖелаемая;
	Элементы.ДекорацияПериод.Заголовок 	= Параметры.ПериодЗачисленияДатаЗаявки;
	Элементы.ДекорацияЛьготы.Заголовок 	= Параметры.СведенияОЛьготах;
КонецПроцедуры
