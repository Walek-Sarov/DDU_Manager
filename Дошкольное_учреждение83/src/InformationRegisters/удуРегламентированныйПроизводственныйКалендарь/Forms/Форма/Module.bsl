&НаКлиенте
Перем АдресВХранилище;

&НаСервере
Функция ПоместитьВХранилище(ЗначениеДляХранилища)
	
	Если ЗначениеДляХранилища="ТаблицаФедеральныхПраздников" тогда
	Возврат ПоместитьВоВременноеХранилище(ТаблицаФедеральныхПраздников.Выгрузить(), УникальныйИдентификатор);
	ИначеЕсли ЗначениеДляХранилища="ТаблицаРегистра" тогда
    Возврат ПоместитьВоВременноеХранилище(ТаблицаРегистра.Выгрузить(), УникальныйИдентификатор);
	ИначеЕсли ЗначениеДляХранилища="ТаблицаПеренесенныхДней" тогда
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПеренесенныхДней.Выгрузить(), УникальныйИдентификатор);
	КонецЕсли;
	
		
	
КонецФункции

&НаСервере
Функция НайтиСтрокуВТЗ(ЭлементДляПоиска,ЧтоИщем,ГдеИщем="")
	
	Если ЭлементДляПоиска="ТаблицаФедеральныхПраздников" тогда
		СтрокаПоиска = ТаблицаФедеральныхПраздников.Выгрузить().Найти(ЧтоИщем,ГдеИщем);
	ИначеЕсли ЭлементДляПоиска="ТаблицаРегистра" тогда
		СтрокаПоиска = ТаблицаРегистра.Выгрузить().Найти(ЧтоИщем,ГдеИщем);
	ИначеЕсли ЭлементДляПоиска="ТаблицаПеренесенныхДней" тогда
		СтрокаПоиска = ТаблицаПеренесенныхДней.Выгрузить().Найти(ЧтоИщем,ГдеИщем);
	КонецЕсли;
	
	Возврат удуОбщегоНазначенияСервер.ПреобразоватьСтрокуТЗВСтруктуру(СтрокаПоиска);
		
КонецФункции


	
&НаСервере
// Процедура заполняет таблицу перенесенных дней 
// по данным Регистра сведений ПеренесенныеРабочиеДни
Процедура ЗаполнитьТаблицуПеренесенныхДней()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", ГодВФорме);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеренесенныеРабочиеДни.РабочийДень,
	|	ПеренесенныеРабочиеДни.ВыходнойДень
	|ИЗ
	|	РегистрСведений.удуПеренесенныеРабочиеДни КАК ПеренесенныеРабочиеДни
	|ГДЕ
	|	ПеренесенныеРабочиеДни.Год = &Год";
	ЗначениеВДанныеФормы(Запрос.Выполнить().Выгрузить(),ТаблицаПеренесенныхДней);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнтервалКалендаря(ДатаУстановки)

	Элементы.ПроизводственныйКалендарь.НачалоПериодаОтображения = НачалоГода(ДатаУстановки);
	Элементы.ПроизводственныйКалендарь.КонецПериодаОтображения  = КонецГода(ДатаУстановки);

КонецПроцедуры

&НаСервере
Функция СформироватьЗапросПоКалендарю(ДатаНачалаЗапроса, ДатаОкончанияЗапроса)
	
	ЗапросПоКалендарю = Новый Запрос();
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря1", ДатаНачалаЗапроса);
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря2", ДатаОкончанияЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаКалендаря1 И &ДатаКалендаря2";	
	
	ЗапросПоКалендарю.Текст = ТекстЗапроса;
	Возврат ЗапросПоКалендарю.Выполнить()
	
КонецФункции     

&НаСервере
// Процедура обновляет текст надписи о перенесенных днях
Процедура ОбновитьСтрокуСведенийОПеренесенныхДнях(ОбновитьЗаголовок = Ложь)
	
	Если ОбновитьЗаголовок Тогда
		Элементы.ДекорацияЗаголовокПеренесенныеДни.Заголовок = "Изменения за "+Формат(ГодВФорме, "ЧГ=0")+ " год";
	КонецЕсли;
	ТекстЗаголовка = "";
	МассивРегиональныхПраздников = ПолучитьМассивРегиональныхПраздников();
	Для Каждого ДатаРегиональногоПраздника Из МассивРегиональныхПраздников Цикл
		
		ДеньНедели = ДеньНедели(ДатаРегиональногоПраздника);
		Если ДеньНедели = 1 или ДеньНедели = 2 или ДеньНедели = 4 Тогда
			СловоНазначен = " назначен ";
		ИначеЕсли ДеньНедели = 7 Тогда
			СловоНазначен = " назначено ";
		Иначе
			СловоНазначен = " назначена ";
		КонецЕсли;
		
		ВидНазначенногоДня = " региональным праздником";
		СтрокаТаблицыНазначенныхДней = ТаблицаРегистра.Выгрузить().Найти(ДатаРегиональногоПраздника, "ДатаКалендаря");
		Если СтрокаТаблицыНазначенныхДней <> Неопределено Тогда
			Если СтрокаТаблицыНазначенныхДней.ВидДня = ВидДняПредпраздничный Тогда
				ВидНазначенногоДня = " рабочим предпраздничным днем";
			КонецЕсли;
		КонецЕсли;
			
		ТекстЗаголовка = ТекстЗаголовка + формат(ДатаРегиональногоПраздника, "ДФ = ""д ММММ, дддд""") + СловоНазначен + ВидНазначенногоДня + Символы.ПС + Символы.ПС;
		
	КонецЦикла;		
		
	
	Для Каждого СтрокаТаблицыПеренесенныхДней Из ТаблицаПеренесенныхДней Цикл
	
		ДеньНедели = ДеньНедели(СтрокаТаблицыПеренесенныхДней.ВыходнойДень);
		Если ДеньНедели = 1 или ДеньНедели = 2 или ДеньНедели = 4 Тогда
			СловоПеренесен = " перенесен на ";
		ИначеЕсли ДеньНедели = 7 Тогда
			СловоПеренесен = " перенесено на ";
		Иначе
			СловоПеренесен = " перенесена на ";
		КонецЕсли;
		ТекстЗаголовка = ТекстЗаголовка + формат(СтрокаТаблицыПеренесенныхДней.ВыходнойДень, "ДФ = ""д ММММ, дддд""")+
		СловоПеренесен+формат(СтрокаТаблицыПеренесенныхДней.РабочийДень, "ДФ = ""д ММММ, дддд""")+Символы.ПС+Символы.ПС;
		
	КонецЦикла;
	СведенияОПеренесенныхДнях = ТекстЗаголовка + "Для переноса выходного дня выберите день и нажмите правую кнопку мыши";
	
КонецПроцедуры // ОбновитьСтрокуСведенийОПеренесенныхДнях()

&НаСервере
Функция ОбработкаПереносаПраздничногоДняСервер(РезультатВыбора, ВидВыходногоДня)
	
	ВозвращаемоеЗначение=Ложь;
	ВыбраннаяДата = ПроизводственныйКалендарь;
			
		ВыбраннаяДатаПереноса = РезультатВыбора;
		
		ДеньНеделиВыбраннойДаты = ДеньНедели(ВыбраннаяДата);
		ДеньНеделиВыбраннойДатыПереноса = ДеньНедели(ВыбраннаяДатаПереноса);
			
		НайденаПодобнаяСтрока = Ложь;
		Для Каждого СтрокаТаблицы Из ТаблицаПеренесенныхДней Цикл
			
			Если ((СтрокаТаблицы.РабочийДень=ВыбраннаяДата)
				И (СтрокаТаблицы.ВыходнойДень=ВыбраннаяДатаПереноса))
				ИЛИ((СтрокаТаблицы.РабочийДень=ВыбраннаяДатаПереноса)
				И(СтрокаТаблицы.ВыходнойДень=ВыбраннаяДата))Тогда
				
				ТаблицаПеренесенныхДней.Удалить(СтрокаТаблицы);
				НайденаПодобнаяСтрока = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		

		Если Не НайденаПодобнаяСтрока Тогда
			ТЗРегистра=ТаблицаРегистра.Выгрузить();
			СтрокаТаблицыВыбраннойДаты = ТЗРегистра.Найти(ВыбраннаяДата, "ДатаКалендаря");
			СтрокаТаблицыВыбраннойДатыПереноса = ТЗРегистра.Найти(ВыбраннаяДатаПереноса, "ДатаКалендаря");
				
			СтрокаТаблицы = ТаблицаПеренесенныхДней.Добавить();
			ДеньНеделиВыбраннойДаты = ДеньНедели(ВыбраннаяДата);
			Если ДеньНеделиВыбраннойДаты = 6 ИЛИ ДеньНеделиВыбраннойДаты = 7 Тогда
				СтрокаТаблицы.РабочийДень = ВыбраннаяДатаПереноса;
				СтрокаТаблицы.ВыходнойДень = ВыбраннаяДата;
				
				Если СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняСуббота 
					ИЛИ СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняВоскресенье Тогда
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДатыПереноса.ВидДня;
				Иначе
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДаты.ВидДня;
				КонецЕсли;
				
				Если ДеньНеделиВыбраннойДаты = 6 Тогда
					СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняСуббота;
				Иначе
					СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняВоскресенье;
				КонецЕсли;
				СтрокаТаблицыВыбраннойДаты.ВидДня = УстанавливаемыйВидДняВыбраннойДаты;
					
			Иначе
				СтрокаТаблицы.РабочийДень = ВыбраннаяДата;
				СтрокаТаблицы.ВыходнойДень = ВыбраннаяДатаПереноса;	
				
				Если СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняСуббота
					ИЛИ СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняВоскресенье Тогда
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДаты.ВидДня;
				Иначе
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДатыПереноса.ВидДня;
				КонецЕсли;
				ПереносимыйВидДня = СтрокаТаблицыВыбраннойДаты.ВидДня;
				Если ДеньНеделиВыбраннойДатыПереноса = 6 Тогда
					СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняСуббота;
				ИначеЕсли ДеньНеделиВыбраннойДатыПереноса = 7 Тогда	
					СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняВоскресенье
				Иначе
					СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняРабочий
				КонецЕсли;
				
				
				СтрокаТаблицыВыбраннойДаты.ВидДня = УстанавливаемыйВидДняВыбраннойДаты;
				СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ПереносимыйВидДня;
			КонецЕсли;
			ЗначениеВДанныеФормы(ТЗРегистра,ТаблицаРегистра);
			ТекущийВидДня = СтрокаТаблицыВыбраннойДаты.ВидДня;
			ВозвращаемоеЗначение=Истина;
		КонецЕсли;

		Возврат ВозвращаемоеЗначение;
КонецФункции

&НаКлиенте
// Процедура обрабатывает перенос выходного дня, 
// проверяет доступность и правильность этого действия
Процедура ОбработкаПереносаПраздничногоДня(ЗаголовокФормы, ВидВыходногоДня)
	
	ВыбраннаяДата = ПроизводственныйКалендарь;
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("КалендарнаяДата" ,ПроизводственныйКалендарь);
	СтруктураПараметров.Вставить("ТаблицаРегистраАдрес" ,ПоместитьВХранилище("ТаблицаРегистра"));
	СтруктураПараметров.Вставить("ТаблицаПеренесенныхДнейАдрес" ,ПоместитьВХранилище("ТаблицаПеренесенныхДней"));
	СтруктураПараметров.Вставить("ТекстПояснения" ,ЗаголовокФормы);
	
	ФормаВводаДаты = ПолучитьФорму("РегистрСведений.удуРегламентированныйПроизводственныйКалендарь.Форма.ФормаВводаДаты",СтруктураПараметров,ЭтаФорма);
	
	РезультатВыбора = ФормаВводаДаты.ОткрытьМодально();
	Элементы.ПроизводственныйКалендарь.ТолькоПросмотр=Истина;
	Если РезультатВыбора <> Неопределено Тогда
		Если ОбработкаПереносаПраздничногоДняСервер(РезультатВыбора, ВидВыходногоДня) тогда
			Элементы.ПроизводственныйКалендарь.Обновить();
			ОбновитьСтрокуСведенийОПеренесенныхДнях();
	        ТекущийВидДня=Неопределено;
			Элементы.ПроизводственныйКалендарь.ТолькоПросмотр=Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Функция возвращает массив дат - праздников, введенных пользователем
Функция ПолучитьМассивРегиональныхПраздников()
	
	ВозвращаемыйМассив = Новый Массив;
	
	Для Каждого СтрокаТаблицыРегистра Из ТаблицаРегистра Цикл
		Если СтрокаТаблицыРегистра.ВидДня = ВидДняПраздник 
			ИЛИ СтрокаТаблицыРегистра.ВидДня = ВидДняПредпраздничный Тогда
				СтрокаТаблицыФедеральныхПраздников = ТаблицаФедеральныхПраздников.Выгрузить().Найти(СтрокаТаблицыРегистра.ДатаКалендаря, "ДатаКалендаря");	
			Если СтрокаТаблицыФедеральныхПраздников.ВидДня <> СтрокаТаблицыРегистра.ВидДня Тогда
				ВозвращаемыйМассив.Добавить(СтрокаТаблицыРегистра.ДатаКалендаря);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ВозвращаемыйМассив;
	
КонецФункции // ПолучитьСписокРегиональныхПраздников()

&НаСервере
// Процедура определяет федеральный праздник или нет  для указанной даты
Функция ЭтоФедеральныйПраздник(ОпределяемаяДата, ЭтоПредпраздничныйДень = Неопределено)
	
	СтрокаТаблицы = ТаблицаФедеральныхПраздников.Выгрузить().Найти(ОпределяемаяДата, "ДатаКалендаря");
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли СтрокаТаблицы.ВидДня = ВидДняПраздник Тогда

		ЭтоПредпраздничныйДень = Ложь;
		Возврат Истина;
		
	ИначеЕсли  СтрокаТаблицы.ВидДня = ВидДняПредпраздничный Тогда		
		
		ЭтоПредпраздничныйДень = Истина;
		Возврат Истина;
		
	Иначе
		
		ЭтоПредпраздничныйДень = Ложь;
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции	

&НаСервере
// Функция возвращает Ложь, если указанная дата не участвовала в переносах дней
// иначе, истина
Функция ПраздникПеренесенНаДругойДень(ОпределяемаяДата)
	
	Если ТаблицаПеренесенныхДней.выгрузить().Найти(ОпределяемаяДата, "ВыходнойДень, РабочийДень") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция ТаблицыКалендаряИдентичны()
	
	Если ЭталоннаяТаблицаРегистра.Количество() <> ТаблицаРегистра.Количество() Тогда
		Возврат Ложь
	КонецЕсли;
	
	Для Сч = 1 По ЭталоннаяТаблицаРегистра.Количество() Цикл
		Если ЭталоннаяТаблицаРегистра[Сч-1].ВидДня <> ТаблицаРегистра[Сч-1].ВидДня Тогда
			Возврат Ложь
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина
	
КонецФункции

&НаСервере
// Процедура переписывает данные из таблицы в регистр сведений
Процедура ПереписатьВРегистрТаблицуПеренесенныхДней()
	
	НаборЗаписей = РегистрыСведений.удуПеренесенныеРабочиеДни.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Установить(ГодВФорме);
	НаборЗаписей.Очистить();
	Для Каждого СтрокаТаблицыПеренесенныхДней Из ТаблицаПеренесенныхДней Цикл
		СтрокаНабораЗаписи = НаборЗаписей.Добавить();
		СтрокаНабораЗаписи.Год = ГодВФорме;
		СтрокаНабораЗаписи.РабочийДень = СтрокаТаблицыПеренесенныхДней.РабочийДень;
		СтрокаНабораЗаписи.ВыходнойДень = СтрокаТаблицыПеренесенныхДней.ВыходнойДень;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоУмолчаниюСервер()
	
		ЗначениеВДанныеФормы(РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ПервоначальноеЗаполнениеРегистра(Дата(Формат(ГодВФорме,"ЧГ=0")+"0101"), Истина),ТаблицаФедеральныхПраздников);
		ЗначениеВДанныеФормы(ТаблицаФедеральныхПраздников.Выгрузить(),ТаблицаРегистра);
		ТаблицаПеренесенныхДней.Очистить();
		ОбновитьСтрокуСведенийОПеренесенныхДнях();  

КонецПроцедуры

&НаСервере
Процедура ПриОткрытииСервер(Отказ)
	
	 СписокЗначенийВидовДней=удуОбщегоНазначенияСервер.ПолучитьСписокЭлементовПеречисления("удуВидыДнейПроизводственногоКалендаря");
	 Для Каждого ЭлементСписка из СписокЗначенийВидовДней цикл
		 СписокВидовДней.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
		 
	 КонецЦикла;

	// Назначим цвета
	ЦветРабочегоДня 	   = Новый Цвет(  0,  0,   0); // Черный
	ЦветСубботы	           = Новый Цвет(153, 51,   0); // Темно-красный
	ЦветВоскресенья 	   = Новый Цвет(255,  0,   0); // Красный
	ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
	ЦветПраздничногоДня	   = Новый Цвет(255,  0, 255); // Фиолетовый
	
	Если ГодВФорме = 0 Тогда
		ГодВФорме = Год(ТекущаяДата());
	КонецЕсли;
	ДатаКалендаря = Дата(ГодВФорме, 1, 1);
	
	ЗаполнитьТаблицуПеренесенныхДней();
	УстановитьИнтервалКалендаря(ДатаКалендаря);
	
	РезЗапроса = СформироватьЗапросПоКалендарю(НачалоГода(ДатаКалендаря), КонецГода(ДатаКалендаря));
	ЗначениеВДанныеФормы(РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ПервоначальноеЗаполнениеРегистра(ДатаКалендаря,  РезЗапроса.Пустой()),ТаблицаФедеральныхПраздников);
	Если РезЗапроса.Пустой() Тогда
		Модифицированность = Истина;
		ЗначениеВДанныеФормы(ТаблицаФедеральныхПраздников.Выгрузить(),ТаблицаРегистра);
	Иначе
		ЗначениеВДанныеФормы(РезЗапроса.Выгрузить(),ТаблицаРегистра);
		ЗначениеВДанныеФормы(ТаблицаРегистра.Выгрузить(),ЭталоннаяТаблицаРегистра);
	КонецЕсли;
	
	
	
	ПроизводственныйКалендарь = НачалоГода(ДатаКалендаря);
	Модифицированность = Ложь;
	
	
	ОбновитьСтрокуСведенийОПеренесенныхДнях(Истина);
	
	Заголовок = "Регламентированный производственный календарь на " + Формат(ГодВФорме,"ЧГ=0") + " год";
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииСервер(ЗаКакойГод)
	
	РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра.Выгрузить(),ЗаКакойГод);
	ПереписатьВРегистрТаблицуПеренесенныхДней();
			
КонецПроцедуры

&НаСервере
Процедура ГодВФормеПриИзмененииСервер(ЗаписыватьВРегистр=Ложь,ЗаКакойГод)
	
		
	Если ЗаписыватьВРегистр Тогда
		РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра.Выгрузить(),ЗаКакойГод)
	КонецЕсли;  
		
	ЗаполнитьТаблицуПеренесенныхДней();
	
	ДатаУстановки = Дата(Формат(ГодВФорме,"ЧГ=0")+"0101");
	РезЗапроса = СформироватьЗапросПоКалендарю(ДатаУстановки, КонецГода(ДатаУстановки));
	ЗначениеВДанныеФормы(РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ПервоначальноеЗаполнениеРегистра(ДатаУстановки, РезЗапроса.Пустой()),ТаблицаФедеральныхПраздников);
	Если РезЗапроса.Пустой() Тогда
		Модифицированность = Истина;
		ЗначениеВДанныеФормы(ТаблицаФедеральныхПраздников.Выгрузить(),ТаблицаРегистра);
		// Обновим эталонную таблицу
		ЭталоннаяТаблицаРегистра.Очистить();
	Иначе
		ЗначениеВДанныеФормы(РезЗапроса.Выгрузить(),ТаблицаРегистра);
		// Обновим эталонную таблицу
		ЗначениеВДанныеФормы(ТаблицаРегистра.Выгрузить(),ЭталоннаяТаблицаРегистра);
	КонецЕсли;
	
	ОбновитьСтрокуСведенийОПеренесенныхДнях(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРегистра()
	
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		
		РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра.Выгрузить(),ГодВФорме);
		
		ДатаУстановки = Дата(Формат(ГодВФорме,"ЧГ=0")+"0101");
		РезЗапроса = СформироватьЗапросПоКалендарю(ДатаУстановки, КонецГода(ДатаУстановки));
		
		Если РезЗапроса.Пустой() Тогда
			ЗначениеВДанныеФормы(РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ПервоначальноеЗаполнениеРегистра(ДатаУстановки),ТаблицаРегистра);
			// Обновим эталонную таблицу
			ЭталоннаяТаблицаРегистра.Очистить();
		Иначе
			ЗначениеВДанныеФормы(РезЗапроса.Выгрузить(),ТаблицаРегистра);
			// Обновим эталонную таблицу
			ЗначениеВДанныеФормы(ТаблицаРегистра.Выгрузить(),ЭталоннаяТаблицаРегистра);
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПроизводственныйКалендарьПриИзмененииСервер()
	
	
	ДеньНедели = ДеньНедели(ПроизводственныйКалендарь);
	СтрокаТаблицыРегистра = ТаблицаРегистра.Выгрузить().Найти(ПроизводственныйКалендарь, "ДатаКалендаря");
	Если СтрокаТаблицыРегистра <> Неопределено Тогда
		ВидДня = СтрокаТаблицыРегистра.ВидДня;
		
		Для Каждого ЭлементМеню из Элементы.ПроизводственныйКалендарь.КонтекстноеМеню.ПодчиненныеЭлементы цикл
			ЭлементМеню.Видимость=Ложь;
		КонецЦикла;

		Если ВидДня = ВидДняРабочий Тогда
			
			Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиРабочийДень.Видимость=Истина;
			Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.НазначитьПраздничным.Видимость=Истина;
			Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.НазначитьПредпраздничным.Видимость=Истина;
			
		ИначеЕсли ВидДня = ВидДняПредпраздничный Тогда
			
			Если ЭтоФедеральныйПраздник(ПроизводственныйКалендарь) Тогда	
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиРабочийДень.Видимость=Истина;
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.НазначитьПраздничным.Видимость=Истина;	
			Иначе
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиРабочийДень.Видимость=Истина;
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПредпраздничныйДень.Видимость=Истина;
			КонецЕсли;
			
		ИначеЕсли ВидДня = ВидДняПраздник Тогда
			ЭтоФедеральныйПредПраздничныйДень = Неопределено;
			Если ЭтоФедеральныйПраздник(ПроизводственныйКалендарь, ЭтоФедеральныйПредпраздничныйДень) 
				И НЕ ЭтоФедеральныйПредПраздничныйДень Тогда
				
				Если ПраздникПеренесенНаДругойДень(ПроизводственныйКалендарь) Тогда
					Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПереносПраздника.Видимость=Истина;
				Иначе
					Если ДеньНедели = 6 Тогда
						Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиВыходнойДеньСуббота.Видимость=Истина;
					ИначеЕсли ДеньНедели = 7 Тогда
						Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиВыходнойДеньВоскресенье.Видимость=Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Если ПраздникПеренесенНаДругойДень(ПроизводственныйКалендарь) Тогда
					Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПереносПраздника.Видимость=Истина;
				Иначе
					Если ДеньНедели = 6 Тогда
						Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиВыходнойДеньСуббота.Видимость=Истина;
						Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПраздничныйДень.Видимость=Истина;
					ИначеЕсли ДеньНедели = 7 Тогда
						Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиВыходнойДеньВоскресенье.Видимость=Истина;
						Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПраздничныйДень.Видимость=Истина;		
					Иначе
						Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПраздничныйДень.Видимость=Истина;		
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли ВидДня = ВидДняСуббота Тогда
			Если ДеньНедели = 6 Тогда
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.НазначитьПраздничным.Видимость=Истина;
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиВыходнойДеньСуббота.Видимость=Истина;	
			Иначе
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПереносПраздника.Видимость=Истина;	
			КонецЕсли;
			
		ИначеЕсли ВидДня = ВидДняВоскресенье Тогда	
			Если ДеньНедели = 7 Тогда
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.НазначитьПраздничным.Видимость=Истина;
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ПеренестиВыходнойДеньВоскресенье.Видимость=Истина;	
			Иначе
				Элементы.ПроизводственныйКалендарьКонтекстноеМеню.ПодчиненныеЭлементы.ОтменитьПереносПраздника.Видимость=Истина;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьПереносПраздникаСервер()
	
	ВозвращаемоеЗначение=Ложь;
	ТЗПеренесенныхДней=ТаблицаПеренесенныхДней.Выгрузить();
	СтрокаТаблицыПеренесенныхДней = ТЗПеренесенныхДней.Найти(ПроизводственныйКалендарь, "ВыходнойДень, РабочийДень");
	Если СтрокаТаблицыПеренесенныхДней <> Неопределено Тогда
		ТЗФедеральныхПраздников=ТаблицаФедеральныхПраздников.Выгрузить();
		СтрокаТаблицыФедеральныхПраздников = ТЗФедеральныхПраздников.Найти(СтрокаТаблицыПеренесенныхДней.РабочийДень, "ДатаКалендаря");
		Если СтрокаТаблицыФедеральныхПраздников <> Неопределено Тогда
			ТЗРегистра=ТаблицаРегистра.Выгрузить();
			СтрокаТаблицыРегистра = ТЗРегистра.Найти(СтрокаТаблицыПеренесенныхДней.РабочийДень, "ДатаКалендаря");
			Если СтрокаТаблицыРегистра <> Неопределено Тогда
				СтрокаТаблицыРегистра.ВидДня = СтрокаТаблицыФедеральныхПраздников.ВидДня;
				Если СтрокаТаблицыПеренесенныхДней.РабочийДень = ПроизводственныйКалендарь Тогда
					ТекущийВидДня = СтрокаТаблицыРегистра.ВидДня;
				КонецЕсли;
				ЗначениеВДанныеФормы(ТЗРегистра,ТаблицаРегистра);
			КонецЕсли;
		КонецЕсли;
		ТЗРегистра=ТаблицаРегистра.Выгрузить();
		СтрокаТаблицыРегистра = ТЗРегистра.Найти(СтрокаТаблицыПеренесенныхДней.ВыходнойДень, "ДатаКалендаря");
		Если СтрокаТаблицыРегистра <> Неопределено Тогда
			СтрокаТаблицыРегистра.ВидДня = ВидДняПраздник;
			Если СтрокаТаблицыПеренесенныхДней.ВыходнойДень = ПроизводственныйКалендарь Тогда
				ТекущийВидДня = СтрокаТаблицыРегистра.ВидДня;
			КонецЕсли;
		КонецЕсли;
		
		ТЗПеренесенныхДней.Удалить(СтрокаТаблицыПеренесенныхДней);
		ЗначениеВДанныеФормы(ТЗРегистра,ТаблицаРегистра);
		ЗначениеВДанныеФормы(ТЗПеренесенныхДней,ТаблицаПеренесенныхДней);
		ВозвращаемоеЗначение=Истина;
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ПечатьСервер()
	
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ГодКалендаря,
	|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КварталКалендаря,
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК МесяцКалендаря,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КалендарныеДни,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = &Год
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГодКалендаря,
	|	КварталКалендаря,
	|	МесяцКалендаря
	|ИТОГИ ПО
	|	ГодКалендаря,
	|	КварталКалендаря,
	|	МесяцКалендаря";
	
	МакетПечати = РегистрыСведений.удуРегламентированныйПроизводственныйКалендарь.ПолучитьМакет("ПроизводственныйКалендарь");
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственныйКалендарь_";
	ЗаголовокПечати =  МакетПечати.ПолучитьОбласть("Заголовок");
	ЗаголовокПечати.Параметры.Год = Формат(ГодВФорме, "ЧЦ=4; ЧГ=0");
	ПечатнаяФорма.Вывести(ЗаголовокПечати);
	
	// начальные значения, независимо от результата выполнения запроса
	РабочееВремя40Год = 0;
	РабочееВремя36Год = 0;
	РабочееВремя24Год = 0;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Год", ГодВФорме);
	Результат = Запрос.Выполнить();
	ВыборкаПоГоду = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоГоду.Следующий() Цикл
		ВыборкаПоКварталу = ВыборкаПоГоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКварталу.Следующий() Цикл
			НомерКвартала =  МакетПечати.ПолучитьОбласть("Квартал");
			НомерКвартала.Параметры.НомерКвартала = "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Вывести(НомерКвартала);
			ШапкаКвартала = МакетПечати.ПолучитьОбласть("ШапкаКвартала");
			ПечатнаяФорма.Вывести(ШапкаКвартала);
			
			КалендарныеДниКв = 0;
			РабочееВремя40Кв = 0;
			РабочееВремя36Кв = 0;
			РабочееВремя24Кв = 0;
			РабочиеДниКв	 = 0;
			ВыходныеДниКв	 = 0;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 или ВыборкаПоКварталу.КварталКалендаря = 3 тогда
				КалендарныеДниПолугодие1 = 0;
				РабочееВремя40Полугодие1 = 0;
				РабочееВремя36Полугодие1 = 0;
				РабочееВремя24Полугодие1 = 0;
				РабочиеДниПолугодие1	 = 0;
				ВыходныеДниПолугодие1	 = 0;
			КонецЕсли;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 тогда
				КалендарныеДниГод = 0;
				РабочееВремя40Год = 0;
				РабочееВремя36Год = 0;
				РабочееВремя24Год = 0;
				РабочиеДниГод	 = 0;
				ВыходныеДниГод	 = 0;
			КонецЕсли;
			
			ВыборкаПоМесяцу = ВыборкаПоКварталу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоМесяцу.Следующий() Цикл
				ВыходныеДни 	= 0;
				РабочееВремя40 	= 0;
				РабочееВремя36 	= 0;
				РабочееВремя24 	= 0;
				КалендарныеДни 	= 0;
				РабочиеДни 		= 0;
				ВыборкаПоВидуДня = ВыборкаПоМесяцу.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока ВыборкаПоВидуДня.Следующий() Цикл
					Если ВыборкаПоВидуДня.ВидДня = ВидДняСуббота или 
						 ВыборкаПоВидуДня.ВидДня = ВидДняВоскресенье или
						 ВыборкаПоВидуДня.ВидДня = ВидДняПраздник тогда
						 ВыходныеДни = ВыходныеДни + ВыборкаПоВидуДня.КалендарныеДни
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = ВидДняРабочий тогда
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 8;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5;
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5;
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = ВидДняПредпраздничный тогда
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 7;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5 - 1;
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5 - 1;
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 КонецЕсли;
					 КалендарныеДни = КалендарныеДни + ВыборкаПоВидуДня.КалендарныеДни;
				КонецЦикла; // вид дня
				КалендарныеДниКв = КалендарныеДниКв + КалендарныеДни;
				РабочееВремя40Кв = РабочееВремя40Кв + РабочееВремя40;
				РабочееВремя36Кв = РабочееВремя36Кв + РабочееВремя36;
				РабочееВремя24Кв = РабочееВремя24Кв + РабочееВремя24;
				РабочиеДниКв	 = РабочиеДниКв 	+ РабочиеДни;
				ВыходныеДниКв	 = ВыходныеДниКв	+ ВыходныеДни;
				
				КалендарныеДниПолугодие1 = КалендарныеДниПолугодие1 + КалендарныеДни;
				РабочееВремя40Полугодие1 = РабочееВремя40Полугодие1 + РабочееВремя40;
				РабочееВремя36Полугодие1 = РабочееВремя36Полугодие1 + РабочееВремя36;
				РабочееВремя24Полугодие1 = РабочееВремя24Полугодие1 + РабочееВремя24;
				РабочиеДниПолугодие1	 = РабочиеДниПолугодие1 	+ РабочиеДни;
				ВыходныеДниПолугодие1	 = ВыходныеДниПолугодие1	+ ВыходныеДни;
				
				КалендарныеДниГод = КалендарныеДниГод + КалендарныеДни;
				РабочееВремя40Год = РабочееВремя40Год + РабочееВремя40;
				РабочееВремя36Год = РабочееВремя36Год + РабочееВремя36;
				РабочееВремя24Год = РабочееВремя24Год + РабочееВремя24;
				РабочиеДниГод	 = РабочиеДниГод 	+ РабочиеДни;
				ВыходныеДниГод	 = ВыходныеДниГод	+ ВыходныеДни;
				
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни = ВыходныеДни;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДни;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДни;
				КолонкаМесяца.Параметры.ИмяМесяца 		= Формат(Дата(2000,ВыборкаПоМесяцу.МесяцКалендаря, 1), "ДФ='ММММ'");
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЦикла; // месяц
			КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
			КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниКв;
			КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Кв;
			КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Кв;
			КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Кв;
			КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниКв;
			КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниКв;
			КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Присоединить(КолонкаМесяца);
			
			Если ВыборкаПоКварталу.КварталКалендаря = 2 или ВыборкаПоКварталу.КварталКалендаря = 4 тогда
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Полугодие1;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниПолугодие1;
				КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря/2 + " полугодие";
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЕсли;
			
		КонецЦикла;  // квартал
		КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
		КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниГод;
		КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
		КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
		КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
		КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниГод;
		КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниГод;
		КолонкаМесяца.Параметры.ИмяМесяца 		= "" + Формат(ВыборкаПоГоду.ГодКалендаря, "ЧЦ=4; ЧГ=0") + " год";
		ПечатнаяФорма.Присоединить(КолонкаМесяца);
		
	КонецЦикла; // год
	
	КолонкаМесяца = МакетПечати.ПолучитьОбласть("Среднемесячный");
	КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
	КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
	КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
	КолонкаМесяца.Параметры.ИмяМесяца 		= "" + Формат(ГодВФорме, "ЧЦ=4; ЧГ=0") + " год";
	ПечатнаяФорма.Вывести(КолонкаМесяца);
	
	КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяцаСр");
	КолонкаМесяца.Параметры.РабочееВремя40 	= Формат(РабочееВремя40Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя36 	= Формат(РабочееВремя36Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя24 	= Формат(РабочееВремя24Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.ИмяМесяца 		= "среднемесячное количество";
	ПечатнаяФорма.Присоединить(КолонкаМесяца);
	ПечатнаяФорма.ТолькоПросмотр=Истина;
	ПечатнаяФорма.ОтображатьЗаголовки=Ложь;
	ПечатнаяФорма.ОтображатьСетку=Ложь;
	
	
	Возврат ПечатнаяФорма;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	Если Вопрос("Восстановить первоначальное заполнение производственного календаря?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюСервер();
		// Отображение заполненого календаря
		ТекущийВидДня = Неопределено;
		Элементы.ПроизводственныйКалендарь.Обновить();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьДанныеРегистра();
	ПереписатьВРегистрТаблицуПеренесенныхДней();
	
КонецПроцедуры

&НаКлиенте
// Обработцик события нажатия кнопки "Печать"
Процедура Печать(Команда)
	
	Если Модифицированность тогда
		Если Вопрос("Перед печать календаря необходимо записать внесенные изменения. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
			
			ЗаписатьДанныеРегистра();
			ПереписатьВРегистрТаблицуПеренесенныхДней();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПечатнаяФорма=ПечатьСервер();
	
	ПечатнаяФорма.Показать("Производственный календарь");
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииСервер(Отказ);
	// Отображение заполненого календаря
	Элементы.ПроизводственныйКалендарь.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидДняРабочий = Перечисления.удуВидыДнейПроизводственногоКалендаря.Рабочий;
	ВидДняСуббота = Перечисления.удуВидыДнейПроизводственногоКалендаря.Суббота;
	ВидДняВоскресенье = Перечисления.удуВидыДнейПроизводственногоКалендаря.Воскресенье;
	ВидДняПраздник = Перечисления.удуВидыДнейПроизводственногоКалендаря.Праздник;
	ВидДняПредпраздничный = Перечисления.удуВидыДнейПроизводственногоКалендаря.Предпраздничный;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		ЗаКакойГод = Год(ТаблицаРегистра[0].ДатаКалендаря);
		Если Вопрос("Записать измененные данные за " + Формат(ЗаКакойГод,"ЧГ=0") + " год?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ПриЗакрытииСервер(ЗаКакойГод);
		КонецЕсли;  
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ГодВФормеПриИзменении(Элемент)
	
	ЗаКакойГод = Год(ТаблицаРегистра[0].ДатаКалендаря);
	ЗаписыватьВРегистр=ложь;
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		
		Если Вопрос("Записать измененные данные за " + Формат(ЗаКакойГод,"ЧГ=0") + " год?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписыватьВРегистр=истина;
		КонецЕсли;  
		
	КонецЕсли;
	
	ГодВФормеПриИзмененииСервер(ЗаписыватьВРегистр,ЗаКакойГод);
	
	ДатаУстановки = Дата(Формат(ГодВФорме,"ЧГ=0")+"0101");
	
	// Отображение заполненого календаря
	ТекущийВидДня = Неопределено;
	Элементы.ПроизводственныйКалендарь.Обновить();
	
	ПроизводственныйКалендарь = ДатаУстановки;
	УстановитьИнтервалКалендаря(ДатаУстановки);
	
	Заголовок = "Регламентированный производственный календарь на " + Формат(ГодВФорме,"ЧГ=0") + " год";

КонецПроцедуры

&НаКлиенте
// Процедура, обработчик события ПриИзменении элемента формы ПроизводственныйКалендарь.
// формирует список элементов меню для выбранного дня
Процедура ПроизводственныйКалендарьПриИзменении(Элемент)

 ПроизводственныйКалендарьПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
// Процедура, обработчик события ПриВыводеПериода элемента формы ПроизводственныйКалендарь.
Процедура ПроизводственныйКалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
		
	 Если  ЗначениеЗаполнено(ТекущийВидДня) Тогда  // Оформление календаря и запись в таблицу значений
		
		Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
		
		Для каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
			
		СтрокиТаблицыРегистра=ТаблицаРегистра.НайтиСтроки(Новый Структура("ДатаКалендаря",Строка_ОформленияДаты.Дата));
			
			Если не СтрокиТаблицыРегистра.Количество() = 0 Тогда
				
				СтрокаТаблицыРегистра=СтрокиТаблицыРегистра[0];
				Если Строка_ОформленияДаты.Дата = ПроизводственныйКалендарь Тогда
					ЗначениеСравнения = ТекущийВидДня
				Иначе
					ЗначениеСравнения = СтрокаТаблицыРегистра.ВидДня
				КонецЕсли; 
				
				Если ЗначениеСравнения = ВидДняРабочий Тогда
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняРабочий;
					Строка_ОформленияДаты.ЦветТекста = ЦветРабочегоДня;
					
				ИначеЕсли ЗначениеСравнения = ВидДняПредпраздничный Тогда	 
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняПредпраздничный;
					Строка_ОформленияДаты.ЦветТекста = ЦветПредпразничногоДня;
					
				ИначеЕсли ЗначениеСравнения = ВидДняПраздник Тогда
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняПраздник;
					Строка_ОформленияДаты.ЦветТекста = ЦветПраздничногоДня;
					
				ИначеЕсли ЗначениеСравнения = ВидДняСуббота Тогда	
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняСуббота;
					Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
					
				ИначеЕсли ЗначениеСравнения = ВидДняВоскресенье Тогда	 
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняВоскресенье;
					Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
					
				КонецЕсли;	 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе  // Только оформление календаря
		
		Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
		
		Для каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
			
			СтрокиТаблицыРегистра=ТаблицаРегистра.НайтиСтроки(Новый Структура("ДатаКалендаря",Строка_ОформленияДаты.Дата));
			
			Если не СтрокиТаблицыРегистра.Количество() = 0 Тогда
				СтрокаТаблицыРегистра=СтрокиТаблицыРегистра[0];
				
				ЗначениеСравнения = СтрокаТаблицыРегистра.ВидДня;
				
				Если ЗначениеСравнения = ВидДняРабочий Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветРабочегоДня;
				ИначеЕсли ЗначениеСравнения = ВидДняПредпраздничный Тогда	 
					Строка_ОформленияДаты.ЦветТекста = ЦветПредпразничногоДня;
				ИначеЕсли ЗначениеСравнения = ВидДняПраздник Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветПраздничногоДня;
				ИначеЕсли ЗначениеСравнения = ВидДняСуббота Тогда	
					Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
				ИначеЕсли ЗначениеСравнения = ВидДняВоскресенье Тогда	 
					Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
				КонецЕсли;	 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
КонецПроцедуры












//////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ, СВЯЗАННЫЕ С ПРОИЗВОДСТВЕННЫМ КАЛЕНДАРЕМ

&НаКлиенте
Процедура ПеренестиРабочийДень(Команда)
	
	ТекстКомментария = "Выберите выходной день, на который необходимо перенести рабочий день, "+Формат(ПроизводственныйКалендарь, "ДФ=""д ММММ, дддд""");
	ОбработкаПереносаПраздничногоДня(ТекстКомментария, ВидДняРабочий);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПраздничным(Команда)
	
	ТекущийВидДня=ВидДняПраздник;
	Элементы.ПроизводственныйКалендарь.Обновить();
	ОбновитьСтрокуСведенийОПеренесенныхДнях();
	ТекущийВидДня=Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПредпраздничным(Команда)
	
	ТекущийВидДня=ВидДняПредпраздничный;
	Элементы.ПроизводственныйКалендарь.Обновить();
	ОбновитьСтрокуСведенийОПеренесенныхДнях();
    ТекущийВидДня=Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПереносПраздника(Команда)
	
	Если ОтменитьПереносПраздникаСервер() тогда		
		ОбновитьСтрокуСведенийОПеренесенныхДнях();
		Элементы.ПроизводственныйКалендарь.Обновить();
		ТекущийВидДня=Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыходнойДеньСуббота(Команда)
	
	ТекстКомментария = "Выберите рабочий день, на который необходимо перенести выходной день, "+Формат(ПроизводственныйКалендарь, "ДФ=""д ММММ, дддд""");
	ОбработкаПереносаПраздничногоДня(ТекстКомментария, ВидДняСуббота);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПраздничныйДень(Команда)
	
	СтруктураСтрокиТаблицы=НайтиСтрокуВТЗ("ТаблицаФедеральныхПраздников",ПроизводственныйКалендарь,"ДатаКалендаря");
	Если не СтруктураСтрокиТаблицы.Количество()=0 тогда
		ТекущийВидДня = СтруктураСтрокиТаблицы.ВидДня;
		Элементы.ПроизводственныйКалендарь.Обновить();	 
		ОбновитьСтрокуСведенийОПеренесенныхДнях();
		ТекущийВидДня=Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыходнойДеньВоскресенье(Команда)
	
	ТекстКомментария = "Выберите рабочий день, на который необходимо перенести выходной день, "+Формат(ПроизводственныйКалендарь, "ДФ=""д ММММ, дддд""");
	ОбработкаПереносаПраздничногоДня(ТекстКомментария, ВидДняВоскресенье);
	
КонецПроцедуры







