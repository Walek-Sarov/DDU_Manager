////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьТаблицуЗначенийСКонтактнойИнформацией(Объект,ДополнительныеАтрибуты=Неопределено)
	
	ТЗ_Данные_КонтактнаяИнформация=Новый ТаблицаЗначений;
	ТЗ_Данные_КонтактнаяИнформация.Колонки.Добавить("Type",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_КонтактнаяИнформация.Колонки.Добавить("Species",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_КонтактнаяИнформация.Колонки.Добавить("Value",Новый ОписаниеТипов("Строка"));

	Если Не (ЗначениеЗаполнено(ДополнительныеАтрибуты) И Найти(ДополнительныеАтрибуты,"ContactInformation")=0)	Тогда 
		Для Каждого СтрокаТЧ Из Объект.КонтактнаяИнформация Цикл
			СтрокаТЗ=ТЗ_Данные_КонтактнаяИнформация.Добавить();
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Тип) Тогда 
				Тип=ПолучитьПолноеИмяПредопределенногоЗначения(СтрокаТЧ.Тип);
				Тип=СтрЗаменить(Тип,"Перечисление.ТипыКонтактнойИнформации.","");
			Иначе 
				Тип="";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Вид) Тогда
				Если СтрокаТЧ.Вид.Предопределенный Тогда 
					Вид=Справочники.ВидыКонтактнойИнформации.ПолучитьИмяПредопределенного(СтрокаТЧ.Вид);
				Иначе 
					Вид=СтрокаТЧ.Вид.Наименование;
				КонецЕсли;
			Иначе 
				Вид="";
			КонецЕсли;
			
			СтрокаТЗ.Type=Тип;
			СтрокаТЗ.Species=Вид;
			СтрокаТЗ.Value=СтрокаТЧ.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ_Данные_КонтактнаяИнформация;
	
КонецФункции

// Соответствует операции Ping
Функция Ping()
	
	// Проверка связи.
	Возврат "Подключение установлено";
	
КонецФункции

// Соответствует операции GetInstitutions
Функция GetInstitutions(Идентификатор)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	""00000000-0000-0000-0000-000000000000"" КАК ID,
	             |	удуУчреждения.Ссылка,
	             |	удуУчреждения.Наименование КАК Name,
	             |	удуУчреждения.ДатаРегистрации КАК DateReg,
	             |	удуУчреждения.ИНН КАК INN,
	             |	удуУчреждения.КПП КАК KPP,
	             |	удуУчреждения.ОКПО КАК OKPO,
	             |	удуУчреждения.ОГРН КАК OGRN,
	             |	удуУчреждения.ОКАТО КАК OKATO,
	             |	удуУчреждения.ПолноеНаименование КАК Fullname,
	             |	удуСведенияОбАккредитацииСрезПоследних.КатегорияАккредитации КАК AkkKategory,
	             |	удуСведенияОбАккредитацииСрезПоследних.РегистрационныйНомер КАК AkkRegNumber,
	             |	удуСведенияОбАккредитацииСрезПоследних.Период КАК AkkStartDate,
	             |	удуСведенияОбАккредитацииСрезПоследних.ДатаОкончания КАК AkkEndDate,
	             |	ПРЕДСТАВЛЕНИЕ(удуСведенияОбАккредитацииСрезПоследних.Серия + ""-"" + удуСведенияОбАккредитацииСрезПоследних.Номер) КАК AkkSerialNumber,
	             |	удуСведенияОЛицензированииСрезПоследних.Номер КАК LicNumber,
	             |	удуСведенияОЛицензированииСрезПоследних.РегистрационныйНомер КАК LicRegNumber,
	             |	удуСведенияОЛицензированииСрезПоследних.ЛицензирующийОрган КАК LicOrgan,
	             |	удуСведенияОЛицензированииСрезПоследних.Период КАК LicStartDate,
	             |	удуСведенияОЛицензированииСрезПоследних.ДатаОкончания КАК LicEndDate,
	             |	удуУчреждения.ОКОГУ.Код КАК OKOGU,
	             |	удуУчреждения.ОКВЭД.Код КАК OKVED,
	             |	удуУчреждения.ОКФС.Код КАК OKFS,
	             |	удуУчреждения.ОКОПФ.Код КАК OKOPF
	             |ИЗ
	             |	Справочник.удуУчреждения КАК удуУчреждения
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСведенияОбАккредитации.СрезПоследних(, ) КАК удуСведенияОбАккредитацииСрезПоследних
	             |		ПО удуУчреждения.Ссылка = удуСведенияОбАккредитацииСрезПоследних.Учреждение
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуСведенияОЛицензировании.СрезПоследних(, ) КАК удуСведенияОЛицензированииСрезПоследних
	             |		ПО удуУчреждения.Ссылка = удуСведенияОЛицензированииСрезПоследних.Учреждение
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА &Ссылка ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ удуУчреждения.Ссылка = &Ссылка
	             |		КОНЕЦ";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Попытка
			Ссылка=Справочники.удуУчреждения.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Ссылка=Справочники.удуУчреждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Ссылка=Null;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
	ТЗ_Данные = Запрос.Выполнить().Выгрузить();
	ТЗ_Данные.Колонки.Добавить("СontactInformation",Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗ_Данные.Колонки.Добавить("Liability",Новый ОписаниеТипов("ТаблицаЗначений"));
		
	ТЗ_Данные_ОтветственныеЛица=Новый ТаблицаЗначений;
	ТЗ_Данные_ОтветственныеЛица.Колонки.Добавить("LiabilityFace",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_ОтветственныеЛица.Колонки.Добавить("IDPerson",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_ОтветственныеЛица.Колонки.Добавить("IDAppointment",Новый ОписаниеТипов("Строка"));
			
	Для Каждого СтрокаТаблицы Из ТЗ_Данные Цикл 
		СтрокаТаблицы.ID = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		
		//формируем таблицу с ответственными лицами
		Отбор = Новый Структура("Учреждение",СтрокаТаблицы.Ссылка);
		СписокОтветственных = РегистрыСведений.удуОтветственныеЛицаУчреждения.Выбрать(,,Отбор,);
		ТЗ_Данные_ОтветственныеЛица.Очистить();
		
		Пока СписокОтветственных.Следующий() Цикл
			СтрокаТЗ_Ответственные = ТЗ_Данные_ОтветственныеЛица.Добавить();
			СтрокаТЗ_Ответственные.LiabilityFace = СокрЛП(СписокОтветственных.ОтветственноеЛицо);
			СтрокаТЗ_Ответственные.IDPerson = Строка(СписокОтветственных.ФизЛицо.УникальныйИдентификатор());
			СтрокаТЗ_Ответственные.IDAppointment = Строка(СписокОтветственных.Должность.УникальныйИдентификатор());
		КонецЦикла;	
		
		СтрокаТаблицы.Liability = ТЗ_Данные_ОтветственныеЛица.Скопировать();
		
		//формируем список с контактной информацией
		СтрокаТаблицы.СontactInformation=СформироватьТаблицуЗначенийСКонтактнойИнформацией(СтрокаТаблицы.Ссылка,"");
		
	КонецЦикла;
	
	ТЗ_Данные.Колонки.Удалить("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Структура=Новый Структура("Data,Error",ТЗ_Данные,"");
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Структура);

КонецФункции

// Соответствует операции GetDivisionList
Функция GetDivisionList(ИдентификаторПодразделения, ИдентификаторУчреждения)
	
	Запрос=Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	""00000000-0000-0000-0000-000000000000"" КАК ID,
	               |	""00000000-0000-0000-0000-000000000000"" КАК IDInstitutions,
	               |	""00000000-0000-0000-0000-000000000000"" КАК IDParent,
	               |	удуПодразделенияУчереждения.Организация,
	               |	удуПодразделенияУчереждения.Родитель,
	               |	удуПодразделенияУчереждения.Ссылка,
	               |	удуПодразделенияУчереждения.Наименование КАК Name
	               |ИЗ
	               |	Справочник.удуПодразделенияУчереждения КАК удуПодразделенияУчереждения
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &Подразделение ЕСТЬ NULL 
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ удуПодразделенияУчереждения.Ссылка = &Подразделение
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &Учреждение ЕСТЬ NULL 
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ удуПодразделенияУчереждения.Организация = &Учреждение
	               |		КОНЕЦ";
				   
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ИдентификаторУчреждения) Тогда
		Попытка
			Учреждение=Справочники.удуУчреждения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУчреждения));
		Исключение
			Учреждение=Справочники.удуУчреждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Учреждение=Null;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПодразделения) Тогда
		Попытка
			Подразделение=Справочники.удуПодразделенияУчереждения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПодразделения));
		Исключение
			Подразделение=Справочники.удуПодразделенияУчереждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Подразделение=Null;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Учреждение",Учреждение);
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	
	ТЗ_Данные=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТЗ_Данные Цикл 
		СтрокаТаблицы.ID = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		СтрокаТаблицы.IDInstitutions = Строка(СтрокаТаблицы.Организация.УникальныйИдентификатор());
		СтрокаТаблицы.IDParent = Строка(СтрокаТаблицы.Родитель.УникальныйИдентификатор());
	КонецЦикла;
	
	ТЗ_Данные.Колонки.Удалить("Ссылка");
	ТЗ_Данные.Колонки.Удалить("Организация");
	ТЗ_Данные.Колонки.Удалить("Родитель");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Структура=Новый Структура("Data,Error",ТЗ_Данные,"");
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Структура);

КонецФункции

// Соответствует операции GetAppointmentList
Функция GetAppointmentList(Идентификатор)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Должности.Ссылка,
	             |	""00000000-0000-0000-0000-000000000000"" КАК ID,
	             |	Должности.Наименование КАК Name
	             |ИЗ
	             |	Справочник.Должности КАК Должности
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА &Ссылка ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ Должности.Ссылка = &Ссылка
	             |		КОНЕЦ";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Попытка
			Ссылка=Справочники.Должности.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Ссылка=Справочники.Должности.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Ссылка=Null;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТЗ_Данные=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТЗ_Данные Цикл 
		СтрокаТаблицы.ID = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
	КонецЦикла;
	
	ТЗ_Данные.Колонки.Удалить("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);

	Структура=Новый Структура("Data,Error",ТЗ_Данные,"");
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Структура);

КонецФункции

// Соответствует операции GetGroupList
Функция GetGroupList(Идентификатор, ИдентификаторУчреждения)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	удуГруппыУчреждения.Ссылка,
	             |	удуГруппыУчреждения.Наименование КАК Name,
	             |	""00000000-0000-0000-0000-000000000000"" КАК ID,
	             |	удуГруппыУчреждения.Учреждение,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDInstitutions
	             |ИЗ
	             |	Справочник.удуГруппыУчреждения КАК удуГруппыУчреждения
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА &Ссылка ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ удуГруппыУчреждения.Ссылка = &Ссылка
	             |		КОНЕЦ
	             |	И удуГруппыУчреждения.ЭтоГруппа = ЛОЖЬ
	             |	И ВЫБОР
	             |			КОГДА &Учреждение ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ удуГруппыУчреждения.Учреждение = &Учреждение
	             |		КОНЕЦ";
				 
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Попытка
			Ссылка=Справочники.удуГруппыУчреждения.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Ссылка=Справочники.удуГруппыУчреждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Ссылка=Null;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторУчреждения) Тогда
		Попытка
			Учреждение=Справочники.удуУчреждения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУчреждения));
		Исключение
			Учреждение=Справочники.удуУчреждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Учреждение=Null;	
	КонецЕсли;

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Учреждение",Учреждение);
	
	ТЗ_Данные=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТЗ_Данные Цикл 
		СтрокаТаблицы.ID = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		СтрокаТаблицы.IDInstitutions = Строка(СтрокаТаблицы.Учреждение.УникальныйИдентификатор());
	КонецЦикла;
	
	ТЗ_Данные.Колонки.Удалить("Ссылка");
	ТЗ_Данные.Колонки.Удалить("Учреждение");
	
	УстановитьПривилегированныйРежим(Ложь);

	Структура=Новый Структура("GroupList,Error",ТЗ_Данные,"");
		
	Возврат СериализаторXDTO.ЗаписатьXDTO(Структура);
	
КонецФункции

// Соответствует операции GetChildrenList
Функция GetChildrenList(Идентификатор, ИдентификаторГруппы, ИдентификаторУчреждения, ДатаСреза, ДополнительныеАтрибуты)
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Период,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Учреждение,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Группа КАК Группа
	              |ПОМЕСТИТЬ ВТ_ПринятВГруппу
	              |ИЗ
	              |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(&ДатаСреза, ) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
	              |ГДЕ
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе = ЗНАЧЕНИЕ(Перечисление.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	""00000000-0000-0000-0000-000000000000"" КАК ID,
	              |	""00000000-0000-0000-0000-000000000000"" КАК IDGroup,
	              |	ВЫБОР
	              |		КОГДА удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Пол = ЗНАЧЕНИЕ(Перечисление.удуПол.Мальчик)
	              |			ТОГДА ""мужской""
	              |		КОГДА удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Пол = ЗНАЧЕНИЕ(Перечисление.удуПол.Девочка)
	              |			ТОГДА ""женский""
	              |		ИНАЧЕ """"
	              |	КОНЕЦ КАК Gender,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Код КАК PersonalNumber,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.ДатаРождения КАК Birthdate,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Фамилия КАК Fname,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Имя КАК Name,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Отчество КАК Oname,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Наименование КАК Fullname,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Ссылка КАК Ссылка,
	              |	ВТ_ПринятВГруппу.Группа КАК Группа,
	              |	ВТ_ПринятВГруппу.Группа.Код КАК ГруппаКод,
	              |	""00000000-0000-0000-0000-000000000000"" КАК IDInstitutions,
	              |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Учреждение
	              |ИЗ
	              |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(&ДатаСреза, ) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПринятВГруппу КАК ВТ_ПринятВГруппу
	              |		ПО удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Учреждение = ВТ_ПринятВГруппу.Учреждение
	              |			И удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок = ВТ_ПринятВГруппу.Ребенок
	              |ГДЕ
	              |	ВЫБОР
	              |			КОГДА &Учреждение ЕСТЬ NULL 
	              |				ТОГДА ИСТИНА
	              |			ИНАЧЕ удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Учреждение = &Учреждение
	              |		КОНЕЦ
	              |	И ВЫБОР
	              |			КОГДА &Группа ЕСТЬ NULL 
	              |				ТОГДА ИСТИНА
	              |			ИНАЧЕ удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Группа = &Группа
	              |		КОНЕЦ
	              |	И ВЫБОР
	              |			КОГДА &Ссылка ЕСТЬ NULL 
	              |				ТОГДА ИСТИНА
	              |			ИНАЧЕ удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок.Ссылка = &Ссылка
	              |		КОНЕЦ
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Fullname
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	удуСоставСемьиРебенка.Ребенок КАК Ребенок,
	              |	удуСоставСемьиРебенка.СтепеньРодства КАК Relationship,
	              |	удуСоставСемьиРебенка.ЧленСемьи,
	              |	удуСоставСемьиРебенка.ЧленСемьи.Фамилия КАК Fname,
	              |	удуСоставСемьиРебенка.ЧленСемьи.Имя КАК Name,
	              |	удуСоставСемьиРебенка.ЧленСемьи.Отчество КАК Oname,
	              |	удуСоставСемьиРебенка.ЧленСемьи.Наименование КАК Fullname,
	              |	удуСоставСемьиРебенка.ЧленСемьи.ДатаРождения КАК Birthdate
	              |ИЗ
	              |	РегистрСведений.удуСоставСемьиРебенка КАК удуСоставСемьиРебенка
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Fullname
	              |ИТОГИ ПО
	              |	Ребенок
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	удуСведенияОЗачисленииРебенкаВГруппу.Учреждение,
	              |	удуСведенияОЗачисленииРебенкаВГруппу.Ребенок КАК Ребенок,
	              |	удуСведенияОЗачисленииРебенкаВГруппу.Группа,
	              |	ВЫБОР
	              |		КОГДА удуСведенияОЗачисленииРебенкаВГруппу.СостояниеУчетаВГруппе = ЗНАЧЕНИЕ(Перечисление.удуСостояниеРебенкаНаУчетеВГруппе.ИсключенИзГруппы)
	              |				И удуСведенияОЗачисленииРебенкаВГруппу.ПричинаВыбытияИзГруппы = ЗНАЧЕНИЕ(Справочник.удуПричиныВыбытияИзГруппы.ПереводВДругуюГруппу)
	              |			ТОГДА ДОБАВИТЬКДАТЕ(удуСведенияОЗачисленииРебенкаВГруппу.Период, ДЕНЬ, -1)
	              |		ИНАЧЕ удуСведенияОЗачисленииРебенкаВГруппу.Период
	              |	КОНЕЦ КАК Date,
	              |	ВЫБОР
	              |		КОГДА удуСведенияОЗачисленииРебенкаВГруппу.СостояниеУчетаВГруппе = ЗНАЧЕНИЕ(Перечисление.удуСостояниеРебенкаНаУчетеВГруппе.ИсключенИзГруппы)
	              |				И удуСведенияОЗачисленииРебенкаВГруппу.ПричинаВыбытияИзГруппы = ЗНАЧЕНИЕ(Справочник.удуПричиныВыбытияИзГруппы.ПереводВДругуюГруппу)
	              |			ТОГДА ""ПереводВДругуюГруппу""
	              |		КОГДА удуСведенияОЗачисленииРебенкаВГруппу.СостояниеУчетаВГруппе = ЗНАЧЕНИЕ(Перечисление.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу)
	              |			ТОГДА ""ПринятВГруппу""
	              |		ИНАЧЕ ""ИсключенИзГруппы""
	              |	КОНЕЦ КАК Status,
	              |	""00000000-0000-0000-0000-000000000000"" КАК IDGroup
	              |ИЗ
	              |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу КАК удуСведенияОЗачисленииРебенкаВГруппу
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Date
	              |ИТОГИ ПО
	              |	Ребенок" ;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Попытка
			Ссылка=Справочники.удуДети.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Ссылка=Справочники.удуДети.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Ссылка=Null;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ИдентификаторУчреждения) Тогда
		Попытка
			Учреждение=Справочники.удуУчреждения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУчреждения));
		Исключение
			Учреждение=Справочники.удуУчреждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Учреждение=Null;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторГруппы) Тогда
		Попытка
			Группа=Справочники.удуГруппыУчреждения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторГруппы));
		Исключение
			Группа=Справочники.удуГруппыУчреждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Группа=Null;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Учреждение",Учреждение);
	Запрос.УстановитьПараметр("Группа",Группа);
	Запрос.УстановитьПараметр("ДатаСреза",?(ЗначениеЗаполнено(ДатаСреза),ДатаСреза,ТекущаяДатаСеанса()));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗ_Данные=МассивРезультатов[1].Выгрузить();
		
	ВыборкаСоставСемьи=МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПериодыОбучения=МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	ТЗ_Данные_СоставСемьи=Новый ТаблицаЗначений;
	ТЗ_Данные_СоставСемьи.Колонки.Добавить("Fullname",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_СоставСемьи.Колонки.Добавить("Name",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_СоставСемьи.Колонки.Добавить("Fname",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_СоставСемьи.Колонки.Добавить("Oname",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_СоставСемьи.Колонки.Добавить("Birthdate",Новый ОписаниеТипов("Дата"));
	ТЗ_Данные_СоставСемьи.Колонки.Добавить("Relationship",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_СоставСемьи.Колонки.Добавить("СontactInformation",Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ТЗ_Данные.Колонки.Добавить("Periods",Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗ_Данные.Колонки.Добавить("СontactInformation",Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗ_Данные.Колонки.Добавить("Parents",Новый ОписаниеТипов("ТаблицаЗначений"));

	ТЗ_Данные_Периоды=Новый ТаблицаЗначений;
	ТЗ_Данные_Периоды.Колонки.Добавить("IDGroup",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_Периоды.Колонки.Добавить("Date",Новый ОписаниеТипов("Дата"));
	ТЗ_Данные_Периоды.Колонки.Добавить("Status",Новый ОписаниеТипов("Строка"));

	Отбор=Новый Структура("Ребенок");

	Для Каждого СтрокаТаблицы Из ТЗ_Данные Цикл 
		СтрокаТаблицы.ID = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		Если СтрокаТаблицы.ГруппаКод<>Неопределено Тогда
			ГрСсылка = Справочники.удуГруппыУчреждения.НайтиПоКоду(СтрокаТаблицы.ГруппаКод);
			СтрокаТаблицы.IDGroup = Строка(ГрСсылка.УникальныйИдентификатор());
		КонецЕсли;
		СтрокаТаблицы.IDInstitutions = Строка(СтрокаТаблицы.Учреждение.УникальныйИдентификатор());
		
		//формируем список состава семьи
		ТЗ_Данные_СоставСемьи.Очистить();
		Если Не (ЗначениеЗаполнено(ДополнительныеАтрибуты) И Найти(ДополнительныеАтрибуты,"Parents")=0) Тогда
			ВыборкаСоставСемьи.Сбросить();
			Отбор.Вставить("Ребенок",СтрокаТаблицы.Ссылка);
			Если ВыборкаСоставСемьи.НайтиСледующий(Отбор) Тогда 
				Выборка=ВыборкаСоставСемьи.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаТЗ=ТЗ_Данные_СоставСемьи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ,Выборка);
					СтрокаТЗ.СontactInformation=СформироватьТаблицуЗначенийСКонтактнойИнформацией(Выборка.ЧленСемьи);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.Parents=ТЗ_Данные_СоставСемьи.Скопировать();

		//формируем список периодов обучения
		ВыборкаПериодыОбучения.Сбросить();
		ТЗ_Данные_Периоды.Очистить();
		Если Не (ЗначениеЗаполнено(ДополнительныеАтрибуты) И Найти(ДополнительныеАтрибуты,"Periods")=0) Тогда
			Если ВыборкаПериодыОбучения.НайтиСледующий(Отбор) Тогда 
				Выборка=ВыборкаПериодыОбучения.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаТЗ=ТЗ_Данные_Периоды.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ,Выборка);
					СтрокаТЗ.IDGroup=Строка(Выборка.Группа.УникальныйИдентификатор());
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.Periods=ТЗ_Данные_Периоды.Скопировать();
		
		//формируем список с контактной информацией
		СтрокаТаблицы.СontactInformation=СформироватьТаблицуЗначенийСКонтактнойИнформацией(СтрокаТаблицы.Ссылка,ДополнительныеАтрибуты);
	КонецЦикла;	
	
	ТЗ_Данные.Колонки.Удалить("Ссылка");
	ТЗ_Данные.Колонки.Удалить("Группа");
	ТЗ_Данные.Колонки.Удалить("Учреждение");
		
	Структура_Данные=Новый Структура;
	Структура_Данные.Вставить("ChildrenList",ТЗ_Данные);
	Структура_Данные.Вставить("Error","");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Структура_Данные);
	
КонецФункции

// Соответствует операции GetWorkerList
Функция GetWorkerList(Идентификатор, ИдентификаторФизЛица, ИдентификаторУчреждения, ИдентификаторПодразделения, ИдентификаторДолжности, ДатаСреза, ДополнительныеАтрибуты)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	удуРаботникиОрганизацийСрезПоследних_Прием.Сотрудник,
	             |	удуРаботникиОрганизацийСрезПоследних_Прием.Организация,
	             |	удуРаботникиОрганизацийСрезПоследних_Прием.Период КАК ДатаПриема,
	             |	ВЫБОР
	             |		КОГДА удуРаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
	             |			ТОГДА удуРаботникиОрганизацийСрезПоследних.Период
	             |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	             |	КОНЕЦ КАК ДатаУвольнения,
	             |	ВЫБОР
	             |		КОГДА удуРаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
	             |			ТОГДА ЗНАЧЕНИЕ(Справочник.удуПодразделенияУчереждения.ПустаяСсылка)
	             |		ИНАЧЕ удуРаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	             |	КОНЕЦ КАК Подразделение,
	             |	ВЫБОР
	             |		КОГДА удуРаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
	             |			ТОГДА ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	             |		ИНАЧЕ удуРаботникиОрганизацийСрезПоследних.Должность
	             |	КОНЕЦ КАК Должность
	             |ПОМЕСТИТЬ ВТ_ДанныеПоСотруднику
	             |ИЗ
	             |	РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(&ДатаСреза, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.ПриемНаРаботу)) КАК удуРаботникиОрганизацийСрезПоследних_Прием
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(&ДатаСреза, ) КАК удуРаботникиОрганизацийСрезПоследних
	             |		ПО удуРаботникиОрганизацийСрезПоследних_Прием.Сотрудник = удуРаботникиОрганизацийСрезПоследних.Сотрудник
	             |			И удуРаботникиОрганизацийСрезПоследних_Прием.Организация = удуРаботникиОрганизацийСрезПоследних.Организация
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	удуФИОФизЛицСрезПоследних.Фамилия КАК Fname,
	             |	удуФИОФизЛицСрезПоследних.Имя КАК Name,
	             |	удуФИОФизЛицСрезПоследних.Отчество КАК Oname,
	             |	""00000000-0000-0000-0000-000000000000"" КАК ID,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDPerson,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDInstitutions,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDDivision,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDAppointment,
	             |	ВТ_ДанныеПоСотруднику.ДатаПриема КАК StartPeriod,
	             |	ВТ_ДанныеПоСотруднику.ДатаУвольнения КАК EndPeriod,
	             |	ВТ_ДанныеПоСотруднику.Подразделение,
	             |	ВТ_ДанныеПоСотруднику.Должность,
	             |	ВТ_ДанныеПоСотруднику.Организация,
	             |	ВЫБОР
	             |		КОГДА ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	             |			ТОГДА ""мужской""
	             |		КОГДА ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	             |			ТОГДА ""женский""
	             |		ИНАЧЕ """"
	             |	КОНЕЦ КАК Gender,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо.ДатаРождения КАК Birthdate,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо.Наименование КАК Fullname,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо.СтраховойНомерПФР КАК PFR,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.ДатаНачала КАК ContractDateBegin,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.ДатаОкончания КАК ContractDateEnd,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.ДатаДоговора КАК ContractDate,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.НомерДоговора КАК ContractNumber,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.ИспытательныйСрок КАК TestPeriod,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.ЗанимаемыхСтавок КАК KolStavok,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.ТарифнаяСтавка КАК TarifStavka,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.Ссылка КАК Ссылка,
	             |	ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо КАК ФизЛицо
	             |ИЗ
	             |	ВТ_ДанныеПоСотруднику КАК ВТ_ДанныеПоСотруднику
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК удуФИОФизЛицСрезПоследних
	             |		ПО ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо = удуФИОФизЛицСрезПоследних.ФизЛицо
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА &Подразделение ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ВТ_ДанныеПоСотруднику.Подразделение = &Подразделение
	             |		КОНЕЦ
	             |	И ВЫБОР
	             |			КОГДА &Учреждение ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ВТ_ДанныеПоСотруднику.Организация = &Учреждение
	             |		КОНЕЦ
	             |	И ВЫБОР
	             |			КОГДА &Должность ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ВТ_ДанныеПоСотруднику.Должность = &Должность
	             |		КОНЕЦ
	             |	И ВЫБОР
	             |			КОГДА &Ссылка ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ВТ_ДанныеПоСотруднику.Сотрудник.Ссылка = &Ссылка
	             |		КОНЕЦ
	             |	И ВЫБОР
	             |			КОГДА &ФизическоеЛицо ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ВТ_ДанныеПоСотруднику.Сотрудник.Физлицо = &ФизическоеЛицо
	             |		КОНЕЦ
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Fullname
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	удуРаботникиОрганизаций.Период КАК Date,
	             |	удуРаботникиОрганизаций.Сотрудник КАК Сотрудник,
	             |	удуРаботникиОрганизаций.ЗанимаемыхСтавок КАК KolStavok,
	             |	удуРаботникиОрганизаций.ПричинаИзмененияСостояния КАК Reason,
	             |	удуРаботникиОрганизаций.ПодразделениеОрганизации КАК Подразделение,
	             |	удуРаботникиОрганизаций.Должность,
	             |	удуРаботникиОрганизаций.Организация,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDDivision,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDAppointment,
	             |	""00000000-0000-0000-0000-000000000000"" КАК IDInstitutions
	             |ИЗ
	             |	РегистрСведений.удуРаботникиОрганизаций КАК удуРаботникиОрганизаций
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Date
	             |ИТОГИ ПО
	             |	Сотрудник
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ФизическиеЛицаТрудоваяДеятельность.Ссылка КАК ФизЛицо,
	             |	ФизическиеЛицаТрудоваяДеятельность.ДатаНачала КАК StartPeriod,
	             |	ФизическиеЛицаТрудоваяДеятельность.ДатаОкончания КАК EndPeriod,
	             |	ФизическиеЛицаТрудоваяДеятельность.Организация КАК Place,
	             |	ФизическиеЛицаТрудоваяДеятельность.Должность КАК Appointment
	             |ИЗ
	             |	Справочник.ФизическиеЛица.ТрудоваяДеятельность КАК ФизическиеЛицаТрудоваяДеятельность
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	StartPeriod
	             |ИТОГИ ПО
	             |	ФизЛицо
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПаспортныеДанныеФизЛиц.ФизЛицо КАК ФизЛицо,
	             |	ПаспортныеДанныеФизЛиц.ВидДокумента КАК View,
	             |	ПаспортныеДанныеФизЛиц.Серия КАК Seria,
	             |	ПаспортныеДанныеФизЛиц.Номер КАК Number,
	             |	ПаспортныеДанныеФизЛиц.КемВыдан КАК Organization,
	             |	ПаспортныеДанныеФизЛиц.ДатаВыдачи КАК DateOutput,
	             |	ПаспортныеДанныеФизЛиц.Период КАК DateActivacion,
	             |	ПаспортныеДанныеФизЛиц.КодПодразделения КАК CodeDivision
	             |ИЗ
	             |	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	DateActivacion
	             |ИТОГИ ПО
	             |	ФизЛицо";
				 
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Попытка
			Ссылка=Справочники.удуСотрудникиОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Ссылка=Справочники.удуСотрудникиОрганизаций.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Ссылка=Null;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ИдентификаторУчреждения) Тогда
		Попытка
			Учреждение=Справочники.удуУчреждения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУчреждения));
		Исключение
			Учреждение=Справочники.удуУчреждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Учреждение=Null;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторФизЛица) Тогда
		Попытка
			ФизическоеЛицо=Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторФизЛица));
		Исключение
			ФизическоеЛицо=Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецПопытки;
	Иначе
		ФизическоеЛицо=Null;	
	КонецЕсли;

	Если ЗначениеЗаполнено(ИдентификаторПодразделения) Тогда
		Попытка
			Подразделение=Справочники.удуПодразделенияУчереждения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПодразделения));
		Исключение
			Подразделение=Справочники.удуПодразделенияУчереждения.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Подразделение=Null;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторДолжности) Тогда
		Попытка
			Должность=Справочники.Должности.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторДолжности));
		Исключение
			Должность=Справочники.Должности.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Должность=Null;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
	Запрос.УстановитьПараметр("Учреждение",Учреждение);
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Должность",Должность);
	Запрос.УстановитьПараметр("ДатаСреза",?(ЗначениеЗаполнено(ДатаСреза),ДатаСреза,ТекущаяДатаСеанса()));

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗ_Данные=МассивРезультатов[1].Выгрузить();
	
	ВыборкаКадроваяИстория=МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаТрудоваяДеятельность=МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДокументУдостоверяющийЛичность=МассивРезультатов[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТЗ_Данные.Колонки.Добавить("WorkHistory",Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗ_Данные.Колонки.Добавить("СontactInformation",Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗ_Данные.Колонки.Добавить("WorkActivity",Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗ_Данные.Колонки.Добавить("IdentificationDoc",Новый ОписаниеТипов("ТаблицаЗначений"));

	ТЗ_Данные_КадроваяИстория=Новый ТаблицаЗначений;
	ТЗ_Данные_КадроваяИстория.Колонки.Добавить("Date",Новый ОписаниеТипов("Дата"));
	ТЗ_Данные_КадроваяИстория.Колонки.Добавить("Reason",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_КадроваяИстория.Колонки.Добавить("IDDivision",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_КадроваяИстория.Колонки.Добавить("IDAppointment",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_КадроваяИстория.Колонки.Добавить("KolStavok",Новый ОписаниеТипов("Число"));
	ТЗ_Данные_КадроваяИстория.Колонки.Добавить("IDInstitutions",Новый ОписаниеТипов("Строка"));
	
	ТЗ_Данные_ТрудоваяДеятельность=Новый ТаблицаЗначений;
	ТЗ_Данные_ТрудоваяДеятельность.Колонки.Добавить("Place",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_ТрудоваяДеятельность.Колонки.Добавить("StartPeriod",Новый ОписаниеТипов("Дата"));
	ТЗ_Данные_ТрудоваяДеятельность.Колонки.Добавить("EndPeriod",Новый ОписаниеТипов("Дата"));
	ТЗ_Данные_ТрудоваяДеятельность.Колонки.Добавить("Appointment",Новый ОписаниеТипов("Строка"));

	ТЗ_Данные_УдостоверениеЛичности=Новый ТаблицаЗначений;
	ТЗ_Данные_УдостоверениеЛичности.Колонки.Добавить("View",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_УдостоверениеЛичности.Колонки.Добавить("Seria",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_УдостоверениеЛичности.Колонки.Добавить("Number",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_УдостоверениеЛичности.Колонки.Добавить("DateOutput",Новый ОписаниеТипов("Дата"));
	ТЗ_Данные_УдостоверениеЛичности.Колонки.Добавить("Organization",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_УдостоверениеЛичности.Колонки.Добавить("CodeDivision",Новый ОписаниеТипов("Строка"));
	ТЗ_Данные_УдостоверениеЛичности.Колонки.Добавить("DateActivacion",Новый ОписаниеТипов("Дата"));

	Отбор=Новый Структура("Сотрудник");
	ОтборФЛ=Новый Структура("ФизЛицо");
	
	Для Каждого СтрокаТаблицы Из ТЗ_Данные Цикл 
		СтрокаТаблицы.ID = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		СтрокаТаблицы.IDPerson = Строка(СтрокаТаблицы.ФизЛицо.УникальныйИдентификатор());
		СтрокаТаблицы.IDInstitutions = Строка(СтрокаТаблицы.Организация.УникальныйИдентификатор());
		СтрокаТаблицы.IDDivision = Строка(СтрокаТаблицы.Подразделение.УникальныйИдентификатор());
		СтрокаТаблицы.IDAppointment = Строка(СтрокаТаблицы.Должность.УникальныйИдентификатор());
		
		//формируем кадровую историю
		ТЗ_Данные_КадроваяИстория.Очистить();
		Если Не (ЗначениеЗаполнено(ДополнительныеАтрибуты) И Найти(ДополнительныеАтрибуты,"WorkHistory")=0) Тогда
			ВыборкаКадроваяИстория.Сбросить();
			Отбор.Вставить("Сотрудник",СтрокаТаблицы.Ссылка);
			Если ВыборкаКадроваяИстория.НайтиСледующий(Отбор) Тогда 
				Выборка=ВыборкаКадроваяИстория.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаТЗ=ТЗ_Данные_КадроваяИстория.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ,Выборка);
					СтрокаТЗ.IDInstitutions = Строка(Выборка.Организация.УникальныйИдентификатор());
					СтрокаТЗ.IDDivision = Строка(Выборка.Подразделение.УникальныйИдентификатор());
					СтрокаТЗ.IDAppointment = Строка(Выборка.Должность.УникальныйИдентификатор());
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.WorkHistory=ТЗ_Данные_КадроваяИстория.Скопировать();
		
		//формируем трудовую деятельность
		ТЗ_Данные_ТрудоваяДеятельность.Очистить();
		Если Не (ЗначениеЗаполнено(ДополнительныеАтрибуты) И Найти(ДополнительныеАтрибуты,"WorkActivity")=0) Тогда
			ВыборкаТрудоваяДеятельность.Сбросить();
			ОтборФЛ.Вставить("ФизЛицо",СтрокаТаблицы.ФизЛицо);
			Если ВыборкаТрудоваяДеятельность.НайтиСледующий(ОтборФЛ) Тогда 
				Выборка=ВыборкаТрудоваяДеятельность.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаТЗ=ТЗ_Данные_ТрудоваяДеятельность.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ,Выборка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.WorkActivity=ТЗ_Данные_ТрудоваяДеятельность.Скопировать();

		//формируем историю документов, удостоверяющих личность
		ТЗ_Данные_УдостоверениеЛичности.Очистить();
		Если Не (ЗначениеЗаполнено(ДополнительныеАтрибуты) И Найти(ДополнительныеАтрибуты,"IdentificationDoc")=0) Тогда
			ВыборкаДокументУдостоверяющийЛичность.Сбросить();
			ОтборФЛ.Вставить("ФизЛицо",СтрокаТаблицы.ФизЛицо);
			Если ВыборкаДокументУдостоверяющийЛичность.НайтиСледующий(ОтборФЛ) Тогда 
				Выборка=ВыборкаДокументУдостоверяющийЛичность.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаТЗ=ТЗ_Данные_УдостоверениеЛичности.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ,Выборка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.IdentificationDoc=ТЗ_Данные_УдостоверениеЛичности.Скопировать();

		//формируем список с контактной информацией
		СтрокаТаблицы.СontactInformation=СформироватьТаблицуЗначенийСКонтактнойИнформацией(СтрокаТаблицы.ФизЛицо,ДополнительныеАтрибуты);
				
	КонецЦикла;

	ТЗ_Данные.Колонки.Удалить("Ссылка");
	ТЗ_Данные.Колонки.Удалить("ФизЛицо");
	ТЗ_Данные.Колонки.Удалить("Подразделение");
	ТЗ_Данные.Колонки.Удалить("Должность");
	ТЗ_Данные.Колонки.Удалить("Организация");
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Структура=Новый Структура("Data,Error",ТЗ_Данные,"");
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Структура);

КонецФункции


