
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ПровереноСервер()	
	БизнесПроцессыИЗадачиСервер.ВыполнитьЗадачу(Объект.Ссылка);	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессами.ФормаЗадачиПриСозданииНаСервере(ЭтаФорма, Объект, 
		Элементы.СрокИсполнения, Элементы.ДатаИсполнения, Элементы.Предмет);
		
	УстановитьПривилегированныйРежим(Истина);	
		
	// Заполнение текущих задач
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
	|	ВЫБОР
	|		КОГДА ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ОтвИсполнение
	|ИЗ
	|	БизнесПроцесс.удуРезолюция КАК удуРезолюция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ПО удуРезолюция.Ссылка = ЗадачаИсполнителя.БизнесПроцесс.Ссылка
	|ГДЕ
	|	удуРезолюция.Ссылка = &Резолюция
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И (ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаИсполнение
	|			ИЛИ ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение)"; 	
	Запрос.УстановитьПараметр("Резолюция", Объект.БизнесПроцесс.Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрутаИсполнение", БизнесПроцессы.удуРезолюция.ТочкиМаршрута.Исполнить);
	Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", БизнесПроцессы.удуРезолюция.ТочкиМаршрута.ОтветственноеИсполнение);
	ТекущиеЗадачи.Загрузить(Запрос.Выполнить().Выгрузить());
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.ТЗСрокИсполнения);
	Элементы.СтраницаТекущиеЗадачи.Заголовок = "Текущие задачи (" + Строка(ТекущиеЗадачи.Количество()) + ")";
	
	// Отбор завершенных задач
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	удуРезультатыПроверкиРезолюций.Задача КАК ЗадачаИсполнителя,
	|	удуРезультатыПроверкиРезолюций.КомментарийПроверяющего,
	|	ВЫБОР
	|		КОГДА удуРезультатыПроверкиРезолюций.Задача.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтветственноеИсполнение
	|ИЗ
	|	РегистрСведений.удуРезультатыПроверкиРезолюций КАК удуРезультатыПроверкиРезолюций
	|ГДЕ
	|	удуРезультатыПроверкиРезолюций.Состояние = &Состояние
	|	И удуРезультатыПроверкиРезолюций.Резолюция = &Резолюция
	|	И (удуРезультатыПроверкиРезолюций.Задача.ТочкаМаршрута = &ТочкаМаршрутаИсполнение
	|			ИЛИ удуРезультатыПроверкиРезолюций.Задача.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение)";
	
	Запрос.УстановитьПараметр("Резолюция", Объект.БизнесПроцесс.Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", БизнесПроцессы.удуРезолюция.ТочкиМаршрута.ОтветственноеИсполнение);
	Запрос.УстановитьПараметр("ТочкаМаршрутаИсполнение", БизнесПроцессы.удуРезолюция.ТочкиМаршрута.Исполнить);
	Запрос.УстановитьПараметр("Состояние", Перечисления.удуСостоянияЗадачиПослеПроверки.Завершена);
	
	ЗавершенныеЗадачи.Загрузить(Запрос.Выполнить().Выгрузить());
	
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.ДатаИсполнения);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполнения);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.Дата);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.ЗЗДатаИсполнения);
	Элементы.СтраницаЗавершенныеЗадачи.Заголовок = "Завершенные задачи (" + Строка(ЗавершенныеЗадачи.Количество()) + ")";
	
	Если Объект.Выполнена Тогда
		Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Проверено.'");
	КонецЕсли;
	
	// номер итерации	
	НомерИтерации = Объект.БизнесПроцесс.НомерИтерации;
		
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерации.Видимость = Ложь;
		Элементы.История.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПеренаправлениеЗадач") Тогда
		Элементы.Перенаправить.Видимость = Ложь;	
	КонецЕсли;
	
	УстановитьПринудительноеЗавершение(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	РезолюцияОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	РезолюцияОбъект.Прочитать();
	ЗаблокироватьДанныеДляРедактирования(РезолюцияОбъект.Ссылка);
	
	Если НЕ РезолюцияОбъект.ПринудительноеЗавершение Тогда
		// Возврат на доработку
		Для Каждого Строка Из ЗавершенныеЗадачи Цикл
			Если Строка.ОтправленоНаДоработку Тогда
				БизнесПроцессы.удуРезолюция.ЗаписатьСостояниеЗадачиИсполнителя(
					Строка.ЗадачаИсполнителя,
					Перечисления.удуСостоянияЗадачиПослеПроверки.ОтмеченаКВозвратуНаДоработку,
					Строка.КомментарийПроверяющего);
			КонецЕсли;
		КонецЦикла;
		
		// Принудительное завершение отмеченных задач
		Для Каждого Строка Из ТекущиеЗадачи Цикл
			Если Строка.ЗавершитьЗадачуПринудительно Тогда
				БизнесПроцессы.удуРезолюция.ЗаписатьСостояниеЗадачиИсполнителя(
					Строка.ЗадачаИсполнителя,
					Перечисления.удуСостоянияЗадачиПослеПроверки.ОтмеченаКЗавершению,
					Строка.КомментарийПроверяющего);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПрекратитьКонтрольИсполнения Тогда
		РезолюцияОбъект.ДатаСнятияСКонтроля = ?(ЗначениеЗаполнено(Объект.ДатаИсполнения), Объект.ДатаИсполнения, ТекущаяДата());
	КонецЕсли;
	
	РезолюцияОбъект.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	ОчиститьСообщения();
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ЗадачаИзменена", Объект.Ссылка);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить(Команда)
	
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ЗадачаИзменена", Объект.Ссылка);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Объект.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.Предмет);
	Иначе	
		ОткрытьЗначение(Объект.Предмет);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Проверено(Команда)
	
	Если Не РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда 
		                                                                                                                                                           		
		ПровереноСервер();
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ЗадачаВыполнена", Объект.Ссылка);
		Оповестить("ЗадачаИзменена", Объект.Ссылка);
		
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСБизнесПроцессамиКлиент.ОткрытьИсполнителя(Объект.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТЗЗавершитьЗадачуПринудительно"
		Или Поле.Имя = "ТЗКомментарийПроверяющего" Тогда 
		Возврат;
	КонецЕсли; 

	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ТекущиеЗадачи.НайтиПоИдентификатору(ВыбраннаяСтрока).ЗадачаИсполнителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенныеЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗЗОтправленоНаДоработку"
		Или Поле.Имя = "ЗЗКомментарийПроверяющего" Тогда 
		Возврат;
	КонецЕсли; 

	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗавершенныеЗадачи.НайтиПоИдентификатору(ВыбраннаяСтрока).ЗадачаИсполнителя);
		
КонецПроцедуры


&НаКлиенте
Процедура ИсторияИсполнения(Команда)
	
	ПараметрыФормы = Новый Структура("ЗадачаСсылка", Объект.Ссылка);
	ОткрытьФорму("БизнесПроцесс.удуРезолюция.Форма.ФормаИсторияИсполнения", ПараметрыФормы, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьДопИнформациюОЗадаче(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Выполнена Тогда
		Предупреждение(НСтр("ru = 'Уже выполненную задачу нельзя перенаправить.'"));
		Возврат;
	КонецЕсли;	
			
	Записать();
	Если БизнесПроцессыИЗадачиКлиент.ПеренаправитьЗадачу(Объект.Ссылка, ЭтаФорма) Тогда
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачиИсполнителей(Команда)
	Если Не РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(Объект) Тогда 
		Возврат;
	КонецЕсли;                          	
	
	УстановитьПринудительноеЗавершение(Истина);
	Если Записать() Тогда                           		
		// Завершить задачу проверяющего
		ПровереноСервер();	
	
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);

		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ЗадачаВыполнена", Объект.Ссылка);
		Оповестить("ЗадачаИзменена", Объект.Ссылка);
		
		Закрыть();		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПринудительноеЗавершение(Значение)
	УстановитьПривилегированныйРежим(Истина);
	РезолюцияОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	РезолюцияОбъект.ПринудительноеЗавершение = Значение;
	РезолюцияОбъект.Записать();
КонецПроцедуры
	
