
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения:                Автор ИЛИ Исполнитель ИЛИ <исполнитель по адресации>
	// Добавления, Изменения: Автор
	
	// Реквизит ГруппаДоступаИсполнителей содержит либо "Исполнителя" либо 
	// "СправочникСсылка.ГруппыДоступаИсполнителей"
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Добавление      = Истина;
	Строка.Изменение       = Истина;
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор №3.
	ТекущийНомерНабора = 3;
	Для каждого Элемент Из Исполнители Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = ТекущийНомерНабора;
		Строка.Чтение          = Истина;
		Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
		Строка.ЗначениеДоступа = Элемент.ГруппаДоступаИсполнителей;
		
		ТекущийНомерНабора = ТекущийНомерНабора + 1;
	КонецЦикла;
	
	// Чтение:
	Для каждого Элемент Из ДополнительныеИсполнители Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = ТекущийНомерНабора;
		Строка.Чтение          = Истина;
		Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
		Строка.ЗначениеДоступа = Элемент.ГруппаДоступаИсполнителей;
		
		ТекущийНомерНабора = ТекущийНомерНабора + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДата();
	Автор = ОбщегоНазначения.ТекущийПользователь();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	НомерИтерации = 0;
	РезультатыИсполнения.Очистить();
	РезультатыПроверки.Очистить();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДата();
		Автор = ОбщегоНазначения.ТекущийПользователь();
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НомерИтерации = 0;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Предмет = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		Если ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
			Описание = ЗадачаСсылка.БизнесПроцесс.РезультатВыполнения;
			Предмет = ЗадачаСсылка.БизнесПроцесс.Предмет;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		Описание = ДанныеЗаполнения.Резолюция;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Предмет) Тогда 
		Наименование = "Исполнить """ + Строка(Предмет) + """";
		
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда 
			СрокИсполнения = Предмет.СрокИсполнения;
		КонецЕсли;	
	Иначе
		Наименование = "Исполнить ";
	КонецЕсли;	
			
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из Исполнители Цикл
		Если Не БизнесПроцессыИЗадачиПереопределяемый.ЕстьПравоДоступаУчастникаБизнесПроцесса(ЭтотОбъект, Предмет, "ЧтениеПапокИФайлов",  Строка.Исполнитель, Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации, "Исполнители", "Исполнитель", Строка.НомерСтроки - 1) Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда
		Если ПометкаУдаления Тогда 
			РаботаСБизнесПроцессами.УдалитьСостоянияБизнесПроцесса(Ссылка);
		Иначе
			ВосстановитьСостоянияБизнесПроцесса();
		КонецЕсли;	
	КонецЕсли;
	
	// Исполнители (табличная часть)
	Для каждого Элемент Из Исполнители Цикл
		Если ТипЗнч(Элемент.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Элемент.ГруппаДоступаИсполнителей = РегистрыСведений.ИсполнителиЗадач.ГруппаДоступаИсполнителей(
				Элемент.Исполнитель, Элемент.ОсновнойОбъектАдресации, Элемент.ДополнительныйОбъектАдресации);
		Иначе		
			Элемент.ГруппаДоступаИсполнителей = Элемент.Исполнитель;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаНачала = ТекущаяДата();
	Записать();
		
КонецПроцедуры

Процедура ПодготовкаИтерацииОбработка(ТочкаМаршрутаБизнесПроцесса)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(НомерИтерации) Тогда
		ЭтотОбъект.НомерИтерации = ЭтотОбъект.НомерИтерации + 1;
	Иначе
		ЭтотОбъект.НомерИтерации = 1;
	КонецЕсли;
	ЭтотОбъект.Записать();
	ЭтотОбъект.Прочитать();
	
КонецПроцедуры

Процедура ОтветственноеИсполнениеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НомерИтерации > 1 Тогда
		СоздатьЗадачиИсполнителейНаДоработку(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи)
	Иначе
	
		Для Каждого Строка Из Исполнители Цикл
			
			Если Не Строка.Ответственный Тогда
				Продолжить;
			КонецЕсли;	
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата  	= ТекущаяДата();
			Задача.Автор 	= Автор;
			Задача.Описание = ?(ЗначениеЗаполнено(Строка.Описание), Строка.Описание, Описание);
			Задача.Предмет 	= Предмет;
			Задача.Важность = Важность;
			
			Задача.Наименование   = Наименование + " (ответственный исполнитель)";
			Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
			Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
			Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
			Иначе	
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;	
			
			// возврат на доработку
			Если РезультатыПроверки.Количество() > 0 Тогда 
				РезультатПроверки = Неопределено;
				Если Не ЗадачаБылаВозвращенаНаДоработку(Задача, РезультатПроверки) Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РезультатПроверки.КомментарийПроверяющего) Тогда 
					Задача.Описание = Строка(РезультатПроверки.ЗадачаПроверяющего.Исполнитель) + " " 
					+ Формат(РезультатПроверки.ЗадачаПроверяющего.ДатаИсполнения, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ РезультатПроверки.КомментарийПроверяющего + Символы.ПС
					+ Задача.Описание;
				КонецЕсли;	
			КонецЕсли;
			
			Задача.Записать();
			ФормируемыеЗадачи.Добавить(Задача);
			
			НоваяСтрока = РезультатыИсполнения.Добавить();
			НоваяСтрока.НомерИтерации 	  = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			
			УстановитьПривилегированныйРежим(Истина);
			Записать();
			
			Прервать;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НомерИтерации > 1 Тогда
		СоздатьЗадачиИсполнителейНаДоработку(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи)
	Иначе
	
		Для Каждого Строка Из Исполнители Цикл
			
			Если Строка.Ответственный Тогда
				Продолжить;
			КонецЕсли;	
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата  	= ТекущаяДата();
			Задача.Автор 	= Автор;
			Задача.Описание = ?(ЗначениеЗаполнено(Строка.Описание), Строка.Описание, Описание);
			Задача.Предмет 	= Предмет;
			Задача.Важность = Важность;
			
			Задача.Наименование   = Наименование;
			Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
			Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
			Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
			Иначе	
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;	
			
			// возврат на доработку
			Если РезультатыПроверки.Количество() > 0 Тогда 
				РезультатПроверки = Неопределено;
				Если Не ЗадачаБылаВозвращенаНаДоработку(Задача, РезультатПроверки) Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РезультатПроверки.КомментарийПроверяющего) Тогда 
					Задача.Описание = Строка(РезультатПроверки.ЗадачаПроверяющего.Исполнитель) + " " 
					+ Формат(РезультатПроверки.ЗадачаПроверяющего.ДатаИсполнения, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ РезультатПроверки.КомментарийПроверяющего + Символы.ПС
					+ Задача.Описание;
				КонецЕсли;	
			КонецЕсли;
			
			Задача.Записать();
			ФормируемыеЗадачи.Добавить(Задача);
			
			НоваяСтрока = РезультатыИсполнения.Добавить();
			НоваяСтрока.НомерИтерации 	  = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
		КонецЦикла;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура ПроверитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Или ЗначениеЗаполнено(ДатаСнятияСКонтроля) Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДата();
	Задача.Автор 	= Автор;
	Задача.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Проверить: '") + Описание, Описание);
	Задача.Предмет 	= Предмет;
	Задача.Важность = Важность;
	
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Если ЗначениеЗаполнено(Наименование) Тогда 	
		Задача.Наименование = НСтр("ru = 'Проверить: '") + Наименование;
	Иначе
		Задача.Наименование = НСтр("ru = 'Проверить исполнение '") + Строка(Предмет) + """";
	КонецЕсли;	
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Проверяющий;
	Иначе
		Задача.РольИсполнителя = Проверяющий;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииПроверяющего;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииПроверяющего;
	КонецЕсли;	
	
	Задача.Записать();
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДата();
	Записать();
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

Функция ЗадачаБылаВозвращенаНаДоработку(Задача, РезультатПроверки)
	
	РезультатПроверки = Неопределено;
	
	Для Каждого СтрокаПроверки Из РезультатыПроверки Цикл
		Если (Задача.Исполнитель = СтрокаПроверки.ЗадачаИсполнителя.Исполнитель)
			И (Задача.РольИсполнителя = СтрокаПроверки.ЗадачаИсполнителя.РольИсполнителя)
			И (Задача.ОсновнойОбъектАдресации = СтрокаПроверки.ЗадачаИсполнителя.ОсновнойОбъектАдресации)
			И (Задача.ДополнительныйОбъектАдресации = СтрокаПроверки.ЗадачаИсполнителя.ДополнительныйОбъектАдресации) 
			И (СтрокаПроверки.НомерИтерации = НомерИтерации - 1) Тогда
			РезультатПроверки = СтрокаПроверки;
			Возврат СтрокаПроверки.ОтправленоНаДоработку;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

Процедура ИзменитьРеквизитыНевыполненныхЗадач() Экспорт 

	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.удуРезолюция.ТочкиМаршрута.Проверить Тогда 
				ЗадачаОбъект.Наименование = "Контролировать: " + Наименование;
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.удуРезолюция.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
				ЗадачаОбъект.Наименование = Наименование + " (ответственный исполнитель)";
			Иначе	
				ЗадачаОбъект.Наименование = Наименование;
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Автор 	  = Автор;
			ЗадачаОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

Процедура ВосстановитьСостоянияБизнесПроцесса()
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда 
		Если ЗначениеЗаполнено(Предмет) И ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда 
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Предмет, 
				ДатаНачала, 
				Перечисления.СостоянияДокументов.НаИсполнении, 
				Ссылка);
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда 
		Если ЗначениеЗаполнено(Предмет) И ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда 
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Предмет, 
				ДатаЗавершения, 
				Перечисления.СостоянияДокументов.Исполнен, 
				Ссылка);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура БизнесПроцессЗавершенПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если Не ЗначениеЗаполнено(Ссылка.Проверяющий) Тогда
		Результат = Истина;
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	удуРезультатыПроверкиРезолюций.Задача
	|ИЗ
	|	РегистрСведений.удуРезультатыПроверкиРезолюций КАК удуРезультатыПроверкиРезолюций
	|ГДЕ
	|	удуРезультатыПроверкиРезолюций.Резолюция = &Резолюция
	|	И удуРезультатыПроверкиРезолюций.Состояние = &Состояние
	|	И удуРезультатыПроверкиРезолюций.НомерИтерации = &НомерИтерации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &Резолюция
	|	И (НЕ ЗадачаИсполнителя.Выполнена)";
	Запрос.УстановитьПараметр("Резолюция", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерИтерации", ЭтотОбъект.НомерИтерации);
	Запрос.УстановитьПараметр("Состояние", Перечисления.удуСостоянияЗадачиПослеПроверки.ОтмеченаКВозвратуНаДоработку);
	Результат = Запрос.Выполнить().Пустой();	
КонецПроцедуры

Процедура ЗавершитьОтмеченныеЗадачиОбработка(ТочкаМаршрутаБизнесПроцесса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	удуРезультатыПроверкиРезолюций.Задача,
		|	удуРезультатыПроверкиРезолюций.КомментарийПроверяющего
		|ИЗ
		|	РегистрСведений.удуРезультатыПроверкиРезолюций КАК удуРезультатыПроверкиРезолюций
		|ГДЕ
		|	удуРезультатыПроверкиРезолюций.Резолюция = &Резолюция
		|	И удуРезультатыПроверкиРезолюций.Состояние = &Состояние
		|	И удуРезультатыПроверкиРезолюций.НомерИтерации = &НомерИтерации";
	Запрос.УстановитьПараметр("Резолюция", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерИтерации", ЭтотОбъект.НомерИтерации);
	Запрос.УстановитьПараметр("Состояние", Перечисления.удуСостоянияЗадачиПослеПроверки.ОтмеченаКЗавершению);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗадачаСсылка = Выборка.Задача;
			БизнесПроцессыИЗадачиСервер.ВыполнитьЗадачу(ЗадачаСсылка);
			ЭтотОбъект.Прочитать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПринудительноеЗавершениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ЭтотОбъект.ПринудительноеЗавершение;
КонецПроцедуры

Процедура ЗавершитьТекущиеЗадачиОбработка(ТочкаМаршрутаБизнесПроцесса)
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		НачатьТранзакцию();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗадачаИсполнителя.Ссылка КАК ЗадачаСсылка
		               |ИЗ
		               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		               |ГДЕ
		               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		               |	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		               |	И (ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаИсполнение
		               |			ИЛИ ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение)";
		Запрос.УстановитьПараметр("БизнесПроцесс", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрутаИсполнение", БизнесПроцессы.удуРезолюция.ТочкиМаршрута.Исполнить);
        Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", БизнесПроцессы.удуРезолюция.ТочкиМаршрута.ОтветственноеИсполнение);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				БизнесПроцессыИЗадачиСервер.ВыполнитьЗадачу(Выборка.ЗадачаСсылка);
				ЭтотОбъект.Прочитать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура СоздатьЗадачиИсполнителейНаДоработку(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи)
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	удуРезультатыПроверкиРезолюций.Резолюция,
		|	удуРезультатыПроверкиРезолюций.Задача,
		|	удуРезультатыПроверкиРезолюций.КомментарийПроверяющего,
		|	удуРезультатыПроверкиРезолюций.Дата,
		|	удуРезультатыПроверкиРезолюций.Пользователь
		|ИЗ
		|	РегистрСведений.удуРезультатыПроверкиРезолюций КАК удуРезультатыПроверкиРезолюций
		|ГДЕ
		|	удуРезультатыПроверкиРезолюций.Резолюция = &Резолюция
		|	И удуРезультатыПроверкиРезолюций.Задача.ТочкаМаршрута = &ТочкаМаршрута
		|	И удуРезультатыПроверкиРезолюций.НомерИтерации = &НомерИтерации
		|	И удуРезультатыПроверкиРезолюций.Состояние = &Состояние";
	Запрос.УстановитьПараметр("Резолюция", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерИтерации", ЭтотОбъект.НомерИтерации-1);
	Запрос.УстановитьПараметр("Состояние", Перечисления.удуСостоянияЗадачиПослеПроверки.ОтмеченаКВозвратуНаДоработку);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата  	= ТекущаяДата();
			Задача.Автор 	= ОбщегоНазначения.ТекущийПользователь();
			Задача.Описание = ?(ЗначениеЗаполнено(Выборка.КомментарийПроверяющего),  			
				Строка(Выборка.Пользователь) + " " 
					+ Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ Выборка.КомментарийПроверяющего + Символы.ПС
					+ Выборка.Задача.Описание,			
				Выборка.Задача.Описание);
			Задача.Предмет 	= Выборка.Задача.Предмет;
			Задача.Важность = Выборка.Задача.Важность;
			
			Задача.Наименование   = Выборка.Задача.Наименование;

			Задача.СрокИсполнения = Выборка.Задача.СрокИсполнения;
			Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
			Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
			// Определение исполнителя.
			Задача.Исполнитель = Выборка.Задача.Исполнитель;
			// Определение исполнителя.
			Задача.РольИсполнителя = Выборка.Задача.РольИсполнителя;
			Задача.ОсновнойОбъектАдресации = Выборка.Задача.ОсновнойОбъектАдресации;
			Задача.ДополнительныйОбъектАдресации = Выборка.Задача.ДополнительныйОбъектАдресации;
			
			Задача.Записать();
			ФормируемыеЗадачи.Добавить(Задача);
			
			// Отметить возврат на доработку.
			БизнесПроцессы.удуРезолюция.ЗаписатьСостояниеЗадачиИсполнителя(
				Выборка.Задача, 
				Перечисления.удуСостоянияЗадачиПослеПроверки.ОтправленаНаДоработку,
				Выборка.КомментарийПроверяющего);

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятСКонтроляПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ЗначениеЗаполнено(ДатаСнятияСКонтроля) ;
КонецПроцедуры
