////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура проверяет, нет ли уже аналогичных записей с ключевыми полями в регистре сведений.
// ГрафикиРаботыПоВидамВремени.
// Возвращает Истина если проведение возможно, иначе Ложь.
Процедура ПроверитьУникальностьЗаписи(Отказ,МассивСообщений)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
	Запрос.УстановитьПараметр("НачалоМесяца", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонецМесяца", ДатаОкончанияПериода);
	Если Не СпособВводаДанных = Перечисления.удуСпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ИндексНачальногоДня = День(ДатаНачалаПериода);
		ИндексКонечногоДня = День(ДатаОкончанияПериода);
		
		Если ИндексНачальногоДня > ИндексКонечногоДня Тогда
			МассивСообщений.Добавить("Период табеля задан неверно!");
			Отказ = Истина;
			Возврат;		
		КонецЕсли;

		Запрос.Текст = "";
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			СтрИндексДня = Строка(ИндексДня);
			Запрос.Текст = Запрос.Текст + 
			"ВЫБРАТЬ 
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
			|		" + СтрИндексДня + " КАК ИндексДня
			|ПОМЕСТИТЬ ВТДанныеТабеляПоДням" + СтрИндексДня + "
			|	ИЗ
			|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
			|	ГДЕ
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
			|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка) 
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ 
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
			|		"+СтрИндексДня+"
			|	ИЗ
			|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
			|	ГДЕ
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
			|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка) 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ 
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
			|		"+СтрИндексДня+"
			|	ИЗ
			|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
			|	ГДЕ
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
			|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ 
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
			|		"+СтрИндексДня+"
			|	ИЗ
			|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
			|	ГДЕ
			|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
			|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник; ";
			
			
			Если ИндексДня = ИндексНачальногоДня Тогда
				ТекстЗапроса = 
				"ВЫБРАТЬ 
				|		ДанныеТабеляПоДням.ИндексДня,		
				|		ДанныеТабеляПоДням.Сотрудник
				|ПОМЕСТИТЬ ВТДанныеТабеляПоДням
				|	ИЗ
				|		ВТДанныеТабеляПоДням"+СтрИндексДня+" КАК ДанныеТабеляПоДням
				|";
			Иначе 	
				ТекстЗапроса = ТекстЗапроса + 
				"	ОБЪЕДИНИТЬ ВСЕ
				|
				|	ВЫБРАТЬ 
				|		ДанныеТабеляПоДням.ИндексДня,		
				|		ДанныеТабеляПоДням.Сотрудник
				|	ИЗ
				|		ВТДанныеТабеляПоДням"+СтрИндексДня+" КАК ДанныеТабеляПоДням
				|";
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапроса + 
		"ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		СписокСотрудников = Новый СписокЗначений;
		Для Каждого Сотр Из ОтработанноеВремя Цикл
			СписокСотрудников.Добавить(Сотр.Сотрудник);
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
		Документы.удуТабельУчетаРабочегоВремениОрганизации.ДополнитьЗапросПоУникальностиЗаписи(Запрос);
		
	КонецЕсли;
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультата.Количество() > 0 Тогда
		СтрокаСотрудников = "";
		
		Пока ВыборкаРезультата.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + ВыборкаРезультата.СотрудникНаименование+ " ("+ВыборкаРезультата.ДокументПредставление+")";
		КонецЦикла;
		МассивСообщений.Добавить("На следующих сотрудников уже введены документы учета отработанного времени в этом периоде" + СтрокаСотрудников);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУникальностьЗаписи()	

// Функция возвращает значение перечислеиня ВидыУчетаВремени, соответствующее. 
// Справочнику КлассификаторИспользованияРабочегоВремени.
Функция ПолучитьВидУчетаВремениПоКлассификатору(ВидВремени)
	
	Если ВидВремени.Пустая() Тогда
		Возврат Перечисления.удуВидыУчетаВремени.ПоЧасам;
	ИначеЕсли ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
		Возврат Перечисления.удуВидыУчетаВремени.ПоВечернимЧасам;
	ИначеЕсли ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
		Возврат Перечисления.удуВидыУчетаВремени.ПоНочнымЧасам;
	Иначе
		Возврат Перечисления.удуВидыУчетаВремени.ПоЧасам;
	КонецЕсли;
	
КонецФункции

// Процедура удаляет все записи из регистра за ПериодРегистрации.
// Если документ последний в этом периоде, в разрезе сотрудников.
Процедура УдалитьЗаписиЗаПериодДокумента()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	               |	ГрафикиРаботы.Ссылка.ПериодРегистрации КАК Месяц,
	               |	ИСТИНА КАК УдалятьЗаписиЗаПериод
	               |ИЗ
	               |	Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ГрафикиРаботы
	               |ГДЕ
	               |	ГрафикиРаботы.Ссылка = &Документ";
				   	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.удуГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		НаборЗаписей.Отбор.План.Установить(Ложь);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);
		
		Если ВыборкаЗапроса.УдалятьЗаписиЗаПериод Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		Иначе
			
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если (Запись.Документ = Ссылка) Тогда
					Запись.ОсновноеЗначениеПолное = 0;
					Запись.ДополнительноеЗначениеПолное = 0;
					Запись.Документ = Документы.удуТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // УдалитьЗаписиЗаПериодДокумента()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или.
// Заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке.
// Все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа.
//	Отказ					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ,МассивСообщений)
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		МассивСообщений.Добавить("Не указана организация, по которой вводится табель!");
		Отказ = Истина;
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		МассивСообщений.Добавить("Не указан период регистрации!");
		Отказ = Истина
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Формирует запрос по шапке документа.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.удуУчреждения.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизации.Дата,
	|	ТабельУчетаРабочегоВремениОрганизации.ПериодРегистрации,
	|	ТабельУчетаРабочегоВремениОрганизации.СпособВводаДанных,
	|	ТабельУчетаРабочегоВремениОрганизации.ДатаНачалаПериода,
	|	ТабельУчетаРабочегоВремениОрганизации.ДатаОкончанияПериода,
	|	ТабельУчетаРабочегоВремениОрганизации.ПодразделениеОрганизации,
	|	ТабельУчетаРабочегоВремениОрганизации.Организация КАК ГоловнаяОрганизация,
	|	ТабельУчетаРабочегоВремениОрганизации.Организация КАК Организация,
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка КАК Документ
	|ИЗ
	|	Документ.удуТабельУчетаРабочегоВремениОрганизации КАК ТабельУчетаРабочегоВремениОрганизации
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ОтработанноеВремя" документа.
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента, ТаблицаСотрудниковСПустымиЯчейками)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	 ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",ВыборкаПоШапкеДокумента.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Месяц", 					 ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	Для ИндексДня = 1 По День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации)) Цикл
		Если ИндексДня = 1 Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ 
			|		" + Строка(ИндексДня) + " КАК ИндексДня		
			|ПОМЕСТИТЬ ВТКалендарныеДни
			|";
		Иначе 	
			ТекстЗапроса = ТекстЗапроса + 
			"	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ 
			|		" + Строка(ИндексДня) + "		
			|";
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса + " ; ";
	
	
	ИндексНачальногоДня = День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
	ИндексКонечногоДня = День(ВыборкаПоШапкеДокумента.ДатаОкончанияПериода);
	
	Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
		СтрИндексДня = Строка(ИндексДня);
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
		|		"+СтрИндексДня+" КАК ИндексДня
		|ПОМЕСТИТЬ ВТДанныеТабеляПоДням" + СтрИндексДня + "
		|	ИЗ
		|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ЧетвертыйЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник ; 
		| ";
		
		
		Если ИндексДня = ИндексНачальногоДня Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ 
			|		ДанныеТабеляПоДням.ИндексДня,		
			|		ДанныеТабеляПоДням.ВидВремени,		
			|		СУММА(ДанныеТабеляПоДням.Часов) КАК Часов,		
			|		ДанныеТабеляПоДням.Сотрудник
			|ПОМЕСТИТЬ ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения
			|	ИЗ
			|		ВТДанныеТабеляПоДням"+СтрИндексДня+" КАК ДанныеТабеляПоДням
			|	СГРУППИРОВАТЬ ПО ИндексДня, ВидВремени, Сотрудник
			|";
		Иначе 	
			ТекстЗапроса = ТекстЗапроса + 
			"	ОБЪЕДИНИТЬ  
			|
			|	ВЫБРАТЬ 
			|		ДанныеТабеляПоДням.ИндексДня,		
			|		ДанныеТабеляПоДням.ВидВремени,		
			|		Сумма(ДанныеТабеляПоДням.Часов) КАК Часов,		
			|		ДанныеТабеляПоДням.Сотрудник
			|	ИЗ
			|		ВТДанныеТабеляПоДням"+СтрИндексДня+" КАК ДанныеТабеляПоДням
			|	СГРУППИРОВАТЬ ПО ИндексДня, ВидВремени, Сотрудник
			|";
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст  + ТекстЗапроса + 
	"ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник ; ";

	
	
	
	Запрос.Текст = Запрос.Текст  + "ВЫБРАТЬ
	                               |	Пустые.Сотрудник,
	                               |	Пустые.ИндексДня,
	                               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Месяц, МЕСЯЦ), ДЕНЬ, Пустые.ИндексДня - 1) КАК ДатаДня
	                               |ПОМЕСТИТЬ ВТСписокПустыхДней
	                               |ИЗ
	                               |	ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения КАК Пустые
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения КАК Полные
	                               |		ПО (Полные.ВидВремени <> ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
	                               |			И (Полные.ИндексДня = Пустые.ИндексДня)
	                               |			И (Полные.Сотрудник = Пустые.Сотрудник)
	                               |ГДЕ
	                               |	Пустые.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	                               |	И Полные.ИндексДня ЕСТЬ NULL 
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ
	                               |	ПериодыСрезаРаботников.Сотрудник КАК Сотрудник,
	                               |	ПРЕДСТАВЛЕНИЕ(ПериодыСрезаРаботников.Сотрудник) КАК ПредставлениеСотрудника
	                               |ПОМЕСТИТЬ ВТСписокСотрудниковСПустымиЯчейками
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		СписокПустыхДней.Сотрудник КАК Сотрудник,
	                               |		СписокПустыхДней.ИндексДня КАК ИндексДня,
	                               |		СписокПустыхДней.ДатаДня КАК ДатаДня,
	                               |		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодСрезаРаботников
	                               |	ИЗ
	                               |		ВТСписокПустыхДней КАК СписокПустыхДней
	                               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
	                               |			ПО (РаботникиОрганизаций.Сотрудник = СписокПустыхДней.Сотрудник)
	                               |				И (РаботникиОрганизаций.Период <= СписокПустыхДней.ДатаДня)
	                               |	
	                               |	СГРУППИРОВАТЬ ПО
	                               |		СписокПустыхДней.Сотрудник,
	                               |		СписокПустыхДней.ИндексДня,
	                               |		СписокПустыхДней.ДатаДня) КАК ПериодыСрезаРаботников
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
	                               |		ПО (РаботникиОрганизаций.Сотрудник = ПериодыСрезаРаботников.Сотрудник)
	                               |			И ПериодыСрезаРаботников.ПериодСрезаРаботников = РаботникиОрганизаций.Период
	                               |ГДЕ
	                               |	ЕСТЬNULL(РаботникиОрганизаций.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)) <> ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
	                               |	И ВЫБОР
	                               |			КОГДА &ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.удуПодразделенияУчереждения.ПустаяСсылка)
	                               |				ТОГДА ИСТИНА
	                               |			ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	                               |		КОНЕЦ = &ПодразделениеОрганизации
	                               |
	                               |ИНДЕКСИРОВАТЬ ПО
	                               |	Сотрудник
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                               |	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ИндексДня,
	                               |	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ВидВремени,
	                               |	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.Часов,
	                               |	ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.Сотрудник КАК Сотрудник
	                               |ПОМЕСТИТЬ ВТДанныеТабеляПоДням
	                               |ИЗ
	                               |	ВТДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения КАК ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения
	                               |ГДЕ
	                               |	(НЕ ДанныеТабеляПоДнямДляУчетаПолнотыЗаполнения.ВидВремени В (ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Праздники), ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка)))
	                               |
	                               |ИНДЕКСИРОВАТЬ ПО
	                               |	Сотрудник
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ
	                               |	НеупорядоченныйЗапрос.Сотрудник КАК Сотрудник,
	                               |	ПРЕДСТАВЛЕНИЕ(НеупорядоченныйЗапрос.Сотрудник) КАК ПредставлениеСотрудника,
	                               |	НеупорядоченныйЗапрос.ДеньМесяца КАК ДеньМесяца,
	                               |	НеупорядоченныйЗапрос.ВидВремени КАК ВидВремени,
	                               |	НеупорядоченныйЗапрос.ВидВремени.РабочееВремя КАК ВидВремениРабочееВремя,
	                               |	НеупорядоченныйЗапрос.Часов,
	                               |	НеупорядоченныйЗапрос.ЗаписатьПустоеЗначение,
	                               |	НеупорядоченныйЗапрос.ОшибкаНеСоответствиеСотрудникаИОрганизации,
	                               |	НеупорядоченныйЗапрос.КоличествоДублей,
	                               |	ВЫБОР
	                               |		КОГДА НеупорядоченныйЗапрос.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	                               |			ТОГДА 3
	                               |		КОГДА НеупорядоченныйЗапрос.ВидВремени.РабочееВремя
	                               |			ТОГДА 1
	                               |		ИНАЧЕ 2
	                               |	КОНЕЦ КАК ПолеУпорядочивания
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ОбщийЗапрос.Сотрудник КАК Сотрудник,
	                               |		ОбщийЗапрос.ДеньМесяца КАК ДеньМесяца,
	                               |		ЕСТЬNULL(ОбщийЗапрос.ВидВремени, ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка)) КАК ВидВремени,
	                               |		МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.Часов, 0)) КАК Часов,
	                               |		МАКСИМУМ(ВЫБОР
	                               |				КОГДА ОбщийЗапрос.ЗаписатьПустогоСотрудника ЕСТЬ NULL 
	                               |					ТОГДА ИСТИНА
	                               |				ИНАЧЕ ЛОЖЬ
	                               |			КОНЕЦ) КАК ЗаписатьПустоеЗначение,
	                               |		МАКСИМУМ(ВЫБОР
	                               |				КОГДА ОбщийЗапрос.ПроверкаСотрудникаИОрганизации ЕСТЬ NULL 
	                               |					ТОГДА ЛОЖЬ
	                               |				КОГДА ОбщийЗапрос.ПроверкаСотрудникаИОрганизации.Организация = &ГоловнаяОрганизация
	                               |					ТОГДА ЛОЖЬ
	                               |				ИНАЧЕ ИСТИНА
	                               |			КОНЕЦ) КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	                               |		МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.КоличествоДублей, 0)) КАК КоличествоДублей
	                               |	ИЗ
	                               |		(ВЫБРАТЬ
	                               |			СотрудникиДокумента.Сотрудник КАК Сотрудник,
	                               |			ДанныеТабеляПоДням.ИндексДня КАК ДеньМесяца,
	                               |			ДанныеТабеляПоДням.ВидВремени КАК ВидВремени,
	                               |			ДанныеТабеляПоДням.Часов КАК Часов,
	                               |			ДанныеТабеляПоДням.Сотрудник КАК ЗаписатьПустогоСотрудника,
	                               |			СотрудникиДокумента.Сотрудник КАК ПроверкаСотрудникаИОрганизации,
	                               |			СотрудникиДокумента.КоличествоДублей КАК КоличествоДублей
	                               |		ИЗ
	                               |			(ВЫБРАТЬ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	                               |				КОЛИЧЕСТВО(ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник) КАК КоличествоДублей,
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка КАК Ссылка
	                               |			ИЗ
	                               |				Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	                               |			ГДЕ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	                               |			
	                               |			СГРУППИРОВАТЬ ПО
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка) КАК СотрудникиДокумента
	                               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	                               |				ПО СотрудникиДокумента.Сотрудник = ДанныеТабеляПоДням.Сотрудник
	                               |		
	                               |		ОБЪЕДИНИТЬ
	                               |		
	                               |		ВЫБРАТЬ
	                               |			Сотрудники.Сотрудник,
	                               |			Даты.ИндексДня,
	                               |			ВЫБОР
	                               |				КОГДА ЕСТЬNULL(ДанныеИндГрафика.ВидУчетаВремени, ДанныеОбщегоГрафика.ВидУчетаВремени) = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.удуВидыУчетаВремени.ПоЧасам)
	                               |					ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа)
	                               |				КОГДА ЕСТЬNULL(ДанныеИндГрафика.ВидУчетаВремени, ДанныеОбщегоГрафика.ВидУчетаВремени) = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.удуВидыУчетаВремени.ПоВечернимЧасам)
	                               |					ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
	                               |				КОГДА ЕСТЬNULL(ДанныеИндГрафика.ВидУчетаВремени, ДанныеОбщегоГрафика.ВидУчетаВремени) = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.удуВидыУчетаВремени.ПоНочнымЧасам)
	                               |					ТОГДА ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	                               |			КОНЕЦ,
	                               |			ЕСТЬNULL(ДанныеИндГрафика.ОсновноеЗначение, ДанныеОбщегоГрафика.ОсновноеЗначение),
	                               |			NULL,
	                               |			NULL,
	                               |			NULL
	                               |		ИЗ
	                               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник
	                               |			ИЗ
	                               |				Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	                               |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	                               |					ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник)
	                               |						И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	                               |						И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	                               |			ГДЕ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	                               |				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ) КАК Сотрудники
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК Даты
	                               |				ПО (ИСТИНА)
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	                               |				ПО (ДанныеТабеляПоДням.Сотрудник = Сотрудники.Сотрудник)
	                               |					И (ДанныеТабеляПоДням.ИндексДня = Даты.ИндексДня)
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |					Даты.ИндексДня КАК ИндексДня,
	                               |					РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	                               |					МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	                               |				ИЗ
	                               |					ВТКалендарныеДни КАК Даты
	                               |						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |							РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	                               |							РаботникиОрганизаций.Период КАК Период,
	                               |							РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
	                               |						ИЗ
	                               |							РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
	                               |									&Месяц,
	                               |									Сотрудник В
	                               |											(ВЫБРАТЬ
	                               |												ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник
	                               |											ИЗ
	                               |												Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	                               |											ГДЕ
	                               |												ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка)
	                               |										И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
	                               |										И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
	                               |						
	                               |						ОБЪЕДИНИТЬ
	                               |						
	                               |						ВЫБРАТЬ
	                               |							РаботникиОрганизаций2.Сотрудник,
	                               |							РаботникиОрганизаций2.Период,
	                               |							РаботникиОрганизаций2.ГрафикРаботы
	                               |						ИЗ
	                               |							РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций2
	                               |						ГДЕ
	                               |							РаботникиОрганизаций2.Сотрудник В
	                               |									(ВЫБРАТЬ
	                               |										ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник
	                               |									ИЗ
	                               |										Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	                               |									ГДЕ
	                               |										ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка)
	                               |							И РаботникиОрганизаций2.Организация = &ГоловнаяОрганизация
	                               |							И РаботникиОрганизаций2.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ)) КАК РаботникиОрганизаций
	                               |						ПО (НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) < &Месяц
	                               |								ИЛИ НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) = &Месяц
	                               |									И ДЕНЬ(РаботникиОрганизаций.Период) <= Даты.ИндексДня)
	                               |				
	                               |				СГРУППИРОВАТЬ ПО
	                               |					Даты.ИндексДня,
	                               |					РаботникиОрганизаций.Сотрудник) КАК РаботникиОрганизаций
	                               |				ПО (РаботникиОрганизаций.Сотрудник = Сотрудники.Сотрудник)
	                               |					И (РаботникиОрганизаций.ИндексДня = Даты.ИндексДня)
	                               |					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	                               |					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК ПолучениеГрафикаСотрудника
	                               |				ПО (ПолучениеГрафикаСотрудника.Организация = &ГоловнаяОрганизация)
	                               |					И (ПолучениеГрафикаСотрудника.Сотрудник = РаботникиОрганизаций.Сотрудник)
	                               |					И (ПолучениеГрафикаСотрудника.Период = РаботникиОрганизаций.Период)
	                               |					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	                               |					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ДанныеИндГрафика
	                               |				ПО (ДанныеИндГрафика.ГрафикРаботы = Сотрудники.Сотрудник)
	                               |					И (ДанныеИндГрафика.Месяц = &Месяц)
	                               |					И (ДанныеИндГрафика.План)
	                               |					И (ДанныеИндГрафика.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам)))
	                               |					И (ДЕНЬ(ДанныеИндГрафика.Дата) = Даты.ИндексДня)
	                               |					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	                               |					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ДанныеОбщегоГрафика
	                               |				ПО (ДанныеОбщегоГрафика.ГрафикРаботы = ПолучениеГрафикаСотрудника.ГрафикРаботы)
	                               |					И (ДанныеОбщегоГрафика.Месяц = &Месяц)
	                               |					И (ДанныеОбщегоГрафика.План)
	                               |					И (ДанныеОбщегоГрафика.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам)))
	                               |					И (ДЕНЬ(ДанныеОбщегоГрафика.Дата) = Даты.ИндексДня)
	                               |					И (ДанныеИндГрафика.ГрафикРаботы ЕСТЬ NULL )
	                               |					И (ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL )
	                               |					И (ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL )
	                               |					И ((НЕ(ДанныеОбщегоГрафика.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоНочнымЧасам))
	                               |							И ДанныеОбщегоГрафика.ОсновноеЗначение = 0)))
	                               |		ГДЕ
	                               |			ДанныеТабеляПоДням.ВидВремени ЕСТЬ NULL 
	                               |			И ДанныеТабеляПоДням.Сотрудник ЕСТЬ NULL 
	                               |		
	                               |		ОБЪЕДИНИТЬ
	                               |		
	                               |		ВЫБРАТЬ
	                               |			Сотрудники.Сотрудник,
	                               |			Даты.ИндексДня,
	                               |			ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы),
	                               |			0,
	                               |			NULL,
	                               |			NULL,
	                               |			NULL
	                               |		ИЗ
	                               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник
	                               |			ИЗ
	                               |				Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	                               |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	                               |					ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник)
	                               |						И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	                               |						И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	                               |			ГДЕ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	                               |				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ) КАК Сотрудники
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК Даты
	                               |				ПО (ИСТИНА)
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	                               |				ПО (ДанныеТабеляПоДням.Сотрудник = Сотрудники.Сотрудник)
	                               |					И (ДанныеТабеляПоДням.ИндексДня = Даты.ИндексДня)
	                               |					И (ДанныеТабеляПоДням.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа))
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДнямНочные
	                               |				ПО (ДанныеТабеляПоДнямНочные.Сотрудник = Сотрудники.Сотрудник)
	                               |					И (ДанныеТабеляПоДнямНочные.ИндексДня = Даты.ИндексДня)
	                               |					И (ДанныеТабеляПоДнямНочные.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
	                               |		ГДЕ
	                               |			ДанныеТабеляПоДнямНочные.ВидВремени ЕСТЬ NULL 
	                               |			И ДанныеТабеляПоДнямНочные.Сотрудник ЕСТЬ NULL 
	                               |		
	                               |		ОБЪЕДИНИТЬ
	                               |		
	                               |		ВЫБРАТЬ
	                               |			Сотрудники.Сотрудник,
	                               |			Даты.ИндексДня,
	                               |			ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы),
	                               |			0,
	                               |			NULL,
	                               |			NULL,
	                               |			NULL
	                               |		ИЗ
	                               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник
	                               |			ИЗ
	                               |				Документ.удуТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	                               |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	                               |					ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник)
	                               |						И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	                               |						И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	                               |			ГДЕ
	                               |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	                               |				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ) КАК Сотрудники
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК Даты
	                               |				ПО (ИСТИНА)
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
	                               |				ПО (ДанныеТабеляПоДням.Сотрудник = Сотрудники.Сотрудник)
	                               |					И (ДанныеТабеляПоДням.ИндексДня = Даты.ИндексДня)
	                               |					И (ДанныеТабеляПоДням.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.Работа))
	                               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДнямНочные
	                               |				ПО (ДанныеТабеляПоДнямНочные.Сотрудник = Сотрудники.Сотрудник)
	                               |					И (ДанныеТабеляПоДнямНочные.ИндексДня = Даты.ИндексДня)
	                               |					И (ДанныеТабеляПоДнямНочные.ВидВремени = ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	                               |		ГДЕ
	                               |			ДанныеТабеляПоДнямНочные.ВидВремени ЕСТЬ NULL 
	                               |			И ДанныеТабеляПоДнямНочные.Сотрудник ЕСТЬ NULL ) КАК ОбщийЗапрос
	                               |	
	                               |	СГРУППИРОВАТЬ ПО
	                               |		ОбщийЗапрос.Сотрудник,
	                               |		ОбщийЗапрос.ДеньМесяца,
	                               |		ЕСТЬNULL(ОбщийЗапрос.ВидВремени, ЗНАЧЕНИЕ(Справочник.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка))) КАК НеупорядоченныйЗапрос
	                               |
	                               |УПОРЯДОЧИТЬ ПО
	                               |	Сотрудник,
	                               |	ДеньМесяца,
	                               |	ПолеУпорядочивания,
	                               |	ВидВремени";
	
	РезультатЗапроса =  Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСотрудниковСПустымиЯчейками.Сотрудник,
	|	СписокСотрудниковСПустымиЯчейками.ПредставлениеСотрудника
	|ИЗ
	|	ВТСписокСотрудниковСПустымиЯчейками КАК СписокСотрудниковСПустымиЯчейками";
	ТаблицаСотрудниковСПустымиЯчейками = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции // СформироватьЗапросПоОтработанноеВремя()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремя" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или.
// Заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа.
// Все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка. 
//								  Из результата запроса к ТЧ документа.
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ,МассивСообщений)
	
	СтрокаНачалаСообщенияОбОшибке = "В табл. части ""Отработанное время"": ";	
		
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		МассивСообщений.Добавить(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!");
		Отказ = Истина;
	КонецЕсли;
		
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		МассивСообщений.Добавить(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтработанноеВремя()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка. 
//											  Из результата запроса к ТЧ документа. 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций. 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ТаблицаНабора, ЗаполнятьРеквизитДокумент = Истина,СтруктураПоиска)
	
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	ВидУчетаВремени = ПолучитьВидУчетаВремениПоКлассификатору(ВыборкаПоСтрокамДокумента.ВидВремени);
	
	Если ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.удуВидыУчетаВремени.ПоВечернимЧасам);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.удуВидыУчетаВремени.ПоНочнымЧасам);
	Иначе
		СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.удуВидыУчетаВремени.ПоЧасам);
	КонецЕсли;
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
	Иначе
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Если ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
		Движение.ОсновноеЗначениеПолное = 0;
		Движение.ДополнительноеЗначениеПолное = 0;
	ИначеЕсли Движение.Документ = Документы.удуТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка() Тогда	
		Движение.ОсновноеЗначениеПолное = ВыборкаПоСтрокамДокумента.Часов;
		Движение.ДополнительноеЗначениеПолное = ?((ВыборкаПоСтрокамДокумента.Часов > 0), 1, 0);
	ИначеЕсли НЕ ((Движение.ОсновноеЗначениеПолное > 0) И НЕ ВыборкаПоСтрокамДокумента.ВидВремениРабочееВремя) Тогда
		Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоСтрокамДокумента.Часов;
		Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоСтрокамДокумента.Часов > 0), 1, 0);
	КонецЕсли;
	
	// Реквизиты
	Если ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка() 
		ИЛИ НЕ ЗаполнятьРеквизитДокумент Тогда
		Движение.Документ = Документы.удуТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
	Иначе
		Движение.Документ				= ВыборкаПоШапкеДокумента.Документ;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка. 
//											  Из результата запроса к ТЧ документа. 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций. 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.Период								= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоСтрокамДокумента.ВидВремени;
	
	// Ресурсы
	Движение.Дней								= ?(ВыборкаПоСтрокамДокумента.Часов = 0, 0, 1);
	Движение.Часов								= ВыборкаПоСтрокамДокумента.Часов;
	
	// Реквизиты
	Движение.ВЦеломЗаПериод						= Ложь;
	
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка. 
//											  Из результата запроса к ТЧ документа. 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций. 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ТаблицаНабора, ЗаполнятьРеквизитДокумент = ИСТИНА,СтруктураПоиска,ВремяЗаДень)
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	
	СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.удуВидыУчетаВремени.ПоДням);
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
		Если Не Движение.Документ.Пустая() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.ВидУчетаВремени = Перечисления.удуВидыУчетаВремени.ПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Если ВыборкаПоСтрокамДокумента.ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
		Движение.ОсновноеЗначениеПолное = 0;
		Движение.ДополнительноеЗначениеПолное = 0;
	Иначе
		Движение.ОсновноеЗначениеПолное = ?(ВремяЗаДень = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВремяЗаДень;
	КонецЕсли;
		
	// Реквизиты
	Если ЗаполнятьРеквизитДокумент Тогда
		Движение.Документ = ВыборкаПоШапкеДокумента.Документ;
	Иначе
		Движение.Документ = Документы.удуТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СпособВводаДанных = Перечисления.удуСпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
		
		МассивТЧ = Новый Массив();
		МассивТЧ.Добавить(ОтработанноеВремя);
		
		КраткийСоставДокумента = удуДокументыКадровогоУчета.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	КонецЕсли;
	
	УдалитьЗаписиЗаПериодДокумента();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Получим реквизиты шапки из запроса.
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = удуОбщегоНазначенияСервер.ПредставлениеДокументаПриПроведении(Ссылка);
	
	МассивСообщений = Новый Массив;
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		// Надо позвать проверку заполнения реквизитов шапки.
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ,МассивСообщений);
		ПроверитьУникальностьЗаписи(Отказ,МассивСообщений);
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь).
		Если НЕ Отказ Тогда
			
			Если Не ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.удуСпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				// Данные введены с разбивкой по дням.
				
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("Месяц", ВыборкаПоШапкеДокумента.ПериодРегистрации);
				
				ТаблицаСотрудниковСПустымиЯчейками = Новый ТаблицаЗначений;
				// Получим реквизиты табличной части.
				ВыборкаПоОтработанноеВремя = СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента, ТаблицаСотрудниковСПустымиЯчейками).Выбрать();
				
				Если ТаблицаСотрудниковСПустымиЯчейками.Количество() > 0 Тогда
					СтрокаСотрудников = "";
					Для Каждого ЭлементТаблицыСотрудников Из ТаблицаСотрудниковСПустымиЯчейками Цикл
						СтрокаСотрудников = СтрокаСотрудников + " " + ЭлементТаблицыСотрудников.ПредставлениеСотрудника + ", ";
					КонецЦикла;
					СтрокаСотрудников = ЛЕВ(СтрокаСотрудников, СтрДлина(СтрокаСотрудников) -2 );
					МассивСообщений.Добавить("Для следующих сотрудников время заполнено не по всем дням " + СтрокаСотрудников);
					Отказ = Истина
				Иначе
					
					НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.удуГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
					
					НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ВыборкаПоШапкеДокумента.ПериодРегистрации);
					НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
					
					ДеньНачалаПериода = День(ДатаНачалаПериода);
					ДеньОкончанияПериода = День(ДатаОкончанияПериода);
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("План", Ложь);
					СтруктураПоиска.Вставить("Месяц", ВыборкаПоШапкеДокумента.ПериодРегистрации);
					
					ВидУчетаВремениПоДням = Перечисления.удуВидыУчетаВремени.ПоДням;
					ВидУчетаВремениПоЧасам = Перечисления.удуВидыУчетаВремени.ПоЧасам;
					ПустойДокумент = Документы.удуТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
					ЗаписатьПустоеЗначениеПоДням = Истина;
					Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
						// Проверим очередную строка табличной части.
						ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, Отказ,МассивСообщений);
						Если НЕ Отказ Тогда
							
							НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.Сотрудник);
							СтруктураПоиска.Вставить("ГрафикРаботы", ВыборкаПоОтработанноеВремя.Сотрудник);
							НаборГрафикиРаботыПоВидамВремени.Прочитать();
							ТаблицаНабора = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
							
							Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("ДеньМесяца") Цикл
								Если (ВыборкаПоОтработанноеВремя.ДеньМесяца <= ДеньОкончанияПериода)
									И (ВыборкаПоОтработанноеВремя.ДеньМесяца >= ДеньНачалаПериода)Тогда
									ВремяЯвки = 0;
									ВремяЗаДень = 0;
									ЗаписатьПустоеЗначениеПоДням = Истина;
									Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
										// Заполним записи в наборах записей регистров.
										
										
										ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, ВыборкаПОШапкеДокумента, ТаблицаНабора, НЕ ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение,СтруктураПоиска);
										
										Если НЕ ВыборкаПоОтработанноеВремя.ВидВремени.Пустая() Тогда
											Если НЕ ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
												ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоОтработанноеВремя, ВыборкаПоШапкеДокумента, Движения.удуРабочееВремяРаботниковОрганизаций);
											КонецЕсли;
											Если ВыборкаПоОтработанноеВремя.ВидВремени.РабочееВремя 
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
												ВремяЯвки = ВыборкаПоОтработанноеВремя.Часов;
												ЗаписатьПустоеЗначениеПоДням = НЕ ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение;
											КонецЕсли;
											Если ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы 
												И НЕ (ВремяЗаДень > 0 И НЕ ВыборкаПоОтработанноеВремя.ВидВремениРабочееВремя) Тогда
												
												ВремяЗаДень = ВремяЗаДень + ВыборкаПоОтработанноеВремя.Часов;
											КонецЕсли;
											
										КонецЕсли;
									КонецЦикла;
									ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, ВыборкаПОШапкеДокумента, ТаблицаНабора, ЗаписатьПустоеЗначениеПоДням,СтруктураПоиска,ВремяЗаДень);
								ИначеЕсли ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение Тогда
									ВремяЯвки = 0;
									ВремяЗаДень = 0;
									ДатаМесяца = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоОтработанноеВремя.ДеньМесяца);
									Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
										
										Если НЕ ВыборкаПоОтработанноеВремя.ВидВремени.Пустая() Тогда
											ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, ВыборкаПОШапкеДокумента, ТаблицаНабора, ЛОЖЬ,СтруктураПоиска);
											Если ВыборкаПоОтработанноеВремя.ВидВремени.РабочееВремя 
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
												ВремяЯвки = ВыборкаПоОтработанноеВремя.Часов;
											КонецЕсли;
											Если ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
												И ВыборкаПоОтработанноеВремя.ВидВремени <> Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
												ВремяЗаДень = ВремяЗаДень + ВыборкаПоОтработанноеВремя.Часов;
											КонецЕсли;
										Иначе
											Движение = ТаблицаНабора.Добавить();
											Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
											Движение.ВидУчетаВремени = Перечисления.удуВидыУчетаВремени.ПоЧасам;
											Движение.Дата = ДатаМесяца;
											Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
											Движение.План = Ложь;
											Движение.Документ = ПустойДокумент;
										КонецЕсли;
									КонецЦикла;
									
									Если ВремяЗаДень > 0 Тогда
										ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, ВыборкаПОШапкеДокумента, ТаблицаНабора, ЛОЖЬ,СтруктураПоиска,ВремяЗаДень);
									Иначе
										Движение = ТаблицаНабора.Добавить();
										Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
										Движение.ВидУчетаВремени = Перечисления.удуВидыУчетаВремени.ПоЧасам;
										Движение.Дата = ДатаМесяца;
										Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
										Движение.План = Ложь;
										Движение.Документ = ПустойДокумент;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							НаборГрафикиРаботыПоВидамВремени.Загрузить(ТаблицаНабора);
							НаборГрафикиРаботыПоВидамВремени.Записать();
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;		
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСообщений.Количество() > 0 Тогда
		Для каждого ЭлементМассива Из МассивСообщений Цикл
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=ЭлементМассива;
			СообщениеПользователю.Сообщить();
		КонецЦикла; 
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	удуОбщегоНазначенияСервер.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
КонецПроцедуры

