&НаКлиенте
Перем АдресВХранилище;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПоместитьВХранилище(ДанныеДляХранилища=Неопределено)
	
	ДанныеДляХранилища=?(ДанныеДляХранилища=Неопределено,Справочники.удуСотрудникиОрганизаций.ПустаяСсылка(),ДанныеДляХранилища);
	Возврат ПоместитьВоВременноеХранилище(ДанныеДляХранилища, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьИзХранилища(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
	
КонецФункции




&НаСервере
// Процедура устанавливает значения дат начала и окончания периода.
//
Процедура УстановитьДатыНачалаИОкончанияПериодов()
	
	Если Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.ТекущийМесяц Тогда
		Объект.ДатаНачалаПериода = Объект.ПериодРегистрации;
		Объект.ДатаОкончанияПериода = КонецМесяца(Объект.ПериодРегистрации);
	ИначеЕсли Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		Объект.ДатаНачалаПериода = Объект.ПериодРегистрации;
		Объект.ДатаОкончанияПериода = Объект.ДатаНачалаПериода + ЧетырнадцатьДней
	ИначеЕсли Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда
		Объект.ДатаНачалаПериода = Объект.ПериодРегистрации + ПятнадцатьДней;
		Объект.ДатаОкончанияПериода = КонецМесяца(Объект.ПериодРегистрации);
	ИначеЕсли Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.УказанныйПериод Тогда
		Объект.ДатаНачалаПериода = ПредыдущаяДатаНачалаПериода;
		Объект.ДатаОкончанияПериода = ПредыдущаяДатаОкончанияПериода;
	КонецЕсли;
	ПредыдущаяДатаНачалаПериода = Объект.ДатаНачалаПериода;
	ПредыдущаяДатаОкончанияПериода = Объект.ДатаОкончанияПериода;
	
КонецПроцедуры 

&НаСервере
// Процедура устанавливает заголовок формы окна.
Процедура УстановитьЗаголовокФормыДокумента()    
	
	СтрокаЗаголовокФормы = "Табель учета рабочего времени: ";
	
	Если Не Объект.СпособВводаДанных = Перечисления.удуСпособыВводаДанныхОВремени.ПоДням Тогда
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Сводно. ";
	КонецЕсли;
	
	МесяцСтрокой = Формат(Объект.ПериодРегистрации, "ДФ=ММММ");  
	ГодСтрокой = " " + Формат(Объект.ПериодРегистрации, "ДФ=yyyy") + ". ";
	
	Если Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.ТекущийМесяц Тогда
		
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "За " + МесяцСтрокой + ГодСтрокой;
		
	ИначеЕсли Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "За первую половину " + МесяцСтрокой + ГодСтрокой; 
		
	ИначеЕсли Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда
		
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "За вторую половину " + МесяцСтрокой + ГодСтрокой; 
		
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Новый";
	ИначеЕсли Объект.Ссылка.Проведен Тогда
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Проведен";
	Иначе
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Не проведен";
	КонецЕсли;
	
	Заголовок = СтрокаЗаголовокФормы;
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаСервере
// Процедура устанавливает видимость колонок табличной части "ОтработанноеВремя".
//
Процедура УстановитьВидимостьКолонокТаблицыОтработанноеВремя()
	
	ДеньНачалаПериода = День(Объект.ДатаНачалаПериода);
	ДеньОкончанияПериода = День(Объект.ДатаОкончанияПериода);

	Для ИндексКолонки = 1 По 31 Цикл
		Элементы.ОтработанноеВремя.ПодчиненныеЭлементы.Найти("ОтработанноеВремяДень" + Строка(ИндексКолонки)).Видимость = 
		((ИндексКолонки <= ДеньОкончанияПериода) И (ИндексКолонки >= ДеньНачалаПериода));
	КонецЦикла;
	
КонецПроцедуры

// Процедура надписывает колонки т.п. ОтработанноеВремя в зависимости от способа ввода данных.
// И количества дней в месяце.
Процедура ОформитьЗаголовкиДнейМесяца()
	
	// Устанавливаем заголовки дней месяца.
	БледноКрасныйЦвет = Новый Цвет(255, 176, 176);
	СерыйЦвет = Новый Цвет(234, 229, 216);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(Объект.ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня,
	|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели
	|ИЗ
	|	РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДеньНеделиМесяца = ДеньНедели(НачалоМесяца(Объект.ПериодРегистрации));
		Для ДеньМесяца = 1 по День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			
			Колонка = Элементы.ОтработанноеВремя.ПодчиненныеЭлементы.Найти("ОтработанноеВремяДень"+Строка(ДеньМесяца));
			
			Колонка.Заголовок = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[ДеньНеделиМесяца-1].ДеньПредставление;
			Если ДеньНеделиМесяца = 6 Или ДеньНеделиМесяца = 7 Тогда
				Колонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОсобогоТекста;
				Колонка.ШрифтЗаголовка = ШрифтыСтиля.удуШрифтВажнойНадписи;
			Иначе
				Колонка.ЦветТекстаЗаголовка = Новый Цвет();	
				Колонка.ШрифтЗаголовка = Новый Шрифт();
			КонецЕсли;
			
			ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
		КонецЦикла;
	Иначе
		Данные = Результат.Выгрузить();
		ЦветВыходного 		   = Новый Цвет(153, 51,   0); // Темно-красный
		ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
		Для ДеньМесяца = 1 по День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			
			Колонка = Элементы.ОтработанноеВремя.ПодчиненныеЭлементы.Найти("ОтработанноеВремяДень"+Строка(ДеньМесяца));
			
			Колонка.Заголовок = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[Данные[ДеньМесяца - 1].ДеньНедели-1].ДеньПредставление;
			
			ВидДня = Данные[ДеньМесяца - 1].ВидДня;
			Если ВидДня = Перечисления.удуВидыДнейПроизводственногоКалендаря.Праздник Тогда
				Колонка.ЦветТекстаЗаголовка = ЦветВыходного;
				Колонка.ШрифтЗаголовка = ШрифтыСтиля.удуШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.удуВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
				Колонка.ЦветТекстаЗаголовка = ЦветВыходного;
				Колонка.ШрифтЗаголовка = ШрифтыСтиля.удуШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.удуВидыДнейПроизводственногоКалендаря.Суббота Тогда
				Колонка.ЦветТекстаЗаголовка = ЦветВыходного;
				Колонка.ШрифтЗаголовка = ШрифтыСтиля.удуШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.удуВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				Колонка.ЦветТекстаЗаголовка = ЦветПредпразничногоДня;
				Колонка.ШрифтЗаголовка = ШрифтыСтиля.удуШрифтВажнойНадписи;
			Иначе
				Колонка.ЦветТекстаЗаголовка = Новый Цвет();	
				Колонка.ШрифтЗаголовка = Новый Шрифт();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОформитьЗаголовкиДнейМесяца()

&НаСервере
Процедура ПериодРегистрацииПриИзмененииСервер()
	
	удуДокументыКадровогоУчета.ДатаКакМесяцПодобратьДатуПоТексту(МесяцСтрока, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииАвтоПодборСервер(Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	удуДокументыКадровогоУчета.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииОкончаниеВводаТекстаСервер(Текст, Значение, СтандартнаяОбработка)
	
	удуДокументыКадровогоУчета.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	удуОбщегоНазначенияСервер.ПроверитьНомерДокумента(Объект, мТекущаяДатаДокумента);
	
КонецПроцедуры

&НаСервере
Функция АвтозаполнениеСервер(ВыбранноеЗначение=Неопределено,СтрокаКоллекцииТЧ=Неопределено)
	
	УжеВведенныеСотрудники=Документы.удуТабельУчетаРабочегоВремениОрганизации.Автозаполнение(Объект,ВыбранноеЗначение,СтрокаКоллекцииТЧ);
	Возврат УжеВведенныеСотрудники;
	
КонецФункции

&НаСервере
Процедура ОтработанноеВремяПерезаполнить(ТекущиеДанные=Неопределено)
	
	ЕстьМодифицированность=Модифицированность;
	
	СтрокаИндексДня = "";
	НазваниеЯчейкиВидВремени = "";
	НазваниеЯчейкиДней = "";
	ТекстЯчейки = "";
	
	СоответствиеРасчетаИтоговЧасов=ПолучитьИзХранилища(АдресСоответствиеРасчетаИтоговЧасов);
	СоответствиеРасчетаИтоговДней=ПолучитьИзХранилища(АдресСоответствиеРасчетаИтоговДней);
	МассивПриставок=ПолучитьИзХранилища(АдресМассивПриставок);
	
	Если ТекущиеДанные=Неопределено тогда
		ТЗ=Объект.ОтработанноеВремя.Выгрузить(); 
	Иначе 
		МассивСтрок=Новый Массив;
		МассивСтрок.Добавить(Объект.ОтработанноеВремя.НайтиПоИдентификатору(ТекущиеДанные));
		ТЗ=Объект.ОтработанноеВремя.Выгрузить(МассивСтрок); 
	КонецЕсли;
	
	// Цикл по строкам документа.
	Для Каждого СтрокаОтработанноеВремя Из ТЗ Цикл
		
		СоответствиеРасчетаИтоговЧасов.Очистить();
		СоответствиеРасчетаИтоговДней.Очистить();
		// Цикл по дням.
		Для ИндексДня  = День(Объект.ДатаНачалаПериода) По День(Объект.ДатаОкончанияПериода) Цикл
			ТекстЯчейки = "";
			СтрокаИндексДня = Строка(ИндексДня);
			// Цикл по значениям внутри дня.
			Для ИндексМассиваПриставок = 0 По 3 Цикл
				НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
				НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
				КоличествоЧасов = СтрокаОтработанноеВремя.Получить(ТЗ.Колонки.Индекс(ТЗ.Колонки.Найти(НазваниеЯчейкиДней)));
				ВидВремени = СтрокаОтработанноеВремя.Получить(ТЗ.Колонки.Индекс(ТЗ.Колонки.Найти(НазваниеЯчейкиВидВремени)));
				
				Если ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
					// Подсчет для итоговой колонки.
					НакопленоДней = СоответствиеРасчетаИтоговДней[ВидВремени];
					Если НакопленоДней = Неопределено Тогда
						НакопленоДней = 0;
					КонецЕсли;
					СоответствиеРасчетаИтоговДней.Вставить(ВидВремени, НакопленоДней + 1);
					КоличествоЧасов = "";
				ИначеЕсли КоличествоЧасов = 0 Тогда
					КоличествоЧасов = "";
				Иначе
					// Подсчет для итоговой колонки.
					НакопленоДней = СоответствиеРасчетаИтоговДней[ВидВремени];
					НакопленоЧасов = СоответствиеРасчетаИтоговЧасов[ВидВремени];
					Если НакопленоДней = Неопределено ИЛИ НакопленоЧасов = Неопределено Тогда
						НакопленоДней = 0;
						НакопленоЧасов = 0;
					КонецЕсли;
					СоответствиеРасчетаИтоговДней.Вставить(ВидВремени, НакопленоДней + 1);
					СоответствиеРасчетаИтоговЧасов.Вставить(ВидВремени, НакопленоЧасов + КоличествоЧасов);
				КонецЕсли;
				
				Если НЕ ВидВремени.Пустая() Тогда
					Если ВидВремени.БуквенныйКод = "Я" Тогда
						ТекстЯчейки = "Я " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
					ИначеЕсли ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
						ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + Символы.ПС;
					Иначе
						ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
			ИндексКолонкиДней=ТЗ.Колонки.Индекс(ТЗ.Колонки.Найти("День"+СтрокаИндексДня));
			СтрокаОтработанноеВремя.Установить(ИндексКолонкиДней,ТекстЯчейки);
		КонецЦикла;
		
		СтрИтогоРабота = "";
		СтрИтогоРаботаВечерниеЧасы = "";
		СтрИтогоРаботаНочныеЧасы = "";
		СтрИтогоРабочееВремя = "";
		СтрИтогоНеРабочееВремя = "";
		Для Каждого ЭлементСоответствия Из СоответствиеРасчетаИтоговДней Цикл
			КлючЭлементаСоответствия = ЭлементСоответствия.Ключ;
			Если КлючЭлементаСоответствия = Справочники.удуКлассификаторИспользованияРабочегоВремени.Работа Тогда
				СтрИтогоРабота = СтрИтогоРабота + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн."
				+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
				СтрИтогоРаботаВечерниеЧасы = СтрИтогоРаботаВечерниеЧасы + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн."
				+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
				СтрИтогоРаботаНочныеЧасы = СтрИтогоРаботаНочныеЧасы + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн."
				+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия.РабочееВремя Тогда
				СтрИтогоРабочееВремя = СтрИтогоРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн. "
				+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
				СтрИтогоРабочееВремя = СтрИтогоРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн. " + Символы.ВК;		
			Иначе
				СтрИтогоНеРабочееВремя = СтрИтогоНеРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн. "
				+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			КонецЕсли;
		КонецЦикла;
		СтрокаОтработанноеВремя.ИтогПоСтроке = СтрИтогоРабота + СтрИтогоРаботаВечерниеЧасы + СтрИтогоРаботаНочныеЧасы + СтрИтогоРабочееВремя + СтрИтогоНеРабочееВремя;
		
	КонецЦикла;
	
	
	Если ТекущиеДанные=Неопределено тогда
		Объект.ОтработанноеВремя.Загрузить(ТЗ); 
	Иначе 
		
		ЗаполнитьЗначенияСвойств(Объект.ОтработанноеВремя.НайтиПоИдентификатору(ТекущиеДанные),ТЗ[0]);
	КонецЕсли;
	
	Модифицированность=ЕстьМодифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстЯчейкиСервер(ВидВремени,ТекстЯчейки,КоличествоЧасов)
	
	Если ВидВремени.БуквенныйКод = "Я" Тогда
		ТекстЯчейки = "Я " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
	ИначеЕсли ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
		ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + Символы.ПС;	
	Иначе
		ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстЯчейки1Сервер(ВидВремени,ТекстЯчейки,КоличествоЧасов)
	
	Если ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
		ТекстЯчейки = ТекстЯчейки + Символы.ПС + ВидВремени.БуквенныйКод;	
	Иначе
		ТекстЯчейки = ТекстЯчейки + Символы.ПС + ВидВремени.БуквенныйКод + " " + КоличествоЧасов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтработанноеВремяСотрудникПриИзмененииСервер(НомерСтроки,НомерСтрокиНеидентификатор=Неопределено)
	
	Если НомерСтрокиНеидентификатор=Неопределено тогда
		ТекущиеДанные=Объект.ОтработанноеВремя.НайтиПоИдентификатору(НомерСтроки);
		ТекущиеДанные.ФизЛицо = ТекущиеДанные.Сотрудник.ФизЛицо;
	иначе
		ТекущиеДанные=Объект.ОтработанноеВремя[НомерСтрокиНеидентификатор];
	КонецЕсли;
	МассивСтрок = Объект.ОтработанноеВремя.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
	Если МассивСтрок.Количество() < 2 Тогда
		СписокСотрудников=Новый СписокЗначений;
		СписокСотрудников.Добавить(ТекущиеДанные.Сотрудник);
		АвтозаполнениеСервер(СписокСотрудников, ТекущиеДанные);
		ОтработанноеВремяПерезаполнить(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает норму времени в часах на указанный день по указанному сотруднику.
Функция ПолучитьНормуВремениПоДню(Сотрудник, НомерДня)
	
	СоответствиеСотрудникГрафик=ПолучитьИзВременногоХранилища(АдресСоответствиеСотрудникГрафик);
	СоответствиеГрафикНорма=ПолучитьИзВременногоХранилища(АдресСоответствиеГрафикНорма);
	ГрафикСотрудника = СоответствиеСотрудникГрафик.Получить(Сотрудник);
	
	Если ГрафикСотрудника = Неопределено Тогда
		// Графика по этому сотруднику еще нет, нужно получить.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДатаТабеля
		|	
		|ПОМЕСТИТЬ ВТДатыТабеля 
		|	ИЗ (
		|	ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(Год(Объект.ПериодРегистрации), "ЧГ=4") + ", " + Месяц(Объект.ПериодРегистрации) + " , 1) КАК ДатаТабеля
		|	";           
		Для ИндексДня = 2 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			ТекстЗапроса = ТекстЗапроса + 
			"ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|  ДАТАВРЕМЯ(" + Формат(Год(Объект.ПериодРегистрации), "ЧГ=4")+ ", " + Месяц(Объект.ПериодРегистрации) + " ," + ИндексДня + ")
			|	";
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.ГрафикРаботы
		|ПОМЕСТИТЬ ВТРаботникиОрганизаций
		|ИЗ
		|	РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ	РаботникиОрганизаций.Сотрудник = &Сотрудник
		|	И РаботникиОрганизаций.Период > &ПериодРегистрации
		|	И РаботникиОрганизаций.Период <= КонецПериода(&ПериодРегистрации, МЕСЯЦ)
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Период,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
		|ИЗ
		|	РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(&ПериодРегистрации, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение)";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ДатыИзмененияГрафика.ДатаТабеля,
		|	ДатыИзмененияГрафика.Сотрудник,
		|	ДатыИзмененияГрафика.Период,
		|	РаботникиОрганизаций.ГрафикРаботы
		|ПОМЕСТИТЬ ВТДатыСотрудникГрафик
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|		ВТРаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(ВТРаботникиОрганизаций.Период) КАК Период
		|	ИЗ
		|		ВТДатыТабеля КАК ВТДатыТабеля
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
		|			ПО (ВТРаботникиОрганизаций.Период < ВТДатыТабеля.ДатаТабеля)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТДатыТабеля.ДатаТабеля,
		|		ВТРаботникиОрганизаций.Сотрудник) КАК ДатыИзмененияГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО (РаботникиОрганизаций.Период = ДатыИзмененияГрафика.Период)
		|			И (РаботникиОрганизаций.Сотрудник = ДатыИзмененияГрафика.Сотрудник)";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	ГрафикиРаботы.ГрафикРаботы,
		|	ГрафикиРаботы.Дата,
		|	ГрафикиРаботы.ОсновноеЗначение
		|ПОМЕСТИТЬ ВТГрафикиРаботы
		|ИЗ
		|	ВТРаботникиОрганизаций КАК РаботникиОрганизаций
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|ПО
		|	(ГрафикиРаботы.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы
		|	ИЛИ ГрафикиРаботы.ГрафикРаботы = РаботникиОрганизаций.Сотрудник)
		|	И ГрафикиРаботы.Месяц = &ПериодРегистрации
		|	И ГрафикиРаботы.План
		|	И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.удуВидыУчетаВремени.ПоЧасам)";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ 
		|   ЕСТЬNULL(ИндивидуальныйГрафик.ГрафикРаботы, ОбщийГрафик.ГрафикРаботы) КАК ГрафикРаботы,
		|   ДЕНЬ(ДатыТабеля.ДатаТабеля) КАК НомерДня,
		|   ЕСТЬNULL(ИндивидуальныйГрафик.ОсновноеЗначение, ОбщийГрафик.ОсновноеЗначение) КАК НормаЧасов
		|   
		|ИЗ 
		|	ВТДатыСотрудникГрафик КАК ДатыТабеля
		| 
		| ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафик
		|ПО
		|	ИндивидуальныйГрафик.ГрафикРаботы = ДатыТабеля.Сотрудник
		|	И ИндивидуальныйГрафик.Дата = ДатыТабеля.ДатаТабеля
		|	И ИндивидуальныйГрафик.Месяц = &ПериодРегистрации
		|	И ИндивидуальныйГрафик.ВидУчетаВремени = Значение(Перечисление.удуВидыУчетаВремени.ПоЧасам)
		|	И ИндивидуальныйГрафик.План
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.удуГрафикиРаботыПоВидамВремени КАК ОбщийГрафик
		|ПО 
		|	ОбщийГрафик.ГрафикРаботы = ДатыТабеля.ГрафикРаботы
		|	И ОбщийГрафик.Дата = ДатыТабеля.ДатаТабеля
		|	И ОбщийГрафик.Месяц = &ПериодРегистрации
		|	И ОбщийГрафик.ВидУчетаВремени = Значение(Перечисление.удуВидыУчетаВремени.ПоЧасам)
		|	И ОбщийГрафик.План
		|	УПОРЯДОЧИТЬ ПО ГрафикРаботы, НомерДня, НормаЧасов";
		РезультатЗапроса = Запрос.Выполнить();
		
		МассивНормыДней = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("НормаЧасов");
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ГрафикРаботы = Выборка.ГрафикРаботы;
		
		СоответствиеСотрудникГрафик.Вставить(Сотрудник, ГрафикРаботы);
		СоответствиеГрафикНорма.Вставить(ГрафикРаботы, МассивНормыДней);
		
		АдресСоответствиеСотрудникГрафик=ПоместитьВХранилище(СоответствиеСотрудникГрафик);
		АдресСоответствиеГрафикНорма=ПоместитьВХранилище(СоответствиеГрафикНорма);
		
		Возврат МассивНормыДней[НомерДня-1];
	Иначе
		МассивДней = СоответствиеГрафикНорма.Получить(ГрафикСотрудника);
		Возврат МассивДней[НомерДня-1];
	КонецЕсли;
	
	
КонецФункции // ПолучитьНормуВремениПоДню()

&НаСервереБезКонтекста
// Функция, удаляет символы до разделителя слева и справа после разделителя.
Функция СпецСокрЛП(Строка, Разделители)
	НоваяСтрока = Строка;
	// Удалим лишние символы слева.
	Пока Истина Цикл
		Символ = Лев(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Сред(НоваяСтрока, 2);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;        
	// Удалим лишние символы справа.
	Пока Истина Цикл
		Символ = Прав(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Лев(НоваяСтрока, СтрДлина(НоваяСтрока) - 1);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяСтрока;
КонецФункции

&НаСервереБезКонтекста
// Функция определяет, возможно ли переданную строку перевести в число.
// Возвращает Истина, если Возможно, иначе Ложь.
Функция ЭтоЧисло(Строка)
	Попытка
		Число = Число(Строка);
		Если Число = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
// Функция проверяет введенные в таблице данные на правильность, а также приводит их к нормальному виду.
Функция НормироватьТекст(Текст, Результат, НеполныйФормат = Истина, НормаЧасов = 8) 
	Результат = "";
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Разделители = Новый Массив;
	Разделители.Добавить(Символы.ПС);
	Разделители.Добавить(" ");
	Разделители.Добавить("-");
	Разделители.Добавить(";");
	Разделители.Добавить("/");
	Разделители.Добавить(",");
	Разделители.Добавить(":");
	
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	мБуквенныеОбозначения=ПолучитьИзВременногоХранилища(АдресБуквенныеОбозначения);
	
	Для Каждого Разделитель из Разделители Цикл
		ПодСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Разделитель);
		Если ПодСтроки.Количество() > 1 Тогда
			БылКод = Ложь;
			БылСимволСВозможностьюВводаБезВремени = Ложь;
			Для Каждого ПодСтрока Из Подстроки Цикл
				Код = мБуквенныеОбозначения[СокрЛП(ВРег(ПодСтрока))];
				АнализируемаяСтрока = СпецСокрЛП(ПодСтрока, Разделители);
				Если Код <> НеОпределено Тогда
					Если БылКод Тогда
						Возврат Ложь;
					КонецЕсли;
					
					Если Код = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
						Результат = Результат + ВРег(ПодСтрока) + РазделительГрупп;
						БылКод = Ложь;
						БылСимволСВозможностьюВводаБезВремени = Истина;
					Иначе
						Результат = Результат + ВРег(ПодСтрока);
						БылКод = Истина;	
						БылСимволСВозможностьюВводаБезВремени = Ложь;
					КонецЕсли;
					
				ИначеЕсли ЭтоЧисло(АнализируемаяСтрока) И (БылКод ИЛИ БылСимволСВозможностьюВводаБезВремени) Тогда
					
					Результат = Результат + РазделительВГруппе + ?(АнализируемаяСтрока = "0", Строка(НормаЧасов), АнализируемаяСтрока) + РазделительГрупп;
					БылКод = Ложь;
					БылСимволСВозможностьюВводаБезВремени = Ложь;
				Иначе
					ПодРезультат = "";
					Если НормироватьТекст(ПодСтрока, ПодРезультат, Ложь) Тогда
						Результат = Результат + ПодРезультат;
					Иначе
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(Результат) Тогда
		Если НеполныйФормат Тогда
			Код = мБуквенныеОбозначения[СокрЛП(ВРег(Текст))];
			Если Код = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительГрупп;
				НормаЧасов = 0;
				Возврат Истина;
			ИначеЕсли Код <> НеОпределено Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительВГруппе + Строка(НормаЧасов) + РазделительГрупп;
				Возврат Истина;
			ИначеЕсли ЭтоЧисло(СпецСокрЛП(Текст, Разделители)) Тогда
				Результат = "Я" + РазделительВГруппе + СпецСокрЛП(Текст, Разделители) + РазделительГрупп;
				
				Возврат Истина;
			ИначеЕсли СокрЛП(Текст) = "0" Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
// По тексту из ячейки (текст) возвращает соответствие: ВидВремени (классификатор) - Количество часов.
//
Функция ПолучитьВидВремениИКоличествоЧасов(Текст , Результат) 
	Результат = Новый Соответствие;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	мБуквенныеОбозначения=ПолучитьИзВременногоХранилища(АдресБуквенныеОбозначения);
	
	ПодСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, РазделительГрупп);
	Для ИндексМассива = 0 По ПодСтроки.Количество() - 1 Цикл
		ВидВремениИКоличество = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПодСтроки[ИндексМассива], РазделительВГруппе);
		Если ВидВремениИКоличество.Количество() = 2 Тогда
			Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
			Количество = Число(ВидВремениИКоличество[1]);
			Результат.Вставить(Код, Количество);
		ИначеЕсли ВидВремениИКоличество.Количество() = 1  Тогда
			Если мБуквенныеОбозначения[ВидВремениИКоличество[0]] = Справочники.удуКлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
				Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
				Количество = 0;
				Результат.Вставить(Код, Количество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецФункции // ПолучитьВидВремениИКоличествоЧасов()

&НаСервереБезКонтекста
Функция ПолучитьПустуюСсылку()
	Возврат Справочники.удуКлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
КонецФункции

&НаКлиенте
// Процедура проверяет введенное в ячейку значение на присутствие в.
// Справочнике КлассификаторИспользованияРабочегоВремени, и нормирует значение.
Функция ОбработкаВводаДанныхВЯчейку(ТекущиеДанные, Текст, Значение, СтандартнаяОбработка, НомерДня)
	
	МассивПриставок=ПолучитьИзХранилища(АдресМассивПриставок);
	Результат = ""; 
	НормаЧасов = ПолучитьНормуВремениПоДню(ТекущиеДанные.Сотрудник, Число(НомерДня));
	Если НормироватьТекст(Текст, Результат, ,НормаЧасов) Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Лев(Результат, СтрДлина(Результат)-1));
		Значение=СписокЗначений;
		СтандартнаяОбработка = Ложь;
	Иначе
		Значение = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексМассиваПриставок = 0 По 3 Цикл
		ТекущиеДанные[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ПолучитьПустуюСсылку();
		ТекущиеДанные[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = 0;
	КонецЦикла;
	
	СписокВремени = "";
	ИндексМассиваПриставок = 0;
	ПередаваемоеЗначениеЯчейки = Результат;
	ПередаваемоеЗначениеЯчейки = Лев(ПередаваемоеЗначениеЯчейки, СтрДлина(ПередаваемоеЗначениеЯчейки)-1);
	ПолучитьВидВремениИКоличествоЧасов(ПередаваемоеЗначениеЯчейки, СписокВремени);
	Для Каждого ЭлементСписка Из СписокВремени Цикл
		Если ИндексМассиваПриставок > 3 Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст="В ячейку можно записать не больше чем 4 вида времени";
			СообщениеПользователю.Сообщить();
			Прервать;
		Иначе
			ТекущиеДанные[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ЭлементСписка.Ключ;
			ТекущиеДанные[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = Число(ЭлементСписка.Значение);
			ИндексМассиваПриставок = ИндексМассиваПриставок + 1;
		КонецЕсли;
	КонецЦикла;
	
	ОтработанноеВремяПерезаполнить(Элементы.ОтработанноеВремя.ТекущаяСтрока);
	Возврат Истина;
	
КонецФункции // ОбработкаВводаДанныхВЯчейку()

&НаСервере
Процедура ЗаполнитьБуквенныеОбозначения()
	
	БуквенныеОбозначения = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	удуКлассификаторИспользованияРабочегоВремени.БуквенныйКод,
	|	удуКлассификаторИспользованияРабочегоВремени.Ссылка
	|ИЗ
	|	Справочник.удуКлассификаторИспользованияРабочегоВремени КАК удуКлассификаторИспользованияРабочегоВремени";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		БуквенныеОбозначения[ВРег(Выборка.БуквенныйКод)] = Выборка.Ссылка;
	КонецЦикла;
	
	АдресБуквенныеОбозначения=ПоместитьВХранилище(БуквенныеОбозначения);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТЧСервер()
	
	Объект.ОтработанноеВремя.Загрузить(Объект.ОтработанноеВремя.Выгрузить(,"Сотрудник,ФизЛицо"));
	Модифицированность=Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьПодбор() Экспорт
	
	Сотрудник=ПолучитьИзХранилища(АдресВХранилище);
	Если ЗначениеЗаполнено(Сотрудник) тогда
		СтрокиРаботников = Объект.ОтработанноеВремя.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Если СтрокиРаботников.Количество() > 0 Тогда
			Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
			Возврат;
		КонецЕсли;
		СтрокаТЧ=Объект.ОтработанноеВремя.Добавить();
		СтрокаТЧ.Сотрудник=Сотрудник;
		Модифицированность=Истина;
		ОтработанноеВремяСотрудникПриИзмененииСервер(0,Объект.ОтработанноеВремя.Индекс(СтрокаТЧ));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСервер(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Команда = "";
		Если ВыбранноеЗначение.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ТЗРаботников=ПолучитьИзХранилища(ВыбранноеЗначение.АдресДанных);
			СписокСотрудников=ТЗРаботников.ВыгрузитьКолонку("Сотрудник");
			Объект.ОтработанноеВремя.Очистить();
			Объект.ОтработанноеВремяВЦеломЗаПериод.Очистить();
			УжеВведенныеСотрудники=АвтозаполнениеСервер(СписокСотрудников);
			Отбор=Новый Структура;
			Для Каждого ЭлементМассива из УжеВведенныеСотрудники цикл
				Отбор.Очистить();
				Отбор.Вставить("Сотрудник",ЭлементМассива);
				МассивСтрокДляУдаления=Объект.ОтработанноеВремя.НайтиСтроки(Отбор);
				Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления цикл
					Объект.ОтработанноеВремя.Удалить(СтрокаДляУдаления);
				КонецЦикла;
			КонецЦикла;
			ОтработанноеВремяПерезаполнить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидДоговора()
	
	Возврат Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор;
	
КонецФункции




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЧетырнадцатьДней = 1209600;
	ПятнадцатьДней = 1296000;
	ДлинаСуток = 86400;
	ПерваяДата = НачалоДня(ТекущаяДата());
	
	Для ДеньНедели = 0 По 6 Цикл
		
		ДниНедели.Добавить().ДеньПредставление=НРег(Формат(НачалоНедели(ТекущаяДата()) + ДеньНедели * ДлинаСуток,"ДФ=ддд"));
	КонецЦикла;
	
	МассивПриставок = Новый Массив(4);
	МассивПриставок[0] = "Первый";
	МассивПриставок[1] = "Второй";
	МассивПриставок[2] = "Третий";
	МассивПриставок[3] = "Четвертый";
	АдресМассивПриставок=ПоместитьВХранилище(МассивПриставок);
	АдресСоответствиеСотрудникГрафик=ПоместитьВХранилище(Новый Соответствие);
	АдресСоответствиеГрафикНорма=ПоместитьВХранилище(Новый Соответствие);
	АдресСоответствиеРасчетаИтоговДней=ПоместитьВХранилище(Новый Соответствие);
	АдресСоответствиеРасчетаИтоговЧасов=ПоместитьВХранилище(Новый Соответствие);	
	ЗаполнитьБуквенныеОбозначения();
	
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		удуДокументыКадровогоУчета.ЗаполнитьШапкуДокумента(Объект);		 
		Объект.СпособВводаДанных=Перечисления.удуСпособыВводаДанныхОВремени.ПоДням;
		Объект.СпособУказанияПериода = Перечисления.удуПериодНачисленияЗарплаты.ТекущийМесяц;
		УстановитьДатыНачалаИОкончанияПериодов();
		
		Если Объект.КолонкиСводногоТабеля.Количество() = 0 Тогда
			// Заполняем по умолчанию список колонок сводного табеля.
			Объект.КолонкиСводногоТабеля.Добавить().ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.Работа;
			Объект.КолонкиСводногоТабеля.Добавить().ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
			Объект.КолонкиСводногоТабеля.Добавить().ВидВремени = Справочники.удуКлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам;
		КонецЕсли;
		
	КонецЕсли;
	
	МесяцСтрока = удуДокументыКадровогоУчета.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	УстановитьЗаголовокФормыДокумента();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Объект.Дата;
	
	
	ПредыдущаяДатаНачалаПериода = Объект.ДатаНачалаПериода;
	ПредыдущаяДатаОкончанияПериода = Объект.ДатаОкончанияПериода;
	
	// Установить активный реквизит и активную страницу.
	Если Объект.СпособВводаДанных = Перечисления.удуСпособыВводаДанныхОВремени.ПоДням Тогда
		
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремя;
		ТекущийЭлемент = Элементы.ОтработанноеВремя;
		
	КонецЕсли;
	
	ОтработанноеВремяПерезаполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьЗаголовокФормыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораСервер(ВыбранноеЗначение);
	Модифицированность=Истина;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура Подбор(Команда)
	
	АдресВХранилище = ПоместитьВХранилище();
	ПараметрыПодбора = Новый Структура("ЭтоПодбор,АдресПодбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора", Истина, АдресВХранилище,НачалоМесяца(Объект.ДатаНачалаПериода),Истина,ПолучитьВидДоговора());
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВсемСотрудникам(Команда)
	
	Если Объект.Организация.Пустая() Тогда
		Предупреждение("Не указана организация, заполнить список сотрудников невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ОтработанноеВремя.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Объект.ОтработанноеВремя.Очистить();
		
	КонецЕсли;
	
	АвтозаполнениеСервер();
	
	ОтработанноеВремяПерезаполнить();
	
	Если Объект.ОтработанноеВремя.Количество() > 0 Тогда
		УстановитьВидимостьколонокТаблицыОтработанноеВремя();
	КонецЕсли;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпискуСотрудников(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Предупреждение("Не указана организация, отобрать список сотрудников невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ОтработанноеВремя.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Структура=Новый Структура;
	Структура.Вставить("ДатаАктуальности",Объект.ДатаНачалаПериода);
	Структура.Вставить("Организация",Объект.Организация);	
	Структура.Вставить("Подразделение",Объект.ПодразделениеОрганизации);
	Структура.Вставить("ДатаУволенных",Объект.ДатаНачалаПериода);	
	Структура.Вставить("ВключатьУволенных",Истина);
	
	АдресВХранилище = ПоместитьВХранилище(Структура);
	ПараметрыФормы = Новый Структура("АдресДанныхНачальногоЗаполнения", АдресВХранилище);
	ФормаОтбора = ПолучитьФорму("Обработка.удуФормированиеСпискаРаботников.Форма.ФормаНастройки",ПараметрыФормы,ЭтаФорма);
	ФормаОтбора.ОткрытьМодально();
	
	
	
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер="";
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТА ШАПКИ ПериодРегистрации

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	удуДокументыКадровогоУчетаКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Объект.ПериодРегистрации, ЭтаФорма);
	МесяцСтрока = удуДокументыКадровогоУчетаКлиент.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	
	
	УстановитьДатыНачалаИОкончанияПериодов();
	
	
	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	ОформитьЗаголовкиДнейМесяца();
	
	УстановитьЗаголовокФормыДокумента();
	ОчиститьТЧСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	ПериодРегистрацииПриИзмененииСервер();
	МесяцСтрока = удуДокументыКадровогоУчетаКлиент.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	УстановитьДатыНачалаИОкончанияПериодов();
	
	
	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	ОформитьЗаголовкиДнейМесяца();
	
	
	УстановитьЗаголовокФормыДокумента();
	
	ОчиститьТЧСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцСтрока = удуДокументыКадровогоУчетаКлиент.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	
	УстановитьДатыНачалаИОкончанияПериодов();
	
	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	ОформитьЗаголовкиДнейМесяца();
	
	УстановитьЗаголовокФормыДокумента();
	ОчиститьТЧСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	
	ПериодРегистрацииАвтоПодборСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПериодРегистрацииОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	УстановитьДатыНачалаИОкончанияПериодов();
	
	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	ОформитьЗаголовкиДнейМесяца();
	
	
	УстановитьЗаголовокФормыДокумента();
	ОчиститьТЧСервер();
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОтработанноеВремя

&НаКлиенте
Процедура ОтработанноеВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.удуСотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ОтработанноеВремя.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		ОтработанноеВремяПерезаполнить(Элементы.ОтработанноеВремя.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПередНачаломИзменения(Элемент, Отказ)
	
	ИмяЯчейки = Элемент.ТекущийЭлемент.Имя;
	Если (Лев(ИмяЯчейки, 21) = "ОтработанноеВремяДень") И (Объект.ОтработанноеВремя.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 22);
		
		МассивПриставок=ПолучитьИзХранилища(АдресМассивПриставок);
		
		Для ИндексМассиваПриставок = 0 По 3 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущиеДанные[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущиеДанные[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				ПолучитьТекстЯчейкиСервер(ВидВремени,ТекстЯчейки,КоличествоЧасов);
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
		ЭлементКоллекции = Объект.ОтработанноеВремя.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		ЗначениеЯчейки=Неопределено;
		ЭлементКоллекции.Свойство("День"+СтрокаИндексДня,ЗначениеЯчейки);
		Если ЗначениеЯчейки <> ТекстЯчейки Тогда
			Элементы.ОтработанноеВремя.ТекущиеДанные["День"+СтрокаИндексДня]=ТекстЯчейки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущийЭлемент=Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Элемент.ТекущийЭлемент.Имя;
	Если (Лев(ИмяЯчейки, 21) = "ОтработанноеВремяДень") И (Объект.ОтработанноеВремя.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 22);
		МассивПриставок=ПолучитьИзХранилища(АдресМассивПриставок);
		
		Для ИндексМассиваПриставок = 0 По 3 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущиеДанные[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущиеДанные[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				ПолучитьТекстЯчейки1Сервер(ВидВремени,ТекстЯчейки,КоличествоЧасов);
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Сред(ТекстЯчейки, 2);
		ЭлементКоллекции = Объект.ОтработанноеВремя.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		ЗначениеЯчейки=Неопределено;
		ЭлементКоллекции.Свойство("День"+СтрокаИндексДня,ЗначениеЯчейки);
		Если ЗначениеЯчейки <> ТекстЯчейки Тогда
			Элементы.ОтработанноеВремя.ТекущиеДанные["День"+СтрокаИндексДня]=ТекстЯчейки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПередУдалением(Элемент, Отказ)
	
	Если Найти(Элемент.ТекущийЭлемент.Имя, "День") = 1 Тогда
		ТекстВопроса = "Вы действительно хотите удалить сотрудника из табеля?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Отказ = Ответ <> КодВозвратаДиалога.Да;
	КонецЕсли;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ ОтработанноеВрем

&НаКлиенте
Процедура ОтработанноеВремяСотрудникПриИзменении(Элемент)
	
	ОтработанноеВремяСотрудникПриИзмененииСервер(Элементы.ОтработанноеВремя.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяДеньОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВводаДанныхВЯчейку(Элементы.ОтработанноеВремя.ТекущиеДанные, Текст, ДанныеВыбора, СтандартнаяОбработка, Сред(Элементы.ОтработанноеВремя.ТекущийЭлемент.Имя, 22));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура("ДляВыбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора", Истина,НачалоМесяца(Объект.ДатаНачалаПериода),Истина,ПолучитьВидДоговора());
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,Элемент);
	
КонецПроцедуры










