
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим,Док)

	Запрос = Новый Запрос;
    Если не ЗначениеЗаполнено(Док) тогда
		 Возврат Неопределено;
	КонецЕсли;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Док);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Док.Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.ФизЛицо.Наименование КАК НаименованиеФизлица,
		|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК Должность,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.ФизЛицо КАК Физлицо,
		|	ОтветственныеЛицаСрезПоследних.Учреждение КАК Организация
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(
		|			&ДатаДокумента,
		|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации)) КАК ОтветственныеЛицаСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия, ОтветственныеЛицаСрезПоследних.НаименованиеФизлица) КАК НаименованиеОтветственногоЛица,
		|	ОтветственныеЛицаСрезПоследних.Должность,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.Физлицо,
		|	ОтветственныеЛицаСрезПоследних.Организация КАК Организация
		|ПОМЕСТИТЬ ВТДанныеОбОтветственномЛице
		|ИЗ
		|	ВТОтветственныеЛица КАК ОтветственныеЛицаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						Ответственные.Физлицо
		|					ИЗ
		|						ВТОтветственныеЛица КАК Ответственные)) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизации.Номер КАК НомерДок,
		|	ОтпускаОрганизации.Дата КАК ДатаДок,
		|	ОтпускаОрганизации.Организация.ОКПО КАК КодПоОКПО,
		|	ВЫРАЗИТЬ(ОтпускаОрганизации.Организация.ПолноеНаименование КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ВТДанныеОбОтветственномЛице.Должность КАК ДолжностьРуководителя,
		|	ВТДанныеОбОтветственномЛице.НаименованиеОтветственногоЛица КАК ФИОРуководителя,
		|	ОтпускаОрганизации.Организация.Префикс,
		|	ОтпускаОрганизации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.удуОтпускаОрганизаций КАК ОтпускаОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ВТДанныеОбОтветственномЛице
		|		ПО ОтпускаОрганизации.Организация = ВТДанныеОбОтветственномЛице.Организация
		|ГДЕ
		|	ОтпускаОрганизации.Ссылка = &ТекущийДокумент";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка,
		|	ОтпускаОрганизацийРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Код,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Наименование,
		|	ОтпускаОрганизацийРаботникиОрганизации.ОсвобождатьСтавку,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания,
		|	ОтпускаОрганизацийРаботникиОрганизации.ПричинаОтсутствия,
		|	ОтпускаОрганизацийРаботникиОрганизации.ВидДополнительногоОтпуска,
		|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС,
		|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп,
		|	ОтпускаОрганизацийРаботникиОрганизации.Основание
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.удуОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
		|ГДЕ
		|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &ТекущийДокумент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДат.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|	РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование
		|ПОМЕСТИТЬ ВТДанныеОРаботникахОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиВнутри.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		|		ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		РегистрСведений.удуРаботникиОрганизаций КАК РаботникиВнутри
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ОтпускаОрганизаций
		|			ПО РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
		|				И РаботникиВнутри.Период <= ОтпускаОрганизаций.ДатаНачала
		|	ГДЕ
		|		РаботникиВнутри.Сотрудник В
		|				(ВЫБРАТЬ
		|					ОтпускаОрганизацииРаботники.Сотрудник
		|				ИЗ
		|					ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОтпускаОрганизаций.НомерСтроки,
		|		РаботникиВнутри.Сотрудник) КАК СписокДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|			И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ПОМЕСТИТЬ ВТФИОФизЛиц
		|ИЗ
		|	РегистрСведений.удуФИОФизЛиц.СрезПоследних(
		|			&ДатаДокумента,
		|			ФизЛицо В
		|				(ВЫБРАТЬ
		|					ОтпускаОрганизацииРаботники.ФизЛицо
		|				ИЗ
		|					ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники)) КАК ФИОФизЛицСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДниОсновногоОтпуска
		|ИЗ
		|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.удуВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ВЫБОР
		|				КОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		|			КОНЕЦ)
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаОрганизацииРаботники.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДниВсего
		|ИЗ
		|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.удуВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ОтпускаОрганизацииРаботники.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаОрганизацииРаботники.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.СотрудникНаименование) КАК Работник,
		|	ОтпускаОрганизацииРаботники.ФизЛицо.Пол,
		|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование КАК ПодразделениеРаботника,
		|	ДанныеОРаботникахОрганизации.ДолжностьНаименование КАК Должность,
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацииРаботники.ДатаНачала КАК ДатаНачалаВсего,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ОтпускаОрганизацииРаботники.РабочийГодПо,
		|	ОтпускаОрганизацииРаботники.РабочийГодС,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		|	ОтпускаОрганизацииРаботники.Основание,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска.Наименование
		|		ИНАЧЕ ОтпускаОрганизацииРаботники.ПричинаОтсутствия
		|	КОНЕЦ КАК ВидДопОтпуска,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|			ТОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|					ТОГДА """"
		|				ИНАЧЕ ОтпускаОрганизацииРаботники.ДатаНачала
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаСДоп,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|				ИЛИ ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|			ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаПоДоп,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|								ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		|							ИНАЧЕ """"
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|								ТОГДА ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		|							ИНАЧЕ """"
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА РАЗНОСТЬДАТ(ОтпускаОрганизацииРаботники.ДатаНачала, ОтпускаОрганизацииРаботники.ДатаОкончания, ДЕНЬ) + 1
		|		ИНАЧЕ ЕСТЬNULL(КалендарьДнейВсего.КалендарныеДни, 0)
		|	КОНЕЦ КАК ПродолжительностьВсего,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КалендарьОсновногоОтпуска.КалендарныеДни, 0)
		|	КОНЕЦ КАК Продолжительность,
		|	ОтпускаОрганизацииРаботники.СотрудникКод КАК ТабельныйНомер
		|ИЗ
		|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРаботникахОрганизации КАК ДанныеОРаботникахОрганизации
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниВсего КАК КалендарьДнейВсего
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьДнейВсего.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниОсновногоОтпуска КАК КалендарьОсновногоОтпуска
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьОсновногоОтпуска.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОФизЛиц КАК ФИОФизЛиц
		|		ПО ОтпускаОрганизацииРаботники.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма
	//
Функция СформироватьПечатнуюФормуТ6а(МассивОбъектов, ОбъектыПечати,ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ПервыйДокумент = Истина;
	
	Для Каждого  ДокументДляПечати из МассивОбъектов цикл
	
	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента",ДокументДляПечати).Выбрать();
	ВыборкаРаботники= СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента",ДокументДляПечати).Выбрать();
	
	// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически.
	Макет = УправлениеПечатью.ПолучитьМакет(ИмяМакета);
	
	Если Не ПервыйДокумент Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ПервыйДокумент    = Ложь;
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
	// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если удуОбщегоНазначенияСервер.Просклонять(ВыборкаРаботники.Работник, 3, РезультатСклонения, ВыборкаРаботники.ФизЛицоПол) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания), ВыборкаРаботники.Продолжительность, "");
		ОбластьМакета.Параметры.ПродолжительностьВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего), ВыборкаРаботники.ПродолжительностьВсего, "");
		ОбластьМакета.Параметры.ВидДопОтпуска = Строка(ВыборкаРаботники.ВидДопОтпуска) + ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп), "; " + (ВыборкаРаботники.ПродолжительностьВсего - ВыборкаРаботники.Продолжительность), "");
				
		// Уберем из табельного номера префикс.
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапкиИПодвала.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции 

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция СформироватьПечатнуюФормуТ6(МассивОбъектов, ОбъектыПечати,ИмяМакета)
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	ПервыйДокумент = Истина;
	
	Для Каждого  ДокументДляПечати из МассивОбъектов цикл
	// Получаем данные для печати.
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента",ДокументДляПечати).Выбрать();
	ВыборкаРаботники= СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента",ДокументДляПечати).Выбрать();
			
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически.
		Макет = УправлениеПечатью.ПолучитьМакет(ИмяМакета);
				
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
        НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	// Запоминаем области макета.
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// Выводим данные о руководителях организации.
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		
		ОбластьМакетаПодвал.Параметры.ДатаДок = удуФормированиеПечатныхФорм.ПустаяДатаВПечатнойФорме();
		
	КонецЕсли;
	
	НомерФормы = 0;
	ПечататьПостфикс = ВыборкаРаботники.Количество() > 1;
	// Начинаем формировать выходной документ.
	Пока ВыборкаРаботники.Следующий() Цикл
		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ПечататьПостфикс Тогда
			НомерФормы = НомерФормы + 1;
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + НомерФормы;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если удуОбщегоНазначенияСервер.Просклонять(ВыборкаРаботники.Работник, 3, РезультатСклонения, ВыборкаРаботники.ФизЛицоПол) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.Продолжительность,"");
		ОбластьМакета.Параметры.ПродолжительностьВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего),ВыборкаРаботники.ПродолжительностьВсего,"");
		ОбластьМакета.Параметры.ПродолжительностьДоп = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаСДоп) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп),ВыборкаРаботники.ПродолжительностьВсего - ВыборкаРаботники.Продолжительность,"");
		ОбластьМакета.Параметры.ВидДопОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДопОтпуска),"" + ВыборкаРаботники.ВидДопОтпуска + "; ","") + ВыборкаРаботники.Основание;
		
		
		ПустоеЧисло    = "       ";
		ПустыеМесяцГод = "                          г.";
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаНачала, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаНачалаЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаНачалаМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаОкончания, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаОкончанияЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаОкончанияМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");

		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаСДоп, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаСДопЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаСДоп), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаСДопМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаСДоп), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаПоДоп, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаПоДопЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаПоДопМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");

		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаНачалаВсего, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаНачалаВсегоЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаНачалаВсегоМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаОкончанияВсего, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаОкончанияВсегоЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаОкончанияВсегоМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.РабочийГодС, "ДЛФ=DD");
		Если ЗначениеЗаполнено(ВыборкаРаботники.РабочийГодС) Тогда
			ОбластьМакета.Параметры.РабочийГодС    = """" +СокрЛП(Лев(ПредставлениеДатыДок,2)) + """  " + СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2));
		Иначе
			ОбластьМакета.Параметры.РабочийГодС    = """     ""               20   г." ;
		КонецЕсли; 
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.РабочийГодПо, "ДЛФ=DD");
		Если ЗначениеЗаполнено(ВыборкаРаботники.РабочийГодПо) Тогда
			ОбластьМакета.Параметры.РабочийГодПо    = """" +СокрЛП(Лев(ПредставлениеДатыДок,2)) + """  " + СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2));
		Иначе
			ОбластьМакета.Параметры.РабочийГодПо    = """     ""               20   г." ;
		КонецЕсли; 

		// Уберем из табельного номера префикс.
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;

		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;

	// Если не было ни одного работника - выводим пустой бланк.
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции 





 // Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТ6а") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьТ6а",
			"Форма Т-6а",
			СформироватьПечатнуюФормуТ6а(МассивОбъектов, ОбъектыПечати,"Документ.удуОтпускаОрганизаций.ПФ_MXL_Т6а_от_5_1_2004")
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТ6") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьТ6",
			"Форма Т-6",
			СформироватьПечатнуюФормуТ6(МассивОбъектов, ОбъектыПечати,"Документ.удуОтпускаОрганизаций.ПФ_MXL_Т6_от_5_1_2004")
		);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()
