
&НаКлиенте
Перем АдресВХранилище;








////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбработатьПодбор() Экспорт
	
	Сотрудник=ПолучитьИзХранилища(АдресВХранилище);
	Если ЗначениеЗаполнено(Сотрудник) тогда
		СтрокиРаботников = Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Если СтрокиРаботников.Количество() > 0 Тогда
			Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
			Возврат;
		КонецЕсли;
		СтрокаТЧ=Объект.РаботникиОрганизации.Добавить();
		СтрокаТЧ.Сотрудник=Сотрудник;
		ЗаполнитьСтрокиДопЗначениями(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПолучитьВидДоговора()
	
	Возврат Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормыДокументаСервер()
	
	 удуОбщегоНазначенияСервер.УстановитьЗаголовокФормыДокумента(, Объект, ЭтаФорма);
	
 КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилище(ДанныеДляХранилища=Неопределено) 
	
	ДанныеДляХранилища=?(ДанныеДляХранилища=Неопределено,Справочники.удуСотрудникиОрганизаций.ПустаяСсылка(),ДанныеДляХранилища);
	Возврат ПоместитьВоВременноеХранилище(ДанныеДляХранилища, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьИзХранилища(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
		
КонецФункции
 
&НаСервере
Процедура ЗаполнитьСтрокиДопЗначениями(Индекс=Неопределено)

	Если Индекс=Неопределено тогда
		Для Каждого СтрокаТЧ из Объект.РаботникиОрганизации цикл
			ЗаполнитьСтрокиДопЗначениями(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЦикла;
	Иначе 
	СтрокаТЧ=Объект.РаботникиОрганизации.НайтиПоИдентификатору(Индекс);	
	СтрокаТЧ.ФизЛицо=СтрокаТЧ.Сотрудник.ФизЛицо;
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПричинаОтсутствия) Тогда
			СтрокаТЧ.ПричинаОтсутствия = НоваяПричинаОтсутствия();
	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	удуОбщегоНазначенияСервер.ПроверитьНомерДокумента(Объект, мТекущаяДатаДокумента);
	
КонецПроцедуры

&НаСервере
Функция НоваяПричинаОтсутствия()
	
	Возврат Перечисления.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный;

КонецФункции

&НаСервере
// Процедура рассчитывает период работы, за который начисляется основной отпуск
//
Процедура ОпределитьРабочийГодОсновногоОтпуска(Индекс)
	
	мДлинаСуток = 86400;
	
	ДанныеСтроки=Объект.РаботникиОрганизации.НайтиПоИдентификатору(Индекс);
	Если ДанныеСтроки.Сотрудник.Пустая()
		ИЛИ Не ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала)
		ИЛИ ДанныеСтроки.ПричинаОтсутствия <> Перечисления.удуПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОкончания = ?(ЗначениеЗаполнено(ДанныеСтроки.ДатаНачалаДоп), ДанныеСтроки.ДатаНачалаДоп - мДлинаСуток, ДанныеСтроки.ДатаОкончания);
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСервер(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Команда = "";
		Если ВыбранноеЗначение.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			СписокРаботников=ПолучитьИзХранилища(ВыбранноеЗначение.АдресДанных);
			Объект.РаботникиОрганизации.Загрузить(СписокРаботников);
			ЗаполнитьСтрокиДопЗначениями();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		удуДокументыКадровогоУчета.ЗаполнитьШапкуДокумента(Объект);
	КонецЕсли;
	
	
	// списки отпусков
	СписокОтпусков = удуДокументыКадровогоУчета.ПолучитьСписокОтпусковОрганизации();
	Элементы.РаботникиОрганизацииПричинаОтсутствия.СписокВыбора.ЗагрузитьЗначения(СписокОтпусков.ВыгрузитьЗначения());
	Элементы.РаботникиОрганизацииПричинаОтсутствия.ВысотаСпискаВыбора = СписокОтпусков.Количество();
	Элементы.РаботникиОрганизацииПричинаОтсутствия.ШиринаСпискаВыбора = 30;
	
	
	СписокДопОтпусков = удуДокументыКадровогоУчета.ПолучитьСписокДопОтпусковОрганизации();
	
	Если СписокДопОтпусков.Количество()=0 Тогда // дополнительных отпусков не предоставляют - колонку показывать не будем
		Элементы.РаботникиОрганизацииВидДополнительногоОтпуска.Видимость = Ложь;
		Элементы.РаботникиОрганизацииДатаНачалаДоп.Видимость = Ложь;
	Иначе
		Элементы.РаботникиОрганизацииВидДополнительногоОтпуска.СписокВыбора.ЗагрузитьЗначения(СписокДопОтпусков.ВыгрузитьЗначения());
		Элементы.РаботникиОрганизацииВидДополнительногоОтпуска.ВысотаСпискаВыбора = СписокДопОтпусков.Количество();
		Элементы.РаботникиОрганизацииВидДополнительногоОтпуска.ШиринаСпискаВыбора = 30;
		Элементы.РаботникиОрганизацииВидДополнительногоОтпуска.Видимость = Истина;
		Элементы.РаботникиОрганизацииДатаНачалаДоп.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормыДокументаСервер();
	мТекущаяДатаДокумента	= Объект.Дата;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораСервер(ВыбранноеЗначение);
	Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокументаСервер();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоГрафикуОтпусков(Команда)
	
	Если Объект.Организация.Пустая() Тогда
		Предупреждение("Укажите организацию!");
		Возврат
	КонецЕсли;
	
	Если Объект.РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискомСотрудников(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Предупреждение("Не указана организация, отобрать список сотрудников невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Объект.РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	
	Структура=Новый Структура;
	Структура.Вставить("ДатаАктуальности",Объект.Дата);
    Структура.Вставить("Организация",Объект.Организация);	
	
	АдресВХранилище = ПоместитьВХранилище(Структура);
	ПараметрыФормы = Новый Структура("АдресДанныхНачальногоЗаполнения", АдресВХранилище);
	ФормаОтбора = ПолучитьФорму("Обработка.удуФормированиеСпискаРаботников.Форма.ФормаНастройки",ПараметрыФормы,ЭтаФорма);
	ФормаОтбора.ОткрытьМодально();

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	АдресВХранилище = ПоместитьВХранилище();
	ПараметрыПодбора = Новый Структура("ЭтоПодбор,АдресПодбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора", Истина, АдресВХранилище,Объект.Дата,Истина,ПолучитьВидДоговора());
	
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,ЭтаФорма);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер="";
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ВведеннаяСтрока = Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ВведеннаяСтрока.ПричинаОтсутствия) Тогда
			ВведеннаяСтрока.ПричинаОтсутствия = НоваяПричинаОтсутствия();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущаяСтрока;
	ЗаполнитьСтрокиДопЗначениями(ТекущаяСтрока);	
	ОпределитьРабочийГодОсновногоОтпуска(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура("ДляВыбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора", Истина,Объект.Дата,Истина,ПолучитьВидДоговора());
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПричинаОтсутствияПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.РаботникиОрганизации.ТекущиеДанные;
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ДанныеСтроки.ПричинаОтсутствия <> НоваяПричинаОтсутствия() Тогда
		ДанныеСтроки.ВидДополнительногоОтпуска	= "";
		ДанныеСтроки.ДатаНачалаДоп				= "";
		ДанныеСтроки.РабочийГодС				= "";
		ДанныеСтроки.РабочийГодПо				= "";
		
	Иначе
		ОпределитьРабочийГодОсновногоОтпуска(ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииДатаНачалаДопПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущаяСтрока;
	
	ОпределитьРабочийГодОсновногоОтпуска(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииРабочийГодСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущаяСтрока;
	
	ОпределитьРабочийГодОсновногоОтпуска(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииРабочийГодПоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущаяСтрока;
	
	ОпределитьРабочийГодОсновногоОтпуска(ТекущаяСтрока);
	
КонецПроцедуры














