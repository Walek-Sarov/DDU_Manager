Функция ПроверитьНаличиеМестВУказаннойГруппе()	
	Если Не Группа.БезОграниченияВместительности Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок
		               |ИЗ
		               |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(
		               |			,
		               |			Группа = &Группа
		               |				И Учреждение = &Учреждение
		               |				И СостояниеУчетаВГруппе = &СостоитНаУчете) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних";
					   
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Учреждение", Учреждение);
		Запрос.УстановитьПараметр("Группа", Группа);
		Запрос.УстановитьПараметр("СостоитНаУчете", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
		
		КоличествоИмеющихсяДетей = Запрос.Выполнить().Выгрузить().Количество();
		
		Если (КоличествоИмеющихсяДетей + ТабличнаяЧастьЗачисление.Количество()) > Группа.Вместительность Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Превышена допустимая вместительность группы!" + Символы.ПС + 
			"Допустимая вместительность группы составляет: " + Строка(Группа.Вместительность) + " детей" + Символы.ПС + 
			?(КоличествоИмеющихсяДетей > Группа.Вместительность, "", "Количество свободных (оставшихся) мест: " + Строка(Группа.Вместительность - КоличествоИмеющихсяДетей) + Символы.ПС) + 
			"Количество зачисляемых детей: " + Строка(ТабличнаяЧастьЗачисление.Количество()) + Символы.ПС + 
			"Для принудительного проведения документа установитье флаг ""Отключить контроль вместимости группы""'");			
			Сообщение.Поле = НСтр("ru = 'ТабличнаяЧастьЗачисление'");
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();			
			Возврат ?(ОтключитьКонтрольВместимости, Ложь, Истина);
		Иначе
			Возврат Ложь;
		КонецЕсли;		
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции


Процедура ОбработкаПроведения(Отказ, Режим)
	// сначала проверим превышение вместительности группы
	Отказ = ПроверитьНаличиеМестВУказаннойГруппе();
	
	// теперь для каждого ребенка проверим нахождение в других группах
	Если Не Отказ Тогда
		СписокДетей = Новый СписокЗначений;
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьЗачисление Цикл
			СписокДетей.Добавить(СтрокаТабличнойЧасти.ОснованиеЗачисления.Ребенок);
		КонецЦикла;
		
		Текстзапроса = "ВЫБРАТЬ
		               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Группа,
		               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе,
		               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.ОснованиеЗачисления,
		               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок
		               |ИЗ
		               |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(&ДатаЗачисления, ) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
		               |ГДЕ
		               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок В(&СписокДетей)
		               |	И удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Группа <> &ТекущаяГруппа";
					   
		Запрос = Новый Запрос(Текстзапроса);
		Запрос.УстановитьПараметр("ДатаЗачисления", ДатаФактическогоЗачисления);
		Запрос.УстановитьПараметр("СписокДетей", СписокДетей);
		Запрос.УстановитьПараметр("ТекущаяГруппа", Группа);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();

		Если РезультатЗапроса.Количество() > 0 Тогда 
			Для Каждого СтрокаРезультатЗапроса Из РезультатЗапроса Цикл
				Если СтрокаРезультатЗапроса.СостояниеУчетаВГруппе = Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу Тогда
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = НСтр("ru = 'Ребенок: " + СокрЛП(СтрокаРезультатЗапроса.Ребенок.Наименование) + " уже включен в группу " + СокрЛП(СтрокаРезультатЗапроса.Группа.Наименование) + " на основании: " + СокрЛП(СтрокаРезультатЗапроса.ОснованиеЗачисления) + "'");
					НомерСтрокиДокумента = Строка(ТабличнаяЧастьЗачисление.Найти(СтрокаРезультатЗапроса.Ребенок).НомерСтроки - 1);
					Сообщение.Поле = НСтр("ru = 'ТабличнаяЧастьЗачисление[" + Формат(НомерСтрокиДокумента, "ЧГ=0") + "].Ребенок'");
					Сообщение.УстановитьДанные(ЭтотОбъект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;						
		КонецЕсли;	
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.удуСведенияОЗачисленииРебенкаВГруппу.Записывать = Истина;
		Для Каждого ТекСтрокаТабличнаяЧастьЗачисление Из ТабличнаяЧастьЗачисление Цикл
			// регистр удуСведенияОЗачисленииРебенкаВГруппу 
			Движение = Движения.удуСведенияОЗачисленииРебенкаВГруппу.Добавить();
			Движение.Период = ДатаФактическогоЗачисления;
			Движение.Учреждение = Учреждение;
			Движение.Ребенок = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.Ребенок;
			Движение.Группа = Группа;
			Движение.ОснованиеЗачисления = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления;
			Движение.СостояниеУчетаВГруппе = Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу;
			
			// Изменяем признак воспитанника в личном деле ребенка
			РебенокОбъект = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.Ребенок.ПолучитьОбъект();
			РебенокОбъект.СтатусРебенка = Перечисления.удуСтатусРебенкаВДОУ.Воспитанник;
			РебенокОбъект.Записать();
			
			// Изменяем признак отработки договора зачисления
			ДоговорОбъект = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.ПолучитьОбъект();
			ДоговорОбъект.ПроизошлоЗачисление = Истина;
			ДоговорОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.ЗаявкаОснование) Тогда
				// Изменяем признак отработки завяки на зачисление
				ЗаявкаОбъект = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.ЗаявкаОснование.ПолучитьОбъект();
				ЗаявкаОбъект.ПризнакЗачисления = Истина;
				ЗаявкаОбъект.ГруппаПоФактуЗачисления = Группа;
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Вставить содержимое обработчика.
	Для Каждого ТекСтрокаТабличнаяЧастьЗачисление Из ТабличнаяЧастьЗачисление Цикл		
		// Изменяем признак воспитанника в личном деле ребенка
		РебенокОбъект = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.Ребенок.ПолучитьОбъект();
		РебенокОбъект.СтатусРебенка = Перечисления.удуСтатусРебенкаВДОУ.Кандидат;
		РебенокОбъект.Записать();
		
		// Изменяем признак отработки договора зачисления
		ДоговорОбъект = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.ПолучитьОбъект();
		ДоговорОбъект.ПроизошлоЗачисление = Ложь;
		ДоговорОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		// Изменяем признак отработки завяки на зачисление
		Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.ЗаявкаОснование) Тогда
			ЗаявкаОбъект = ТекСтрокаТабличнаяЧастьЗачисление.ОснованиеЗачисления.ЗаявкаОснование.ПолучитьОбъект();
			ЗаявкаОбъект.ПризнакЗачисления = Ложь;
			ЗаявкаОбъект.ГруппаПоФактуЗачисления = Справочники.удуГруппыУчреждения.ПустаяСсылка();
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
