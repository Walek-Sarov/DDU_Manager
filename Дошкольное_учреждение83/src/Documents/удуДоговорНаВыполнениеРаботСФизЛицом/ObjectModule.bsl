

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Возвращаемое значение:
//	Результат запроса
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамОрганизация",	ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("парамСсылка",	Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.Организация = &парамОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.удуВидыДоговоровСФизЛицами.Подряда)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаСотрудникНеДоговорник,
	|	Договор.Организация
	|ИЗ
	|	Документ.удуДоговорНаВыполнениеРаботСФизЛицом КАК Договор
	|ГДЕ
	|	Договор.Ссылка = &парамСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке =Заголовок;
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			Отказ=Истина;	
			ТекстСообщения =СтрокаНачалаСообщенияОбОшибке+" Не указана организация, в которую принимается сотрудник!"; 		
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=ТекстСообщения;
			СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке+" Не указан сотрудник, с которым заключается договор!";
		СообщениеПользователю.Сообщить();
	Иначе 
		Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке+" Указан сотрудник другой организации!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ОшибкаСотрудникНеДоговорник Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке+" Указан сотрудник, не являющийся договорником!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	КонецЕсли;
		
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВидРасчета) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке+" Не указано начисление!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// ХарактерОплаты
	Если НЕ ЗначениеЗаполнено(ХарактерОплаты) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке+" Не указан порядок оплаты!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// ДатаНачала
	Если Не ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке+" Не указаны даты договора!";
		СообщениеПользователю.Сообщить();
	ИначеЕсли ДатаНачала > ДатаОкончания Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке+" Неверно указаны даты договора!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДвиженияРегистров()
	
	// Движения по регистру "Плановые начисления сотрудников организаций"
		Движение = Движения.удуПлановыеНачисленияРаботниковОрганизаций.Добавить();
		
		// Свойства
		Если ХарактерОплаты = Перечисления.удуХарактерВыплатыПоДоговору.Ежемесячно Тогда
			Движение.Период			= ДатаНачала;
		Иначе
			Движение.Период			= Макс(НачалоМесяца(ДатаОкончания),ДатаНачала);
		КонецЕсли;
				
		// Измерения
		Движение.Сотрудник					= Сотрудник;
		Движение.Организация				= Организация;
		Движение.ВидРасчетаИзмерение        = ВидРасчета;

		
		// Ресурсы
		Движение.ВидРасчета		= ВидРасчета;
		Движение.Действие		= Перечисления.удуВидыДействияСНачислением.Начать;
		Движение.Показатель1	= СуммаЗаРаботу;
		
		// Реквизиты
		Движение.ПервичныйДокумент			= Ссылка;

		Если ЗначениеЗаполнено(ДатаОкончания) Тогда 
			ДвижениеДляОкончания = Движения.удуПлановыеНачисленияРаботниковОрганизаций.Добавить();
			ДвижениеДляОкончания.Сотрудник					= Сотрудник;
			ДвижениеДляОкончания.Организация				= Организация;
			ДвижениеДляОкончания.ВидРасчетаИзмерение        = ВидРасчета;
			ДвижениеДляОкончания.Период			= ДатаОкончания;
			
			// Ресурсы
			ДвижениеДляОкончания.ВидРасчета		= ВидРасчета;
			ДвижениеДляОкончания.Действие		= Перечисления.удуВидыДействияСНачислением.Прекратить;
			ДвижениеДляОкончания.Показатель1	= 0;
			
			// Реквизиты
			ДвижениеДляОкончания.ПервичныйДокумент			= Ссылка;
			
			
			
		КонецЕсли;
		
КонецПроцедуры




///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = удуОбщегоНазначенияСервер.ПредставлениеДокументаПриПроведении(Ссылка);
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ДвиженияРегистров();
			
		КонецЕсли; 
	КонецЕсли;


КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	 Если ДанныеЗаполнения=Неопределено тогда
		 Возврат;
	 КонецЕсли;

	 Если ДанныеЗаполнения.ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
				Возврат;
	КонецЕсли;
	 
	 ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	   ЭтотОбъект.Сотрудник=ДанныеЗаполнения;
		ВидРасчета = ПланыВидовРасчета.удуДополнительныеНачисленияОрганизаций.ДоговорПодряда;
	
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	удуОбщегоНазначенияСервер.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
КонецПроцедуры

