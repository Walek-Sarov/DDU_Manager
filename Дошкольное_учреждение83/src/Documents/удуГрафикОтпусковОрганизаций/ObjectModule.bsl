// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикОтпусковОрганизаций.Дата,
	|	ГрафикОтпусковОрганизаций.Организация,
	|	ГрафикОтпусковОрганизаций.Ссылка
	|ИЗ
	|	Документ.удуГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизаций
	|ГДЕ
	|	ГрафикОтпусковОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоРаботникиОрганизации()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",	Организация);

	// Описание текста запроса:
	// 1. Выборка "ПерваяТаблица": 
	//		Представляет собой вложенный запрос, в котором:  
	//			- в выборке "РаботникиДокумента" выбираются строки документа
	//			- из основной таблицы регистра (выборка "ГрафикОтпусковОрганизации") 
	//			  присоединяются даты движений, непосредственно предшествующих
	//			  датам ДатаОкончания из строк документа
	// 2. Выборка "ГрафикОтпусковОрганизации": 
	//		Из основной таблицы регистра выбираются значения ресурсов на полученные  
	//		в первой выборке даты
	// 3. Выборка "ВтораяТаблица": 
	//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
	//		для одного работника
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Сотрудник,
	|	ПерваяТаблица.ДатаНачала,
	|	ПерваяТаблица.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПерваяТаблица.Сотрудник.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ГрафикОтпусковОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.удуТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|				ИЛИ ПерваяТаблица.ДатаЗначения >= ПерваяТаблица.ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ КАК ПроверяемоеЗначение,
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ГрафикОтпусковОрганизации.Период) КАК ДатаЗначения,
	|		РаботникиДокумента.Сотрудник КАК Сотрудник,
	|		РаботникиДокумента.ДатаОкончания КАК ДатаОкончания,
	|		РаботникиДокумента.ДатаНачала КАК ДатаНачала,
	|		РаботникиДокумента.Ссылка КАК Ссылка,
	|		РаботникиДокумента.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.удуГрафикОтпусковОрганизаций.РаботникиОрганизации КАК РаботникиДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	|			ПО РаботникиДокумента.ДатаОкончания > ГрафикОтпусковОрганизации.Период
	|				И РаботникиДокумента.Сотрудник = ГрафикОтпусковОрганизации.Сотрудник
	|	ГДЕ
	|		РаботникиДокумента.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиДокумента.Сотрудник,
	|		РаботникиДокумента.ДатаОкончания,
	|		РаботникиДокумента.ДатаНачала,
	|		РаботникиДокумента.Ссылка,
	|		РаботникиДокумента.НомерСтроки) КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	|		ПО ПерваяТаблица.ДатаЗначения = ГрафикОтпусковОрганизации.Период
	|			И ПерваяТаблица.Сотрудник = ГрафикОтпусковОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ВтораяТаблица
	|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И (ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаНачала
	|					И ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаОкончания
	|					И ВтораяТаблица.ДатаОкончания <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаНачала
	|					И ПерваяТаблица.ДатаОкончания <= ВтораяТаблица.ДатаОкончания)
	|			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.НомерСтроки,
	|	ГрафикОтпусковОрганизации.Состояние,
	|	ПерваяТаблица.ДатаЗначения,
	|	ПерваяТаблица.ДатаНачала,
	|	ПерваяТаблица.ДатаОкончания,
	|	ПерваяТаблица.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПерваяТаблица.Сотрудник.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = Заголовок+Символы.ВК+ "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		// ДатаНачала
		НетДатыС = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыС Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

		// ДатаОкончания
		НетДатыПо = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания);
		Если НетДатыПо Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания отпуска!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если НетСотрудника ИЛИ НетДатыС ИЛИ НетДатыПо Тогда
		Возврат;
		КонецЕсли;
		
		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!";
			СообщениеПользователю.Сообщить();
	 	КонецЕсли;

		

		Если ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!";
			СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение = "Нельзя" Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " на указанный период ранее уже был запланирован другой отпуск!";
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке;
		СообщениеПользователю.Сообщить();
	КонецЕсли;


		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
			Отказ=Истина;
			СтрокаСообщениеОбОшибке = " в строке №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указан пересекающийся период отпуска!"; 
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров 
//											  сведений по которым надо проводить документ,
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

		// отразим начало
		Движение = Движения.удуГрафикОтпусковОрганизаций.Добавить();

		// Свойства
		Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаНачала;

		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация	= ВыборкаПоШапкеДокумента.Организация;

		// Ресурсы
		Движение.Состояние		= Перечисления.удуТипыПериодическихЗадачРаботника.ОтпускЕжегодный;
		
		// Реквизиты
		Движение.ДатаОкончания	= КонецДня(ВыборкаПоРаботникиОрганизации.ДатаОкончания);


		// и окончание отпуска
		Движение = Движения.удуГрафикОтпусковОрганизаций.Добавить();

		// Свойства
		Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаОкончания + 86400 - 1;

		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация	= ВыборкаПоШапкеДокумента.Организация;
		
		// Ресурсы
		Движение.Состояние		= Перечисления.удуТипыПериодическихЗадачРаботника.Свободен;
		
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()



Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = удуОбщегоНазначенияСервер.ПредставлениеДокументаПриПроведении(Ссылка);
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			Отказ=Истина;	
			ТекстСообщения ="Не указана организация!"; 	
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда

		    ВыборкаСтрокЗапроса = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
			
			// для проверки числа ставок
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл

				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли;
			КонецЦикла;
 		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	КраткийСоставДокумента = удуДокументыКадровогоУчета.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	удуОбщегоНазначенияСервер.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
КонецПроцедуры


