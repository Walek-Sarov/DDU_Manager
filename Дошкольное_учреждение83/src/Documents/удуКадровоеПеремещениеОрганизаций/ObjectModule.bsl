////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизаций.Дата,
	|	КадровоеПеремещениеОрганизаций.Организация,
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.удуКадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ПроверкаШтатногоРасписания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Организация",	Организация);	
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.НомерСтроки,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.ФизЛицо,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.ГрафикРаботы,
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.ОснованиеПеремещения
		|ПОМЕСТИТЬ ВТСтрокиДокумента
		|ИЗ
		|	Документ.удуКадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК удуКадровоеПеремещениеОрганизацийРаботникиОрганизации
		|ГДЕ
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	удуКадровоеПеремещениеОрганизацийРаботникиОрганизации.НомерСтроки";
		
		Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат[0].Количество = 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	ВТСтрокиДокумента КАК Док";	
	Иначе

		
	Если ПроверкаШтатногоРасписания Тогда	
		
		 // Определим самую раннюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц.
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала
			|ИЗ
			|	ВТСтрокиДокумента КАК КадровоеПеремещениеОрганизацииРаботникиОрганизации
			|ГДЕ
			|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДатаС = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала,Дата)
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ДатаНачала",	ДатаС);
			Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);

			ДанныеОСтавках = удуПроцедурыУправленияПерсоналом.ВременноСвободныеСтавкиСтрокШтатногоРасписания(РаботникиОрганизации.Выгрузить(,"НомерСтроки,ДатаНачала,ПодразделениеОрганизации,Должность"), Организация);
			Запрос.УстановитьПараметр("ДанныеОСтавках", ДанныеОСтавках);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокиДокумента.ОсвобожденныеСтавки,
			|	СтрокиДокумента.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ВТВременноОсвобожденныеСтавки
			|ИЗ
			|	&ДанныеОСтавках КАК СтрокиДокумента
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
			Запрос.Выполнить();

			//  Дополнительно используем выборки: 
			// 1. ШтатноеРасписаниеОрганизаций
			//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру ШтатноеРасписаниеОрганизаций на дату ДатаНачала
			//		для проверки наличия ставок в штатном расписании
			//		(Использует данные выборки "ДатыШтатногоРасписания")
			// 2. ЗанятоСтавок
			//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаНачала
			//		подсчитываем количество занятых ставок (с учетом "предшествующих" данных текущего документа)
			//

			ТекстЗапроса ="ВЫБРАТЬ
			              |	ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
			              |	ДатыПоследнихДвиженийРаботников.Период КАК Период,
			              |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
			              |	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
			              |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
			              |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
			              |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			              |	ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
			              |	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
			              |	ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
			              |ПОМЕСТИТЬ ВТДанныеПоРаботникуДоНазначения
			              |ИЗ
			              |	(ВЫБРАТЬ
			              |		МАКСИМУМ(Работники.Период) КАК Период,
			              |		ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			              |		ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
			              |		ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
			              |	ИЗ
			              |		ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			              |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК Работники
			              |			ПО ТЧРаботникиОрганизации.ДатаНачала >= Работники.Период
			              |				И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
			              |	
			              |	СГРУППИРОВАТЬ ПО
			              |		ТЧРаботникиОрганизации.НомерСтроки,
			              |		ТЧРаботникиОрганизации.ДатаНачала,
			              |		ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
			              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
			              |		ПО ДатыПоследнихДвиженийРаботников.Период = ДанныеПоРаботникуДоНазначения.Период
			              |			И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	НомерСтроки
			              |;
			              |
			              |////////////////////////////////////////////////////////////////////////////////
			              |ВЫБРАТЬ
			              |	МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
			              |	ШтатноеРасписание.КоличествоСтавок
			              |ПОМЕСТИТЬ ВТШтатноеРасписание
			              |ИЗ
			              |	(ВЫБРАТЬ
			              |		Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			              |		Работники.Должность КАК Должность,
			              |		Работники.НомерСтроки КАК НомерСтроки,
			              |		МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
			              |	ИЗ
			              |		ВТСтрокиДокумента КАК Работники
			              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
			              |			ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
			              |				И Работники.Должность = ШтатноеРасписание.Должность
			              |				И Работники.ДатаНачала >= ШтатноеРасписание.Период
			              |	
			              |	СГРУППИРОВАТЬ ПО
			              |		Работники.ПодразделениеОрганизации,
			              |		Работники.НомерСтроки,
			              |		Работники.Должность) КАК МаксимальныеПериодыШР
			              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
			              |		ПО МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
			              |			И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
			              |			И МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	НомерСтроки
			              |;
			              |
			              |////////////////////////////////////////////////////////////////////////////////
			              |ВЫБРАТЬ
			              |	Работники.НомерСтроки КАК НомерСтроки,
			              |	СУММА(ВЫБОР
			              |			КОГДА Вакансии.ВидДвижения = &Приход
			              |				ТОГДА Вакансии.КоличествоСтавок
			              |			ИНАЧЕ -Вакансии.КоличествоСтавок
			              |		КОНЕЦ) КАК КоличествоСтавок
			              |ПОМЕСТИТЬ ВТВакансии
			              |ИЗ
			              |	ВТСтрокиДокумента КАК Работники
			              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.удуЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
			              |		ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
			              |			И Работники.Должность = Вакансии.Должность
			              |			И Работники.ДатаНачала >= Вакансии.Период
			              |			И (Вакансии.Регистратор <> &ДокументСсылка)
			              |
			              |СГРУППИРОВАТЬ ПО
			              |	Работники.НомерСтроки
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	НомерСтроки
			              |;
			              |
			              |////////////////////////////////////////////////////////////////////////////////
			              |ВЫБРАТЬ
			              |	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
			              |	СУММА(ВЫБОР
			              |			КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала <= СтрокиДокумента.ДатаНачала
			              |				ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
			              |			ИНАЧЕ 0
			              |		КОНЕЦ - ВЫБОР
			              |			КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания < СтрокиДокумента.ДатаНачала
			              |					И КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
			              |				ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
			              |			ИНАЧЕ 0
			              |		КОНЕЦ) КАК КоличествоСтавок
			              |ПОМЕСТИТЬ ВТРанееЗанятоСтавок
			              |ИЗ
			              |	ВТСтрокиДокумента КАК СтрокиДокумента
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
			              |		ПО СтрокиДокумента.ПодразделениеОрганизации = КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
			              |			И СтрокиДокумента.Должность = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность
			              |			И СтрокиДокумента.НомерСтроки <> КадровоеПеремещениеОрганизацийРаботникиОрганизации.НомерСтроки
			              |
			              |СГРУППИРОВАТЬ ПО
			              |	СтрокиДокумента.НомерСтроки
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	НомерСтроки
			              |;
			              |
			              |////////////////////////////////////////////////////////////////////////////////
			              |ВЫБРАТЬ
			              |	Работники.НомерСтроки КАК НомерСтроки,
			              |	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			              |	Работники.Должность КАК Должность,
			              |	ИтогоЗанятоПоДолжности.КоличествоСтавок КАК КоличествоСтавок
			              |ПОМЕСТИТЬ ВТОсвобождаетсяСтавок
			              |ИЗ
			              |	ВТСтрокиДокумента КАК Работники
			              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			              |			ДанныеПоРаботникуДоНазначения.ПрежнееПодразделение КАК ПодразделениеОрганизации,
			              |			ДанныеПоРаботникуДоНазначения.ПрежняяДолжность КАК Должность,
			              |			СУММА(ДанныеПоРаботникуДоНазначения.ПрежняяСтавка) КАК КоличествоСтавок
			              |		ИЗ
			              |			ВТДанныеПоРаботникуДоНазначения КАК ДанныеПоРаботникуДоНазначения
			              |		
			              |		СГРУППИРОВАТЬ ПО
			              |			ДанныеПоРаботникуДоНазначения.ПрежнееПодразделение,
			              |			ДанныеПоРаботникуДоНазначения.ПрежняяДолжность) КАК ИтогоЗанятоПоДолжности
			              |		ПО Работники.Должность = ИтогоЗанятоПоДолжности.Должность
			              |			И Работники.ПодразделениеОрганизации = ИтогоЗанятоПоДолжности.ПодразделениеОрганизации
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	НомерСтроки
			              |;
			              |
			              |////////////////////////////////////////////////////////////////////////////////
			              |ВЫБРАТЬ
			              |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			              |	МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
			              |ПОМЕСТИТЬ ВТПересекающиесяСтроки
			              |ИЗ
			              |	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ТЧРаботникиОрганизации2
			              |		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
			              |			И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
			              |
			              |СГРУППИРОВАТЬ ПО
			              |	ТЧРаботникиОрганизации.НомерСтроки
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	НомерСтроки
			              |;
			              |
			              |////////////////////////////////////////////////////////////////////////////////
			              |ВЫБРАТЬ
			              |	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
			              |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			              |	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
			              |	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
			              |	ТЧРаботникиОрганизации.Сотрудник.НомерДоговора КАК СотрудникНомерДоговора,
			              |	ТЧРаботникиОрганизации.Сотрудник.ДатаДоговора КАК СотрудникДатаДоговора,
			              |	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
			              |	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
			              |	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			              |	ТЧРаботникиОрганизации.Должность КАК Должность,
			              |	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
			              |	ТЧРаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
			              |	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Организация КАК ОрганизацияПодразделения,
			              |	ВЫБОР
			              |		КОГДА (НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Организация = &Организация)
			              |			ТОГДА ИСТИНА
			              |		ИНАЧЕ ЛОЖЬ
			              |	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
			              |	ВЫБОР
			              |		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &Организация
			              |			ТОГДА ЛОЖЬ
			              |		ИНАЧЕ ИСТИНА
			              |	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
			              |	ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПрежняяПричина,
			              |	ДанныеПоРаботникуДоНазначения.ПрежнееПодразделение,
			              |	ДанныеПоРаботникуДоНазначения.ПрежняяДолжность,
			              |	ДанныеПоРаботникуДоНазначения.ПрежняяСтавка,
			              |	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
			              |	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
			              |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
			              |	NULL КАК КонфликтныйДокумент,
			              |	ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобожденныеСтавкиРаботников.ОсвобожденныеСтавки, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобождаетсяСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок,
			              |	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.ПодразделениеОрганизации) КАК ПодразделениеПредставление,
			              |	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.Должность)
			              |ИЗ
			              |	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоРаботникуДоНазначения КАК ДанныеПоРаботникуДоНазначения
			              |		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПересекающиесяСтроки КАК ПересекающиесяСтроки
			              |		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатноеРасписание КАК ШтатноеРасписание
			              |		ПО ТЧРаботникиОрганизации.НомерСтроки = ШтатноеРасписание.НомерСтроки
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВакансии КАК Вакансии
			              |		ПО ТЧРаботникиОрганизации.НомерСтроки = Вакансии.НомерСтроки
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееЗанятоСтавок КАК РанееЗанятоСтавок
			              |		ПО ТЧРаботникиОрганизации.НомерСтроки = РанееЗанятоСтавок.НомерСтроки
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсвобождаетсяСтавок КАК ОсвобождаетсяСтавок
			              |		ПО ТЧРаботникиОрганизации.НомерСтроки = ОсвобождаетсяСтавок.НомерСтроки
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВременноОсвобожденныеСтавки КАК ОсвобожденныеСтавкиРаботников
			              |		ПО ТЧРаботникиОрганизации.НомерСтроки = ОсвобожденныеСтавкиРаботников.НомерСтроки
			              |
			              |ОБЪЕДИНИТЬ ВСЕ
			              |
			              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			              |	""КонфликтныйДокумент"",
			              |	ТЧРаботникиОрганизации.НомерСтроки,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	Работники.Регистратор,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL,
			              |	NULL
			              |ИЗ
			              |	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК Работники
			              |		ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
			              |			И ТЧРаботникиОрганизации.Ссылка <> Работники.Регистратор
			              |			И (Работники.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ТЧРаботникиОрганизации.ДатаОкончания
			              |				ИЛИ Работники.Период = ТЧРаботникиОрганизации.ДатаНачала)
			              |
			              |УПОРЯДОЧИТЬ ПО
			              |	НомерСтроки";
			
	Иначе
		  ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                |	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		                |	ВТСтрокиДокумента.НомерСтроки КАК НомерСтроки,
		                |	ВТСтрокиДокумента.Сотрудник КАК Сотрудник,
		                |	ВТСтрокиДокумента.Сотрудник.Наименование,
		                |	ВТСтрокиДокумента.Сотрудник.НомерДоговора,
		                |	ВТСтрокиДокумента.Сотрудник.ДатаДоговора,
		                |	ВТСтрокиДокумента.ДатаНачала КАК ДатаНачала,
		                |	ВТСтрокиДокумента.ДатаОкончания КАК ДатаОкончания,
		                |	ВТСтрокиДокумента.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		                |	ВТСтрокиДокумента.Должность КАК Должность,
		                |	ВТСтрокиДокумента.ГрафикРаботы КАК ГрафикРаботы,
		                |	ВТСтрокиДокумента.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		                |	ВТСтрокиДокумента.Ссылка.Организация КАК ОрганизацияПодразделения,
		                |	ВЫБОР
		                |		КОГДА ВТСтрокиДокумента.Сотрудник.Организация = &Организация
		                |			ТОГДА ЛОЖЬ
		                |		ИНАЧЕ ИСТИНА
		                |	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		                |	ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПрежняяПричина,
		                |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
		                |	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
		                |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
		                |	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
		                |	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
		                |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		                |	NULL КАК КонфликтныйДокумент
		                |ИЗ
		                |	ВТСтрокиДокумента КАК ВТСтрокиДокумента
		                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                |			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		                |			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		                |			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		                |			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		                |			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
		                |			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
		                |			ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
		                |		ИЗ
		                |			(ВЫБРАТЬ
		                |				ВТСтрокиДокумента.НомерСтроки КАК НомерСтроки,
		                |				МАКСИМУМ(Работники.Период) КАК Период,
		                |				ВТСтрокиДокумента.Сотрудник КАК Сотрудник
		                |			ИЗ
		                |				РегистрСведений.удуРаботникиОрганизаций КАК Работники
		                |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ВТСтрокиДокумента
		                |					ПО Работники.Период <= ВТСтрокиДокумента.ДатаНачала
		                |						И (ВТСтрокиДокумента.Сотрудник = Работники.Сотрудник)
		                |			
		                |			СГРУППИРОВАТЬ ПО
		                |				ВТСтрокиДокумента.Сотрудник,
		                |				ВТСтрокиДокумента.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
		                |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		                |				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		                |					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
		                |		ПО ВТСтрокиДокумента.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
		                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                |			ВТСтрокиДокумента.НомерСтроки КАК НомерСтроки,
		                |			МИНИМУМ(ВТСтрокиДокумента1.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		                |		ИЗ
		                |			ВТСтрокиДокумента КАК ВТСтрокиДокумента
		                |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ВТСтрокиДокумента1
		                |				ПО ВТСтрокиДокумента.НомерСтроки < ВТСтрокиДокумента1.НомерСтроки
		                |					И ВТСтрокиДокумента.Сотрудник = ВТСтрокиДокумента1.Сотрудник
		                |		
		                |		СГРУППИРОВАТЬ ПО
		                |			ВТСтрокиДокумента.НомерСтроки) КАК ПересекающиесяСтроки
		                |		ПО ВТСтрокиДокумента.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ РАЗЛИЧНЫЕ
		                |	""КонфликтныйДокумент"",
		                |	ВТСтрокиДокумента.НомерСтроки,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	NULL,
		                |	Работники.Регистратор
		                |ИЗ
		                |	РегистрСведений.удуРаботникиОрганизаций КАК Работники
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ВТСтрокиДокумента
		                |		ПО (ВТСтрокиДокумента.Сотрудник = Работники.Сотрудник)
		                |			И (ВТСтрокиДокумента.Ссылка <> Работники.Регистратор)
		                |			И (Работники.Период МЕЖДУ ВТСтрокиДокумента.ДатаНачала И ВТСтрокиДокумента.ДатаОкончания
		                |				ИЛИ Работники.Период = ВТСтрокиДокумента.ДатаНачала)
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	НомерСтроки";
	КонецЕсли;
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;

	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачислениям(ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаНачала КАК Период,
	|	ТЧНачисления.Действие КАК Действие,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Прекратить)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать)
	|					КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Прекратить)
	|					ИНАЧЕ ТЧНачисления.Действие
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.ПустаяСсылка)
	|	КОНЕЦ КАК ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА """"
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.Показатель1 КАК Показатель1
	|ИЗ
	|	Документ.удуКадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуКадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧНачисления.Ссылка = ТЧРаботникиОрганизации.Ссылка
	|			И ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат удуДокументыКадровогоУчета.СформироватьЗапросПоПлановымНачислениям(Запрос.Выполнить().Выгрузить(), ПроверкаШтатногоРасписания);
	
КонецФункции // СформироватьЗапросПоНачисления()

Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок,ПроверкаШтатногоРасписания)
	
	СтрокаНачалаСообщенияОбОшибке = Заголовок+Символы.ВК+ "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		// ДатаНачала
		НетДатыНачала = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указана дата перемещения!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!";
			СообщениеПользователю.Сообщить();
	 	КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, куда переводится сотрудник!";
			СообщениеПользователю.Сообщить();
	 	КонецЕсли;

		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указана должность, на которую переводится сотрудник!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
        // Количество ставок
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых сотрудником ставок - в штатное расписание изменений внесено не будет!";
			СообщениеПользователю.Сообщить();
		ИначеЕсли Не НетДатыНачала И ПроверкаШтатногоРасписания Тогда
			Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
				Отказ=Истина;
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "В штатном расписании не предусмотрены ставки для перевода работника! Подразделение: " + 
					ВыборкаПоСтрокамДокумента.ПодразделениеПредставление + ", должность: " + ВыборкаПоСтрокамДокумента.ДолжностьПредставление;
				СообщениеПользователю.Сообщить();

			КонецЕсли;
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыНачала Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
					Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!";
			СообщениеПользователю.Сообщить();
	 	КонецЕсли;
		
		// ДатаОкончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
					Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "дата начала перемещения не может превышать дату окончания!";
			СообщениеПользователю.Сообщить();
	 	КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяПричина = NULL Тогда
			Отказ=Истина;
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке;
			СообщениеПользователю.Сообщить();
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяПричина = Перечисления.удуПричиныИзмененияСостояния.Увольнение Тогда	
			Отказ=Истина;
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке;
			СообщениеПользователю.Сообщить();
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			Отказ=Истина;
			СтрокаСообщениеОбОшибке = "одним документом допускается регистрировать только одно перемещение сотрудника - см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	
        Отказ=Истина;
		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
		СообщениеПользователю.Сообщить();
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Вид расчета
	НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
	Если НетВР И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.удуВидыДействияСНачислением.НеИзменять Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указано начисление!";
		СообщениеПользователю.Сообщить();
	Иначе
				
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания И НЕ ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указано действие!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.удуВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.удуВидыДействияСНачислением.Изменить Тогда
		СписокОшибок=удуДокументыКадровогоУчета.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ);
	
		Если не СписокОшибок.Количество()=0 Тогда 
			Отказ=Истина;
			Для Каждого Ошибка из СписокОшибок Цикл 
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст=Ошибка;
				СообщениеПользователю.Сообщить();
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.Период = NULL Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "данный сотрудник не введен в приказ - по нему не могут быть введены начисления!";
		СообщениеПользователю.Сообщить();
	ИначеЕсли ВыборкаПоСтрокамДокумента.Период = ВыборкаПоСтрокамДокумента.ДатаДвижения Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.Период + " изменение начисления уже зарегистрировано документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Двойные строки
	Если Не НетВР и Не НетСотрудника и ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
		Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
			СтрокаСообщениеОбОшибке = "основное начисление сотрудника следует редактировать в одной строке (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		Иначе
			СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		КонецЕсли;
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		ПрежняяСтавка			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
		ПрежнееПодразделение	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
		ПрежняяДолжность		= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
		
		// по прежнему месту работы освободим занимаемые ранее ставки
		Если ЗначениеЗаполнено(ПрежняяСтавка) Тогда
			
			Движение = Движения.удуЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ПрежнееПодразделение;
			Движение.Должность						= ПрежняяДолжность;
			
			// Ресурсы
			Движение.КоличествоСтавок				= ПрежняяСтавка;
			
			// Реквизиты
			Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
			
		КонецЕсли;
		
		// по новому месту работы займем указанные ставки
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			
			Движение = Движения.удуЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.Должность						= ВыборкаПоСтрокамДокумента.Должность;
			
			// Ресурсы
			Движение.КоличествоСтавок				= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
			
			// Реквизиты
			Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента,    ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// отразим новое место работы
		Движение = Движения.удуРаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		
		// Ресурсы
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
		Движение.ПричинаИзмененияСостояния	= Перечисления.удуПричиныИзмененияСостояния.Перемещение;
		
		// Реквизиты
		Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Если ВыборкаСтрокЗапроса.Действие = Перечисления.удуВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по регистру "ПлановыеНачисленияРаботниковОрганизаций"
	удуДокументыКадровогоУчета.СформироватьДвижениеПоПлановымНачислениям(Движения.удуПлановыеНачисленияРаботниковОрганизаций.Добавить(), ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
	
				
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()



 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = удуОбщегоНазначенияСервер.ПредставлениеДокументаПриПроведении(Ссылка);
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ПроверкаШтатногоРасписания=Константы.удуПроверкаШтатногоРасписания.Получить();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			Отказ=Истина;	
			ТекстСообщения ="Не указана организация!"; 	
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=ТекстСообщения;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если НЕ Отказ Тогда

		    ВыборкаСтрокЗапроса = СформироватьЗапросПоРаботникиОрганизации(ПроверкаШтатногоРасписания).Выбрать();
			
			// для проверки числа ставок
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл

				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок,ПроверкаШтатногоРасписания);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли;
			КонецЦикла;
			
			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачислениям(ПроверкаШтатногоРасписания).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;

 		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	удуОбщегоНазначенияСервер.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	КраткийСоставДокумента = удуДокументыКадровогоУчета.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.удуКадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;

КонецПроцедуры
    
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ТипЗнч(ДанныеЗаполнения)=Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ВидДоговора
		|ИЗ
		|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В (&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники",	ДанныеЗаполнения);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Не Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
				
		ЭтотОбъект.Организация = Выборка.Организация;
		
		Запрос.УстановитьПараметр("ДатаДокумента",ТекущаяДата());
		Запрос.УстановитьПараметр("ПустойВидРасчета",ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ПустаяСсылка());
		Запрос.УстановитьПараметр("Организация",Выборка.Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник,
		|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизации.Должность КАК Должность,
		|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	РаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	РаботникиОрганизации.Сотрудник.ВидДоговора КАК ВидДоговора
		|ИЗ
		|	РегистрСведений.удуРаботникиОрганизаций.СрезПоследних(
		|			&ДатаДокумента,
		|			Сотрудник В (&Сотрудники)
		|				И Организация = &Организация) КАК РаботникиОрганизации";
		
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если Выборка.ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.Подряда Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ЭтотОбъект.РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			НоваяСтрока.ДатаНачала = ТекущаяДата();
		КонецЦикла;
		
	ДействияСНачислениями = удуДокументыКадровогоУчета.ПолучитьТаблицуДействийСНачислениями(ЭтотОбъект.РаботникиОрганизации.Выгрузить(), ЭтотОбъект.Ссылка, ЭтотОбъект.Дата,ЭтотОбъект.Организация, "ДатаНачала");
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл		
		НоваяСтрока=ЭтотОбъект.ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

