
&НаКлиенте
Перем АдресВХранилище;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбработатьПодбор() Экспорт
	
	КоличествоСтрокНачислений=Объект.ОсновныеНачисления.Количество();
	
	Сотрудник=ПолучитьИзХранилища(АдресВХранилище);
	Если ЗначениеЗаполнено(Сотрудник) тогда
		СтрокиРаботников = Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Если СтрокиРаботников.Количество() > 0 Тогда
			Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
			Возврат;
		КонецЕсли;
		СтрокаТЧ=Объект.РаботникиОрганизации.Добавить();
		Модифицированность=Истина;
		СтрокаТЧ.Сотрудник=Сотрудник;
		СтрокаТЧ.ЗанимаемыхСтавок = 1;
		СтрокаТЧ.ДатаНачала = ТекущаяДата();
		мТекущийСотрудник = СтрокаТЧ.Сотрудник;	
		ВнестиДанныеПоСотруднику(СтрокаТЧ.ПолучитьИдентификатор(),истина);
		ПереформироватьНачисленияПоРаботнику(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЕсли;
		
	Элементы.РаботникиОрганизации.ТекущаяСтрока=СтрокаТЧ.ПолучитьИдентификатор();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПоместитьВХранилище(ЗначениеДляХранилища) 
	Возврат ПоместитьВоВременноеХранилище(ЗначениеДляХранилища, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПолучитьИзХранилища(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоСотруднику(ТаблицаСотрудников)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.ДатаНачала,
	|	ТаблицаСотрудников.НомерСтроки
	|ПОМЕСТИТЬ СписокСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Работники.Период) КАК Период,
	|	СписокСотрудников.Сотрудник КАК Сотрудник,
	|	СписокСотрудников.НомерСтроки
	|ПОМЕСТИТЬ ДатыПоследнихДвиженийРаботников
	|ИЗ
	|	РегистрСведений.удуРаботникиОрганизаций КАК Работники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСотрудников КАК СписокСотрудников
	|		ПО (СписокСотрудников.ДатаНачала >= Работники.Период)
	|			И (СписокСотрудников.Сотрудник = Работники.Сотрудник)
	|			И (Работники.Регистратор <> &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.Сотрудник,
	|	СписокСотрудников.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДвиженийРаботников.Период КАК Период,
	|	ДатыПоследнихДвиженийРаботников.Сотрудник КАК Сотрудник,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
	|	ДатыПоследнихДвиженийРаботников.НомерСтроки,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы
	|ПОМЕСТИТЬ ДанныеПоРаботникуДоНазначения
	|ИЗ
	|	ДатыПоследнихДвиженийРаботников КАК ДатыПоследнихДвиженийРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|			И (ДанныеПоРаботникуДоНазначения.Регистратор <> &Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСотрудников.Сотрудник,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
	|	СписокСотрудников.НомерСтроки,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы
	|ИЗ
	|	СписокСотрудников КАК СписокСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоРаботникуДоНазначения КАК ДанныеПоРаботникуДоНазначения
	|		ПО СписокСотрудников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|			И СписокСотрудников.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки";
	
	
	Запрос.УстановитьПараметр("Ссылка",	Объект.Ссылка);
	Запрос.УстановитьПараметр("ТаблицаСотрудников",	ТаблицаСотрудников);
	Запрос.УстановитьПараметр("Дата",	Объект.Дата);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ВнестиДанныеПоСотруднику(ИдентификаторСтроки,ЗаполнятьПолностью=Ложь)
	
	СтрокаТЧ=Объект.РаботникиОрганизации.НайтиПоИдентификатору(ИдентификаторСтроки);
	МассивСтрок=Новый Массив;
	МассивСтрок.Добавить(СтрокаТЧ);
	
	ТаблицаСотрудников=Объект.РаботникиОрганизации.Выгрузить(МассивСтрок,"Сотрудник,ДатаНачала,НомерСтроки");
	ЗаполнитьСтрокиДопЗначениями(ТаблицаСотрудников,ЗаполнятьПолностью); 
	
	Если мТекущийСотрудник <> СтрокаТЧ.Сотрудник Тогда
		ПереформироватьНачисленияПоРаботнику(ИдентификаторСтроки);
		мТекущийСотрудник = СтрокаТЧ.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры //ВнестиДанныеПоСотруднику

&НаСервере
// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура ПереформироватьНачисленияПоРаботнику(ИдентификаторСтроки)
	
	УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	ДобавитьНачисленияПоСтроке(ИдентификаторСтроки);
	
КонецПроцедуры // ПереформироватьНачисленияПоРаботнику()

&НаСервере
Процедура ДобавитьНачисленияПоСтроке(ИдентификаторСтроки=Неопределено)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Объект.РаботникиОрганизации.НайтиПоИдентификатору(ИдентификаторСтроки));
	
	ТЗ=?(ИдентификаторСтроки=Неопределено,Объект.РаботникиОрганизации.Выгрузить(),Объект.РаботникиОрганизации.Выгрузить(МассивСтрок));
	ДействияСНачислениями = удуДокументыКадровогоУчета.ПолучитьТаблицуДействийСНачислениями(ТЗ, Объект.Ссылка, Объект.Дата,Объект.Организация, "ДатаНачала");
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета");
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивНачислений = Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=Объект.ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);	
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачисленияПоСтроке()

&НаСервере
Процедура ЗаполнитьСтрокиДопЗначениями(ТаблицаСотрудников,ЗаполнятьПолностью=Ложь)
	
	Выборка=ПолучитьДанныеПоСотруднику(ТаблицаСотрудников);
	
	Пока Выборка.Следующий() цикл
		Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].СтароеПодразделение=Выборка.ПодразделениеОрганизации;
		Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].СтараяДолжность=Выборка.Должность;
		Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].СтараяСтавка=Выборка.ЗанимаемыхСтавок;
		Если ЗаполнятьПолностью тогда
			Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].ПодразделениеОрганизации=Выборка.ПодразделениеОрганизации;
			Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].Должность=Выборка.Должность;
			Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].ЗанимаемыхСтавок=Выборка.ЗанимаемыхСтавок;
			Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].ГрафикРаботы=Выборка.ГрафикРаботы;
			Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].ФизЛицо=Объект.РаботникиОрганизации[Выборка.НомерСтроки-1].Сотрудник.ФизЛицо;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормыДокументаСервер()
	
	удуОбщегоНазначенияСервер.УстановитьЗаголовокФормыДокумента(, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииСервер()
	
	мТекущийСотрудник	= удуОбщегоНазначенияСервер.ПустоеЗначениеТипа("СправочникСсылка.удуСотрудникиОрганизаций");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) тогда
		ТаблицаСотрудников=Объект.РаботникиОрганизации.Выгрузить(,"Сотрудник,ДатаНачала,НомерСтроки");  
		ЗаполнитьСтрокиДопЗначениями(ТаблицаСотрудников); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	удуОбщегоНазначенияСервер.ПроверитьНомерДокумента(Объект, мТекущаяДатаДокумента);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидДоговора()
	
	Возврат Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор;
	
КонецФункции

&НаСервере
Функция ПолучитьФизЛицо(Сотрудник)
	
	Возврат Сотрудник.ФизЛицо;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляВыбораВидаРасчета(НастройкиОтбора=истина,Текст="")
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.удуВидыВремени.ОтработанноеВПределахНормы);
	СписокВидовВремени.Добавить(Перечисления.удуВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СписокНедопустимыхВР = Новый СписокЗначений;
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	
	Если НастройкиОтбора Тогда 
		
		НастройкиКомпоновкиДанных=Новый НастройкиКомпоновкиДанных;
		
		удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "ВидВремени", СписокВидовВремени,
		ВидСравненияКомпоновкиДанных.ВСписке,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "Ссылка", СписокНедопустимыхВР,
		ВидСравненияКомпоновкиДанных.НеВСписке,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Возврат НастройкиКомпоновкиДанных;
		
	Иначе 
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	удуОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.удуОсновныеНачисленияОрганизаций КАК удуОсновныеНачисленияОрганизаций
		|ГДЕ
		|	удуОсновныеНачисленияОрганизаций.ВидВремени В(&СписокВидовВремени)
		|	И (НЕ удуОсновныеНачисленияОрганизаций.Ссылка В (&СписокНедопустимыхВР))
		|	И ВЫБОР
		|			КОГДА &Текст = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ удуОсновныеНачисленияОрганизаций.Наименование ПОДОБНО &Текст
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("СписокВидовВремени",СписокВидовВремени);			 
		Запрос.УстановитьПараметр("СписокНедопустимыхВР",СписокНедопустимыхВР);
		Запрос.УстановитьПараметр("Текст",Текст);
		СписокРасчетов=Новый СписокЗначений;
		СписокРасчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Возврат СписокРасчетов;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки=Элементы.ОсновныеНачисления.ТекущиеДанные;
	ТекущиеСтрокиСинхронизации=ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтрокиСервер(?(ДанныеСтроки=Неопределено,Неопределено,ДанныеСтроки.Сотрудник));
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	
	Для Каждого ЭлементСоответствия из ТекущиеСтрокиСинхронизации Цикл
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
		Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = ЭлементСоответствия.Значение;
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтрокиСервер(ЭлементПоиска)
	
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	Возврат удуПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(Объект, Элементы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник",ЭлементПоиска);	
	
КонецФункции

&НаСервере
Функция ПолучитьВидДействия(ВидДействия)
	
	ВидДействияВозврат=Перечисления.удуВидыДействияСНачислением.ПустаяСсылка();
	Если ВидДействия="Прекратить" тогда
		ВидДействияВозврат=Перечисления.удуВидыДействияСНачислением.Прекратить;
	ИначеЕсли ВидДействия="Начать" тогда
		ВидДействияВозврат=Перечисления.удуВидыДействияСНачислением.Начать;
	КонецЕсли;
	
	Возврат ВидДействияВозврат;
	
КонецФункции


&НаСервере
Функция РаботникиОрганизацииПриАктивизацииСтрокиСервер(ЭлементПоиска)
	
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	Возврат удуПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(Объект, Элементы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник",ЭлементПоиска);
	
КонецФункции

&НаСервере
// удаляет начисления по работнику
// Параметры:
//   Сотрудник  - СправочникСсылка.удуСотрудникиОрганизации
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// Удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя.
	Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		Объект.ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

&НаСервере
Функция ПустаяСсылкаСотрудник()
	
	Возврат Справочники.удуСотрудникиОрганизаций.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораСервер(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Команда = "";
		Если ВыбранноеЗначение.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			СписокРаботников=ПолучитьИзХранилища(ВыбранноеЗначение.АдресДанных);
			СписокРаботников.Колонки.Добавить("ДатаНачала");
			СписокРаботников.ЗаполнитьЗначения(Объект.Дата,"ДатаНачала");
			Объект.РаботникиОрганизации.Загрузить(СписокРаботников);
			ТЗ=Объект.РаботникиОрганизации.Выгрузить();
			ЗаполнитьСтрокиДопЗначениями(ТЗ,истина);
			
			Объект.ОсновныеНачисления.Очистить();
			ДобавитьНачисленияПоСтроке();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) тогда
		ОбъектИзХранилища=ПолучитьИзХранилища(Параметры.АдресВХранилище);
		ЗначениеВДанныеФормы(ОбъектИзХранилища,Объект);
		Для Каждого СтрокаТЧ из Объект.РаботникиОрганизации цикл
			СтрокаТЧ.СтароеПодразделение=СтрокаТЧ.ПодразделениеОрганизации;
			СтрокаТЧ.СтараяДолжность=СтрокаТЧ.Должность;
			СтрокаТЧ.СтараяСтавка=СтрокаТЧ.ЗанимаемыхСтавок;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		удуДокументыКадровогоУчета.ЗаполнитьШапкуДокумента(Объект);
	КонецЕсли;
	
	мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
	мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
	мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;
	мСинхронизируемыеТабличныеЧастиАдрес=ПоместитьВХранилище(мСинхронизируемыеТабличныеЧасти);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ОсновныеНачисленияСотрудник.ОтображатьВПодвале=Объект.ОсновныеНачисления.Количество()=0;
	
	УстановитьЗаголовокФормыДокументаСервер();
	мТекущаяДатаДокумента	= Объект.Дата;
	ПриОткрытииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТаблицаСотрудников=Объект.РаботникиОрганизации.Выгрузить(,"Сотрудник,ДатаНачала,НомерСтроки");  
	ЗаполнитьСтрокиДопЗначениями(ТаблицаСотрудников); 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокументаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораСервер(ВыбранноеЗначение);
	Модифицированность=Истина;

	Элементы.РаботникиОрганизации.ТекущаяСтрока=?(Объект.РаботникиОрганизации.Количество()=0,Неопределено,Объект.РаботникиОрганизации[0].ПолучитьИдентификатор());
	РаботникиОрганизацииПриАктивизацииСтроки(Неопределено);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура Подбор(Команда)
	
	АдресВХранилище = ПоместитьВХранилище(ПустаяСсылкаСотрудник());
	ПараметрыПодбора = Новый Структура("ЭтоПодбор,АдресПодбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора", Истина, АдресВХранилище,Объект.Дата,Истина,ПолучитьВидДоговора());
	
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниками(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Предупреждение("Не указана организация, отобрать список сотрудников невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Объект.РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	
	Структура=Новый Структура;
	Структура.Вставить("ДатаАктуальности",Объект.Дата);
    Структура.Вставить("Организация",Объект.Организация);	
	
	АдресВХранилище = ПоместитьВХранилище(Структура);
	ПараметрыФормы = Новый Структура("АдресДанныхНачальногоЗаполнения", АдресВХранилище);
	ФормаОтбора = ПолучитьФорму("Обработка.удуФормированиеСпискаРаботников.Форма.ФормаНастройки",ПараметрыФормы,ЭтаФорма);
	ФормаОтбора.ОткрытьМодально();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер="";
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки=Элементы.РаботникиОрганизации.ТекущиеДанные;
	мТекущийСотрудник=?(ДанныеСтроки=Неопределено,ПустаяСсылкаСотрудник(),ДанныеСтроки.Сотрудник);
	
	ТекущиеСтрокиСинхронизации=РаботникиОрганизацииПриАктивизацииСтрокиСервер(?(ДанныеСтроки=Неопределено,Неопределено,ДанныеСтроки.Сотрудник));
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	
	Для Каждого ЭлементСоответствия из ТекущиеСтрокиСинхронизации Цикл
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
		Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = ЭлементСоответствия.Значение;
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
		
		Элементы.ОсновныеНачисленияСотрудник.ОтображатьВПодвале=не Объект.ОсновныеНачисления.Количество()=0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		НоваяСтрока = Объект.РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, "Сотрудник,СтароеПодразделение,СтараяДолжность,СтараяСтавка");
		Элементы.РаботникиОрганизации.ТекущаяСтрока = НоваяСтрока;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
			ДанныеСтроки.ЗанимаемыхСтавок = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала) Тогда
			ДанныеСтроки.ДатаНачала = ТекущаяДата();
		КонецЕсли;
		
	КонецЕсли;
	
	мТекущийСотрудник = ДанныеСтроки.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекущаяКолонка = Элемент.ТекущийЭлемент;
	Если ТекущаяКолонка.Имя = "РаботникиОрганизацииПодразделениеОрганизации" Или ТекущаяКолонка.Имя = "РаботникиОрганизацииДолжность" Тогда
		
		ЗначениеДляПередачи = ?(ТекущаяКолонка.Имя = "РаботникиОрганизацииПодразделениеОрганизации",Элемент.ТекущиеДанные.Должность,Элемент.ТекущиеДанные.ПодразделениеОрганизации);
		
		ДатаАктуальности = ?(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаНачала),Элемент.ТекущиеДанные.ДатаНачала, Объект.Дата);
		
		СписокПодразделений = удуПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(СтрЗаменить(ТекущаяКолонка.Имя,"РаботникиОрганизации",""), Объект.Организация, ЗначениеДляПередачи, ДатаАктуальности);
		КоличествоЗначений = СписокПодразделений.Количество();
		
		ТекущаяКолонка.СписокВыбора.ЗагрузитьЗначения(СписокПодразделений.ВыгрузитьЗначения());
		ТекущаяКолонка.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ТекущаяКолонка.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииСтароеПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСтараяДолжностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСтараяСтавкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	СтрокаТЧ=Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	КоличествоСтрокНачислений=Объект.ОсновныеНачисления.Количество();
	
	ВнестиДанныеПоСотруднику(СтрокаТЧ.ПолучитьИдентификатор(),истина);
	
	мТекущийСотрудник = СтрокаТЧ.Сотрудник;
	
	РаботникиОрганизацииПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура("ДляВыбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора", Истина,Объект.Дата,Истина,ПолучитьВидДоговора());
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокиРаботников = Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	СтрокаТЧ=Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если СтрокиРаботников.Количество() > 0 и СтрокаТЧ.Сотрудник <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	СтрокаТЧ.ФизЛицо = ПолучитьФизЛицо(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
		
	Иначе // = -1 - уменьшаем значение
		Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПереформироватьНачисленияПоРаботнику(Элементы.РаботникиОрганизации.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

&НаКлиенте
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	Элементы.ОсновныеНачисленияСотрудник.ОтображатьВПодвале=не Объект.ОсновныеНачисления.Количество()=0;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и не Копирование
		И Объект.РаботникиОрганизации.Количество() = 1
		И ЗначениеЗаполнено(Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник) Тогда
		Элементы.ОсновныеНачисления.ТекущиеДанные.Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		Элементы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = ПолучитьФизЛицо(Элементы.ОсновныеНачисления.ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
	Если Копирование Тогда 
		Элемент.ТекущиеДанные.Действие = ПолучитьВидДействия("Начать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Действие = ПолучитьВидДействия("Прекратить") Тогда
		Элемент.ТекущиеДанные.Показатель1 = 0;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

&НаКлиенте
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки=Элементы.ОсновныеНачисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = ПолучитьФизЛицо(ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура("ДляВыбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора", Истина,Объект.Дата,Истина,ПолучитьВидДоговора(),Истина);
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиОтбора=ПолучитьДанныеДляВыбораВидаРасчета();
	удуДокументыКадровогоУчетаКлиент.ОткрытьФормуВыбораОсновныеНачисленияОрганизаций(Элемент,НастройкиОтбора);
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора=ПолучитьДанныеДляВыбораВидаРасчета(Ложь,Текст+"%");
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора=ПолучитьДанныеДляВыбораВидаРасчета(Ложь,Текст+"%");
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры









////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ









