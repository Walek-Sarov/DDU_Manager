 // Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УвольнениеИзОрганизаций.Дата,
	|	УвольнениеИзОрганизаций.Организация,
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.удуУвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|ГДЕ
	|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Организация",	Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УвольнениеИзОрганизаций.Ссылка,
		|	УвольнениеИзОрганизаций.НомерСтроки,
		|	УвольнениеИзОрганизаций.Сотрудник,
		|	УвольнениеИзОрганизаций.Физлицо,
		|	УвольнениеИзОрганизаций.ДатаУвольнения,
		|	УвольнениеИзОрганизаций.СтатьяТКРФ,
		|	УвольнениеИзОрганизаций.ОснованиеУвольнения
		|ПОМЕСТИТЬ ВТСтрокиДокумента
		|ИЗ
		|	Документ.удуУвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизаций
		|ГДЕ
		|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	удуРаботникиОрганизаций.Период,
		|	удуРаботникиОрганизаций.Сотрудник,
		|	удуРаботникиОрганизаций.Регистратор
		|ПОМЕСТИТЬ ВТКонфликтныеДвижения
		|ИЗ
		|	РегистрСведений.удуРаботникиОрганизаций КАК удуРаботникиОрганизаций
		|ГДЕ
		|	удуРаботникиОрганизаций.Организация = &Организация
		|	И удуРаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ТЧРаботникиОрганизации.Сотрудник
		|			ИЗ
		|				ВТСтрокиДокумента КАК ТЧРаботникиОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыНачислений.Сотрудник КАК Сотрудник,
		|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|	НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|ИЗ
		|	(ВЫБРАТЬ
		|		Док.Сотрудник КАК Сотрудник,
		|		НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|		МАКСИМУМ(НачисленияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
		|	ИЗ
		|		ВТСтрокиДокумента КАК Док
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|			ПО Док.ДатаУвольнения >= НачисленияРаботниковОрганизации.Период
		|				И Док.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
		|		Док.Сотрудник) КАК ДатыНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.удуПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|		ПО ДатыНачислений.ДатаИзмененияРеквизитов = НачисленияРаботниковОрганизации.Период
		|			И ДатыНачислений.ВидРасчетаИзмерение = НачисленияРаботниковОрганизации.ВидРасчетаИзмерение
		|			И (НачисленияРаботниковОрганизации.Действие <> ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Прекратить))
		|			И ДатыНачислений.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ВТСтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	ВТСтрокиДокумента.Сотрудник КАК Сотрудник,
		|	ВТСтрокиДокумента.Сотрудник.Наименование,
		|	ВТСтрокиДокумента.ДатаУвольнения КАК ДатаУвольнения,
		|	ВТСтрокиДокумента.СтатьяТКРФ КАК СтатьяТКРФ,
		|	ВЫРАЗИТЬ(ВТСтрокиДокумента.ОснованиеУвольнения КАК СТРОКА(300)) КАК ОснованиеУвольнения,
		|	ВТСтрокиДокумента.Ссылка.Организация КАК ОрганизацияПодразделения,
		|	ВЫБОР
		|		КОГДА ВТСтрокиДокумента.Сотрудник.Организация = &Организация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПрежняяПричина,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
		|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
		|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
		|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
		|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	NULL КАК ВидРасчетаИзмерение,
		|	NULL КАК ВидРасчета,
		|	NULL КАК КонфликтныйДокумент,
		|	ВТСтрокиДокумента.Физлицо
		|ИЗ
		|	ВТСтрокиДокумента КАК ВТСтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
		|			ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|			ДатыПоследнихДвиженийРаботников.Сотрудник КАК Сотрудник
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ВТСтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ВТСтрокиДокумента.Сотрудник КАК Сотрудник
		|			ИЗ
		|				РегистрСведений.удуРаботникиОрганизаций КАК Работники
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ВТСтрокиДокумента
		|					ПО Работники.Период <= ВТСтрокиДокумента.ДатаУвольнения
		|						И (ВТСтрокиДокумента.Сотрудник = Работники.Сотрудник)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВТСтрокиДокумента.Сотрудник,
		|				ВТСтрокиДокумента.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
		|		ПО ВТСтрокиДокумента.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТСтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ВТСтрокиДокумента1.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			ВТСтрокиДокумента КАК ВТСтрокиДокумента
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ВТСтрокиДокумента1
		|				ПО ВТСтрокиДокумента.НомерСтроки < ВТСтрокиДокумента1.НомерСтроки
		|					И ВТСтрокиДокумента.Сотрудник = ВТСтрокиДокумента1.Сотрудник
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТСтрокиДокумента.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ВТСтрокиДокумента.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НачисленияРаботникаОрганизации"",
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СписокВидовРасчета.ВидРасчетаИзмерение,
		|	СписокВидовРасчета.ВидРасчета,
		|	NULL,
		|	ТЧРаботникиОрганизации.Физлицо
		|ИЗ
		|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК СписокВидовРасчета
		|		ПО ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ВТСтрокиДокумента.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТКонфликтныеДвижения.Регистратор,
		|	NULL
		|ИЗ
		|	ВТСтрокиДокумента КАК ВТСтрокиДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКонфликтныеДвижения КАК ВТКонфликтныеДвижения
		|		ПО (ВТКонфликтныеДвижения.Период = ВЫБОР
		|				КОГДА ВТСтрокиДокумента.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТСтрокиДокумента.ДатаУвольнения, ДЕНЬ, 1)
		|			КОНЕЦ)
		|			И ВТСтрокиДокумента.Сотрудник = ВТКонфликтныеДвижения.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = Заголовок+Символы.ВК+ "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		// ДатаУвольнения
		НетДатыУвольнения = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения);
		Если НетДатыУвольнения Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указана дата увольнения!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!";
			СообщениеПользователю.Сообщить();
	 	КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыУвольнения Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяПричина = NULL Тогда
			Отказ=Истина;
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке;
			СообщениеПользователю.Сообщить();
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяПричина = Перечисления.удуПричиныИзмененияСостояния.Увольнение Тогда	
			Отказ=Истина;
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке;
			СообщениеПользователю.Сообщить();
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			Отказ=Истина;
			СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	
        Отказ=Истина;
		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
		СообщениеПользователю.Сообщить();
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		ПрежняяСтавка			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
		ПрежнееПодразделение	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
		ПрежняяДолжность		= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
			
			Движение = Движения.удуЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаУвольнения+86400;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ПрежнееПодразделение;
			Движение.Должность						= ПрежняяДолжность;
			
			// Ресурсы
			Движение.КоличествоСтавок				= ПрежняяСтавка;
			
			// Реквизиты
			Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента,    ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// отразим новое место работы
		Движение = Движения.удуРаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + 86400;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		
		// Ресурсы
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
		Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботникиОрганизации.ПрежняяСтавка;
		Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ПрежнийГрафикРаботы;
		Движение.ПричинаИзмененияСостояния	= Перечисления.удуПричиныИзмененияСостояния.Увольнение;
		
		// Реквизиты
		Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
		
		// Движения по регистру ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы";
		
		Если ВыборкаПоРаботникиОрганизации.Сотрудник.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			Движение = Движения.удуПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Добавить();
			
			// Измерения
			Движение.Физлицо		= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + 86400;
		КонецЕсли;
		
		// Движения по регистру "ПериодыРаботыРаботниковОрганизацийПоСовместительству"
		
		Если ВыборкаПоРаботникиОрганизации.Сотрудник.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.Совместительство Тогда
			Движение = Движения.удуПериодыРаботыРаботниковОрганизацийПоСовместительству.Добавить();
			
			// Измерения
			Движение.Физлицо		= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.Организация	= ВыборкаПоШапкеДокумента.Организация;
			Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + 86400;
		КонецЕсли;

	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "НачисленияРаботникаОрганизации" Тогда	
		// Движения по регистру "Плановые начисления сотрудников организаций"
		Движение = Движения.удуПлановыеНачисленияРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + 86400;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидРасчетаИзмерение        = ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
		
		// Ресурсы
		Движение.Показатель1				= 0;
		Движение.ВидРасчета			        = ВыборкаПоРаботникиОрганизации.ВидРасчета;
		Движение.Действие			        = Перечисления.удуВидыДействияСНачислением.Прекратить;
		
		// Реквизиты
		Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()






Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = удуОбщегоНазначенияСервер.ПредставлениеДокументаПриПроведении(Ссылка);
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			Отказ=Истина;	
			ТекстСообщения ="Не указана организация!"; 	
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=ТекстСообщения;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если НЕ Отказ Тогда

		    ВыборкаСтрокЗапроса = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
			
			// для проверки числа ставок
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл

				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли;
			КонецЦикла;
 		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	удуОбщегоНазначенияСервер.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	КраткийСоставДокумента = удуДокументыКадровогоУчета.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.удуКадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ТипЗнч(ДанныеЗаполнения)=Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ВидДоговора
		|ИЗ
		|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В (&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники",	ДанныеЗаполнения);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЭтотОбъект.Организация = Выборка.Организация;
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.Подряда Тогда
				Возврат;
			КонецЕсли;
			
			НоваяСтрока = ЭтотОбъект.РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаУвольнения				= ТекущаяДата();
		КонецЦикла;	
		
КонецПроцедуры

