&НаСервере
Функция ПолучитьЗаголовокКомплектации(Комплектация)
	Возврат "Создан автоматически на основании комплектации №" + СокрЛП(Комплектация.Номер) + " от " + Формат(Комплектация.Дата, "ДЛФ=D");
КонецФункции

&НаСервере
Процедура ЗаполнитьВоспитанникамиГруппыНаСервере()	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок,
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.ОснованиеЗачисления
	               |ИЗ
	               |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(
	               |			&ДатаВыборки,
	               |			Учреждение = &Учреждение
	               |				И Группа = &Группа) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
	               |ГДЕ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе = &СостояниеУчетаВГруппе";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаВыборки", ОбъектРеквизит.Дата);
	Запрос.УстановитьПараметр("Учреждение", ОбъектРеквизит.Учреждение);
	Запрос.УстановитьПараметр("Группа", ОбъектРеквизит.ГруппаПервоначальная);
	Запрос.УстановитьПараметр("СостояниеУчетаВГруппе", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ребенок", СтрокаРезультата.Ребенок);
		МассивНайденныхСтрок = ОбъектРеквизит.ТабличнаяЧастьВоспитанники.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСтрок.Количество() = 0 Тогда		
			НоваяСтрокаТабличнойЧасти = ОбъектРеквизит.ТабличнаяЧастьВоспитанники.Добавить();
			НоваяСтрокаТабличнойЧасти.Обрабатывать = Истина;
			НоваяСтрокаТабличнойЧасти.Ребенок = СтрокаРезультата.Ребенок;
			НоваяСтрокаТабличнойЧасти.ПредыдущееОснованиеЗачисления = СтрокаРезультата.ОснованиеЗачисления;
			НоваяСтрокаТабличнойЧасти.НовоеОснованиеЗачисления = СтрокаРезультата.ОснованиеЗачисления;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорамиПоГруппеНаСервере()
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	удуДоговорОЗачисленииРебенка.Ребенок КАК РебенокДоговор,
				   |	удуДоговорОЗачисленииРебенка.Ссылка КАК НовоеОснование,
				   |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.ОснованиеЗачисления КАК СтароеОснование,
				   |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок КАК РебенокРегистр
				   |ИЗ
				   |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(&ДатаВыборки, Группа = &ГруппаНачальная) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.удуДоговорОЗачисленииРебенка КАК удуДоговорОЗачисленииРебенка
				   |		ПО удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок = удуДоговорОЗачисленииРебенка.Ребенок
				   |ГДЕ
				   |	удуДоговорОЗачисленииРебенка.Проведен
				   |	И (НЕ удуДоговорОЗачисленииРебенка.ПроизошлоЗачисление)
				   |	И удуДоговорОЗачисленииРебенка.Группа = &ГруппаКонечная
				   |	И удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе = &СостояниеУчетаВГруппе";	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаВыборки", ОбъектРеквизит.Дата);
	Запрос.УстановитьПараметр("ГруппаНачальная", ОбъектРеквизит.ГруппаПервоначальная);
	Запрос.УстановитьПараметр("ГруппаКонечная", ОбъектРеквизит.ГруппаДляПеревода);
	Запрос.УстановитьПараметр("СостояниеУчетаВГруппе", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ребенок", СтрокаРезультата.Ребенок);
		МассивНайденныхСтрок = ОбъектРеквизит.ТабличнаяЧастьВоспитанники.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСтрок.Количество() = 0 Тогда				
			НоваяСтрокаТабличнойЧасти = ОбъектРеквизит.ТабличнаяЧастьВоспитанники.Добавить();
			НоваяСтрокаТабличнойЧасти.Обрабатывать = Истина;
			НоваяСтрокаТабличнойЧасти.Ребенок = СтрокаРезультата.РебенокДоговор;
			НоваяСтрокаТабличнойЧасти.ПредыдущееОснованиеЗачисления = СтрокаРезультата.СтароеОснование;
			НоваяСтрокаТабличнойЧасти.НовоеОснованиеЗачисления = СтрокаРезультата.НовоеОснование;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОСоставеГруппы(ИмяГруппы)
	// Отбор по учреждению
	сэРезультатВыполнения = удуОбработкаПросмотрИнформации.ПолучитьсоставГруппы(?(ИмяГруппы = "Старая", Объект.ГруппаПервоначальная, Объект.ГруппаДляПеревода), ТекущаяДата());		
	ЗначениеВРеквизитФормы(сэРезультатВыполнения, ?(ИмяГруппы = "Старая", "СоставПервоначальнойГруппы", "СоставКонечнойГруппы"));
	Если ИмяГруппы = "Старая" Тогда
		Если Объект.ГруппаПервоначальная.БезОграниченияВместительности Тогда
			Элементы.НадписьСведенияОПервоначальнойГруппе.Заголовок = "Количество детей в выбранной группе: " + Строка(сэРезультатВыполнения.Количество()) + ". Вместительность группы не ограничена.";
		Иначе
			Элементы.НадписьСведенияОПервоначальнойГруппе.Заголовок = "Количество детей в выбранной группе: " + Строка(сэРезультатВыполнения.Количество()) + ". Вместительность группы: " + Строка(Объект.ГруппаПервоначальная.Вместительность);
		КонецЕсли;
	Иначе
		Если Объект.ГруппаДляПеревода.БезОграниченияВместительности Тогда
			Элементы.НадписьСведенияОНовойГруппе.Заголовок = "Количество детей в выбранной группе: " + Строка(сэРезультатВыполнения.Количество()) + ". Вместительность группы не ограничена.";
		Иначе
			Элементы.НадписьСведенияОНовойГруппе.Заголовок = "Количество детей в выбранной группе: " + Строка(сэРезультатВыполнения.Количество()) + ". Вместительность группы: " + Строка(Объект.ГруппаДляПеревода.Вместительность);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьВоспитанниками(Команда)
	// Вставить содержимое обработчика.
	Если Объект.ТабличнаяЧастьВоспитанники.Количество() > 0 Тогда
		Если Вопрос("Перед заполнением очистить табличную часть?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.ТабличнаяЧастьВоспитанники.Очистить();
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.ГруппаПервоначальная) Тогда 
		Вопрос("Перед заполнением необходимо сначала указать первоначальную группу!", РежимДиалогаВопрос.ОК);
	Иначе
		ЗаполнитьВоспитанникамиГруппыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Учреждение) Тогда
		Объект.Учреждение = Константы.удуОсновноеУчреждение.Получить();
		Если Не ЗначениеЗаполнено(Объект.Учреждение) Тогда
			ЭтаФорма.Элементы.Учреждение.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСведенияОСоставеГруппы("Старая");
	ОбновитьСведенияОСоставеГруппы("Новая");	
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НадписьСведенияОПервоначальнойГруппеНажатие(Элемент)
	// Вставить содержимое обработчика.
	Если СоставПервоначальнойГруппы.Количество() > 0 Тогда 
		ФормаПросмотра = ПолучитьФорму("ОбщаяФорма.удуФормаПросмотраСоставаГруппы");
		ФормаПросмотра.ВладелецФормы = ЭтаФорма;
		Для Каждого СтрокаСоставГруппы Из СоставПервоначальнойГруппы Цикл
			НоваяСтрокаФормыПросмотра = ФормаПросмотра.ТабличнаяЧастьДети.Добавить();
			НоваяСтрокаФормыПросмотра.Ребенок = СтрокаСоставГруппы.Ребенок;
			НоваяСтрокаФормыПросмотра.Пол = СтрокаСоставГруппы.Пол;
			НоваяСтрокаФормыПросмотра.ДатаРождения = СтрокаСоставГруппы.ДатаРождения;
		КонецЦикла;
		ФормаПросмотра.ОткрытьМодально();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСведенияОНовойГруппеНажатие(Элемент)
	// Вставить содержимое обработчика.
	Если СоставКонечнойГруппы.Количество() > 0 Тогда 
		ФормаПросмотра = ПолучитьФорму("ОбщаяФорма.удуФормаПросмотраСоставаГруппы");
		ФормаПросмотра.ВладелецФормы = ЭтаФорма;
		Для Каждого СтрокаСоставГруппы Из СоставКонечнойГруппы Цикл
			НоваяСтрокаФормыПросмотра = ФормаПросмотра.ТабличнаяЧастьДети.Добавить();
			НоваяСтрокаФормыПросмотра.Ребенок = СтрокаСоставГруппы.Ребенок;
			НоваяСтрокаФормыПросмотра.Пол = СтрокаСоставГруппы.Пол;
			НоваяСтрокаФормыПросмотра.ДатаРождения = СтрокаСоставГруппы.ДатаРождения;
		КонецЦикла;
		ФормаПросмотра.ОткрытьМодально();		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПервоначальнаяПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ОбновитьСведенияОСоставеГруппы("Старая");
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДляПереводаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ОбновитьСведенияОСоставеГруппы("Новая");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаНомерДата.ТолькоПросмотр = Объект.Проведен;
	Элементы.ГруппаПервоначальная.ТолькоПросмотр = Объект.Проведен;
	Элементы.ГруппаДляПеревода.ТолькоПросмотр = Объект.Проведен;	
	Элементы.ОтключитьКонтрольВместимости.ТолькоПросмотр = Объект.Проведен;
	Элементы.РазрешитьПереводВГруппуБезДоговора.ТолькоПросмотр = Объект.Проведен;
	Элементы.ТабличнаяЧастьВоспитанники.ТолькоПросмотр = Объект.Проведен;
	Если ЗначениеЗаполнено(Объект.ДокументКомплектация) Тогда
		Элементы.НадписьСведенияОКомплектации.Видимость = Истина;	
		Элементы.НадписьСведенияОКомплектации.Заголовок = ПолучитьЗаголовокКомплектации(Объект.ДокументКомплектация);
	Иначе
		Элементы.НадписьСведенияОКомплектации.Видимость = Ложь;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПервоначальнаяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Объект.ТабличнаяЧастьВоспитанники.Количество() > 0 Тогда
		Если Вопрос("При изменении первоначальной группы табличная часть будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.ТабличнаяЧастьВоспитанники.Очистить();
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.удуДоговорОЗачисленииРебенка") Тогда		
		Элементы.ТабличнаяЧастьВоспитанники.ТекущиеДанные.НовоеОснованиеЗачисления = ВыбранноеЗначение;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВоспитанникиРебенокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВоспитанникиПредыдущееОснованиеЗачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВоспитанникиНовоеОснованиеЗачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ФормаВыбораДоговора = ПолучитьФорму("ОбщаяФорма.удуФормаВыбораДоговора");
	ФормаВыбораДоговора.ПараметрРебенок = Элементы.ТабличнаяЧастьВоспитанники.ТекущиеДанные.Ребенок;
	ФормаВыбораДоговора.ВладелецФормы = ЭтаФорма;
	ФормаВыбораДоговора.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВоспитанникиРебенокОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВоспитанникиПредыдущееОснованиеЗачисленияОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоДоговорам(Команда)
	// Вставить содержимое обработчика.
	Если Объект.ТабличнаяЧастьВоспитанники.Количество() > 0 Тогда
		Если Вопрос("Перед заполнением очистить табличную часть?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.ТабличнаяЧастьВоспитанники.Очистить();
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.ГруппаПервоначальная) Тогда 
		Вопрос("Перед заполнением необходимо сначала указать первоначальную группу!", РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГруппаДляПеревода) Тогда 
		Вопрос("Перед заполнением необходимо сначала указать группу для перевода!", РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДоговорамиПоГруппеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	// Вставить содержимое обработчика.
	Для Каждого СтрокаВоспитанника Из Объект.ТабличнаяЧастьВоспитанники Цикл
		СтрокаВоспитанника.Обрабатывать = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте                                           
Процедура КомандаСнятьВсе(Команда)
	// Вставить содержимое обработчика.
	Для Каждого СтрокаВоспитанника Из Объект.ТабличнаяЧастьВоспитанники Цикл
		СтрокаВоспитанника.Обрабатывать = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСведенияОКомплектацииНажатие(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Объект.ДокументКомплектация) Тогда
		ПередаваемыеПараметры = Новый Структура("Ключ", Объект.ДокументКомплектация);
		ОткрытьФормуМодально("Документ.удуКомплектованиеГруппы.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);		
	КонецЕсли;	
КонецПроцедуры

