Функция ПроверитьНаличиеМестВУказаннойГруппе()	
	Если Не ГруппаДляПеревода.БезОграниченияВместительности Тогда
		КоличествоПереводимыхДетей = 0;
		Для Каждого СтрокаВоспитанники Из ТабличнаяЧастьВоспитанники Цикл
			Если СтрокаВоспитанники.Обрабатывать Тогда
				КоличествоПереводимыхДетей = КоличествоПереводимыхДетей + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок
		               |ИЗ
		               |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(
		               |			&ДатаПеревода,
		               |			Группа = &Группа
		               |				И Учреждение = &Учреждение
		               |				И СостояниеУчетаВГруппе = &СостоитНаУчете) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних";
					   
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДатаПеревода", Дата);
		Запрос.УстановитьПараметр("Учреждение", Учреждение);
		Запрос.УстановитьПараметр("Группа", ГруппаДляПеревода);
		Запрос.УстановитьПараметр("СостоитНаУчете", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
		
		КоличествоИмеющихсяДетей = Запрос.Выполнить().Выгрузить().Количество();
		
		Если (КоличествоИмеющихсяДетей + КоличествоПереводимыхДетей) > ГруппаДляПеревода.Вместительность Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Превышена допустимая вместительность группы!" + Символы.ПС + 
			"Допустимая вместительность группы составляет: " + Строка(ГруппаДляПеревода.Вместительность) + " детей" + Символы.ПС + 
			?(КоличествоИмеющихсяДетей > ГруппаДляПеревода.Вместительность, "", "Количество свободных (оставшихся) мест: " + Строка(ГруппаДляПеревода.Вместительность - КоличествоИмеющихсяДетей) + Символы.ПС) + 
			"Количество зачисляемых детей: " + Строка(КоличествоПереводимыхДетей) + Символы.ПС + 
			"Для принудительного проведения документа установитье флаг ""Отключить контроль вместимости группы""'");			
			Сообщение.Поле = НСтр("ru = 'ТабличнаяЧастьВоспитанники'");
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();			
			Возврат ?(ОтключитьКонтрольВместимости, Ложь, Истина);
		Иначе
			Возврат Ложь;
		КонецЕсли;		
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПроверитьЗаключениеНовыхДоговоров()
	ВозвращаемоеЗначение = Ложь;
	Для Каждого СтрокадляПеревода Из ТабличнаяЧастьВоспитанники Цикл
		Если СтрокадляПеревода.НовоеОснованиеЗачисления = СтрокадляПеревода.ПредыдущееОснованиеЗачисления Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В строке №" + Строка(СтрокадляПеревода.НомерСтроки) + " не выбран новый договор, на основании котрого осуществляется перевод." + Символы.ПС + 
			"Для принудительного проведения документа установитье флаг ""Разрешить перевод в группу без заключения нового договора""'");			
			Сообщение.Поле = НСтр("ru = 'ТабличнаяЧастьВоспитанники[" + Формат(СтрокадляПеревода.НомерСтроки - 1, "ЧГ=0") + "].НовоеОснованиеЗачисления'");
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();			
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// сначала проверим превышение вместительности группы
	Если Не РазрешитьПереводВГруппуБезДоговора Тогда
		Отказ = ПроверитьЗаключениеНовыхДоговоров();
	КонецЕсли;
	
	Если Не Отказ Тогда
		Отказ = ПроверитьНаличиеМестВУказаннойГруппе();
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.удуСведенияОЗачисленииРебенкаВГруппу.Записывать = Истина;
		Для Каждого ТекСтрокаТабличнаяЧастьВоспитанники Из ТабличнаяЧастьВоспитанники Цикл
			Если ТекСтрокаТабличнаяЧастьВоспитанники.Обрабатывать Тогда			
				// сначала снимем ребенка с учета первоначальной группы			
				Движение = Движения.удуСведенияОЗачисленииРебенкаВГруппу.Добавить();
				Движение.Период = Дата;
				Движение.Учреждение = Учреждение;
				Движение.Ребенок = ТекСтрокаТабличнаяЧастьВоспитанники.Ребенок;
				Движение.Группа = ГруппаПервоначальная;
				Движение.ОснованиеЗачисления = ТекСтрокаТабличнаяЧастьВоспитанники.ПредыдущееОснованиеЗачисления;
				Движение.СостояниеУчетаВГруппе = Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ИсключенИзГруппы;
				Движение.ПричинаВыбытияИзГруппы = Справочники.удуПричиныВыбытияИзГруппы.ПереводВДругуюГруппу;
				
				// затем поставим на учет в новую группу
				Движение = Движения.удуСведенияОЗачисленииРебенкаВГруппу.Добавить();
				Движение.Период = Дата;
				Движение.Учреждение = Учреждение;
				Движение.Ребенок = ТекСтрокаТабличнаяЧастьВоспитанники.Ребенок;
				Движение.Группа = ГруппаДляПеревода;
				Движение.ОснованиеЗачисления = ТекСтрокаТабличнаяЧастьВоспитанники.НовоеОснованиеЗачисления;
				Движение.СостояниеУчетаВГруппе = Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу;			
				
				// Изменяем признак отработки договора зачисления
				ДоговорОбъект = ТекСтрокаТабличнаяЧастьВоспитанники.НовоеОснованиеЗачисления.ПолучитьОбъект();
				ДоговорОбъект.ПроизошлоЗачисление = Истина;
				ДоговорОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)	
	// Изменяем признак отработки договора зачисления
	Для Каждого ТекСтрокаТабличнаяЧастьВоспитанники Из ТабличнаяЧастьВоспитанники Цикл
		Если ТекСтрокаТабличнаяЧастьВоспитанники.НовоеОснованиеЗачисления <> ТекСтрокаТабличнаяЧастьВоспитанники.ПредыдущееОснованиеЗачисления Тогда
			Если ТекСтрокаТабличнаяЧастьВоспитанники.Обрабатывать Тогда
				ДоговорОбъект = ТекСтрокаТабличнаяЧастьВоспитанники.НовоеОснованиеЗачисления.ПолучитьОбъект();
				ДоговорОбъект.ПроизошлоЗачисление = Ложь;
				ДоговорОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры