&НаСервере
Процедура ПроверитьНеобходимостьФормированияТЧ()
	Если Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить() Тогда
		СформироватьТабличнуюЧастьИзДерева();		
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Функция НайтиДоговорВДереве(ПереданныйДоговор)
	ДеревоДокумента = РеквизитФормыВЗначение("ДеревоТабличнаяЧасть");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ДоговорОЗачислении", ПереданныйДоговор);
	МассивНайденныхСтрок = ДеревоДокумента.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Возврат Булево(МассивНайденныхСтрок.Количество() > 0);
КонецФункции

&НаСервере
Процедура СформироватьДеревоИзТабличнойЧасти()
	ТабличнаяЧастьДокумента = РеквизитФормыВЗначение("Объект").ТабличнаяЧастьКомплектация;
	ТабличнаяЧастьДокумента.Сортировать("ВозрастнойПризнак");
	
	ДеревоДокумента = РеквизитФормыВЗначение("ДеревоТабличнаяЧасть");
	ДеревоДокумента.Строки.Очистить();
	
	ТекущееЗначениеПризнака = "";
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьДокумента Цикл
		НовоеЗначениеПризнака = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВозрастнойПризнак), СокрЛП(СтрокаТабличнойЧасти.ВозрастнойПризнак.Наименование), "<признак не указан>");
		Если НовоеЗначениеПризнака <> ТекущееЗначениеПризнака Тогда
			ТекущееЗначениеПризнака = НовоеЗначениеПризнака;
			НоваяСтрокаПризнака = ДеревоДокумента.Строки.Добавить();
			НоваяСтрокаПризнака.ВозрастнойПризнак = НовоеЗначениеПризнака;
			НоваяСтрокаПризнака.Уровень = 1;
			
			НоваяСтрокаТаблицы = НоваяСтрокаПризнака.Строки.Добавить();
			НоваяСтрокаТаблицы.ВозрастнойПризнак = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВозрастнойПризнак), СокрЛП(СтрокаТабличнойЧасти.ВозрастнойПризнак.Наименование), "<признак не указан>");
			НоваяСтрокаТаблицы.ПорядковыйНомерЗаявки = СтрокаТабличнойЧасти.ПорядковыйНомерЗаявки;			
			НоваяСтрокаТаблицы.ЗаявкаНаЗачисление = СтрокаТабличнойЧасти.ЗаявкаНаЗачисление;
			НоваяСтрокаТаблицы.Ребенок = СтрокаТабличнойЧасти.Ребенок;
			НоваяСтрокаТаблицы.ОплатаПоДоговору = СтрокаТабличнойЧасти.ОплатаПоДоговору;
			НоваяСтрокаТаблицы.ДоговорОЗачислении = СтрокаТабличнойЧасти.ДоговорОЗачислении;		
			НоваяСтрокаТаблицы.РодительВЗаявке = СтрокаТабличнойЧасти.Родитель;
			НоваяСтрокаТаблицы.ДатаФормированияДоговора = СтрокаТабличнойЧасти.ДатаФормированияДоговора;
			НоваяСтрокаТаблицы.ГруппаДляЗачисления = СтрокаТабличнойЧасти.ГруппаДляЗачисления;
			НоваяСтрокаТаблицы.ДокументыСформированы = СтрокаТабличнойЧасти.ДокументыСформированы;
			НоваяСтрокаТаблицы.ФормироватьДоговор = СтрокаТабличнойЧасти.ФормироватьДоговор;
			НоваяСтрокаТаблицы.УтвержденВГруппу = СтрокаТабличнойЧасти.УтвержденВГруппу;
			НоваяСтрокаТаблицы.ПризнакПереходаИзДругойГруппы = СтрокаТабличнойЧасти.ПризнакПереходаИзДругойГруппы;			
			НоваяСтрокаТаблицы.Уровень = 0;
		Иначе
			НоваяСтрокаТаблицы = НоваяСтрокаПризнака.Строки.Добавить();
			НоваяСтрокаТаблицы.ВозрастнойПризнак = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВозрастнойПризнак), СокрЛП(СтрокаТабличнойЧасти.ВозрастнойПризнак.Наименование), "<признак не указан>");
			НоваяСтрокаТаблицы.ПорядковыйНомерЗаявки = СтрокаТабличнойЧасти.ПорядковыйНомерЗаявки;
			НоваяСтрокаТаблицы.ЗаявкаНаЗачисление = СтрокаТабличнойЧасти.ЗаявкаНаЗачисление;
			НоваяСтрокаТаблицы.Ребенок = СтрокаТабличнойЧасти.Ребенок;
			НоваяСтрокаТаблицы.ОплатаПоДоговору = СтрокаТабличнойЧасти.ОплатаПоДоговору;
			НоваяСтрокаТаблицы.ДоговорОЗачислении = СтрокаТабличнойЧасти.ДоговорОЗачислении;		
			НоваяСтрокаТаблицы.РодительВЗаявке = СтрокаТабличнойЧасти.Родитель;
			НоваяСтрокаТаблицы.ДатаФормированияДоговора = СтрокаТабличнойЧасти.ДатаФормированияДоговора;
			НоваяСтрокаТаблицы.ГруппаДляЗачисления = СтрокаТабличнойЧасти.ГруппаДляЗачисления;
			НоваяСтрокаТаблицы.ДокументыСформированы = СтрокаТабличнойЧасти.ДокументыСформированы;
			НоваяСтрокаТаблицы.ФормироватьДоговор = СтрокаТабличнойЧасти.ФормироватьДоговор;
			НоваяСтрокаТаблицы.УтвержденВГруппу = СтрокаТабличнойЧасти.УтвержденВГруппу;
			НоваяСтрокаТаблицы.ПризнакПереходаИзДругойГруппы = СтрокаТабличнойЧасти.ПризнакПереходаИзДругойГруппы;
			НоваяСтрокаТаблицы.Уровень = 0;
		КонецЕсли;			
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоДокумента, "ДеревоТабличнаяЧасть");
КонецПроцедуры

&НаСервере
Процедура СформироватьТабличнуюЧастьИзДерева()
	ДеревоДокумента = РеквизитФормыВЗначение("ДеревоТабличнаяЧасть");
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	ТабличнаяЧастьДокумента = ОбъектРеквизит.ТабличнаяЧастьКомплектация;
	
	ТабличнаяЧастьДокумента.Очистить();
	Для Каждого СтрокаПризнака Из ДеревоДокумента.Строки Цикл
		Для Каждого СтрокаЗаявки Из СтрокаПризнака.Строки Цикл
			НоваяСтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			Если СтрокаЗаявки.ВозрастнойПризнак = "<признак не указан>" Тогда
				НоваяСтрокаТабличнойЧасти.ВозрастнойПризнак = Справочники.удуВозрастныеПризнаки.ПустаяСсылка();
			Иначе
				НоваяСтрокаТабличнойЧасти.ВозрастнойПризнак = Справочники.удуВозрастныеПризнаки.НайтиПоНаименованию(СтрокаЗаявки.ВозрастнойПризнак);
			КонецЕсли;
			НоваяСтрокаТабличнойЧасти.ПорядковыйНомерЗаявки = СтрокаЗаявки.ПорядковыйНомерЗаявки;
			НоваяСтрокаТабличнойЧасти.ЗаявкаНаЗачисление = СтрокаЗаявки.ЗаявкаНаЗачисление;
			НоваяСтрокаТабличнойЧасти.Ребенок = СтрокаЗаявки.Ребенок;
			НоваяСтрокаТабличнойЧасти.ОплатаПоДоговору = СтрокаЗаявки.ОплатаПоДоговору;
			НоваяСтрокаТабличнойЧасти.ДоговорОЗачислении = СтрокаЗаявки.ДоговорОЗачислении;		
			НоваяСтрокаТабличнойЧасти.Родитель = СтрокаЗаявки.РодительВЗаявке;
			НоваяСтрокаТабличнойЧасти.ДатаФормированияДоговора = СтрокаЗаявки.ДатаФормированияДоговора;
			НоваяСтрокаТабличнойЧасти.ГруппаДляЗачисления = СтрокаЗаявки.ГруппаДляЗачисления;
			НоваяСтрокаТабличнойЧасти.ДокументыСформированы = СтрокаЗаявки.ДокументыСформированы;
			НоваяСтрокаТабличнойЧасти.ФормироватьДоговор = СтрокаЗаявки.ФормироватьДоговор;
			НоваяСтрокаТабличнойЧасти.УтвержденВГруппу = СтрокаЗаявки.УтвержденВГруппу;
			НоваяСтрокаТабличнойЧасти.ПризнакПереходаИзДругойГруппы = СтрокаЗаявки.ПризнакПереходаИзДругойГруппы;			
		КонецЦикла;		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
	ПереформироватьНомераТабличнойЧасти();	
КонецПроцедуры

&НаСервере
Функция ПроверитьКорректностьПериода(ПереданныйПериод, Учреждение)
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуКомплектованиеГруппы.Ссылка
	               |ИЗ
	               |	Документ.удуКомплектованиеГруппы КАК удуКомплектованиеГруппы
	               |ГДЕ
	               |	НЕ удуКомплектованиеГруппы.ПометкаУдаления
	               |	И удуКомплектованиеГруппы.ПериодКомплектования = &ПериодКомплектования
	               |	И удуКомплектованиеГруппы.Учреждение = &Учреждение";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПериодКомплектования", ПереданныйПериод);
	Запрос.УстановитьПараметр("Учреждение", Учреждение);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат Булево(РезультатЗапроса.Количество() = 0);
КонецФункции

&НаСервере
Процедура ПереформироватьНомераТабличнойЧасти()
	// сначал сформируем список заявок в табличной части для упорядочивания
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	СписокЗаявок = Новый СписокЗначений;
	НомерЗаявки = 0;
	Для Каждого СтрокаЗаявки Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаявкаНаЗачисление) Тогда
			СписокЗаявок.Добавить(СтрокаЗаявки.ЗаявкаНаЗачисление);
		КонецЕсли;
		
		Если СтрокаЗаявки.ПризнакПереходаИзДругойГруппы Тогда
			НомерЗаявки = НомерЗаявки + 1;
			СтрокаЗаявки.ПорядковыйНомерЗаявки = НомерЗаявки;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка КАК ЗаявкаСсылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер КАК Номер,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата КАК Дата,
	               |	МАКСИМУМ(удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Льгота.Приоритетность) КАК Приоритетность,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь КАК ДатаРегистрацииВОчередь
	               |ИЗ
	               |	Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ КАК удуЗаявкаНаЗачислениеРебенкаВДОУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ.ЛьготыПоЗаявке КАК удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке
	               |		ПО удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка = удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Ссылка
	               |ГДЕ
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка В(&СписокЗаявок)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритетность УБЫВ,
	               |	ДатаРегистрацииВОчередь,
	               |	Номер";	
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокЗаявок", СписокЗаявок);	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		НомерЗаявки = НомерЗаявки + 1;
		НайденнаяСтрокаТЧ = ОбъектРеквизит.ТабличнаяЧастьКомплектация.Найти(СтрокаРезультата.ЗаявкаСсылка, "ЗаявкаНаЗачисление");
		НайденнаяСтрокаТЧ.ПорядковыйНомерЗаявки = НомерЗаявки;
	КонецЦикла;
	
	ОбъектРеквизит.ТабличнаяЧастьКомплектация.Сортировать("ПорядковыйНомерЗаявки");
	
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
КонецПроцедуры

&НаСервере
Функция КорректноПроставленыДоговора()
	Если Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить() Тогда
		СформироватьТабличнуюЧастьИзДерева();
	КонецЕсли;	
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	ТЧЗаполненаКорректно = Истина;
	
	ЕстьОтмеченныеСтроки = Ложь;
	Для Каждого СтрокаКомплектации Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если (СтрокаКомплектации.УтвержденВГруппу) Тогда
			ЕстьОтмеченныеСтроки = Истина;
		КонецЕсли;
		
		Если (СтрокаКомплектации.УтвержденВГруппу) И (НЕ ЗначениеЗаполнено(СтрокаКомплектации.ДоговорОЗачислении)) И (НЕ СтрокаКомплектации.ПризнакПереходаИзДругойГруппы) Тогда
			ТЧЗаполненаКорректно = Ложь;
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В табличной части не заполнено значение поля ""Договор о зачислении"", при установленном признаке ""Утв""'");				
			Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаКомплектации.НомерСтроки - 1, "ЧГ=0") + "].ДоговорОЗачислении'");
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();			
		КонецЕсли;
		
		Если (СтрокаКомплектации.УтвержденВГруппу) И (ЗначениеЗаполнено(СтрокаКомплектации.ДоговорОЗачислении)) И (СтрокаКомплектации.ДоговорОЗачислении.ПроизошлоЗачисление) Тогда
			ТЧЗаполненаКорректно = Ложь;
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В строке табличной части №" + Строка(СтрокаКомплектации.НомерСтроки) + " указан договор, по которому уже произошло зачисление ребенка в группу'");				
			Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаКомплектации.НомерСтроки - 1, "ЧГ=0") + "].ДоговорОЗачислении'");
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();			
		КонецЕсли;
		
		Если (СтрокаКомплектации.УтвержденВГруппу) И (ЗначениеЗаполнено(СтрокаКомплектации.ДоговорОЗачислении)) И (СтрокаКомплектации.ДоговорОЗачислении.ПроизошлоОтчисление) Тогда
			ТЧЗаполненаКорректно = Ложь;
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В строке табличной части №" + Строка(СтрокаКомплектации.НомерСтроки) + " указан договор, по которому произошло выбытие ребенка из группы'");				
			Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаКомплектации.НомерСтроки - 1, "ЧГ=0") + "].ДоговорОЗачислении'");
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();			
		КонецЕсли;		
	КонецЦикла;
	
	Если НЕ ЕстьОтмеченныеСтроки Тогда
		ТЧЗаполненаКорректно = Ложь;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'В табличной части не выбрана ни одна строка для формирования приказов, либо табличная часть не заполнена'");		
		Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация'");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();		
	КонецЕсли;
	
	Возврат ТЧЗаполненаКорректно;
КонецФункции

&НаСервере
Процедура СформироватьПриказыНаСервере(ДатаФормированияПриказов)
	// сначала удалим предыдущие документы формирования группы
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	// получим список окдов детей в табличной части для запроса
	СписокКодов = новый СписокЗначений;
	Для Каждого СтрокаКомплектации Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если СтрокаКомплектации.УтвержденВГруппу Тогда
			СписокКодов.Добавить(СтрокаКомплектации.Ребенок.Код);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Группа,
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок,
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.ОснованиеЗачисления
	               |ИЗ
	               |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(&ДатаВыборки, Ребенок.Код В (&СписокКодов)) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
	               |ГДЕ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе = &СостояниеУчетаВГруппе";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаВыборки", ДатаФормированияПриказов);
	Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	Запрос.УстановитьПараметр("СостояниеУчетаВГруппе", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДляЗачисления = Новый ТаблицаЗначений;
	ТаблицаДляЗачисления.Колонки.Добавить("Ребенок");
	ТаблицаДляЗачисления.Колонки.Добавить("ГруппаДляЗачисления");
	ТаблицаДляЗачисления.Колонки.Добавить("ОснованиеЗачисления");	
	
	ТаблицаДляПеревода = Новый ТаблицаЗначений;
	ТаблицаДляПеревода.Колонки.Добавить("Ребенок");
	ТаблицаДляПеревода.Колонки.Добавить("СтараяГруппа");
	ТаблицаДляПеревода.Колонки.Добавить("ГруппаДляПеревода");
	ТаблицаДляПеревода.Колонки.Добавить("СтароеОснованиеЗачисления");
	ТаблицаДляПеревода.Колонки.Добавить("НовоеОснованиеЗачисления");
	
	Для Каждого СтрокаКомплектации Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если (СтрокаКомплектации.УтвержденВГруппу) И НЕ (СтрокаКомплектации.ДокументыСформированы) Тогда
			НайденнаяСтрокаЗапроса = РезультатЗапроса.Найти(СтрокаКомплектации.Ребенок, "Ребенок");
			Если НайденнаяСтрокаЗапроса = Неопределено Тогда
				// формируем таблицу для зачисления в группу
				НоваяСтрокаЗачисления = ТаблицаДляЗачисления.Добавить();
				НоваяСтрокаЗачисления.Ребенок = СтрокаКомплектации.Ребенок;
				НоваяСтрокаЗачисления.ГруппаДляЗачисления = СтрокаКомплектации.ГруппаДляЗачисления;
				НоваяСтрокаЗачисления.ОснованиеЗачисления = СтрокаКомплектации.ДоговорОЗачислении;
			Иначе
				// формируем таблицу для перевода в группу
				НоваяСтрокаПеревода = ТаблицаДляПеревода.Добавить();
				НоваяСтрокаПеревода.Ребенок = СтрокаКомплектации.Ребенок;
				НоваяСтрокаПеревода.СтароеОснованиеЗачисления = НайденнаяСтрокаЗапроса.ОснованиеЗачисления;
				НоваяСтрокаПеревода.СтараяГруппа = НайденнаяСтрокаЗапроса.Группа;
				НоваяСтрокаПеревода.ГруппаДляПеревода = СтрокаКомплектации.ГруппаДляЗачисления;
				НоваяСтрокаПеревода.НовоеОснованиеЗачисления = СтрокаКомплектации.ДоговорОЗачислении;
			КонецЕсли;
			
			// установим признак сформированности документа
			СтрокаКомплектации.ДокументыСформированы = Истина;
			СтрокаКомплектации.УтвержденВГруппу = Ложь;
		КонецЕсли;		
	КонецЦикла;
	
	// формируем приказ о зачислении ребенка в группу
	ТаблицаДляЗачисления.Сортировать("ГруппаДляЗачисления");
	Если ТаблицаДляЗачисления.Количество() > 0 Тогда		
		ТекущаяГруппа = ТаблицаДляЗачисления.Получить(0).ГруппаДляЗачисления;
		
		ДокументПриказОЗачислении = Документы.удуПриказОЗачисленииРебенкаВГруппу.СоздатьДокумент();
		ДокументПриказОЗачислении.Дата = ДатаФормированияПриказов;
		ДокументПриказОЗачислении.ДатаФактическогоЗачисления = ДатаФормированияПриказов;
		ДокументПриказОЗачислении.Группа = ТекущаяГруппа;
		ДокументПриказОЗачислении.Комментарий = "Создан на основании комплектации: " + Строка(Объект.Ссылка);
		ДокументПриказОЗачислении.Учреждение = Объект.Учреждение;
		ДокументПриказОЗачислении.ДокументКомплектация = Объект.Ссылка;		
		
		Для Каждого СтрокаЗачисления Из ТаблицаДляЗачисления Цикл
			Если ТекущаяГруппа <> СтрокаЗачисления.ГруппаДляЗачисления Тогда
				ТекущаяГруппа = СтрокаЗачисления.ГруппаДляЗачисления;
				
				Попытка
					ДокументПриказОЗачислении.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ДокументПриказОЗачислении.ОтключитьКонтрольВместимости = Истина;
					ДокументПриказОЗачислении.Записать(РежимЗаписиДокумента.Проведение);
				КонецПопытки;
				
				ДокументПриказОЗачислении = Документы.удуПриказОЗачисленииРебенкаВГруппу.СоздатьДокумент();
				ДокументПриказОЗачислении.Дата = ДатаФормированияПриказов;
				ДокументПриказОЗачислении.ДатаФактическогоЗачисления = ДатаФормированияПриказов;
				ДокументПриказОЗачислении.Группа = ТекущаяГруппа;
				ДокументПриказОЗачислении.Комментарий = "Создан на основании комплектации: " + Строка(Объект.Ссылка);
				ДокументПриказОЗачислении.Учреждение = Объект.Учреждение;
				ДокументПриказОЗачислении.ДокументКомплектация = Объект.Ссылка;
			КонецЕсли;
			НоваяСтрокаПриказаОЗачислении = ДокументПриказОЗачислении.ТабличнаяЧастьЗачисление.Добавить();
			НоваяСтрокаПриказаОЗачислении.Ребенок = СтрокаЗачисления.Ребенок;
			НоваяСтрокаПриказаОЗачислении.ОснованиеЗачисления = СтрокаЗачисления.ОснованиеЗачисления;
		КонецЦикла;
		
		Попытка
			ДокументПриказОЗачислении.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументПриказОЗачислении.ОтключитьКонтрольВместимости = Истина;
			ДокументПриказОЗачислении.Записать(РежимЗаписиДокумента.Проведение);
		КонецПопытки;
		
	КонецЕсли;
	
	// формируем приказы о переводе детей в группу
	ТаблицаДляПеревода.Сортировать("СтараяГруппа, ГруппаДляПеревода");
	Если ТаблицаДляПеревода.Количество() > 0 Тогда
		ТекущаяСтараяГруппа = ТаблицаДляПеревода.Получить(0).СтараяГруппа;
		ТекущаяГруппаДляПеревода = ТаблицаДляПеревода.Получить(0).ГруппаДляПеревода;
		
		ДокументПриказОПереводе = Документы.удуПриказОПереводеВДругуюГруппу.СоздатьДокумент();
		ДокументПриказОПереводе.Дата = ДатаФормированияПриказов;
		ДокументПриказОПереводе.ГруппаПервоначальная = ТекущаяСтараяГруппа;
		ДокументПриказОПереводе.ГруппаДляПеревода = ТекущаяГруппаДляПеревода;
		ДокументПриказОПереводе.Комментарий = "Создан на основании комплектации: " + Строка(Объект.Ссылка);
		ДокументПриказОПереводе.Учреждение = Объект.Учреждение;
		ДокументПриказОПереводе.ДокументКомплектация = Объект.Ссылка;		
		
		Для Каждого СтрокаПеревода Из ТаблицаДляПеревода Цикл
			Если (ТекущаяСтараяГруппа <> СтрокаПеревода.СтараяГруппа) Или (ТекущаяГруппаДляПеревода <> СтрокаПеревода.ГруппаДляПеревода) Тогда
				ТекущаяСтараяГруппа = СтрокаПеревода.СтараяГруппа;
				ТекущаяГруппаДляПеревода = СтрокаПеревода.ГруппаДляПеревода;
				
				Попытка
					ДокументПриказОПереводе.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ДокументПриказОПереводе.ОтключитьКонтрольВместимости = Истина;
					ДокументПриказОПереводе.Записать(РежимЗаписиДокумента.Проведение);
				КонецПопытки;
				
				ДокументПриказОПереводе = Документы.удуПриказОПереводеВДругуюГруппу.СоздатьДокумент();
				ДокументПриказОПереводе.Дата = ДатаФормированияПриказов;
				ДокументПриказОПереводе.ГруппаПервоначальная = ТекущаяСтараяГруппа;
				ДокументПриказОПереводе.ГруппаДляПеревода = ТекущаяГруппаДляПеревода;
				ДокументПриказОПереводе.Комментарий = "Создан на основании комплектации: " + Строка(Объект.Ссылка);
				ДокументПриказОПереводе.Учреждение = Объект.Учреждение;
				ДокументПриказОПереводе.ДокументКомплектация = Объект.Ссылка;
			КонецЕсли;
			
			НоваяСтрокаПриказаОПереводе = ДокументПриказОПереводе.ТабличнаяЧастьВоспитанники.Добавить();
			НоваяСтрокаПриказаОПереводе.Ребенок = СтрокаПеревода.Ребенок;
			НоваяСтрокаПриказаОПереводе.ПредыдущееОснованиеЗачисления = СтрокаПеревода.СтароеОснованиеЗачисления;
			Если ЗначениеЗаполнено(СтрокаПеревода.НовоеОснованиеЗачисления) Тогда
				НоваяСтрокаПриказаОПереводе.НовоеОснованиеЗачисления = СтрокаПеревода.НовоеОснованиеЗачисления;
				ДокументПриказОПереводе.РазрешитьПереводВГруппуБезДоговора = Ложь;
			Иначе
				НоваяСтрокаПриказаОПереводе.НовоеОснованиеЗачисления = СтрокаПеревода.СтароеОснованиеЗачисления;
				ДокументПриказОПереводе.РазрешитьПереводВГруппуБезДоговора = Истина;
			КонецЕсли;
			НоваяСтрокаПриказаОПереводе.Обрабатывать = Истина;			
		КонецЦикла;	
		
		Попытка
			ДокументПриказОПереводе.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументПриказОПереводе.ОтключитьКонтрольВместимости = Истина;
			ДокументПриказОПереводе.Записать(РежимЗаписиДокумента.Проведение);
		КонецПопытки;		
		
	КонецЕсли;
	
	ОбъектРеквизит.Записать(РежимЗаписиДокумента.Запись);
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
	
	СформироватьДеревоИзТабличнойЧасти();
КонецПроцедуры

&НаСервере
Функция ПроверитьКорректностьТабличнойЧасти()
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	ТЧЗаполненаКорректно = Истина;
	            
	// проверим заполнение реквизита Учреждение
	Если Не ЗначениеЗаполнено(ОбъектРеквизит.Учреждение) Тогда
		ТЧЗаполненаКорректно = Ложь;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'В документе не заполнено значение реквизита ""Учреждение""'");		
		Сообщение.Поле = НСтр("ru = 'Объект.Учреждение'");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();		
	КонецЕсли;
	
	ЕстьОтмеченныеЭлементы = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если СтрокаТабличнойЧасти.ФормироватьДоговор Тогда
			ЕстьОтмеченныеЭлементы = Истина;
			// проверим заполнение поля "Ребенок"
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Ребенок) Тогда
				ТЧЗаполненаКорректно = Ложь;
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'В табличной части не заполнено значение поля ""Ребенок""'");				
				Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0") + "].Ребенок'");
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
			КонецЕсли;
				
			// проверим заполнение поля "Родитель"
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Родитель) Тогда
				ТЧЗаполненаКорректно = Ложь;
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'В табличной части не заполнено значение поля ""Родитель""'");
				Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0") + "].Родитель'");
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
			КонецЕсли;
			
			// проверим заполнение реквизита Группа
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГруппаДляЗачисления) Тогда
				ТЧЗаполненаКорректно = Ложь;
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'В табличной части не заполнено значение поля ""Группа для зачисления""'");
				Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0") + "].ГруппаДляЗачисления'");
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();		
			КонецЕсли;				
			
			// проверим заполнение реквизита Дата формирования договора
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаФормированияДоговора) Тогда
				ТЧЗаполненаКорректно = Ложь;
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'В табличной части не заполнено значение поля ""Дата формирования договора""'");
				Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0") + "].ДатаФормированияДоговора'");
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();		
			КонецЕсли;
			
			// проверим заполнение поля "Оплата по договору"
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОплатаПоДоговору) Тогда
				ТЧЗаполненаКорректно = Ложь;
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'В табличной части не заполнено значение поля ""Оплата по договору""'");
				Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0") + "].ОплатаПоДоговору'");
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОтмеченныеЭлементы Тогда
		ТЧЗаполненаКорректно = Ложь;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'В табличной части не отмечена ни одна строка для формирования договора, либо табличная часть не заполнена'");		
		Сообщение.Поле = НСтр("ru = 'Объект.ТабличнаяЧастьКомплектация'");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();		
	КонецЕсли;
	
	Возврат ТЧЗаполненаКорректно;
КонецФункции

&НаСервере
Процедура СформироватьДоговораНаСервере()
	// сформируем договора по данным табличной части
	Если Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить() Тогда
		СформироватьТабличнуюЧастьИзДерева();
	КонецЕсли;
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаТаблчинойЧасти Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если СтрокаТаблчинойЧасти.ФормироватьДоговор Тогда
			// исключим повторное формирование договоров
			//Если Не ЗначениеЗаполнено(СтрокаТаблчинойЧасти.ДоговорОЗачислении) ИЛИ УдалятьДоговора Тогда 				
			НовыйДоговор = Документы.удуДоговорОЗачисленииРебенка.СоздатьДокумент();
			НовыйДоговор.Дата = СтрокаТаблчинойЧасти.ДатаФормированияДоговора;
			НовыйДоговор.Учреждение = ОбъектРеквизит.Учреждение;
			НовыйДоговор.Группа = СтрокаТаблчинойЧасти.ГруппаДляЗачисления;
			НовыйДоговор.Ребенок = СтрокаТаблчинойЧасти.Ребенок;
			НовыйДоговор.Родитель = СтрокаТаблчинойЧасти.Родитель;
			НовыйДоговор.ОплатаПоДоговору = СтрокаТаблчинойЧасти.ОплатаПоДоговору;
			НовыйДоговор.ПроизошлоЗачисление = Ложь;
			НовыйДоговор.ПроизошлоОтчисление = Ложь;
			НовыйДоговор.СодержаниеДоговора = ОбъектРеквизит.СодержаниеДоговораПоУмолчанию;
			НовыйДоговор.ВидСтавкиОплаты = Перечисления.удуВидыСтавокРодительскойПлаты.Месячная;
			// проставим соответствие между договором и заявкой на зачисление
			Если ЗначениеЗаполнено(СтрокаТаблчинойЧасти.ЗаявкаНаЗачисление) Тогда
				НовыйДоговор.ПризнакФормированияБезЗаявки = Ложь;
				НовыйДоговор.ЗаявкаОснование = СтрокаТаблчинойЧасти.ЗаявкаНаЗачисление;
				
				// а теперь изменим реквизиты заявки
				ЗаявкаОбъект = СтрокаТаблчинойЧасти.ЗаявкаНаЗачисление.ПолучитьОбъект();
				Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.ФактическаяДатаЯвкиРодителя) Тогда
					ЗаявкаОбъект.ФактическаяДатаЯвкиРодителя = НовыйДоговор.Дата;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.ДатаВыдачиУведомления) Тогда
					ЗаявкаОбъект.ДатаВыдачиУведомления = НовыйДоговор.Дата;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.РодительДляУведомления) Тогда
					ЗаявкаОбъект.РодительДляУведомления = НовыйДоговор.Родитель;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.ДатаВыдачиНаправления) Тогда
					ЗаявкаОбъект.ДатаВыдачиНаправления = НовыйДоговор.Дата;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.РодительДляНаправления) Тогда
					ЗаявкаОбъект.РодительДляНаправления = НовыйДоговор.Родитель;
				КонецЕсли;
				ЗаявкаОбъект.Записать();
			КонецЕсли;
			
			НовыйДоговор.Записать(РежимЗаписиДокумента.Запись);
						
			СтрокаТаблчинойЧасти.ДоговорОЗачислении = НовыйДоговор.Ссылка;
			СтрокаТаблчинойЧасти.ФормироватьДоговор = Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	ОбъектРеквизит.Записать(РежимЗаписиДокумента.Запись);
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
	СформироватьДеревоИзТабличнойЧасти();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатуНаСервере()
	Если Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить() Тогда
		СформироватьТабличнуюЧастьИзДерева();
	КонецЕсли;
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаТабличнойЧасти Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорОЗачислении) Тогда
			СтрокаТабличнойЧасти.ОплатаПоДоговору = Объект.ОплатаПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
	
	СформироватьДеревоИзТабличнойЧасти();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявкамиНаЗачислениеНаСервере()
	// Поскольку используется алгоритм переформирования порядковых номеров заявок, очистим табличную часть, где стоят заявки.
	Если Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить() Тогда
		СформироватьТабличнуюЧастьИзДерева();
	КонецЕсли;
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаКомплектации Из ОбъектРеквизит.ТабличнаяЧастьКомплектация Цикл
		Если ЗначениеЗаполнено(СтрокаКомплектации.ЗаявкаНаЗачисление) Тогда
			МассивСтрок.Добавить(СтрокаКомплектации);			
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
		ОбъектРеквизит.ТабличнаяЧастьКомплектация.Удалить(МассивСтрок[Сч]);
	КонецЦикла;
		
	// Получим начальный номер, исходя из имеющихся групп.
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуДоговорОЗачисленииРебенка.Ссылка КАК ДоговорСсылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка КАК ЗаявкаСсылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер КАК Номер,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата КАК Дата,
	               |	МАКСИМУМ(удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Льгота.Приоритетность) КАК Приоритетность,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь КАК ДатаРегистрацииВОчередь,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакЗачисления,
	               |	ВЫБОР
	               |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакЗачисления
	               |			ТОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаПоФактуЗачисления
	               |		ИНАЧЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаЖелаемая
	               |	КОНЕЦ КАК ГруппаИзЗаявки,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаЖелаемая.ВозрастнойПризнак КАК ВозрастнойПризнак
	               |ИЗ
	               |	Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ КАК удуЗаявкаНаЗачислениеРебенкаВДОУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуДоговорОЗачисленииРебенка КАК удуДоговорОЗачисленииРебенка
	               |		ПО (удуДоговорОЗачисленииРебенка.ЗаявкаОснование = удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ.ЛьготыПоЗаявке КАК удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке
	               |		ПО удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка = удуЗаявкаНаЗачислениеРебенкаВДОУЛьготыПоЗаявке.Ссылка
	               |ГДЕ
	               |	НЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ПометкаУдаления
	               |	И НЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакОтказаВЗачислении
	               |	И удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаПланируемогоПоступления = &ДатаПланируемогоПоступления
	               |	И ВЫБОР
	               |			КОГДА удуДоговорОЗачисленииРебенка.Ссылка <> &ПустойДоговор
	               |				ТОГДА НЕ удуДоговорОЗачисленииРебенка.ПометкаУдаления
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И удуЗаявкаНаЗачислениеРебенкаВДОУ.Учреждение = &Учреждение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	удуДоговорОЗачисленииРебенка.Ссылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Ссылка,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Номер,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.Дата,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ДатаРегистрацииВОчередь,
	               |	удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакЗачисления,
	               |	ВЫБОР
	               |		КОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ПризнакЗачисления
	               |			ТОГДА удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаПоФактуЗачисления
	               |		ИНАЧЕ удуЗаявкаНаЗачислениеРебенкаВДОУ.ГруппаЖелаемая
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритетность УБЫВ,
	               |	ДатаРегистрацииВОчередь,
	               |	Номер";	
				   
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("ДатаПланируемогоПоступления", ОбъектРеквизит.ПериодКомплектования);	
	Запрос.УстановитьПараметр("ПустойДоговор", Документы.удуДоговорОЗачисленииРебенка.ПустаяСсылка());
	Запрос.УстановитьПараметр("Учреждение", Объект.Учреждение);
	
	НомерЗаявки = 0;                   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		НомерЗаявки = НомерЗаявки + 1;
		НоваяСтрокаТабличнойЧасти = ОбъектРеквизит.ТабличнаяЧастьКомплектация.Добавить();
		НоваяСтрокаТабличнойЧасти.ВозрастнойПризнак = СтрокаРезультата.ВозрастнойПризнак;
		НоваяСтрокаТабличнойЧасти.ЗаявкаНаЗачисление = СтрокаРезультата.ЗаявкаСсылка;
		НоваяСтрокаТабличнойЧасти.Ребенок = СтрокаРезультата.ЗаявкаСсылка.Ребенок;		
		НоваяСтрокаТабличнойЧасти.ДоговорОЗачислении = СтрокаРезультата.ДоговорСсылка;		
		Если ЗначениеЗаполнено(НоваяСтрокаТабличнойЧасти.ДоговорОЗачислении) Тогда
			НоваяСтрокаТабличнойЧасти.Родитель = НоваяСтрокаТабличнойЧасти.ДоговорОЗачислении.Родитель;
			НоваяСтрокаТабличнойЧасти.ДатаФормированияДоговора = НоваяСтрокаТабличнойЧасти.ДоговорОЗачислении.Дата;
			НоваяСтрокаТабличнойЧасти.ОплатаПоДоговору = НоваяСтрокаТабличнойЧасти.ДоговорОЗачислении.ОплатаПоДоговору;
		Иначе
			НоваяСтрокаТабличнойЧасти.Родитель = СтрокаРезультата.ЗаявкаСсылка.РодительПодавшийЗаявку;
			НоваяСтрокаТабличнойЧасти.ДатаФормированияДоговора = Дата(Число(Лев(Объект.ПериодКомплектования, 4)), 09, 01);
			НоваяСтрокаТабличнойЧасти.ОплатаПоДоговору = Объект.ОплатаПоУмолчанию;
		КонецЕсли;
		НоваяСтрокаТабличнойЧасти.ГруппаДляЗачисления = СтрокаРезультата.ГруппаИзЗаявки;
		НоваяСтрокаТабличнойЧасти.ДокументыСформированы = СтрокаРезультата.ПризнакЗачисления;
		НоваяСтрокаТабличнойЧасти.ФормироватьДоговор = (НЕ СтрокаРезультата.ПризнакЗачисления) И (Не ЗначениеЗаполнено(НоваяСтрокаТабличнойЧасти.ДоговорОЗачислении));
		НоваяСтрокаТабличнойЧасти.ПризнакПереходаИзДругойГруппы = Ложь;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
	
	ПереформироватьНомераТабличнойЧасти();	
	
	СформироватьДеревоИзТабличнойЧасти();	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставомГруппыНаСервере(ВыбраннаяГруппа)
	СформироватьТабличнуюЧастьИзДерева();
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.Ребенок
	               |ИЗ
	               |	РегистрСведений.удуСведенияОЗачисленииРебенкаВГруппу.СрезПоследних(&ДатаВыборки, Группа = &Группа) КАК удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних
	               |ГДЕ
	               |	удуСведенияОЗачисленииРебенкаВГруппуСрезПоследних.СостояниеУчетаВГруппе = &СостояниеУчетаВГруппе";
				   
	ПараметрДатаВыборки = Дата(Число(Лев(Объект.ПериодКомплектования, 4)), 08, 31);
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаВыборки", ПараметрДатаВыборки);
	Запрос.УстановитьПараметр("Группа", ВыбраннаяГруппа);
	Запрос.УстановитьПараметр("СостояниеУчетаВГруппе", Перечисления.удуСостояниеРебенкаНаУчетеВГруппе.ПринятВГруппу);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ребенок", СтрокаРезультата.Ребенок);
		МассивНайденныхСтрок = ОбъектРеквизит.ТабличнаяЧастьКомплектация.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			НоваяСтрокаТабличнойЧасти = ОбъектРеквизит.ТабличнаяЧастьКомплектация.Добавить();
			НоваяСтрокаТабличнойЧасти.Ребенок = СтрокаРезультата.Ребенок;
			НоваяСтрокаТабличнойЧасти.ОплатаПоДоговору = ОбъектРеквизит.ОплатаПоУмолчанию;
			НоваяСтрокаТабличнойЧасти.ДатаФормированияДоговора = Дата(Число(Лев(Объект.ПериодКомплектования, 4)), 09, 01);
			НоваяСтрокаТабличнойЧасти.ФормироватьДоговор = Истина;
			НоваяСтрокаТабличнойЧасти.ПризнакПереходаИзДругойГруппы = Истина;
			НоваяСтрокаТабличнойЧасти.ДокументыСформированы = Ложь;
			НоваяСтрокаТабличнойЧасти.ВозрастнойПризнак = ВыбраннаяГруппа.ВозрастнойПризнак;
		КонецЕсли;
	КонецЦикла;		
	
	ЗначениеВРеквизитФормы(ОбъектРеквизит, "Объект");
	
	ПереформироватьНомераТабличнойЧасти();
	СформироватьДеревоИзТабличнойЧасти();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Не ЗначениеЗаполнено(Объект.Учреждение) Тогда
		Объект.Учреждение = Константы.удуОсновноеУчреждение.Получить();
		Если Не ЗначениеЗаполнено(Объект.Учреждение) Тогда
			ЭтаФорма.Элементы.Учреждение.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СодержаниеДоговораПоУмолчанию) Тогда
		Объект.СодержаниеДоговораПоУмолчанию = "Договор о зачислении ребенка в группу"
	КонецЕсли;
	
	Элементы.КнопкаСформироватьДоговора.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.КнопкаСформироватьПриказыОФормированииГруппы.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ГруппаТЧКомплектация.Видимость = НЕ Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить();
	Элементы.ГруппаДеревоКомплектации.Видимость = Константы.удуИспользоватьВозрастнойПризнакПриКомплектовании.Получить();
	
	ТаблицаЛьготПоЗаявкеНаЗачисление.Параметры.УстановитьЗначениеПараметра("СсылкаНаЗаявку", Документы.удуЗаявкаНаЗачислениеРебенкаВДОУ.ПустаяСсылка());
	
	СформироватьДеревоИзТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьДоговора(Команда)
	// Вставить содержимое обработчика.	
	КорректностьЗаполнения = ПроверитьКорректностьТабличнойЧасти();
		
	Если КорректностьЗаполнения Тогда
			СформироватьДоговораНаСервере();
			Вопрос("Формирование договоров о зачислении успешно завершено", РежимДиалогаВопрос.ОК);			
	Иначе
		Вопрос("Формирование договоров не может быть осуществлено!", РежимДиалогаВопрос.ОК);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьОплату(Команда)
	// Вставить содержимое обработчика.
	Если Объект.ОплатаПоУмолчанию > 0 Тогда
		Если Объект.ТабличнаяЧастьКомплектация.Количество() > 0 Тогда 
			Если Вопрос("Заполнить колонку ""Оплата по договору"" значением по умолчанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ЗаполнитьОплатуНаСервере();
			КонецЕсли;
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		Вопрос("Реквизит ""Оплата (по умолчанию)"" не указан, заполнение не возможно!", РежимДиалогаВопрос.ОК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗаявкамиНаЗачисление(Команда)
	// Вставить содержимое обработчика.
	Если Объект.ТабличнаяЧастьКомплектация.Количество() > 0 Тогда
		Если Вопрос("Перед заполнением очистить табличную часть?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.ТабличнаяЧастьКомплектация.Очистить();			
			СформироватьДеревоИзТабличнойЧасти();
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьЗаявкамиНаЗачислениеНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияРодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.Ребенок) Тогда
		ФормаВыбораРодителя = ПолучитьФорму("ОбщаяФорма.удуФормаВыбораРодителя");
		ФормаВыбораРодителя.ПараметрРебенок = Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.Ребенок;
		ФормаВыбораРодителя.ВладелецФормы = ЭтаФорма;
		ФормаВыбораРодителя.ОткрытьМодально();				
	Иначе
		Вопрос("Перед выбором родителя необходимо выбрать ребенка!", РежимДиалогаВопрос.ОК);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.удуРодители") Тогда
		Если ЭтаФорма.ТекущийЭлемент.Имя = "ДеревоТабличнаяЧасть" Тогда
			Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.РодительВЗаявке = ВыбранноеЗначение;
			Модифицированность = Истина;
		ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "ТабличнаяЧастьКомплектация" Тогда
			Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.Родитель = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.удуДоговорОЗачисленииРебенка") Тогда		
		Если ЭтаФорма.ТекущийЭлемент.Имя = "ТабличнаяЧастьКомплектация" Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ДоговорОЗачислении", ВыбранноеЗначение);
			МассивНайденныхСтрок = Объект.ТабличнаяЧастьКомплектация.НайтиСтроки(СтруктураПоиска);
			Если МассивНайденныхСтрок.Количество() = 0 Тогда
				Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.ДоговорОЗачислении = ВыбранноеЗначение;
				Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.ФормироватьДоговор = Ложь;
				Модифицированность = Истина;
			Иначе
				Вопрос("Выбранный договор на зачисление ребенка уже указан в документе", РежимДиалогаВопрос.ОК);
			КонецЕсли;
		ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "ДеревоТабличнаяЧасть" Тогда
			ДоговорУжеУказан = НайтиДоговорВДереве(ВыбранноеЗначение);
			Если НЕ ДоговорУжеУказан Тогда
				Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.ДоговорОЗачислении = ВыбранноеЗначение;
				Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.ФормироватьДоговор = Ложь;
				Модифицированность = Истина;
			Иначе
				Вопрос("Выбранный договор на зачисление ребенка уже указан в документе", РежимДиалогаВопрос.ОК);
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоГруппе(Команда)
	// Вставить содержимое обработчика.
	Если Объект.ТабличнаяЧастьКомплектация.Количество() > 0 Тогда
		Если Вопрос("Перед заполнением очистить табличную часть?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.ТабличнаяЧастьКомплектация.Очистить();
			СформироватьДеревоИзТабличнойЧасти();
		КонецЕсли;	
	КонецЕсли;
	ПараметрыОтбора = Новый Структура("Учреждение",объект.Учреждение);
	ПараметрыФормы = Новый Структура("Отбор",ПараметрыОтбора);	
	ВыбраннаяГруппа = ОткрытьФормуМодально("Справочник.удуГруппыУчреждения.Форма.ФормаВыбора",ПараметрыФормы);	
	
	ЗаполнитьСоставомГруппыНаСервере(ВыбраннаяГруппа);	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсеФД(Команда)
	// Вставить содержимое обработчика.
	Если ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаУстановитьВсеФДД" Тогда		
		Для Каждого СтрокаПризнака Из ДеревоТабличнаяЧасть.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаЗаявки Из СтрокаПризнака.ПолучитьЭлементы() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗаявки.ДоговорОЗачислении) Тогда
					СтрокаЗаявки.ФормироватьДоговор = Истина;	
					Модифицированность = Истина;
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;	
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаУстановитьВсеФД" Тогда
		Для Каждого СтрокаКомплектации Из Объект.ТабличнаяЧастьКомплектация Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаКомплектации.ДоговорОЗачислении) Тогда
				СтрокаКомплектации.ФормироватьДоговор = Истина;	
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсеФД(Команда)
	// Вставить содержимое обработчика.
	Если ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаСнятьВсеФДД" Тогда		
		Для Каждого СтрокаПризнака Из ДеревоТабличнаяЧасть.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаЗаявки Из СтрокаПризнака.ПолучитьЭлементы() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗаявки.ДоговорОЗачислении) Тогда
					СтрокаЗаявки.ФормироватьДоговор = Ложь;	
					Модифицированность = Истина;
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;	
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаСнятьВсеФД" Тогда
		Для Каждого СтрокаКомплектации Из Объект.ТабличнаяЧастьКомплектация Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаКомплектации.ДоговорОЗачислении) Тогда
				СтрокаКомплектации.ФормироватьДоговор = Ложь;	
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.КнопкаСформироватьДоговора.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.КнопкаСформироватьПриказыОФормированииГруппы.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсеУтв(Команда)
	// Вставить содержимое обработчика.
	Если ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаУстановитьВсеУтвД" Тогда		
		Для Каждого СтрокаПризнака Из ДеревоТабличнаяЧасть.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаЗаявки Из СтрокаПризнака.ПолучитьЭлементы() Цикл
				Если НЕ СтрокаЗаявки.ДокументыСформированы Тогда
					СтрокаЗаявки.УтвержденВГруппу = Истина;
					Модифицированность = Истина;
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;	
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаУстановитьВсеУтв" Тогда
		Для Каждого СтрокаКомплектации Из Объект.ТабличнаяЧастьКомплектация Цикл
			Если НЕ СтрокаКомплектации.ДокументыСформированы Тогда
				СтрокаКомплектации.УтвержденВГруппу = Истина;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсеУтв(Команда)
	// Вставить содержимое обработчика.
	Если ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаСнятьВсеУтвД" Тогда		
		Для Каждого СтрокаПризнака Из ДеревоТабличнаяЧасть.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаЗаявки Из СтрокаПризнака.ПолучитьЭлементы() Цикл
				Если НЕ СтрокаЗаявки.ДокументыСформированы Тогда
					СтрокаЗаявки.УтвержденВГруппу = Ложь;
					Модифицированность = Истина;
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;	
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "КнопкаСнятьВсеУтв" Тогда
		Для Каждого СтрокаКомплектации Из Объект.ТабличнаяЧастьКомплектация Цикл
			Если НЕ СтрокаКомплектации.ДокументыСформированы Тогда
				СтрокаКомплектации.УтвержденВГруппу = Ложь;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПриказыОФормированииГруппы(Команда)
	// Вставить содержимое обработчика.
	ДатаФормированияДокументов = ТекущаяДата();
	Если Не ВвестиДату(ДатаФормированияДокументов, "Введите дату формирования приказов", ЧастиДаты.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КорректноПроставленыДоговора() Тогда
		Вопрос("Формирование приказов не может быть осуществлено", РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	СформироватьПриказыНаСервере(ДатаФормированияДокументов);
	Вопрос("Формирование приказов успешно завершено", РежимДиалогаВопрос.ОК);
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗаявкаНаЗачисление) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияФормироватьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.ДоговорОЗачислении) Тогда
		Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.ФормироватьДоговор = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	// Вставить содержимое обработчика.
	Отказ = истина;		
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
	ПереформироватьНомераТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияУтвержденВГруппуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.ДокументыСформированы Тогда
		Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.УтвержденВГруппу = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя = "ТабличнаяЧастьКомплектацияРебенок" Тогда
		СтандартнаяОбработка = Ложь;
		ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ребенок);
		ОткрытьФормуМодально("Справочник.удуДети.Форма.ФормаЭлемента", ПередаваемыеПараметры, ЭтаФорма);		
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьКомплектацияДоговорОЗачислении" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДоговорОЗачислении) Тогда
			СтандартнаяОбработка = Ложь;
			ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДоговорОЗачислении);
			ОткрытьФормуМодально("Документ.удуДоговорОЗачисленииРебенка.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);			
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьКомплектацияЗаявкаНаЗачисление" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗаявкаНаЗачисление) Тогда			
			ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЗаявкаНаЗачисление);
			ОткрытьФормуМодально("Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);			
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийГод = Год(ТекущаяДата());
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(Формат(ТекущийГод - 1, "ЧГ=0") + "/" + Формат(ТекущийГод, "ЧГ=0"));
		СписокВыбора.Добавить(Формат(ТекущийГод, "ЧГ=0") + "/" + Формат(ТекущийГод + 1, "ЧГ=0"));
		СписокВыбора.Добавить(Формат(ТекущийГод + 1, "ЧГ=0") + "/" + Формат(ТекущийГод + 2, "ЧГ=0"));
		СписокВыбора.Добавить(Формат(ТекущийГод + 2, "ЧГ=0") + "/" + Формат(ТекущийГод + 3, "ЧГ=0"));
		СписокВыбора.Добавить(Формат(ТекущийГод + 3, "ЧГ=0") + "/" + Формат(ТекущийГод + 4, "ЧГ=0"));
		
		ВыбранныйПериод = СписокВыбора.ВыбратьЭлемент("Укажите период комплектования");
		Если ВыбранныйПериод = Неопределено Тогда
			Вопрос("Перед вводом нового документа необходимо сначала указать период комплектования", РежимДиалогаВопрос.ОК);
			Отказ = Истина;
		Иначе
			Корректность = ПроверитьКорректностьПериода(ВыбранныйПериод.Значение, Объект.Учреждение);
			Если Не Корректность Тогда
				Вопрос("На выбранный период комплектования: " + Строка(ВыбранныйПериод.Значение) + " по текущему учреждению уже сформирован документ комплектации групп!", РежимДиалогаВопрос.ОК);			
				Отказ = Истина;
			Иначе 
				Объект.ПериодКомплектования=ВыбранныйПериод.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияДоговорОЗачисленииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;	
	Если ЗначениеЗаполнено(Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.ГруппаДляЗачисления) Тогда
		Если ЗначениеЗаполнено(Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.Ребенок) Тогда
			ФормаВыбораДоговора = ПолучитьФорму("ОбщаяФорма.удуФормаВыбораДоговора");
			ФормаВыбораДоговора.ПараметрГруппа = Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.ГруппаДляЗачисления;
			ФормаВыбораДоговора.ПараметрРебенок = Элементы.ТабличнаяЧастьКомплектация.ТекущиеДанные.Ребенок;			
			ФормаВыбораДоговора.ВладелецФормы = ЭтаФорма;
			ФормаВыбораДоговора.ОткрытьМодально();				
		Иначе
			Вопрос("Перед заполнением табличной части обязательно укажите ребенка!", РежимДиалогаВопрос.ОК);
		КонецЕсли;
	Иначе
		Вопрос("Перед заполнением табличной части обязательно укажите группу!", РежимДиалогаВопрос.ОК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя = "ДеревоТабличнаяЧастьРебенок" Тогда
		СтандартнаяОбработка = Ложь;
		ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ребенок);
		ОткрытьФормуМодально("Справочник.удуДети.Форма.ФормаЭлемента", ПередаваемыеПараметры, ЭтаФорма);		
	ИначеЕсли Поле.Имя = "ДеревоТабличнаяЧастьДоговорОЗачислении" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДоговорОЗачислении) Тогда
			СтандартнаяОбработка = Ложь;
			ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДоговорОЗачислении);
			ОткрытьФормуМодально("Документ.удуДоговорОЗачисленииРебенка.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);			
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ДеревоТабличнаяЧастьЗаявкаНаЗачисление" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗаявкаНаЗачисление) Тогда			
			ПередаваемыеПараметры = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЗаявкаНаЗачисление);
			ОткрытьФормуМодально("Документ.удуЗаявкаНаЗачислениеРебенкаВДОУ.Форма.ФормаДокумента", ПередаваемыеПараметры, ЭтаФорма);			
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	// Вставить содержимое обработчика.
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗаявкаНаЗачисление) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
	СформироватьТабличнуюЧастьИзДерева();
	ПереформироватьНомераТабличнойЧасти();
	СформироватьДеревоИзТабличнойЧасти();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьУтвержденВГруппуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.ДокументыСформированы Тогда
		Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.УтвержденВГруппу = Ложь;
		Модифицированность = Истина;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьРодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.Ребенок) Тогда
		ФормаВыбораРодителя = ПолучитьФорму("ОбщаяФорма.удуФормаВыбораРодителя");
		ФормаВыбораРодителя.ПараметрРебенок = Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.Ребенок;
		ФормаВыбораРодителя.ВладелецФормы = ЭтаФорма;
		ФормаВыбораРодителя.ОткрытьМодально();				
	Иначе
		Вопрос("Перед выбором родителя необходимо выбрать ребенка!", РежимДиалогаВопрос.ОК);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьФормироватьДоговорПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.ДоговорОЗачислении) Тогда
		Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.ФормироватьДоговор = Ложь;
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьДоговорОЗачисленииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;	
	Если ЗначениеЗаполнено(Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.ГруппаДляЗачисления) Тогда
		Если ЗначениеЗаполнено(Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.Ребенок) Тогда
			ФормаВыбораДоговора = ПолучитьФорму("ОбщаяФорма.удуФормаВыбораДоговора");
			ФормаВыбораДоговора.ПараметрГруппа = Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.ГруппаДляЗачисления;
			ФормаВыбораДоговора.ПараметрРебенок = Элементы.ДеревоТабличнаяЧасть.ТекущиеДанные.Ребенок;			
			ФормаВыбораДоговора.ВладелецФормы = ЭтаФорма;
			ФормаВыбораДоговора.ОткрытьМодально();				
		Иначе
			Вопрос("Перед заполнением табличной части обязательно укажите ребенка!", РежимДиалогаВопрос.ОК);
		КонецЕсли;
	Иначе
		Вопрос("Перед заполнением табличной части обязательно укажите группу!", РежимДиалогаВопрос.ОК);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьНеобходимостьФормированияТЧ();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТабличнаяЧастьПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		ТаблицаЛьготПоЗаявкеНаЗачисление.Параметры.УстановитьЗначениеПараметра("СсылкаНаЗаявку", Элемент.ТекущиеДанные.ЗаявкаНаЗачисление);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКомплектацияПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.	
	ТаблицаЛьготПоЗаявкеНаЗачисление.Параметры.УстановитьЗначениеПараметра("СсылкаНаЗаявку", Элемент.ТекущиеДанные.ЗаявкаНаЗачисление);
КонецПроцедуры

&НаКлиенте
Процедура УчреждениеПриИзменении(Элемент)
		Отказ = Не ПроверитьКорректностьПериода(Объект.ПериодКомплектования, Объект.Учреждение);
		Если  Отказ Тогда
			Вопрос("На выбранный период комплектования: " + Строка(Объект.ПериодКомплектования) + " уже сформирован документ комплектации групп!", РежимДиалогаВопрос.ОК);
			Объект.Учреждение=Объект.Учреждение.Пустая();
		КонецЕсли;
КонецПроцедуры
