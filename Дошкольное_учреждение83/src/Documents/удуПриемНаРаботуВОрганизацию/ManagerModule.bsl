////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим,ДокументДляПечати)
	
	Запрос = Новый Запрос;
	Если не ЗначениеЗаполнено(ДокументДляПечати) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	ДокументДляПечати);
	Запрос.УстановитьПараметр("ДатаДокумента",	ДокументДляПечати.Дата);
	
	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.ФизЛицо.Наименование КАК НаименованиеФизлица,
		|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК Должность,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.ФизЛицо КАК Физлицо,
		|	ОтветственныеЛицаСрезПоследних.Учреждение КАК Организация
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	РегистрСведений.удуОтветственныеЛицаУчреждения.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительОрганизации)) КАК ОтветственныеЛицаСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия, ОтветственныеЛицаСрезПоследних.НаименованиеФизлица) КАК НаименованиеОтветственногоЛица,
		|	ОтветственныеЛицаСрезПоследних.Должность,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.Физлицо,
		|	ОтветственныеЛицаСрезПоследних.Организация КАК Организация
		|ПОМЕСТИТЬ ВТДанныеОбОтветственномЛице
		|ИЗ
		|	ВТОтветственныеЛица КАК ОтветственныеЛицаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						Ответственные.Физлицо
		|					ИЗ
		|						ВТОтветственныеЛица КАК Ответственные)) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ПриемНаРаботуВОрганизацию.Организация.ОКПО КАК КодПоОКПО,
		|	ВЫРАЗИТЬ(ПриемНаРаботуВОрганизацию.Организация.ПолноеНаименование КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ВТДанныеОбОтветственномЛице.Должность КАК ДолжностьРуководителя,
		|	ВТДанныеОбОтветственномЛице.НаименованиеОтветственногоЛица КАК ФИОРуководителя,
		|	ПриемНаРаботуВОрганизацию.Организация.Префикс,
		|	ПриемНаРаботуВОрганизацию.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.удуПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ВТДанныеОбОтветственномЛице
		|		ПО ПриемНаРаботуВОрганизацию.Организация = ВТДанныеОбОтветственномЛице.Организация
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить(Справочники.удуПоказателиСхемМотивации.ТарифнаяСтавкаДневная);
		СписокПоказателей.Добавить(Справочники.удуПоказателиСхемМотивации.ТарифнаяСтавкаМесячная);
		СписокПоказателей.Добавить(Справочники.удуПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая);
		Запрос.УстановитьПараметр("ТарифнаяСтавкаОклад", СписокПоказателей);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 КАК РазмерНадбавки,
		|	""руб."" КАК ВалютаНадбавки,
		|	""коп."" КАК КопейкиНадбавки,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидНадбавки.СпособРасчета КАК СпособРасчета,
		|	СтрокиДокумента.ДатаПриема,
		|	СтрокиДокумента.ДатаУвольнения,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, СтрокиДокумента.Сотрудник.Наименование) КАК Работник,
		|	СтрокиДокумента.ФизЛицоПол,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	СтрокиДокумента.ИспытательныйСрок,
		|	СтрокиДокумента.УсловияПриемаНаРаботу,
		|	СтрокиДокумента.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	СтрокиДокумента.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|	СтрокиДокумента.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	СтрокиДокумента.Должность.Наименование КАК Должность,
		|	СтрокиДокумента.ВалютаТарифнойСтавки,
		|	СтрокиДокумента.КопейкиТарифнойСтавки,
		|	ЕСТЬNULL(СтрокиДокумента.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка,
		|	""коп."" КАК КопейкиТарифныйРазряд,
		|	""руб."" КАК ВалютаТарифныйРазряд,
		|	СтрокиДокумента.Сотрудник.Код КАК ТабельныйНомер,
		|	СтрокиДокумента.Ссылка КАК Ссылка,
		|	ИСТИНА КАК ВалютаТарифнойСтавкиРегламентированная
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник КАК Сотрудник,
		|		ПриемНаРаботуВОрганизациюРаботники.ФизЛицо.Пол КАК ФизЛицоПол,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения КАК ДатаУвольнения,
		|		ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК ИспытательныйСрок,
		|		ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ПриемНаРаботуВОрганизациюРаботники.Должность КАК Должность,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1 КАК ОкладТарифнаяСтавка,
		|		""руб."" КАК ВалютаТарифнойСтавки,
		|		""коп."" КАК КопейкиТарифнойСтавки,
		|		ВЫБОР
		|			КОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|				ТОГДА """"
		|			ИНАЧЕ ""По совместительству ""
		|		КОНЕЦ + ПриемНаРаботуВОрганизациюРаботники.УсловияПриемаНаРаботу КАК УсловияПриемаНаРаботу,
		|		ПриемНаРаботуВОрганизациюРаботники.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.удуПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Ссылка = ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка
		|				И ПриемНаРаботуВОрганизациюРаботники.Сотрудник = ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник
		|				И (ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
		|	ГДЕ
		|		ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка) КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуНадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних
		|		ПО СтрокиДокумента.ПодразделениеОрганизации = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ПодразделениеОрганизации
		|			И СтрокиДокумента.Должность = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|					ГДЕ
		|						ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО СтрокиДокумента.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция СформироватьПечатнуюФормуТ1а(МассивОбъектов, ОбъектыПечати,ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_удуПриемНаРаботуВОрганизацию_Т1а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	Для Каждого  ДокументДляПечати из МассивОбъектов цикл
		
		// получаем данные для печати
		ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента",ДокументДляПечати).Выбрать();
		ВыборкаРаботники= СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента",ДокументДляПечати).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически.
		Макет = УправлениеПечатью.ПолучитьМакет(ИмяМакета);
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ВыборкаРаботники.выбрать().Количество();
		
		// запоминаем области макета
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
		ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		
		// выводим данные о руководителях организации
		Если ВыборкаДляШапки.Следующий() Тогда
			ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
			ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
			ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		КонецЕсли;
		
		// Начинаем формировать выходной документ
		ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
		
		ВыведеноСтрок = 0;
		// выводим строки по работникам
		Пока ВыборкаРаботники.Следующий() Цикл
			
			ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
			ВложеннаяВыборка.Следующий();
			
			// Данные по работнику.
			ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
			
			РезультатСклонения = "";
			Если удуОбщегоНазначенияСервер.Просклонять(ВложеннаяВыборка.Работник, 4, РезультатСклонения, ВложеннаяВыборка.ФизЛицоПол) Тогда
				ОбластьМакета.Параметры.Работник	= РезультатСклонения
			КонецЕсли;
			
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = Формат(ВложеннаяВыборка.ОкладТарифнаяСтавка,"ЧДЦ=2");

			
			Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
				
				ТекстЯчейки = ОбластьМакета.Параметры.ОкладТарифнаяСтавка;
				ТекстЯчейки = "" + ТекстЯчейки + "," + Символы.ПС + ВложеннаяВыборка.РазмерНадбавки;
				
				Если ВложеннаяВыборка.СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.Процентом Тогда
					ТекстЯчейки = ТекстЯчейки + "(%)"
				Иначе	
					ТекстЯчейки = ТекстЯчейки + ?(ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаНадбавки)," (" + ВложеннаяВыборка.ВалютаНадбавки+")","");
				КонецЕсли;
				
				ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ТекстЯчейки;
			КонецЕсли;	
			
			
			// Уберем из табельного номера префикс.
			ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			ВывестиПодвалЛиста = Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = Не удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// если не было ни одного работника - выводим пустой бланк
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
			ОбластьМакета.Параметры.Установить(Сч - 1,""); 
		КонецЦикла;
		ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
		Пока удуОбщегоНазначенияСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуАвансовогоОтчета()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция СформироватьПечатнуюФормуТ1(МассивОбъектов, ОбъектыПечати,ИмяМакета)
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_удуПриемНаРаботуВОрганизацию_Т1";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	Для Каждого  ДокументДляПечати из МассивОбъектов цикл
		
		// получаем данные для печати
		ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента",ДокументДляПечати).Выбрать();
		ВыборкаРаботники= СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента",ДокументДляПечати).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически.
		Макет = УправлениеПечатью.ПолучитьМакет(ИмяМакета);
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Запоминаем области макета.
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника
		
		// Выводим данные о руководителях организации.
		Если ВыборкаДляШапки.Следующий() Тогда
			ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
			ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
			ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
			НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
			
			ОбластьМакетаПодвал.Параметры.ДатаДок = удуФормированиеПечатныхФорм.ПустаяДатаВПечатнойФорме();
	
		КонецЕсли;
		
		НомерФормы = 0;
		ПечататьПостфикс = ВыборкаРаботники.Количество() > 1;
		// Начинаем формировать выходной документ.
		Пока ВыборкаРаботники.Следующий() Цикл
			
			ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
			ВложеннаяВыборка.Следующий();
			
			// Каждый приказ на отдельной странице.
			Если ТабДокумент.ВысотаТаблицы > 0 Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			Если ПечататьПостфикс Тогда
				НомерФормы = НомерФормы + 1;
				ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + НомерФормы;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			
			// Данные по работнику.
			ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
			
			РезультатСклонения = "";
			Если удуОбщегоНазначенияСервер.Просклонять(ВложеннаяВыборка.Работник, 4, РезультатСклонения, ВложеннаяВыборка.ФизЛицоПол) Тогда
				ОбластьМакета.Параметры.Работник	= РезультатСклонения
			КонецЕсли;
			
			ПредставлениеДатыДоговора                       = Формат(ВложеннаяВыборка.ТрудовойДоговорДата, "ДЛФ=DD");
			ОбластьМакета.Параметры.ТрудовойДоговорЧисло    = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), СокрЛП(Лев(ПредставлениеДатыДоговора,2)), "      ");
			ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), СокрЛП(Прав(ПредставлениеДатыДоговора, СтрДлина(ПредставлениеДатыДоговора)-2)), "                     г.");
			
			// Уточним размер и валюту тарифной ставки
			ОкладВПечатнойФорме = ВложеннаяВыборка.ОкладТарифнаяСтавка;
			
			ОбластьМакета.Параметры.КопейкиТарифнойСтавки = "коп.";
			ОбластьМакета.Параметры.ВалютаТарифнойСтавки = "руб.";
			
				ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Цел(ОкладВПечатнойФорме);
				ДробнаяЧасть = ОкладВПечатнойФорме - Цел(ОкладВПечатнойФорме);
				ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
			
			ОбластьМакета.Параметры.НадбавкаЦелаяЧасть   = "";
			ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = "";
			ОбластьМакета.Параметры.ВалютаНадбавки = "руб.";
			ОбластьМакета.Параметры.КопейкиНадбавки = "коп.";
			
			Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
				
				Если ВложеннаяВыборка.СпособРасчета = Перечисления.удуСпособыРасчетаОплатыТруда.Процентом Тогда
					ОбластьМакета.Параметры.ВалютаНадбавки = "";
					ОбластьМакета.Параметры.КопейкиНадбавки = "";
					ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + "(%)"
				Иначе
					
					ОбластьМакета.Параметры.ВалютаНадбавки = ВложеннаяВыборка.ВалютаНадбавки;
					ОбластьМакета.Параметры.КопейкиНадбавки = ВложеннаяВыборка.КопейкиНадбавки;
					
					ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = Цел(ВложеннаяВыборка.РазмерНадбавки);
					ДробнаяЧасть = ВложеннаяВыборка.РазмерНадбавки - Цел(ВложеннаяВыборка.РазмерНадбавки);
					ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВложеннаяВыборка.ИспытательныйСрок = 0 Тогда
				ОбластьМакета.Параметры.ИспытательныйСрок = "Без испытательного срока";
				
			Иначе
				ОбластьМакета.Параметры.ИспытательныйСрок = ВложеннаяВыборка.ИспытательныйСрок;
				
			КонецЕсли;
			
			// Уберем из табельного номера префикс.
			ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Подвал документа.
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
			
		КонецЦикла;
		
		// если не было ни одного работника - выводим пустой бланк
		Если ТабДокумент.ВысотаТаблицы = 0 Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ОбластьМакета.Параметры.ТрудовойДоговорЧисло = "     ";
			ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = "                 г.";
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуАвансовогоОтчета()
  
// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТ1а") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПечатьТ1а",
		"Форма Т-1а",
		СформироватьПечатнуюФормуТ1а(МассивОбъектов, ОбъектыПечати,"Документ.удуПриемНаРаботуВОрганизацию.ПФ_MXL_Т1а_от_5_1_2004")
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьТ1") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПечатьТ1",
		"Форма Т-1",
		СформироватьПечатнуюФормуТ1(МассивОбъектов, ОбъектыПечати,"Документ.удуПриемНаРаботуВОрганизацию.ПФ_MXL_Т1_от_5_1_2004")
		);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

&НаСервере
// Заполняет табличную часть документа "Работники" 
// Списком по оформленным трудовым договорам
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиСотрудниками(Объект,ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НеУказанаДатаНачалаПериода", Не ЗначениеЗаполнено(ДатаНачалаПериода));
	Запрос.УстановитьПараметр("НеУказанаДатаОкончанияПериода", Не ЗначениеЗаполнено(ДатаОкончанияПериода));
	Запрос.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",			Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
	|	СотрудникиОрганизаций.Наименование КАК Наименование
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.удуВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	|			ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)
	|	И (&НеУказанаДатаНачалаПериода
	|			ИЛИ СотрудникиОрганизаций.ДатаНачала >= &ДатаНачалаПериода)
	|	И (&НеУказанаДатаОкончанияПериода
	|			ИЛИ СотрудникиОрганизаций.ДатаНачала <= &ДатаОкончанияПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ВременнаяТЗ = Запрос.Выполнить().Выгрузить();
	
	Объект.РаботникиОрганизации.Загрузить(ВременнаяТЗ);
	
	Объект.ОсновныеНачисления.Загрузить(удуДокументыКадровогоУчета.ПолучитьТаблицуДействийСНачислениями(ВременнаяТЗ, Объект.Ссылка, Объект.Дата, Объект.Организация, "ДатаПриема", , Истина, Ложь));
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПоТрудовымДоговорам()

&НаСервере
// Заполняет табличную часть документа "ОсновныеНачисления" по сотруднику
//
Процедура ДобавитьНачисленияПоСтроке(Объект,СтрокаТабличнойЧасти) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаТабличнойЧасти);
	
	ДействияСНачислениями = удуДокументыКадровогоУчета.ПолучитьТаблицуДействийСНачислениями(Объект.РаботникиОрганизации.Выгрузить(МассивСтрок), Объект.Ссылка, Объект.Дата, Объект.Организация, "ДатаПриема", , Истина, Ложь);
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета");
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивНачислений = Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект.ОсновныеНачисления.Добавить(), СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачисленияПоСтроке()
