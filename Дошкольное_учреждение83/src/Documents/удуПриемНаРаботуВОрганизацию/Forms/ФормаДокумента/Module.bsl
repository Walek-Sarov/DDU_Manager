&НаКлиенте
Перем АдресВХранилище;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


&НаКлиенте
Процедура ОбработатьПодбор() Экспорт
	
	КоличествоСтрокНачислений=Объект.ОсновныеНачисления.Количество();
	
	Сотрудник=ПолучитьИзХранилища(АдресВХранилище);
	Если ЗначениеЗаполнено(Сотрудник) тогда
		СтрокаТЧ=Объект.РаботникиОрганизации.Добавить();
		СтрокаТЧ.Сотрудник=Сотрудник;
		Модифицированность=Истина;
		ДоЗаполнитьСтроку(СтрокаТЧ);
		мТекущийСотрудник = СтрокаТЧ.Сотрудник;
		
		ВнестиДанныеПоСотруднику(СтрокаТЧ.ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
	Элементы.РаботникиОрганизации.ТекущаяСтрока=СтрокаТЧ.ПолучитьИдентификатор();	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПоместитьВХранилище(ЗначениеДляХранилища) 
	Возврат ПоместитьВоВременноеХранилище(ЗначениеДляХранилища, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПолучитьИзХранилища(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормыДокументаСервер()
	
	удуОбщегоНазначенияСервер.УстановитьЗаголовокФормыДокумента(, Объект, ЭтаФорма);
	
КонецПроцедуры


&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	удуОбщегоНазначенияСервер.ПроверитьНомерДокумента(Объект, мТекущаяДатаДокумента);
	
КонецПроцедуры

&НаКлиенте
// Заполняет "пустые" реквизиты ТЧ значениями по умолчанию
//
Процедура ДоЗаполнитьСтроку(ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
		ДанныеСтроки.ЗанимаемыхСтавок  = 1;
	КонецЕсли;
	
КонецПроцедуры // ДоЗаполнитьСтроку()

&НаСервере
Процедура ЗаполнитьСотрудникамиСервер(ДатаНачала,ДатаОкончания)
	
	Документы.удуПриемНаРаботуВОрганизацию.ЗаполнитьТабличнуюЧастьРаботникиСотрудниками(Объект,ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

&НаСервере
// удаляет начисления по работнику
// Параметры:
//   Сотрудник  - СправочникСсылка.удуСотрудникиОрганизации
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// Удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя.
	Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		Объект.ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

&НаСервере
Процедура ВнестиДанныеПоСотруднику(НомерСтроки,ИзменятьКадровыеДанные = Ложь)
	
	УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	
	ДанныеСтроки=Объект.РаботникиОрганизации.НайтиПоИдентификатору(НомерСтроки);
	Сотрудник = ДанныеСтроки.Сотрудник;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Должность КАК Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	|	СотрудникиОрганизаций.ИспытательныйСрок КАК ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ИзменятьКадровыеДанные Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
	КонецЕсли;
	
	Документы.удуПриемНаРаботуВОрганизацию.ДобавитьНачисленияПоСтроке(Объект,ДанныеСтроки);
	
КонецПроцедуры //ВнестиДанныеПоСотруднику

&НаКлиенте
Функция ПолучитьВидДоговора()
	
	Возврат ПредопределенноеЗначение("Перечисление.удуВидыДоговоровСФизЛицами.ТрудовойДоговор");
	
КонецФункции 

&НаСервере
Функция ПолучитьДанныеДляВыбораВидаРасчета(НастройкиОтбора=истина,Текст="")
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.удуВидыВремени.ОтработанноеВПределахНормы);
	СписокВидовВремени.Добавить(Перечисления.удуВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СписокНедопустимыхВР = Новый СписокЗначений;
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.удуОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	
	Если НастройкиОтбора Тогда 
		
		НастройкиКомпоновкиДанных=Новый НастройкиКомпоновкиДанных;
		
		удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "ВидВремени", СписокВидовВремени,
		ВидСравненияКомпоновкиДанных.ВСписке,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		удуУправлениеОтчетами.УстановитьОтбор(НастройкиКомпоновкиДанных, "Ссылка", СписокНедопустимыхВР,
		ВидСравненияКомпоновкиДанных.НеВСписке,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Возврат НастройкиКомпоновкиДанных;
		
	Иначе 
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	удуОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.удуОсновныеНачисленияОрганизаций КАК удуОсновныеНачисленияОрганизаций
		|ГДЕ
		|	удуОсновныеНачисленияОрганизаций.ВидВремени В(&СписокВидовВремени)
		|	И (НЕ удуОсновныеНачисленияОрганизаций.Ссылка В (&СписокНедопустимыхВР))
		|	И ВЫБОР
		|			КОГДА &Текст = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ удуОсновныеНачисленияОрганизаций.Наименование ПОДОБНО &Текст
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("СписокВидовВремени",СписокВидовВремени);			 
		Запрос.УстановитьПараметр("СписокНедопустимыхВР",СписокНедопустимыхВР);
		Запрос.УстановитьПараметр("Текст",Текст);
		СписокРасчетов=Новый СписокЗначений;
		СписокРасчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Возврат СписокРасчетов;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьФизЛицо(Сотрудник)
	
	Возврат Сотрудник.ФизЛицо;
	
КонецФункции

&НаСервере
Функция ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтрокиСервер(ЭлементПоиска)
	
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	Возврат удуПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(Объект, Элементы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник",ЭлементПоиска);
	
КонецФункции

&НаСервере
Функция РаботникиОрганизацииПриАктивизацииСтрокиСервер(ЭлементПоиска)
	
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	Возврат удуПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(Объект, Элементы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник",ЭлементПоиска);
	
КонецФункции

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
&НаКлиенте
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки=Элементы.ОсновныеНачисления.ТекущиеДанные;
	ТекущиеСтрокиСинхронизации=ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтрокиСервер(?(ДанныеСтроки=Неопределено,Неопределено,ДанныеСтроки.Сотрудник));
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	
	Для Каждого ЭлементСоответствия из ТекущиеСтрокиСинхронизации Цикл 
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
		Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = ЭлементСоответствия.Значение;
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
	КонецЦикла;
	
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) тогда
		ОбъектИзХранилища=ПолучитьИзХранилища(Параметры.АдресВХранилище);
		ЗначениеВДанныеФормы(ОбъектИзХранилища,Объект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		удуДокументыКадровогоУчета.ЗаполнитьШапкуДокумента(Объект);
	КонецЕсли;
	
	
	мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
	мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
	мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;
	мСинхронизируемыеТабличныеЧастиАдрес=ПоместитьВХранилище(мСинхронизируемыеТабличныеЧасти);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормыДокументаСервер();	
	мТекущаяДатаДокумента	= Объект.Дата;
	мТекущийСотрудник= ПредопределенноеЗначение("Справочник.удуСотрудникиОрганизаций.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокументаСервер();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура Подбор(Команда)
	
	
	АдресВХранилище = ПоместитьВХранилище(ПредопределенноеЗначение("Справочник.удуСотрудникиОрганизаций.ПустаяСсылка"));
	ПараметрыПодбора = Новый Структура("ЭтоПодбор,АдресПодбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора,НеРаботающие", Истина, АдресВХранилище,Объект.Дата,Истина,ПолучитьВидДоговора(),Истина);
	
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниками(Команда)
	
	Если Объект.РаботникиОрганизации.Количество()>0 Тогда
		ТекстВопроса = "Имеющийся список сотрудников будет очищен. Продолжить?";
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСтрокНачислений=Объект.ОсновныеНачисления.Количество();
	
	ДиалогРедактированияСтандартногоПериода=Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактированияСтандартногоПериода.Период.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод;
	ДиалогРедактированияСтандартногоПериода.Период.ДатаНачала= НачалоМесяца(Объект.Дата);
	ДиалогРедактированияСтандартногоПериода.Период.ДатаОкончания= КонецМесяца(Объект.Дата);
	Если ДиалогРедактированияСтандартногоПериода.Редактировать() тогда
		ЗаполнитьСотрудникамиСервер(ДиалогРедактированияСтандартногоПериода.Период.ДатаНачала,ДиалогРедактированияСтандартногоПериода.Период.ДатаОкончания);
	КонецЕсли;
	
	Элементы.РаботникиОрганизации.ТекущаяСтрока=?(Объект.РаботникиОрганизации.Количество()=0,Неопределено,Объект.РаботникиОрганизации[0].ПолучитьИдентификатор());
	РаботникиОрганизацииПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер="";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки=Элементы.РаботникиОрганизации.ТекущиеДанные;
	мТекущийСотрудник=?(ДанныеСтроки=Неопределено,ПредопределенноеЗначение("Справочник.удуСотрудникиОрганизаций.ПустаяСсылка"),ДанныеСтроки.Сотрудник);
	
	ТекущиеСтрокиСинхронизации=РаботникиОрганизацииПриАктивизацииСтрокиСервер(?(ДанныеСтроки=Неопределено,Неопределено,ДанныеСтроки.Сотрудник));
	мСинхронизируемыеТабличныеЧасти=ПолучитьИзХранилища(мСинхронизируемыеТабличныеЧастиАдрес);
	
	Для Каждого ЭлементСоответствия из ТекущиеСтрокиСинхронизации Цикл 
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
		Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = ЭлементСоответствия.Значение;
		мСинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		ПоместитьВоВременноеХранилище(мСинхронизируемыеТабличныеЧасти,мСинхронизируемыеТабличныеЧастиАдрес);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		НоваяСтрока = Объект.РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, "Сотрудник");
		ДоЗаполнитьСтроку(НоваяСтрока);
		Элементы.РаботникиОрганизации.ТекущаяСтрока = НоваяСтрока;
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	мТекущийСотрудник = Элемент.ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.удуСотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		мТекущийСотрудник = ВыбранноеЗначение;
		
		СтрокаТабличнойЧасти = Объект.РаботникиОрганизации.Добавить();
		Элементы.РаботникиОрганизации.ТекущаяСтрока = СтрокаТабличнойЧасти;
		
		СтрокаТабличнойЧасти.Сотрудник						= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Физлицо						= ВыбранноеЗначение.Физлицо;
		
		ВнестиДанныеПоСотруднику(СтрокаТабличнойЧасти.ПолучитьИдентификатор(),Истина);
		ДоЗаполнитьСтроку(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекущаяКолонка = Элемент.ТекущийЭлемент;
	Если ТекущаяКолонка.Имя = "РаботникиОрганизацииПодразделениеОрганизации" Или ТекущаяКолонка.Имя = "РаботникиОрганизацииДолжность" Тогда
		
		ЗначениеДляПередачи = ?(ТекущаяКолонка.Имя = "РаботникиОрганизацииПодразделениеОрганизации",Элемент.ТекущиеДанные.Должность,Элемент.ТекущиеДанные.ПодразделениеОрганизации);
		
		ДатаАктуальности = ?(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаПриема),Элемент.ТекущиеДанные.ДатаПриема, Объект.Дата);
		
		СписокПодразделений = удуПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(СтрЗаменить(ТекущаяКолонка.Имя,"РаботникиОрганизации",""), Объект.Организация, ЗначениеДляПередачи, ДатаАктуальности);
		КоличествоЗначений = СписокПодразделений.Количество();
		
		ТекущаяКолонка.СписокВыбора.ЗагрузитьЗначения(СписокПодразделений.ВыгрузитьЗначения());
		ТекущаяКолонка.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ТекущаяКолонка.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	СтрокаТЧ=Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	КоличествоСтрокНачислений=Объект.ОсновныеНачисления.Количество();
	
	ВнестиДанныеПоСотруднику(СтрокаТЧ.ПолучитьИдентификатор(),Истина);
	
	ДоЗаполнитьСтроку(СтрокаТЧ);
	
	мТекущийСотрудник = СтрокаТЧ.Сотрудник;
	
	РаботникиОрганизацииПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура("ДляВыбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора,НеРаботающие", Истина,Объект.Дата,Истина,ПолучитьВидДоговора(),Истина);
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
		
	Иначе // = -1 - уменьшаем значение
		Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПодразделениеОрганизацииПриИзменении(Элемент)
	
	СтрокаТЧ=Элементы.РаботникиОрганизации.ТекущиеДанные;
	ВнестиДанныеПоСотруднику(СтрокаТЧ.ПолучитьИдентификатор(),Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииДолжностьПриИзменении(Элемент)
	
	СтрокаТЧ=Элементы.РаботникиОрганизации.ТекущиеДанные;
	ВнестиДанныеПоСотруднику(СтрокаТЧ.ПолучитьИдентификатор(),Ложь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеНадбавки

&НаКлиенте
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	Элементы.ОсновныеНачисленияСотрудник.ОтображатьВПодвале=не Объект.ОсновныеНачисления.Количество()=0;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и не Копирование
		И Объект.РаботникиОрганизации.Количество() = 1
		И ЗначениеЗаполнено(Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник) Тогда
		Элементы.ОсновныеНачисления.ТекущиеДанные.Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		Элементы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = ПолучитьФизЛицо(Элементы.ОсновныеНачисления.ТекущиеДанные.Сотрудник);
	КонецЕсли;
		
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

&НаКлиенте
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки=Элементы.ОсновныеНачисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = ПолучитьФизЛицо(ДанныеСтроки.Сотрудник);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура("ДляВыбора,ДатаСреза,НеПоказыватьУволенных,ВидДоговора,НеРаботающие", Истина,Объект.Дата,Истина,ПолучитьВидДоговора(),Истина);
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.удуСотрудникиОрганизаций.Форма.ФормаСписка",ПараметрыПодбора ,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиОтбора=ПолучитьДанныеДляВыбораВидаРасчета();
	удуДокументыКадровогоУчетаКлиент.ОткрытьФормуВыбораОсновныеНачисленияОрганизаций(Элемент,НастройкиОтбора);
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора=ПолучитьДанныеДляВыбораВидаРасчета(Ложь,Текст+"%");
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора=ПолучитьДанныеДляВыбораВидаРасчета(Ложь,Текст+"%");
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ









