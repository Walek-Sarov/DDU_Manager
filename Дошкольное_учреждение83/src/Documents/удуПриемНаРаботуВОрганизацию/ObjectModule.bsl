
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемНаРаботуВОрганизацию.Дата,
	|	ПриемНаРаботуВОрганизацию.Организация,
	|	ПриемНаРаботуВОрганизацию.Ссылка,
	|	ПриемНаРаботуВОрганизацию.Организация.Наименование
	|ИЗ
	|	Документ.удуПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
	|	ТЧРаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ДатаПриема,
	|	ВидЗанятости,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТИспытуемыеСотрудники
	|ИЗ
	|	Справочник.удуСотрудникиОрганизаций КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Физлицо В
	|			(ВЫБРАТЬ
	|				Док.Физлицо
	|			ИЗ
	|				ВТДанныеДокумента КАК Док)
	|	И ТЧРаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.Физлицо КАК Физлицо,
	|	ДанныеПоРаботникуДоНазначения.Регистратор КАК КонфликтныйДокумент,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятостиПоДругомуМестуРаботы,
	|	0 КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеПоРаботникуДоНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Физлицо КАК Физлицо,
	|		СостояниеВнутри.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|	ИЗ
	|		РегистрСведений.удуРаботникиОрганизаций КАК СостояниеВнутри
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
	|			ПО СостояниеВнутри.Сотрудник.Физлицо = Док.Физлицо
	|				И СостояниеВнутри.Период <= Док.ДатаПриема
	|	ГДЕ
	|		СостояниеВнутри.Сотрудник В
	|				(ВЫБРАТЬ
	|					Спр.Ссылка
	|				ИЗ
	|					ВТИспытуемыеСотрудники КАК Спр)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Физлицо,
	|		СостояниеВнутри.Сотрудник) КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО СписокДат.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|			И (ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.Увольнение))
	|			И (ВЫБОР
	|				КОГДА ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ДанныеПоРаботникуДоНазначения.Регистратор ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Физлицо,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ВидЗанятости,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
	|ИЗ
	|	ВТДанныеДокумента КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ВидЗанятостиПоДругомуМестуРаботы,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.ВидЗанятости КАК ВидЗанятости,
	|	ВложенныйЗапрос.КонфликтныйДокумент КАК КонфликтныйДокумент,
	|	ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы КАК ВидЗанятостиПоДругомуМестуРаботы
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоРаботникуДоНазначения КАК ВложенныйЗапрос
	|		ПО ТЧРаботникиОрганизации.Физлицо = ВложенныйЗапрос.Физлицо
	|			И ТЧРаботникиОрганизации.НомерСтроки <> ВложенныйЗапрос.НомерСтроки
	|			И ТЧРаботникиОрганизации.ВидЗанятости <> ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы
	|ИТОГИ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПрежнимМестам()

Функция СформироватьЗапросПоРаботникиОрганизации(ПроверкаШтатногоРасписания)
	
	Запрос = Новый Запрос;
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(Перечисления.удуВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ВидыТрудовыхДоговоров",	МассивВидов);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	Организация);
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "ФизЛицо"
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// На каждую дату приема и увольнения ищем движения 
	// В регистре "РаботникиОрганизации" и "СостояниеРаботниковОрганизации"
	
	Если ПроверкаШтатногоРасписания Тогда
		
		// Определим самую раннюю и позднюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема) КАК ДатаНачала
		|ИЗ
		|	Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала, Дата);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала",	ДатаНачала);
		Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);
		
		ТаблицаСтрокШтатногоРасписания = РаботникиОрганизации.Выгрузить(,"НомерСтроки,ДатаПриема,ПодразделениеОрганизации,Должность");
		ТаблицаСтрокШтатногоРасписания.Колонки.ДатаПриема.Имя = "ДатаНачала";
		ДанныеОСтавках = удуПроцедурыУправленияПерсоналом.ВременноСвободныеСтавкиСтрокШтатногоРасписания(ТаблицаСтрокШтатногоРасписания, Организация);
		Запрос.УстановитьПараметр("ДанныеОСтавках", ДанныеОСтавках);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокиДокумента.ОсвобожденныеСтавки,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ОсвобожденныеСтавки
		|ИЗ
		|	&ДанныеОСтавках КАК СтрокиДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		//  Дополнительно используем выборки: 
		//  СвободноСтавокНаДатуПриема
		//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаПриема
		//		подсчитываем количество остающихся ставок (с учетом "предшествующих" данных текущего документа)
		//
		
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	ТЧРаботникиОрганизации.Ссылка,
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Организация,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидДоговора,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Организация КАК ПодразделениеОрганизацииВладелец,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ДатаПриема,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок
		|ПОМЕСТИТЬ ВТСтрокиДокумента
		|ИЗ
		|	Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ФизЛицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.СотрудникВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.СотрудникОрганизация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизацииВладелец <> &Организация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	СвободноСтавокНаДатуПриема.ОстатокСтавок,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора В (&ВидыТрудовыхДоговоров)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеВерныйДоговор,
		|	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.ПодразделениеОрганизации) КАК ПодразделениеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.Должность)
		|ИЗ
		|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ТЧРаботникиОрганизации2
		|				ПО ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобожденныеСтавкиОрганизаций.ОсвобожденныеСтавки, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Работники.Должность КАК Должность,
		|				Работники.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
		|			ИЗ
		|				ВТСтрокиДокумента КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ЕСТЬNULL(ШтатноеРасписание.Период, &ДатаНачала) КАК Период,
		|						Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|						Работники.Должность КАК Должность
		|					ИЗ
		|						ВТСтрокиДокумента КАК Работники
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|							ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|								И Работники.Должность = ШтатноеРасписание.Должность) КАК ШтатноеРасписание
		|					ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|						И Работники.Должность = ШтатноеРасписание.Должность
		|						И Работники.ДатаПриема >= ШтатноеРасписание.Период
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ПодразделениеОрганизации,
		|				Работники.НомерСтроки,
		|				Работники.Должность) КАК МаксимальныеПериодыШР
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|				ПО МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
		|					И МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|					И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					СУММА(ВЫБОР
		|							КОГДА Вакансии.ВидДвижения = &Приход
		|								ТОГДА Вакансии.КоличествоСтавок
		|							ИНАЧЕ -Вакансии.КоличествоСтавок
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					ВТСтрокиДокумента КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.удуЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
		|						ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
		|							И Работники.Должность = Вакансии.Должность
		|							И Работники.ДатаПриема >= Вакансии.Период
		|							И (Вакансии.Регистратор <> &ДокументСсылка)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Работники.ПодразделениеОрганизации,
		|					Работники.Должность,
		|					Работники.НомерСтроки) КАК Вакансии
		|				ПО МаксимальныеПериодыШР.НомерСтроки = Вакансии.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <= СтрокиДокумента.ДатаПриема
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ - ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения < СтрокиДокумента.ДатаПриема
		|									И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					ВТСтрокиДокумента КАК СтрокиДокумента
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|						ПО СтрокиДокумента.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
		|							И СтрокиДокумента.НомерСтроки <> ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
		|							И СтрокиДокумента.ПодразделениеОрганизации = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации
		|							И СтрокиДокумента.Должность = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СтрокиДокумента.НомерСтроки) КАК РанееЗанятоСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = РанееЗанятоСтавок.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ ОсвобожденныеСтавки КАК ОсвобожденныеСтавкиОрганизаций
		|				ПО МаксимальныеПериодыШР.НомерСтроки = ОсвобожденныеСтавкиОрганизаций.НомерСтроки) КАК СвободноСтавокНаДатуПриема
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = СвободноСтавокНаДатуПриема.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.ПриемНаРаботу))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	Иначе	
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора В (&ВидыТрудовыхДоговоров)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеВерныйДоговор,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации
		|ИЗ
		|	Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.удуРаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.удуПричиныИзмененияСостояния.ПриемНаРаботу))
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	КонецЕсли;	
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  ПроверкаШтатногоРасписания
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачислениям(ПроверкаШтатногоРасписания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета,
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|ПОМЕСТИТЬ ВТДанныеНачислений
	|ИЗ
	|	Документ.удуПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ДатаУвольнения
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.удуПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаПриема КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.Начать) КАК Действие,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения,
	|	ЗНАЧЕНИЕ(Перечисление.удуВидыДействияСНачислением.ПустаяСсылка) КАК ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчетаЗачетОтработанногоВремени
	|			ТОГДА """"
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ТЧНачисления.ВидРасчетаСпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчетаЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.Показатель1 КАК Показатель1
	|ИЗ
	|	ВТДанныеНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ПО ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат удуДокументыКадровогоУчета.СформироватьЗапросПоПлановымНачислениям(Запрос.Выполнить().Выгрузить(), ПроверкаШтатногоРасписания);
	
КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок,ПроверкаШтатногоРасписания)
	
	СтрокаНачалаСообщенияОбОшибке =Заголовок+Символы.ВК+ "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Принимаем только по трудовому договору
	Если ВыборкаПоСтрокамДокумента.НеВерныйДоговор Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "у сотрудника указан вид договора отличный от 'Трудового договора'!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "Указанный сотрудник оформлен на другую организацию!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, в которое принимается сотрудник!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указана должность сотрудника!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// ДатаПриема
	ЕстьДатаПриема = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
	Если НЕ ЕстьДатаПриема Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указана дата приема на работу!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Количество ставок
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых сотрудником ставок!";
		СообщениеПользователю.Сообщить();
	ИначеЕсли ЕстьДатаПриема И ПроверкаШтатногоРасписания Тогда
		Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не предусмотрены ставки для приема сотрудника! Подразделение: " + 
			ВыборкаПоСтрокамДокумента.ПодразделениеПредставление + ", должность: " + ВыборкаПоСтрокамДокумента.ДолжностьПредставление;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	// ГрафикРаботы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	
	Если НетСотрудника ИЛИ (НЕ ЕстьДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	// ДатаУвольнения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) и ВыборкаПоСтрокамДокумента.ДатаПриема > ВыборкаПоСтрокамДокумента.ДатаУвольнения Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "дата приема не может превышать дату окончания работы!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Сотрудник указан дважды
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		Отказ=Истина;
		СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// Сотрудник раньше работал в организации
	Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации Тогда
		Отказ=Истина;
		СтрокаСообщениеОбОшибке = "Сотрудник уже работал в организации, для повторного приема на работу необходимо создать нового сотрудника!"; 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
		
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "не указано начисление!";
		СообщениеПользователю.Сообщить();
	Иначе
		
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания и Не ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР Тогда
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		// Двойные строки
		Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено основное начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			Иначе
				СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			КонецЕсли;
			Отказ=Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
			
	КонецЕсли;
	
	СписокОшибок=удуДокументыКадровогоУчета.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ);
	
	Если не СписокОшибок.Количество()=0 Тогда 
		Отказ=Истина;
		Для Каждого Ошибка из СписокОшибок Цикл 
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=Ошибка;
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.Период = NULL Тогда
		Отказ=Истина;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + "данный сотрудник не введен в приказ - по нему не могут быть введены начисления!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет возможность оформления работника на работу 
// Согласно указанному в шапке документа реквизиту "ВидЗанятости"
//
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)
	
	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл
		
		СтрокаНачалаСообщенияОбОшибке =Заголовок+Символы.ВК+ " В строке номер """+ СокрЛП(ВыборкаСтрокЗапроса.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";
		
		// Проверка сочетаний видов занятости работника в одной организации
		Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
			
			// Для основного места работы недопустимо наличие внешнего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.удуВидыЗанятостиВОрганизации.Совместительство  Тогда
				Отказ=истина;
				СтрокаСообщениеОбОшибке = "нельзя принять сотрудника на основное место работы до тех пор,
				|	пока он оформлен внешним совместителем!
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.Совместительство  Тогда
			
			// Для внешнего совместительства недопустимо основное место работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				Отказ=Истина;
				СтрокаСообщениеОбОшибке = "нельзя оформить сотрудника на внешнее совместительство, 
				|	так как он уже оформлен в организацию по основному месту работы! 
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда
			
			// При оформлении на внутреннее совместительство должно быть основное место работы или внешнее совместительство.
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы И ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.удуВидыЗанятостиВОрганизации.Совместительство Тогда
				Отказ=Истина;
				СтрокаСообщениеОбОшибке = "нельзя оформить сотрудника на внутреннее совместительство, 
				|	так как он не оформлен в организацию или по основному месту работы или по внешнему совместительству!"; 
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст=СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьВидыЗанятостиРаботникаВОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приема
		
		// ЗанятыеШтатныеЕдиницыОрганизаций";
		Движение = Движения.удуЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность;
		
		// Ресурсы
		Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		
		// Реквизиты
		Движение.Сотрудник						= ВыборкаПоРаботникиОрганизации.Сотрудник;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приёма
		
		// Движения по регистру "РаботникиОрганизации"
		Движение = Движения.удуРаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		
		// Ресурсы
		Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
		Движение.ПричинаИзмененияСостояния	= Перечисления.удуПричиныИзмененияСостояния.ПриемНаРаботу;
		
		// Реквизиты
		Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
						
		Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			Движение = Движения.удуПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Добавить();
			
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;

			
		ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.удуВидыЗанятостиВОрганизации.Совместительство Тогда
			Движение = Движения.удуПериодыРаботыРаботниковОрганизацийПоСовместительству.Добавить();
			
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			
		КонецЕсли;
		
		Если ВыборкаПоРаботникиОрганизации.ВидЗанятости <> Перечисления.удуВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			Движение = Движения.удуСостояниеРаботниковНаИспытательномСроке.Добавить();
			// Свойства
			Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоРаботникиОрганизации.ФизЛицо;
			// Ресурсы
			Если ВыборкаПоРаботникиОрганизации.ИспытательныйСрок > 0 Тогда
				Движение.Состояние		= Перечисления.удуСостоянияРаботникаНаИспытательномСроке.ПринятНаИспытательныйСрок;
			Иначе
				Движение.Состояние		= Перечисления.удуСостоянияРаботникаНаИспытательномСроке.ПринятНаРаботу;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	// Движения по регистру "ПлановыеНачисленияРаботниковОрганизаций"
	удуДокументыКадровогоУчета.СформироватьДвижениеПоПлановымНачислениям(Движения.удуПлановыеНачисленияРаботниковОрганизаций.Добавить(), ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаПроведения(Отказ, Режим)
	
	Заголовок = удуОбщегоНазначенияСервер.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаШтатногоРасписания=Константы.удуПроверкаШтатногоРасписания.Получить();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(Режим).Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			Отказ=Истина;	
			ТекстСообщения ="Не указана организация, в которую принимается сотрудник!"; 	
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст=ТекстСообщения;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			ВыборкаСтрокЗапроса = СформироватьЗапросПоРаботникиОрганизации(ПроверкаШтатногоРасписания).Выбрать();
			
			// для проверки числа ставок
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок,ПроверкаШтатногоРасписания);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли;
				
			КонецЦикла;
			
			// проверим виды занятости работника в организации
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента.Выбрать(), Отказ, Заголовок);
			КонецЦикла;
			
			
			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачислениям(ПроверкаШтатногоРасписания).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	удуОбщегоНазначенияСервер.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	КраткийСоставДокумента = удуДокументыКадровогоУчета.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.удуКадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ТипЗнч(ДанныеЗаполнения)=Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников",	ДанныеЗаполнения);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	СотрудникиОрганизаций.Организация КАК Организация,
	              |	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	              |	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	              |	СотрудникиОрганизаций.Должность КАК Должность,
	              |	СотрудникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	              |	СотрудникиОрганизаций.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	              |	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	              |	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	              |	СотрудникиОрганизаций.ИспытательныйСрок КАК ИспытательныйСрок,
	              |	СотрудникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
	              |	СотрудникиОрганизаций.ВидДоговора
	              |ИЗ
	              |	Справочник.удуСотрудникиОрганизаций КАК СотрудникиОрганизаций
	              |ГДЕ
	              |	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	СотрудникиОрганизаций.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация");
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДоговора = Перечисления.удуВидыДоговоровСФизЛицами.Подряда Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСтроки=ЭтотОбъект.РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
	КонецЦикла;
	
	ДействияСНачислениями = удуДокументыКадровогоУчета.ПолучитьТаблицуДействийСНачислениями(ЭтотОбъект.РаботникиОрганизации.Выгрузить(), ЭтотОбъект.Ссылка, ЭтотОбъект.Дата, ЭтотОбъект.Организация, "ДатаПриема", , Истина, Ложь);

	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект.ОсновныеНачисления.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры
